
Medogonka_L152.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019acc  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004d54  08019c10  08019c10  00029c10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e964  0801e964  00030318  2**0
                  CONTENTS
  4 .ARM          00000008  0801e964  0801e964  0002e964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e96c  0801e96c  00030318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e96c  0801e96c  0002e96c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801e970  0801e970  0002e970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000318  20000000  0801e974  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009b18  20000318  0801ec8c  00030318  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20009e30  0801ec8c  00039e30  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030318  2**0
                  CONTENTS, READONLY
 12 .debug_info   00079783  00000000  00000000  00030341  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000a6ed  00000000  00000000  000a9ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002b40  00000000  00000000  000b41b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000026a0  00000000  00000000  000b6cf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002e67f  00000000  00000000  000b9398  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0004204a  00000000  00000000  000e7a17  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b73cb  00000000  00000000  00129a61  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e0e2c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c0c4  00000000  00000000  001e0ea8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000318 	.word	0x20000318
 800015c:	00000000 	.word	0x00000000
 8000160:	08019bf4 	.word	0x08019bf4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000031c 	.word	0x2000031c
 800017c:	08019bf4 	.word	0x08019bf4

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr

080001a4 <__aeabi_drsub>:
 80001a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001a8:	e002      	b.n	80001b0 <__adddf3>
 80001aa:	bf00      	nop

080001ac <__aeabi_dsub>:
 80001ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001b0 <__adddf3>:
 80001b0:	b530      	push	{r4, r5, lr}
 80001b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ba:	ea94 0f05 	teq	r4, r5
 80001be:	bf08      	it	eq
 80001c0:	ea90 0f02 	teqeq	r0, r2
 80001c4:	bf1f      	itttt	ne
 80001c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001d6:	f000 80e2 	beq.w	800039e <__adddf3+0x1ee>
 80001da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001e2:	bfb8      	it	lt
 80001e4:	426d      	neglt	r5, r5
 80001e6:	dd0c      	ble.n	8000202 <__adddf3+0x52>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea80 0202 	eor.w	r2, r0, r2
 80001ee:	ea81 0303 	eor.w	r3, r1, r3
 80001f2:	ea82 0000 	eor.w	r0, r2, r0
 80001f6:	ea83 0101 	eor.w	r1, r3, r1
 80001fa:	ea80 0202 	eor.w	r2, r0, r2
 80001fe:	ea81 0303 	eor.w	r3, r1, r3
 8000202:	2d36      	cmp	r5, #54	; 0x36
 8000204:	bf88      	it	hi
 8000206:	bd30      	pophi	{r4, r5, pc}
 8000208:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800020c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000210:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000214:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x70>
 800021a:	4240      	negs	r0, r0
 800021c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000220:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000224:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000228:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800022c:	d002      	beq.n	8000234 <__adddf3+0x84>
 800022e:	4252      	negs	r2, r2
 8000230:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000234:	ea94 0f05 	teq	r4, r5
 8000238:	f000 80a7 	beq.w	800038a <__adddf3+0x1da>
 800023c:	f1a4 0401 	sub.w	r4, r4, #1
 8000240:	f1d5 0e20 	rsbs	lr, r5, #32
 8000244:	db0d      	blt.n	8000262 <__adddf3+0xb2>
 8000246:	fa02 fc0e 	lsl.w	ip, r2, lr
 800024a:	fa22 f205 	lsr.w	r2, r2, r5
 800024e:	1880      	adds	r0, r0, r2
 8000250:	f141 0100 	adc.w	r1, r1, #0
 8000254:	fa03 f20e 	lsl.w	r2, r3, lr
 8000258:	1880      	adds	r0, r0, r2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	4159      	adcs	r1, r3
 8000260:	e00e      	b.n	8000280 <__adddf3+0xd0>
 8000262:	f1a5 0520 	sub.w	r5, r5, #32
 8000266:	f10e 0e20 	add.w	lr, lr, #32
 800026a:	2a01      	cmp	r2, #1
 800026c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000270:	bf28      	it	cs
 8000272:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000276:	fa43 f305 	asr.w	r3, r3, r5
 800027a:	18c0      	adds	r0, r0, r3
 800027c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000280:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000284:	d507      	bpl.n	8000296 <__adddf3+0xe6>
 8000286:	f04f 0e00 	mov.w	lr, #0
 800028a:	f1dc 0c00 	rsbs	ip, ip, #0
 800028e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000292:	eb6e 0101 	sbc.w	r1, lr, r1
 8000296:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800029a:	d31b      	bcc.n	80002d4 <__adddf3+0x124>
 800029c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002a0:	d30c      	bcc.n	80002bc <__adddf3+0x10c>
 80002a2:	0849      	lsrs	r1, r1, #1
 80002a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002ac:	f104 0401 	add.w	r4, r4, #1
 80002b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002b8:	f080 809a 	bcs.w	80003f0 <__adddf3+0x240>
 80002bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002c0:	bf08      	it	eq
 80002c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002c6:	f150 0000 	adcs.w	r0, r0, #0
 80002ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ce:	ea41 0105 	orr.w	r1, r1, r5
 80002d2:	bd30      	pop	{r4, r5, pc}
 80002d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002d8:	4140      	adcs	r0, r0
 80002da:	eb41 0101 	adc.w	r1, r1, r1
 80002de:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002e2:	f1a4 0401 	sub.w	r4, r4, #1
 80002e6:	d1e9      	bne.n	80002bc <__adddf3+0x10c>
 80002e8:	f091 0f00 	teq	r1, #0
 80002ec:	bf04      	itt	eq
 80002ee:	4601      	moveq	r1, r0
 80002f0:	2000      	moveq	r0, #0
 80002f2:	fab1 f381 	clz	r3, r1
 80002f6:	bf08      	it	eq
 80002f8:	3320      	addeq	r3, #32
 80002fa:	f1a3 030b 	sub.w	r3, r3, #11
 80002fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000302:	da0c      	bge.n	800031e <__adddf3+0x16e>
 8000304:	320c      	adds	r2, #12
 8000306:	dd08      	ble.n	800031a <__adddf3+0x16a>
 8000308:	f102 0c14 	add.w	ip, r2, #20
 800030c:	f1c2 020c 	rsb	r2, r2, #12
 8000310:	fa01 f00c 	lsl.w	r0, r1, ip
 8000314:	fa21 f102 	lsr.w	r1, r1, r2
 8000318:	e00c      	b.n	8000334 <__adddf3+0x184>
 800031a:	f102 0214 	add.w	r2, r2, #20
 800031e:	bfd8      	it	le
 8000320:	f1c2 0c20 	rsble	ip, r2, #32
 8000324:	fa01 f102 	lsl.w	r1, r1, r2
 8000328:	fa20 fc0c 	lsr.w	ip, r0, ip
 800032c:	bfdc      	itt	le
 800032e:	ea41 010c 	orrle.w	r1, r1, ip
 8000332:	4090      	lslle	r0, r2
 8000334:	1ae4      	subs	r4, r4, r3
 8000336:	bfa2      	ittt	ge
 8000338:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800033c:	4329      	orrge	r1, r5
 800033e:	bd30      	popge	{r4, r5, pc}
 8000340:	ea6f 0404 	mvn.w	r4, r4
 8000344:	3c1f      	subs	r4, #31
 8000346:	da1c      	bge.n	8000382 <__adddf3+0x1d2>
 8000348:	340c      	adds	r4, #12
 800034a:	dc0e      	bgt.n	800036a <__adddf3+0x1ba>
 800034c:	f104 0414 	add.w	r4, r4, #20
 8000350:	f1c4 0220 	rsb	r2, r4, #32
 8000354:	fa20 f004 	lsr.w	r0, r0, r4
 8000358:	fa01 f302 	lsl.w	r3, r1, r2
 800035c:	ea40 0003 	orr.w	r0, r0, r3
 8000360:	fa21 f304 	lsr.w	r3, r1, r4
 8000364:	ea45 0103 	orr.w	r1, r5, r3
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	f1c4 040c 	rsb	r4, r4, #12
 800036e:	f1c4 0220 	rsb	r2, r4, #32
 8000372:	fa20 f002 	lsr.w	r0, r0, r2
 8000376:	fa01 f304 	lsl.w	r3, r1, r4
 800037a:	ea40 0003 	orr.w	r0, r0, r3
 800037e:	4629      	mov	r1, r5
 8000380:	bd30      	pop	{r4, r5, pc}
 8000382:	fa21 f004 	lsr.w	r0, r1, r4
 8000386:	4629      	mov	r1, r5
 8000388:	bd30      	pop	{r4, r5, pc}
 800038a:	f094 0f00 	teq	r4, #0
 800038e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000392:	bf06      	itte	eq
 8000394:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000398:	3401      	addeq	r4, #1
 800039a:	3d01      	subne	r5, #1
 800039c:	e74e      	b.n	800023c <__adddf3+0x8c>
 800039e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003a2:	bf18      	it	ne
 80003a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003a8:	d029      	beq.n	80003fe <__adddf3+0x24e>
 80003aa:	ea94 0f05 	teq	r4, r5
 80003ae:	bf08      	it	eq
 80003b0:	ea90 0f02 	teqeq	r0, r2
 80003b4:	d005      	beq.n	80003c2 <__adddf3+0x212>
 80003b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ba:	bf04      	itt	eq
 80003bc:	4619      	moveq	r1, r3
 80003be:	4610      	moveq	r0, r2
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	ea91 0f03 	teq	r1, r3
 80003c6:	bf1e      	ittt	ne
 80003c8:	2100      	movne	r1, #0
 80003ca:	2000      	movne	r0, #0
 80003cc:	bd30      	popne	{r4, r5, pc}
 80003ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003d2:	d105      	bne.n	80003e0 <__adddf3+0x230>
 80003d4:	0040      	lsls	r0, r0, #1
 80003d6:	4149      	adcs	r1, r1
 80003d8:	bf28      	it	cs
 80003da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003e4:	bf3c      	itt	cc
 80003e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ea:	bd30      	popcc	{r4, r5, pc}
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003f8:	f04f 0000 	mov.w	r0, #0
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000402:	bf1a      	itte	ne
 8000404:	4619      	movne	r1, r3
 8000406:	4610      	movne	r0, r2
 8000408:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800040c:	bf1c      	itt	ne
 800040e:	460b      	movne	r3, r1
 8000410:	4602      	movne	r2, r0
 8000412:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000416:	bf06      	itte	eq
 8000418:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800041c:	ea91 0f03 	teqeq	r1, r3
 8000420:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	bf00      	nop

08000428 <__aeabi_ui2d>:
 8000428:	f090 0f00 	teq	r0, #0
 800042c:	bf04      	itt	eq
 800042e:	2100      	moveq	r1, #0
 8000430:	4770      	bxeq	lr
 8000432:	b530      	push	{r4, r5, lr}
 8000434:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000438:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800043c:	f04f 0500 	mov.w	r5, #0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e750      	b.n	80002e8 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_i2d>:
 8000448:	f090 0f00 	teq	r0, #0
 800044c:	bf04      	itt	eq
 800044e:	2100      	moveq	r1, #0
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000458:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800045c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000460:	bf48      	it	mi
 8000462:	4240      	negmi	r0, r0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e73e      	b.n	80002e8 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_f2d>:
 800046c:	0042      	lsls	r2, r0, #1
 800046e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000472:	ea4f 0131 	mov.w	r1, r1, rrx
 8000476:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800047a:	bf1f      	itttt	ne
 800047c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000480:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000484:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000488:	4770      	bxne	lr
 800048a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800048e:	bf08      	it	eq
 8000490:	4770      	bxeq	lr
 8000492:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000496:	bf04      	itt	eq
 8000498:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	e71c      	b.n	80002e8 <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_ul2d>:
 80004b0:	ea50 0201 	orrs.w	r2, r0, r1
 80004b4:	bf08      	it	eq
 80004b6:	4770      	bxeq	lr
 80004b8:	b530      	push	{r4, r5, lr}
 80004ba:	f04f 0500 	mov.w	r5, #0
 80004be:	e00a      	b.n	80004d6 <__aeabi_l2d+0x16>

080004c0 <__aeabi_l2d>:
 80004c0:	ea50 0201 	orrs.w	r2, r0, r1
 80004c4:	bf08      	it	eq
 80004c6:	4770      	bxeq	lr
 80004c8:	b530      	push	{r4, r5, lr}
 80004ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ce:	d502      	bpl.n	80004d6 <__aeabi_l2d+0x16>
 80004d0:	4240      	negs	r0, r0
 80004d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004e2:	f43f aed8 	beq.w	8000296 <__adddf3+0xe6>
 80004e6:	f04f 0203 	mov.w	r2, #3
 80004ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ee:	bf18      	it	ne
 80004f0:	3203      	addne	r2, #3
 80004f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004f6:	bf18      	it	ne
 80004f8:	3203      	addne	r2, #3
 80004fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004fe:	f1c2 0320 	rsb	r3, r2, #32
 8000502:	fa00 fc03 	lsl.w	ip, r0, r3
 8000506:	fa20 f002 	lsr.w	r0, r0, r2
 800050a:	fa01 fe03 	lsl.w	lr, r1, r3
 800050e:	ea40 000e 	orr.w	r0, r0, lr
 8000512:	fa21 f102 	lsr.w	r1, r1, r2
 8000516:	4414      	add	r4, r2
 8000518:	e6bd      	b.n	8000296 <__adddf3+0xe6>
 800051a:	bf00      	nop

0800051c <__aeabi_dmul>:
 800051c:	b570      	push	{r4, r5, r6, lr}
 800051e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000522:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000526:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800052a:	bf1d      	ittte	ne
 800052c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000530:	ea94 0f0c 	teqne	r4, ip
 8000534:	ea95 0f0c 	teqne	r5, ip
 8000538:	f000 f8de 	bleq	80006f8 <__aeabi_dmul+0x1dc>
 800053c:	442c      	add	r4, r5
 800053e:	ea81 0603 	eor.w	r6, r1, r3
 8000542:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000546:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800054a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800054e:	bf18      	it	ne
 8000550:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000554:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000558:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800055c:	d038      	beq.n	80005d0 <__aeabi_dmul+0xb4>
 800055e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000562:	f04f 0500 	mov.w	r5, #0
 8000566:	fbe1 e502 	umlal	lr, r5, r1, r2
 800056a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800056e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000572:	f04f 0600 	mov.w	r6, #0
 8000576:	fbe1 5603 	umlal	r5, r6, r1, r3
 800057a:	f09c 0f00 	teq	ip, #0
 800057e:	bf18      	it	ne
 8000580:	f04e 0e01 	orrne.w	lr, lr, #1
 8000584:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000588:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800058c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000590:	d204      	bcs.n	800059c <__aeabi_dmul+0x80>
 8000592:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000596:	416d      	adcs	r5, r5
 8000598:	eb46 0606 	adc.w	r6, r6, r6
 800059c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005a0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005a4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005a8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005ac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005b0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005b4:	bf88      	it	hi
 80005b6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ba:	d81e      	bhi.n	80005fa <__aeabi_dmul+0xde>
 80005bc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005c0:	bf08      	it	eq
 80005c2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005c6:	f150 0000 	adcs.w	r0, r0, #0
 80005ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ce:	bd70      	pop	{r4, r5, r6, pc}
 80005d0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005d4:	ea46 0101 	orr.w	r1, r6, r1
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	ea81 0103 	eor.w	r1, r1, r3
 80005e0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005e4:	bfc2      	ittt	gt
 80005e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ee:	bd70      	popgt	{r4, r5, r6, pc}
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f4:	f04f 0e00 	mov.w	lr, #0
 80005f8:	3c01      	subs	r4, #1
 80005fa:	f300 80ab 	bgt.w	8000754 <__aeabi_dmul+0x238>
 80005fe:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000602:	bfde      	ittt	le
 8000604:	2000      	movle	r0, #0
 8000606:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800060a:	bd70      	pople	{r4, r5, r6, pc}
 800060c:	f1c4 0400 	rsb	r4, r4, #0
 8000610:	3c20      	subs	r4, #32
 8000612:	da35      	bge.n	8000680 <__aeabi_dmul+0x164>
 8000614:	340c      	adds	r4, #12
 8000616:	dc1b      	bgt.n	8000650 <__aeabi_dmul+0x134>
 8000618:	f104 0414 	add.w	r4, r4, #20
 800061c:	f1c4 0520 	rsb	r5, r4, #32
 8000620:	fa00 f305 	lsl.w	r3, r0, r5
 8000624:	fa20 f004 	lsr.w	r0, r0, r4
 8000628:	fa01 f205 	lsl.w	r2, r1, r5
 800062c:	ea40 0002 	orr.w	r0, r0, r2
 8000630:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000634:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	fa21 f604 	lsr.w	r6, r1, r4
 8000640:	eb42 0106 	adc.w	r1, r2, r6
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 040c 	rsb	r4, r4, #12
 8000654:	f1c4 0520 	rsb	r5, r4, #32
 8000658:	fa00 f304 	lsl.w	r3, r0, r4
 800065c:	fa20 f005 	lsr.w	r0, r0, r5
 8000660:	fa01 f204 	lsl.w	r2, r1, r4
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	f141 0100 	adc.w	r1, r1, #0
 8000674:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000678:	bf08      	it	eq
 800067a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f205 	lsl.w	r2, r0, r5
 8000688:	ea4e 0e02 	orr.w	lr, lr, r2
 800068c:	fa20 f304 	lsr.w	r3, r0, r4
 8000690:	fa01 f205 	lsl.w	r2, r1, r5
 8000694:	ea43 0302 	orr.w	r3, r3, r2
 8000698:	fa21 f004 	lsr.w	r0, r1, r4
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	fa21 f204 	lsr.w	r2, r1, r4
 80006a4:	ea20 0002 	bic.w	r0, r0, r2
 80006a8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b0:	bf08      	it	eq
 80006b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b6:	bd70      	pop	{r4, r5, r6, pc}
 80006b8:	f094 0f00 	teq	r4, #0
 80006bc:	d10f      	bne.n	80006de <__aeabi_dmul+0x1c2>
 80006be:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006c2:	0040      	lsls	r0, r0, #1
 80006c4:	eb41 0101 	adc.w	r1, r1, r1
 80006c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006cc:	bf08      	it	eq
 80006ce:	3c01      	subeq	r4, #1
 80006d0:	d0f7      	beq.n	80006c2 <__aeabi_dmul+0x1a6>
 80006d2:	ea41 0106 	orr.w	r1, r1, r6
 80006d6:	f095 0f00 	teq	r5, #0
 80006da:	bf18      	it	ne
 80006dc:	4770      	bxne	lr
 80006de:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006e2:	0052      	lsls	r2, r2, #1
 80006e4:	eb43 0303 	adc.w	r3, r3, r3
 80006e8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006ec:	bf08      	it	eq
 80006ee:	3d01      	subeq	r5, #1
 80006f0:	d0f7      	beq.n	80006e2 <__aeabi_dmul+0x1c6>
 80006f2:	ea43 0306 	orr.w	r3, r3, r6
 80006f6:	4770      	bx	lr
 80006f8:	ea94 0f0c 	teq	r4, ip
 80006fc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000700:	bf18      	it	ne
 8000702:	ea95 0f0c 	teqne	r5, ip
 8000706:	d00c      	beq.n	8000722 <__aeabi_dmul+0x206>
 8000708:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070c:	bf18      	it	ne
 800070e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000712:	d1d1      	bne.n	80006b8 <__aeabi_dmul+0x19c>
 8000714:	ea81 0103 	eor.w	r1, r1, r3
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000726:	bf06      	itte	eq
 8000728:	4610      	moveq	r0, r2
 800072a:	4619      	moveq	r1, r3
 800072c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000730:	d019      	beq.n	8000766 <__aeabi_dmul+0x24a>
 8000732:	ea94 0f0c 	teq	r4, ip
 8000736:	d102      	bne.n	800073e <__aeabi_dmul+0x222>
 8000738:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800073c:	d113      	bne.n	8000766 <__aeabi_dmul+0x24a>
 800073e:	ea95 0f0c 	teq	r5, ip
 8000742:	d105      	bne.n	8000750 <__aeabi_dmul+0x234>
 8000744:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000748:	bf1c      	itt	ne
 800074a:	4610      	movne	r0, r2
 800074c:	4619      	movne	r1, r3
 800074e:	d10a      	bne.n	8000766 <__aeabi_dmul+0x24a>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800075c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800076a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800076e:	bd70      	pop	{r4, r5, r6, pc}

08000770 <__aeabi_ddiv>:
 8000770:	b570      	push	{r4, r5, r6, lr}
 8000772:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000776:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800077a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800077e:	bf1d      	ittte	ne
 8000780:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000784:	ea94 0f0c 	teqne	r4, ip
 8000788:	ea95 0f0c 	teqne	r5, ip
 800078c:	f000 f8a7 	bleq	80008de <__aeabi_ddiv+0x16e>
 8000790:	eba4 0405 	sub.w	r4, r4, r5
 8000794:	ea81 0e03 	eor.w	lr, r1, r3
 8000798:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800079c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007a0:	f000 8088 	beq.w	80008b4 <__aeabi_ddiv+0x144>
 80007a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007a8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007ac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007b4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007b8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007bc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007c0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007c4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007c8:	429d      	cmp	r5, r3
 80007ca:	bf08      	it	eq
 80007cc:	4296      	cmpeq	r6, r2
 80007ce:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007d2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007d6:	d202      	bcs.n	80007de <__aeabi_ddiv+0x6e>
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	1ab6      	subs	r6, r6, r2
 80007e0:	eb65 0503 	sbc.w	r5, r5, r3
 80007e4:	085b      	lsrs	r3, r3, #1
 80007e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ee:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 000c 	orrcs.w	r0, r0, ip
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	ebb6 0e02 	subs.w	lr, r6, r2
 8000826:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082a:	bf22      	ittt	cs
 800082c:	1ab6      	subcs	r6, r6, r2
 800082e:	4675      	movcs	r5, lr
 8000830:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800084c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000850:	d018      	beq.n	8000884 <__aeabi_ddiv+0x114>
 8000852:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000856:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800085a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800085e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000862:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000866:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800086a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800086e:	d1c0      	bne.n	80007f2 <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	d10b      	bne.n	800088e <__aeabi_ddiv+0x11e>
 8000876:	ea41 0100 	orr.w	r1, r1, r0
 800087a:	f04f 0000 	mov.w	r0, #0
 800087e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000882:	e7b6      	b.n	80007f2 <__aeabi_ddiv+0x82>
 8000884:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000888:	bf04      	itt	eq
 800088a:	4301      	orreq	r1, r0
 800088c:	2000      	moveq	r0, #0
 800088e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000892:	bf88      	it	hi
 8000894:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000898:	f63f aeaf 	bhi.w	80005fa <__aeabi_dmul+0xde>
 800089c:	ebb5 0c03 	subs.w	ip, r5, r3
 80008a0:	bf04      	itt	eq
 80008a2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008aa:	f150 0000 	adcs.w	r0, r0, #0
 80008ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008b2:	bd70      	pop	{r4, r5, r6, pc}
 80008b4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008b8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008bc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008c0:	bfc2      	ittt	gt
 80008c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ca:	bd70      	popgt	{r4, r5, r6, pc}
 80008cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008d0:	f04f 0e00 	mov.w	lr, #0
 80008d4:	3c01      	subs	r4, #1
 80008d6:	e690      	b.n	80005fa <__aeabi_dmul+0xde>
 80008d8:	ea45 0e06 	orr.w	lr, r5, r6
 80008dc:	e68d      	b.n	80005fa <__aeabi_dmul+0xde>
 80008de:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008e2:	ea94 0f0c 	teq	r4, ip
 80008e6:	bf08      	it	eq
 80008e8:	ea95 0f0c 	teqeq	r5, ip
 80008ec:	f43f af3b 	beq.w	8000766 <__aeabi_dmul+0x24a>
 80008f0:	ea94 0f0c 	teq	r4, ip
 80008f4:	d10a      	bne.n	800090c <__aeabi_ddiv+0x19c>
 80008f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008fa:	f47f af34 	bne.w	8000766 <__aeabi_dmul+0x24a>
 80008fe:	ea95 0f0c 	teq	r5, ip
 8000902:	f47f af25 	bne.w	8000750 <__aeabi_dmul+0x234>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e72c      	b.n	8000766 <__aeabi_dmul+0x24a>
 800090c:	ea95 0f0c 	teq	r5, ip
 8000910:	d106      	bne.n	8000920 <__aeabi_ddiv+0x1b0>
 8000912:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000916:	f43f aefd 	beq.w	8000714 <__aeabi_dmul+0x1f8>
 800091a:	4610      	mov	r0, r2
 800091c:	4619      	mov	r1, r3
 800091e:	e722      	b.n	8000766 <__aeabi_dmul+0x24a>
 8000920:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000924:	bf18      	it	ne
 8000926:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800092a:	f47f aec5 	bne.w	80006b8 <__aeabi_dmul+0x19c>
 800092e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000932:	f47f af0d 	bne.w	8000750 <__aeabi_dmul+0x234>
 8000936:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800093a:	f47f aeeb 	bne.w	8000714 <__aeabi_dmul+0x1f8>
 800093e:	e712      	b.n	8000766 <__aeabi_dmul+0x24a>

08000940 <__gedf2>:
 8000940:	f04f 3cff 	mov.w	ip, #4294967295
 8000944:	e006      	b.n	8000954 <__cmpdf2+0x4>
 8000946:	bf00      	nop

08000948 <__ledf2>:
 8000948:	f04f 0c01 	mov.w	ip, #1
 800094c:	e002      	b.n	8000954 <__cmpdf2+0x4>
 800094e:	bf00      	nop

08000950 <__cmpdf2>:
 8000950:	f04f 0c01 	mov.w	ip, #1
 8000954:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	bf18      	it	ne
 8000966:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800096a:	d01b      	beq.n	80009a4 <__cmpdf2+0x54>
 800096c:	b001      	add	sp, #4
 800096e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000972:	bf0c      	ite	eq
 8000974:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000978:	ea91 0f03 	teqne	r1, r3
 800097c:	bf02      	ittt	eq
 800097e:	ea90 0f02 	teqeq	r0, r2
 8000982:	2000      	moveq	r0, #0
 8000984:	4770      	bxeq	lr
 8000986:	f110 0f00 	cmn.w	r0, #0
 800098a:	ea91 0f03 	teq	r1, r3
 800098e:	bf58      	it	pl
 8000990:	4299      	cmppl	r1, r3
 8000992:	bf08      	it	eq
 8000994:	4290      	cmpeq	r0, r2
 8000996:	bf2c      	ite	cs
 8000998:	17d8      	asrcs	r0, r3, #31
 800099a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800099e:	f040 0001 	orr.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	d102      	bne.n	80009b4 <__cmpdf2+0x64>
 80009ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009b2:	d107      	bne.n	80009c4 <__cmpdf2+0x74>
 80009b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	d1d6      	bne.n	800096c <__cmpdf2+0x1c>
 80009be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009c2:	d0d3      	beq.n	800096c <__cmpdf2+0x1c>
 80009c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_cdrcmple>:
 80009cc:	4684      	mov	ip, r0
 80009ce:	4610      	mov	r0, r2
 80009d0:	4662      	mov	r2, ip
 80009d2:	468c      	mov	ip, r1
 80009d4:	4619      	mov	r1, r3
 80009d6:	4663      	mov	r3, ip
 80009d8:	e000      	b.n	80009dc <__aeabi_cdcmpeq>
 80009da:	bf00      	nop

080009dc <__aeabi_cdcmpeq>:
 80009dc:	b501      	push	{r0, lr}
 80009de:	f7ff ffb7 	bl	8000950 <__cmpdf2>
 80009e2:	2800      	cmp	r0, #0
 80009e4:	bf48      	it	mi
 80009e6:	f110 0f00 	cmnmi.w	r0, #0
 80009ea:	bd01      	pop	{r0, pc}

080009ec <__aeabi_dcmpeq>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff fff4 	bl	80009dc <__aeabi_cdcmpeq>
 80009f4:	bf0c      	ite	eq
 80009f6:	2001      	moveq	r0, #1
 80009f8:	2000      	movne	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmplt>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffea 	bl	80009dc <__aeabi_cdcmpeq>
 8000a08:	bf34      	ite	cc
 8000a0a:	2001      	movcc	r0, #1
 8000a0c:	2000      	movcs	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmple>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffe0 	bl	80009dc <__aeabi_cdcmpeq>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpge>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffce 	bl	80009cc <__aeabi_cdrcmple>
 8000a30:	bf94      	ite	ls
 8000a32:	2001      	movls	r0, #1
 8000a34:	2000      	movhi	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpgt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffc4 	bl	80009cc <__aeabi_cdrcmple>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmpun>:
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__aeabi_dcmpun+0x10>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d10a      	bne.n	8000a76 <__aeabi_dcmpun+0x26>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d102      	bne.n	8000a70 <__aeabi_dcmpun+0x20>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_dcmpun+0x26>
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0001 	mov.w	r0, #1
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2uiz>:
 8000acc:	004a      	lsls	r2, r1, #1
 8000ace:	d211      	bcs.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad4:	d211      	bcs.n	8000afa <__aeabi_d2uiz+0x2e>
 8000ad6:	d50d      	bpl.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d40e      	bmi.n	8000b00 <__aeabi_d2uiz+0x34>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d102      	bne.n	8000b06 <__aeabi_d2uiz+0x3a>
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	4770      	bx	lr
 8000b06:	f04f 0000 	mov.w	r0, #0
 8000b0a:	4770      	bx	lr

08000b0c <__aeabi_d2f>:
 8000b0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b14:	bf24      	itt	cs
 8000b16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b1e:	d90d      	bls.n	8000b3c <__aeabi_d2f+0x30>
 8000b20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b34:	bf08      	it	eq
 8000b36:	f020 0001 	biceq.w	r0, r0, #1
 8000b3a:	4770      	bx	lr
 8000b3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b40:	d121      	bne.n	8000b86 <__aeabi_d2f+0x7a>
 8000b42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b46:	bfbc      	itt	lt
 8000b48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	4770      	bxlt	lr
 8000b4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b56:	f1c2 0218 	rsb	r2, r2, #24
 8000b5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b62:	fa20 f002 	lsr.w	r0, r0, r2
 8000b66:	bf18      	it	ne
 8000b68:	f040 0001 	orrne.w	r0, r0, #1
 8000b6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b78:	ea40 000c 	orr.w	r0, r0, ip
 8000b7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b84:	e7cc      	b.n	8000b20 <__aeabi_d2f+0x14>
 8000b86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b8a:	d107      	bne.n	8000b9c <__aeabi_d2f+0x90>
 8000b8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b90:	bf1e      	ittt	ne
 8000b92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b9a:	4770      	bxne	lr
 8000b9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc0:	f000 b974 	b.w	8000eac <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f806 	bl	8000bdc <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__udivmoddi4>:
 8000bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be0:	468c      	mov	ip, r1
 8000be2:	4604      	mov	r4, r0
 8000be4:	9e08      	ldr	r6, [sp, #32]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d14b      	bne.n	8000c82 <__udivmoddi4+0xa6>
 8000bea:	428a      	cmp	r2, r1
 8000bec:	4615      	mov	r5, r2
 8000bee:	d967      	bls.n	8000cc0 <__udivmoddi4+0xe4>
 8000bf0:	fab2 f282 	clz	r2, r2
 8000bf4:	b14a      	cbz	r2, 8000c0a <__udivmoddi4+0x2e>
 8000bf6:	f1c2 0720 	rsb	r7, r2, #32
 8000bfa:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfe:	fa20 f707 	lsr.w	r7, r0, r7
 8000c02:	4095      	lsls	r5, r2
 8000c04:	ea47 0c03 	orr.w	ip, r7, r3
 8000c08:	4094      	lsls	r4, r2
 8000c0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0e:	fbbc f7fe 	udiv	r7, ip, lr
 8000c12:	fa1f f885 	uxth.w	r8, r5
 8000c16:	fb0e c317 	mls	r3, lr, r7, ip
 8000c1a:	fb07 f908 	mul.w	r9, r7, r8
 8000c1e:	0c21      	lsrs	r1, r4, #16
 8000c20:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c24:	4599      	cmp	r9, r3
 8000c26:	d909      	bls.n	8000c3c <__udivmoddi4+0x60>
 8000c28:	18eb      	adds	r3, r5, r3
 8000c2a:	f107 31ff 	add.w	r1, r7, #4294967295
 8000c2e:	f080 811c 	bcs.w	8000e6a <__udivmoddi4+0x28e>
 8000c32:	4599      	cmp	r9, r3
 8000c34:	f240 8119 	bls.w	8000e6a <__udivmoddi4+0x28e>
 8000c38:	3f02      	subs	r7, #2
 8000c3a:	442b      	add	r3, r5
 8000c3c:	eba3 0309 	sub.w	r3, r3, r9
 8000c40:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c44:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c48:	fb00 f108 	mul.w	r1, r0, r8
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c52:	42a1      	cmp	r1, r4
 8000c54:	d909      	bls.n	8000c6a <__udivmoddi4+0x8e>
 8000c56:	192c      	adds	r4, r5, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 8107 	bcs.w	8000e6e <__udivmoddi4+0x292>
 8000c60:	42a1      	cmp	r1, r4
 8000c62:	f240 8104 	bls.w	8000e6e <__udivmoddi4+0x292>
 8000c66:	3802      	subs	r0, #2
 8000c68:	442c      	add	r4, r5
 8000c6a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c6e:	2700      	movs	r7, #0
 8000c70:	1a64      	subs	r4, r4, r1
 8000c72:	b11e      	cbz	r6, 8000c7c <__udivmoddi4+0xa0>
 8000c74:	2300      	movs	r3, #0
 8000c76:	40d4      	lsrs	r4, r2
 8000c78:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7c:	4639      	mov	r1, r7
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xbe>
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	f000 80ec 	beq.w	8000e64 <__udivmoddi4+0x288>
 8000c8c:	2700      	movs	r7, #0
 8000c8e:	e9c6 0100 	strd	r0, r1, [r6]
 8000c92:	4638      	mov	r0, r7
 8000c94:	4639      	mov	r1, r7
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f783 	clz	r7, r3
 8000c9e:	2f00      	cmp	r7, #0
 8000ca0:	d148      	bne.n	8000d34 <__udivmoddi4+0x158>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd0>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80fb 	bhi.w	8000ea2 <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469c      	mov	ip, r3
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa0>
 8000cba:	e9c6 4c00 	strd	r4, ip, [r6]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa0>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xe8>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 808f 	bne.w	8000dec <__udivmoddi4+0x210>
 8000cce:	2701      	movs	r7, #1
 8000cd0:	1b49      	subs	r1, r1, r5
 8000cd2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000cd6:	fa1f f985 	uxth.w	r9, r5
 8000cda:	fbb1 fef8 	udiv	lr, r1, r8
 8000cde:	fb08 111e 	mls	r1, r8, lr, r1
 8000ce2:	fb09 f00e 	mul.w	r0, r9, lr
 8000ce6:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000cea:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d907      	bls.n	8000d02 <__udivmoddi4+0x126>
 8000cf2:	18eb      	adds	r3, r5, r3
 8000cf4:	f10e 31ff 	add.w	r1, lr, #4294967295
 8000cf8:	d202      	bcs.n	8000d00 <__udivmoddi4+0x124>
 8000cfa:	4298      	cmp	r0, r3
 8000cfc:	f200 80cd 	bhi.w	8000e9a <__udivmoddi4+0x2be>
 8000d00:	468e      	mov	lr, r1
 8000d02:	1a1b      	subs	r3, r3, r0
 8000d04:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d08:	fb08 3310 	mls	r3, r8, r0, r3
 8000d0c:	fb09 f900 	mul.w	r9, r9, r0
 8000d10:	b2a4      	uxth	r4, r4
 8000d12:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d16:	45a1      	cmp	r9, r4
 8000d18:	d907      	bls.n	8000d2a <__udivmoddi4+0x14e>
 8000d1a:	192c      	adds	r4, r5, r4
 8000d1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d20:	d202      	bcs.n	8000d28 <__udivmoddi4+0x14c>
 8000d22:	45a1      	cmp	r9, r4
 8000d24:	f200 80b6 	bhi.w	8000e94 <__udivmoddi4+0x2b8>
 8000d28:	4618      	mov	r0, r3
 8000d2a:	eba4 0409 	sub.w	r4, r4, r9
 8000d2e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000d32:	e79e      	b.n	8000c72 <__udivmoddi4+0x96>
 8000d34:	f1c7 0520 	rsb	r5, r7, #32
 8000d38:	40bb      	lsls	r3, r7
 8000d3a:	fa22 fc05 	lsr.w	ip, r2, r5
 8000d3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d42:	fa21 f405 	lsr.w	r4, r1, r5
 8000d46:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d4a:	fbb4 f9fe 	udiv	r9, r4, lr
 8000d4e:	fa1f f88c 	uxth.w	r8, ip
 8000d52:	fb0e 4419 	mls	r4, lr, r9, r4
 8000d56:	fa20 f305 	lsr.w	r3, r0, r5
 8000d5a:	40b9      	lsls	r1, r7
 8000d5c:	fb09 fa08 	mul.w	sl, r9, r8
 8000d60:	4319      	orrs	r1, r3
 8000d62:	0c0b      	lsrs	r3, r1, #16
 8000d64:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d68:	45a2      	cmp	sl, r4
 8000d6a:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6e:	fa00 f307 	lsl.w	r3, r0, r7
 8000d72:	d90b      	bls.n	8000d8c <__udivmoddi4+0x1b0>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d7c:	f080 8088 	bcs.w	8000e90 <__udivmoddi4+0x2b4>
 8000d80:	45a2      	cmp	sl, r4
 8000d82:	f240 8085 	bls.w	8000e90 <__udivmoddi4+0x2b4>
 8000d86:	f1a9 0902 	sub.w	r9, r9, #2
 8000d8a:	4464      	add	r4, ip
 8000d8c:	eba4 040a 	sub.w	r4, r4, sl
 8000d90:	fbb4 f0fe 	udiv	r0, r4, lr
 8000d94:	fb0e 4410 	mls	r4, lr, r0, r4
 8000d98:	fb00 fa08 	mul.w	sl, r0, r8
 8000d9c:	b289      	uxth	r1, r1
 8000d9e:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8000da2:	45a2      	cmp	sl, r4
 8000da4:	d908      	bls.n	8000db8 <__udivmoddi4+0x1dc>
 8000da6:	eb1c 0404 	adds.w	r4, ip, r4
 8000daa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dae:	d26b      	bcs.n	8000e88 <__udivmoddi4+0x2ac>
 8000db0:	45a2      	cmp	sl, r4
 8000db2:	d969      	bls.n	8000e88 <__udivmoddi4+0x2ac>
 8000db4:	3802      	subs	r0, #2
 8000db6:	4464      	add	r4, ip
 8000db8:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dbc:	fba0 8902 	umull	r8, r9, r0, r2
 8000dc0:	eba4 040a 	sub.w	r4, r4, sl
 8000dc4:	454c      	cmp	r4, r9
 8000dc6:	4641      	mov	r1, r8
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	d354      	bcc.n	8000e76 <__udivmoddi4+0x29a>
 8000dcc:	d051      	beq.n	8000e72 <__udivmoddi4+0x296>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	d069      	beq.n	8000ea6 <__udivmoddi4+0x2ca>
 8000dd2:	1a5a      	subs	r2, r3, r1
 8000dd4:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd8:	fa04 f505 	lsl.w	r5, r4, r5
 8000ddc:	fa22 f307 	lsr.w	r3, r2, r7
 8000de0:	40fc      	lsrs	r4, r7
 8000de2:	431d      	orrs	r5, r3
 8000de4:	e9c6 5400 	strd	r5, r4, [r6]
 8000de8:	2700      	movs	r7, #0
 8000dea:	e747      	b.n	8000c7c <__udivmoddi4+0xa0>
 8000dec:	4095      	lsls	r5, r2
 8000dee:	f1c2 0320 	rsb	r3, r2, #32
 8000df2:	fa21 f003 	lsr.w	r0, r1, r3
 8000df6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000dfa:	fbb0 f7f8 	udiv	r7, r0, r8
 8000dfe:	fa1f f985 	uxth.w	r9, r5
 8000e02:	fb08 0017 	mls	r0, r8, r7, r0
 8000e06:	fa24 f303 	lsr.w	r3, r4, r3
 8000e0a:	4091      	lsls	r1, r2
 8000e0c:	fb07 fc09 	mul.w	ip, r7, r9
 8000e10:	430b      	orrs	r3, r1
 8000e12:	0c19      	lsrs	r1, r3, #16
 8000e14:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e18:	458c      	cmp	ip, r1
 8000e1a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x254>
 8000e20:	1869      	adds	r1, r5, r1
 8000e22:	f107 30ff 	add.w	r0, r7, #4294967295
 8000e26:	d231      	bcs.n	8000e8c <__udivmoddi4+0x2b0>
 8000e28:	458c      	cmp	ip, r1
 8000e2a:	d92f      	bls.n	8000e8c <__udivmoddi4+0x2b0>
 8000e2c:	3f02      	subs	r7, #2
 8000e2e:	4429      	add	r1, r5
 8000e30:	eba1 010c 	sub.w	r1, r1, ip
 8000e34:	fbb1 f0f8 	udiv	r0, r1, r8
 8000e38:	fb08 1c10 	mls	ip, r8, r0, r1
 8000e3c:	fb00 fe09 	mul.w	lr, r0, r9
 8000e40:	b299      	uxth	r1, r3
 8000e42:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e46:	458e      	cmp	lr, r1
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x27e>
 8000e4a:	1869      	adds	r1, r5, r1
 8000e4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e50:	d218      	bcs.n	8000e84 <__udivmoddi4+0x2a8>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d916      	bls.n	8000e84 <__udivmoddi4+0x2a8>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4429      	add	r1, r5
 8000e5a:	eba1 010e 	sub.w	r1, r1, lr
 8000e5e:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e62:	e73a      	b.n	8000cda <__udivmoddi4+0xfe>
 8000e64:	4637      	mov	r7, r6
 8000e66:	4630      	mov	r0, r6
 8000e68:	e708      	b.n	8000c7c <__udivmoddi4+0xa0>
 8000e6a:	460f      	mov	r7, r1
 8000e6c:	e6e6      	b.n	8000c3c <__udivmoddi4+0x60>
 8000e6e:	4618      	mov	r0, r3
 8000e70:	e6fb      	b.n	8000c6a <__udivmoddi4+0x8e>
 8000e72:	4543      	cmp	r3, r8
 8000e74:	d2ab      	bcs.n	8000dce <__udivmoddi4+0x1f2>
 8000e76:	ebb8 0102 	subs.w	r1, r8, r2
 8000e7a:	eb69 020c 	sbc.w	r2, r9, ip
 8000e7e:	3801      	subs	r0, #1
 8000e80:	4696      	mov	lr, r2
 8000e82:	e7a4      	b.n	8000dce <__udivmoddi4+0x1f2>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e7e8      	b.n	8000e5a <__udivmoddi4+0x27e>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e795      	b.n	8000db8 <__udivmoddi4+0x1dc>
 8000e8c:	4607      	mov	r7, r0
 8000e8e:	e7cf      	b.n	8000e30 <__udivmoddi4+0x254>
 8000e90:	4681      	mov	r9, r0
 8000e92:	e77b      	b.n	8000d8c <__udivmoddi4+0x1b0>
 8000e94:	3802      	subs	r0, #2
 8000e96:	442c      	add	r4, r5
 8000e98:	e747      	b.n	8000d2a <__udivmoddi4+0x14e>
 8000e9a:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e9e:	442b      	add	r3, r5
 8000ea0:	e72f      	b.n	8000d02 <__udivmoddi4+0x126>
 8000ea2:	4638      	mov	r0, r7
 8000ea4:	e707      	b.n	8000cb6 <__udivmoddi4+0xda>
 8000ea6:	4637      	mov	r7, r6
 8000ea8:	e6e8      	b.n	8000c7c <__udivmoddi4+0xa0>
 8000eaa:	bf00      	nop

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

//======================================================================================
void MX_ADC_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000ec0:	4b26      	ldr	r3, [pc, #152]	; (8000f5c <MX_ADC_Init+0xac>)
 8000ec2:	4a27      	ldr	r2, [pc, #156]	; (8000f60 <MX_ADC_Init+0xb0>)
 8000ec4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ec6:	4b25      	ldr	r3, [pc, #148]	; (8000f5c <MX_ADC_Init+0xac>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000ecc:	4b23      	ldr	r3, [pc, #140]	; (8000f5c <MX_ADC_Init+0xac>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ed2:	4b22      	ldr	r3, [pc, #136]	; (8000f5c <MX_ADC_Init+0xac>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ed8:	4b20      	ldr	r3, [pc, #128]	; (8000f5c <MX_ADC_Init+0xac>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000ede:	4b1f      	ldr	r3, [pc, #124]	; (8000f5c <MX_ADC_Init+0xac>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8000ee4:	4b1d      	ldr	r3, [pc, #116]	; (8000f5c <MX_ADC_Init+0xac>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8000eea:	4b1c      	ldr	r3, [pc, #112]	; (8000f5c <MX_ADC_Init+0xac>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8000ef0:	4b1a      	ldr	r3, [pc, #104]	; (8000f5c <MX_ADC_Init+0xac>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000ef6:	4b19      	ldr	r3, [pc, #100]	; (8000f5c <MX_ADC_Init+0xac>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 8000efe:	4b17      	ldr	r3, [pc, #92]	; (8000f5c <MX_ADC_Init+0xac>)
 8000f00:	2201      	movs	r2, #1
 8000f02:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000f04:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <MX_ADC_Init+0xac>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f0c:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <MX_ADC_Init+0xac>)
 8000f0e:	2210      	movs	r2, #16
 8000f10:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f12:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <MX_ADC_Init+0xac>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000f18:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <MX_ADC_Init+0xac>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000f20:	480e      	ldr	r0, [pc, #56]	; (8000f5c <MX_ADC_Init+0xac>)
 8000f22:	f005 fe6f 	bl	8006c04 <HAL_ADC_Init>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d002      	beq.n	8000f32 <MX_ADC_Init+0x82>
  {
    Error_Handler(2);
 8000f2c:	2002      	movs	r0, #2
 8000f2e:	f002 fd7d 	bl	8003a2c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000f32:	2310      	movs	r3, #16
 8000f34:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f36:	2301      	movs	r3, #1
 8000f38:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	4619      	mov	r1, r3
 8000f42:	4806      	ldr	r0, [pc, #24]	; (8000f5c <MX_ADC_Init+0xac>)
 8000f44:	f006 f9e0 	bl	8007308 <HAL_ADC_ConfigChannel>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d002      	beq.n	8000f54 <MX_ADC_Init+0xa4>
  {
    Error_Handler(2);
 8000f4e:	2002      	movs	r0, #2
 8000f50:	f002 fd6c 	bl	8003a2c <Error_Handler>
  }

}
 8000f54:	bf00      	nop
 8000f56:	3710      	adds	r7, #16
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20008b50 	.word	0x20008b50
 8000f60:	40012400 	.word	0x40012400

08000f64 <HAL_ADC_MspInit>:
//======================================================================================
void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08c      	sub	sp, #48	; 0x30
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	f107 031c 	add.w	r3, r7, #28
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a31      	ldr	r2, [pc, #196]	; (8001048 <HAL_ADC_MspInit+0xe4>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d15c      	bne.n	8001040 <HAL_ADC_MspInit+0xdc>
  {
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f86:	4b31      	ldr	r3, [pc, #196]	; (800104c <HAL_ADC_MspInit+0xe8>)
 8000f88:	6a1b      	ldr	r3, [r3, #32]
 8000f8a:	4a30      	ldr	r2, [pc, #192]	; (800104c <HAL_ADC_MspInit+0xe8>)
 8000f8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f90:	6213      	str	r3, [r2, #32]
 8000f92:	4b2e      	ldr	r3, [pc, #184]	; (800104c <HAL_ADC_MspInit+0xe8>)
 8000f94:	6a1b      	ldr	r3, [r3, #32]
 8000f96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f9a:	61bb      	str	r3, [r7, #24]
 8000f9c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9e:	4b2b      	ldr	r3, [pc, #172]	; (800104c <HAL_ADC_MspInit+0xe8>)
 8000fa0:	69db      	ldr	r3, [r3, #28]
 8000fa2:	4a2a      	ldr	r2, [pc, #168]	; (800104c <HAL_ADC_MspInit+0xe8>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	61d3      	str	r3, [r2, #28]
 8000faa:	4b28      	ldr	r3, [pc, #160]	; (800104c <HAL_ADC_MspInit+0xe8>)
 8000fac:	69db      	ldr	r3, [r3, #28]
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	617b      	str	r3, [r7, #20]
 8000fb4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb6:	4b25      	ldr	r3, [pc, #148]	; (800104c <HAL_ADC_MspInit+0xe8>)
 8000fb8:	69db      	ldr	r3, [r3, #28]
 8000fba:	4a24      	ldr	r2, [pc, #144]	; (800104c <HAL_ADC_MspInit+0xe8>)
 8000fbc:	f043 0304 	orr.w	r3, r3, #4
 8000fc0:	61d3      	str	r3, [r2, #28]
 8000fc2:	4b22      	ldr	r3, [pc, #136]	; (800104c <HAL_ADC_MspInit+0xe8>)
 8000fc4:	69db      	ldr	r3, [r3, #28]
 8000fc6:	f003 0304 	and.w	r3, r3, #4
 8000fca:	613b      	str	r3, [r7, #16]
 8000fcc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fce:	4b1f      	ldr	r3, [pc, #124]	; (800104c <HAL_ADC_MspInit+0xe8>)
 8000fd0:	69db      	ldr	r3, [r3, #28]
 8000fd2:	4a1e      	ldr	r2, [pc, #120]	; (800104c <HAL_ADC_MspInit+0xe8>)
 8000fd4:	f043 0310 	orr.w	r3, r3, #16
 8000fd8:	61d3      	str	r3, [r2, #28]
 8000fda:	4b1c      	ldr	r3, [pc, #112]	; (800104c <HAL_ADC_MspInit+0xe8>)
 8000fdc:	69db      	ldr	r3, [r3, #28]
 8000fde:	f003 0310 	and.w	r3, r3, #16
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC_IN1
    PC5     ------> ADC_IN15
    PE8     ------> ADC_IN23
    PE9     ------> ADC_IN24
    */
    GPIO_InitStruct.Pin = ADC_V_MOTOR_Pin|ADC_V_IN_12V_Pin;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fea:	2303      	movs	r3, #3
 8000fec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff2:	f107 031c 	add.w	r3, r7, #28
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4815      	ldr	r0, [pc, #84]	; (8001050 <HAL_ADC_MspInit+0xec>)
 8000ffa:	f006 feb9 	bl	8007d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_SPEED_Pin;
 8000ffe:	2320      	movs	r3, #32
 8001000:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001002:	2303      	movs	r3, #3
 8001004:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_SPEED_GPIO_Port, &GPIO_InitStruct);
 800100a:	f107 031c 	add.w	r3, r7, #28
 800100e:	4619      	mov	r1, r3
 8001010:	4810      	ldr	r0, [pc, #64]	; (8001054 <HAL_ADC_MspInit+0xf0>)
 8001012:	f006 fead 	bl	8007d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_I_IN_12V_Pin|ADC_I_MOTOR_Pin;
 8001016:	f44f 7340 	mov.w	r3, #768	; 0x300
 800101a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800101c:	2303      	movs	r3, #3
 800101e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001024:	f107 031c 	add.w	r3, r7, #28
 8001028:	4619      	mov	r1, r3
 800102a:	480b      	ldr	r0, [pc, #44]	; (8001058 <HAL_ADC_MspInit+0xf4>)
 800102c:	f006 fea0 	bl	8007d70 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8001030:	2200      	movs	r2, #0
 8001032:	2100      	movs	r1, #0
 8001034:	2012      	movs	r0, #18
 8001036:	f006 fc22 	bl	800787e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 800103a:	2012      	movs	r0, #18
 800103c:	f006 fc3b 	bl	80078b6 <HAL_NVIC_EnableIRQ>

  }
}
 8001040:	bf00      	nop
 8001042:	3730      	adds	r7, #48	; 0x30
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40012400 	.word	0x40012400
 800104c:	40023800 	.word	0x40023800
 8001050:	40020000 	.word	0x40020000
 8001054:	40020800 	.word	0x40020800
 8001058:	40021000 	.word	0x40021000

0800105c <ADC_GetRAWData>:
    HAL_NVIC_DisableIRQ(ADC1_IRQn);
  }
}
//======================================================================================
uint32_t ADC_GetRAWData(uint32_t Channel)												// Получить сырые данные для обрботки по указанному каналу
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 8001064:	f107 030c 	add.w	r3, r7, #12
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]

	sConfig.Rank         = ADC_REGULAR_RANK_1;
 8001070:	2301      	movs	r3, #1
 8001072:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES;
 8001074:	2302      	movs	r3, #2
 8001076:	617b      	str	r3, [r7, #20]

	sConfig.Channel      = Channel;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	60fb      	str	r3, [r7, #12]
 	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800107c:	f107 030c 	add.w	r3, r7, #12
 8001080:	4619      	mov	r1, r3
 8001082:	480f      	ldr	r0, [pc, #60]	; (80010c0 <ADC_GetRAWData+0x64>)
 8001084:	f006 f940 	bl	8007308 <HAL_ADC_ConfigChannel>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d002      	beq.n	8001094 <ADC_GetRAWData+0x38>
	{
		Error_Handler(2);
 800108e:	2002      	movs	r0, #2
 8001090:	f002 fccc 	bl	8003a2c <Error_Handler>
	}

	// Замер из АЦП
	HAL_ADC_Start(&hadc);
 8001094:	480a      	ldr	r0, [pc, #40]	; (80010c0 <ADC_GetRAWData+0x64>)
 8001096:	f005 fefb 	bl	8006e90 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 10);
 800109a:	210a      	movs	r1, #10
 800109c:	4808      	ldr	r0, [pc, #32]	; (80010c0 <ADC_GetRAWData+0x64>)
 800109e:	f005 ff83 	bl	8006fa8 <HAL_ADC_PollForConversion>
	ADC_State.ADC_RAW = HAL_ADC_GetValue(&hadc);
 80010a2:	4807      	ldr	r0, [pc, #28]	; (80010c0 <ADC_GetRAWData+0x64>)
 80010a4:	f006 f809 	bl	80070ba <HAL_ADC_GetValue>
 80010a8:	4602      	mov	r2, r0
 80010aa:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <ADC_GetRAWData+0x68>)
 80010ac:	605a      	str	r2, [r3, #4]
	HAL_ADC_Stop(&hadc);
 80010ae:	4804      	ldr	r0, [pc, #16]	; (80010c0 <ADC_GetRAWData+0x64>)
 80010b0:	f005 ff4e 	bl	8006f50 <HAL_ADC_Stop>

	return ADC_State.ADC_RAW;
 80010b4:	4b03      	ldr	r3, [pc, #12]	; (80010c4 <ADC_GetRAWData+0x68>)
 80010b6:	685b      	ldr	r3, [r3, #4]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3718      	adds	r7, #24
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20008b50 	.word	0x20008b50
 80010c4:	20008bb0 	.word	0x20008bb0

080010c8 <ADC_ScanState>:
//======================================================================================
void ADC_ScanState(void)																// Замер из АЦП по всем каналам сразу
{
 80010c8:	b598      	push	{r3, r4, r7, lr}
 80010ca:	af00      	add	r7, sp, #0
	// ADC Channel: IN23						- ADC_I_IN_12V
	// ADC Channel: IN24						- ADC_I_MOTOR
	// ADC Channel: Temperature Sensor Channel 	- температура кристалла процессора
	// ADC Channel: Vrefint Channel				- Напряжение питания, для рассчетов опоры

	ADC_State.DataReady = 0;
 80010cc:	4ba8      	ldr	r3, [pc, #672]	; (8001370 <ADC_ScanState+0x2a8>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	701a      	strb	r2, [r3, #0]


	ADC_GetRAWData(ADC_CHANNEL_VREFINT);												// Канал АЦП - опорное напряжение для рассчета напряжения питания процессора
 80010d2:	2011      	movs	r0, #17
 80010d4:	f7ff ffc2 	bl	800105c <ADC_GetRAWData>
	if (ADC_State.ADC_RAW < 4096)
 80010d8:	4ba5      	ldr	r3, [pc, #660]	; (8001370 <ADC_ScanState+0x2a8>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010e0:	d222      	bcs.n	8001128 <ADC_ScanState+0x60>
	{
		// Реальное напряжение питания процессора, точнее питание аналоговой части
		ADC_State.ADC_Ref_Voltage = __LL_ADC_CALC_VREFANALOG_VOLTAGE(ADC_State.ADC_RAW, hadc.Init.Resolution) / 1000.0; // калибровка батареи - опорное напряжение АЦП
 80010e2:	4ba4      	ldr	r3, [pc, #656]	; (8001374 <ADC_ScanState+0x2ac>)
 80010e4:	881b      	ldrh	r3, [r3, #0]
 80010e6:	461a      	mov	r2, r3
 80010e8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80010ec:	fb03 f202 	mul.w	r2, r3, r2
 80010f0:	4b9f      	ldr	r3, [pc, #636]	; (8001370 <ADC_ScanState+0x2a8>)
 80010f2:	6859      	ldr	r1, [r3, #4]
 80010f4:	4ba0      	ldr	r3, [pc, #640]	; (8001378 <ADC_ScanState+0x2b0>)
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	0ddb      	lsrs	r3, r3, #23
 80010fa:	fa01 f303 	lsl.w	r3, r1, r3
 80010fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff f990 	bl	8000428 <__aeabi_ui2d>
 8001108:	f04f 0200 	mov.w	r2, #0
 800110c:	4b9b      	ldr	r3, [pc, #620]	; (800137c <ADC_ScanState+0x2b4>)
 800110e:	f7ff fb2f 	bl	8000770 <__aeabi_ddiv>
 8001112:	4603      	mov	r3, r0
 8001114:	460c      	mov	r4, r1
 8001116:	4a96      	ldr	r2, [pc, #600]	; (8001370 <ADC_ScanState+0x2a8>)
 8001118:	e9c2 3402 	strd	r3, r4, [r2, #8]
		ADC_State.DataReady++;
 800111c:	4b94      	ldr	r3, [pc, #592]	; (8001370 <ADC_ScanState+0x2a8>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	3301      	adds	r3, #1
 8001122:	b2da      	uxtb	r2, r3
 8001124:	4b92      	ldr	r3, [pc, #584]	; (8001370 <ADC_ScanState+0x2a8>)
 8001126:	701a      	strb	r2, [r3, #0]
	}

	ADC_GetRAWData(ADC_CHANNEL_TEMPSENSOR);												// Канал АЦП - температура внутри процессора
 8001128:	2010      	movs	r0, #16
 800112a:	f7ff ff97 	bl	800105c <ADC_GetRAWData>
	if (ADC_State.ADC_RAW < 4096)
 800112e:	4b90      	ldr	r3, [pc, #576]	; (8001370 <ADC_ScanState+0x2a8>)
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001136:	d229      	bcs.n	800118c <ADC_ScanState+0xc4>
	{
		// Пересчет  сырых данных АЦП в температуру в градусах Цельсия, без учета реального напряжения питания
		ADC_State.CPU_Temperature 	= COMPUTATION_TEMPERATURE_TEMP30_TEMP110(ADC_State.ADC_RAW) - 2;
 8001138:	4b8d      	ldr	r3, [pc, #564]	; (8001370 <ADC_ScanState+0x2a8>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f640 42e4 	movw	r2, #3300	; 0xce4
 8001140:	fb02 f303 	mul.w	r3, r2, r3
 8001144:	4a8e      	ldr	r2, [pc, #568]	; (8001380 <ADC_ScanState+0x2b8>)
 8001146:	fba2 2303 	umull	r2, r3, r2, r3
 800114a:	099b      	lsrs	r3, r3, #6
 800114c:	461a      	mov	r2, r3
 800114e:	4b8d      	ldr	r3, [pc, #564]	; (8001384 <ADC_ScanState+0x2bc>)
 8001150:	881b      	ldrh	r3, [r3, #0]
 8001152:	1ad2      	subs	r2, r2, r3
 8001154:	4613      	mov	r3, r2
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	4413      	add	r3, r2
 800115a:	011b      	lsls	r3, r3, #4
 800115c:	461a      	mov	r2, r3
 800115e:	4b8a      	ldr	r3, [pc, #552]	; (8001388 <ADC_ScanState+0x2c0>)
 8001160:	881b      	ldrh	r3, [r3, #0]
 8001162:	4619      	mov	r1, r3
 8001164:	4b87      	ldr	r3, [pc, #540]	; (8001384 <ADC_ScanState+0x2bc>)
 8001166:	881b      	ldrh	r3, [r3, #0]
 8001168:	1acb      	subs	r3, r1, r3
 800116a:	fb92 f3f3 	sdiv	r3, r2, r3
 800116e:	331c      	adds	r3, #28
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff f969 	bl	8000448 <__aeabi_i2d>
 8001176:	4603      	mov	r3, r0
 8001178:	460c      	mov	r4, r1
 800117a:	4a7d      	ldr	r2, [pc, #500]	; (8001370 <ADC_ScanState+0x2a8>)
 800117c:	e9c2 3404 	strd	r3, r4, [r2, #16]

//		// Пересчет  сырых данных АЦП в температуру в градусах Цельсия, с учетом реального опопрного напряжения питания
//		ADC_State.CPU_Temperature_raw 	= __LL_ADC_CALC_DATA_TO_VOLTAGE(ADC_State.ADC_Ref_Voltage, ADC_State.ADC_RAW, hadc.Init.Resolution);  // пересчет из сырых данных АЦП в напряжение в вольтах с учетом разрядности
//		ADC_State.CPU_TemperatureRef    = __LL_ADC_CALC_TEMPERATURE((uint32_t)(1000*ADC_State.ADC_Ref_Voltage), ADC_State.ADC_RAW , hadc.Init.Resolution) - 2;

		ADC_State.DataReady++;
 8001180:	4b7b      	ldr	r3, [pc, #492]	; (8001370 <ADC_ScanState+0x2a8>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	3301      	adds	r3, #1
 8001186:	b2da      	uxtb	r2, r3
 8001188:	4b79      	ldr	r3, [pc, #484]	; (8001370 <ADC_ScanState+0x2a8>)
 800118a:	701a      	strb	r2, [r3, #0]
	}

	ADC_GetRAWData(CHANNEL_ADC_SPEED);													// Канал АЦП - регулятор скорости мотора (пременный резистор 0..3.3V)
 800118c:	200f      	movs	r0, #15
 800118e:	f7ff ff65 	bl	800105c <ADC_GetRAWData>
	if (ADC_State.ADC_RAW < 4096)
 8001192:	4b77      	ldr	r3, [pc, #476]	; (8001370 <ADC_ScanState+0x2a8>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800119a:	d235      	bcs.n	8001208 <ADC_ScanState+0x140>
	{
		ADC_State.Speed_value_volts 	= ADC_State.ADC_RAW * (ADC_REF_VOLTAGE_DEFAULT / 4096) * DIVIDER_ADC_SPEED;
 800119c:	4b74      	ldr	r3, [pc, #464]	; (8001370 <ADC_ScanState+0x2a8>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff f941 	bl	8000428 <__aeabi_ui2d>
 80011a6:	a366      	add	r3, pc, #408	; (adr r3, 8001340 <ADC_ScanState+0x278>)
 80011a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ac:	f7ff f9b6 	bl	800051c <__aeabi_dmul>
 80011b0:	4603      	mov	r3, r0
 80011b2:	460c      	mov	r4, r1
 80011b4:	4a6e      	ldr	r2, [pc, #440]	; (8001370 <ADC_ScanState+0x2a8>)
 80011b6:	e9c2 3408 	strd	r3, r4, [r2, #32]
		ADC_State.Speed_value_percent	= (uint8_t)( (ADC_State.Speed_value_volts/ADC_REF_VOLTAGE_DEFAULT)*(double)100 );
 80011ba:	4b6d      	ldr	r3, [pc, #436]	; (8001370 <ADC_ScanState+0x2a8>)
 80011bc:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80011c0:	a361      	add	r3, pc, #388	; (adr r3, 8001348 <ADC_ScanState+0x280>)
 80011c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c6:	f7ff fad3 	bl	8000770 <__aeabi_ddiv>
 80011ca:	4603      	mov	r3, r0
 80011cc:	460c      	mov	r4, r1
 80011ce:	4618      	mov	r0, r3
 80011d0:	4621      	mov	r1, r4
 80011d2:	f04f 0200 	mov.w	r2, #0
 80011d6:	4b6d      	ldr	r3, [pc, #436]	; (800138c <ADC_ScanState+0x2c4>)
 80011d8:	f7ff f9a0 	bl	800051c <__aeabi_dmul>
 80011dc:	4603      	mov	r3, r0
 80011de:	460c      	mov	r4, r1
 80011e0:	4618      	mov	r0, r3
 80011e2:	4621      	mov	r1, r4
 80011e4:	f7ff fc72 	bl	8000acc <__aeabi_d2uiz>
 80011e8:	4603      	mov	r3, r0
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	4b60      	ldr	r3, [pc, #384]	; (8001370 <ADC_ScanState+0x2a8>)
 80011ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		Speed_value_percent = ADC_State.Speed_value_percent;
 80011f2:	4b5f      	ldr	r3, [pc, #380]	; (8001370 <ADC_ScanState+0x2a8>)
 80011f4:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80011f8:	4b65      	ldr	r3, [pc, #404]	; (8001390 <ADC_ScanState+0x2c8>)
 80011fa:	701a      	strb	r2, [r3, #0]

		ADC_State.DataReady++;
 80011fc:	4b5c      	ldr	r3, [pc, #368]	; (8001370 <ADC_ScanState+0x2a8>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	3301      	adds	r3, #1
 8001202:	b2da      	uxtb	r2, r3
 8001204:	4b5a      	ldr	r3, [pc, #360]	; (8001370 <ADC_ScanState+0x2a8>)
 8001206:	701a      	strb	r2, [r3, #0]
	}

	ADC_GetRAWData(CHANNEL_ADC_V_IN_12V);												// Канал АЦП - напряжение питания на входе
 8001208:	2001      	movs	r0, #1
 800120a:	f7ff ff27 	bl	800105c <ADC_GetRAWData>
	if (ADC_State.ADC_RAW < 4096)
 800120e:	4b58      	ldr	r3, [pc, #352]	; (8001370 <ADC_ScanState+0x2a8>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001216:	d21d      	bcs.n	8001254 <ADC_ScanState+0x18c>
	{
		ADC_State.V_IN_12V_value_volts 	= ADC_State.ADC_RAW * (ADC_REF_VOLTAGE_DEFAULT / 4096) * DIVIDER_ADC_V_IN_12V;
 8001218:	4b55      	ldr	r3, [pc, #340]	; (8001370 <ADC_ScanState+0x2a8>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff f903 	bl	8000428 <__aeabi_ui2d>
 8001222:	a347      	add	r3, pc, #284	; (adr r3, 8001340 <ADC_ScanState+0x278>)
 8001224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001228:	f7ff f978 	bl	800051c <__aeabi_dmul>
 800122c:	4603      	mov	r3, r0
 800122e:	460c      	mov	r4, r1
 8001230:	4618      	mov	r0, r3
 8001232:	4621      	mov	r1, r4
 8001234:	a346      	add	r3, pc, #280	; (adr r3, 8001350 <ADC_ScanState+0x288>)
 8001236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123a:	f7ff f96f 	bl	800051c <__aeabi_dmul>
 800123e:	4603      	mov	r3, r0
 8001240:	460c      	mov	r4, r1
 8001242:	4a4b      	ldr	r2, [pc, #300]	; (8001370 <ADC_ScanState+0x2a8>)
 8001244:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

		ADC_State.DataReady++;
 8001248:	4b49      	ldr	r3, [pc, #292]	; (8001370 <ADC_ScanState+0x2a8>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	3301      	adds	r3, #1
 800124e:	b2da      	uxtb	r2, r3
 8001250:	4b47      	ldr	r3, [pc, #284]	; (8001370 <ADC_ScanState+0x2a8>)
 8001252:	701a      	strb	r2, [r3, #0]
	}

	ADC_GetRAWData(CHANNEL_ADC_V_MOTOR);												// Канал АЦП - напряжение питания мотора (среднее)
 8001254:	2000      	movs	r0, #0
 8001256:	f7ff ff01 	bl	800105c <ADC_GetRAWData>
	if (ADC_State.ADC_RAW < 4096)
 800125a:	4b45      	ldr	r3, [pc, #276]	; (8001370 <ADC_ScanState+0x2a8>)
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001262:	d21d      	bcs.n	80012a0 <ADC_ScanState+0x1d8>
	{
		ADC_State.V_IN_MOTOR_value_volts 	= ADC_State.ADC_RAW * (ADC_REF_VOLTAGE_DEFAULT / 4096) * DIVIDER_ADC_V_MOTOR;
 8001264:	4b42      	ldr	r3, [pc, #264]	; (8001370 <ADC_ScanState+0x2a8>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff f8dd 	bl	8000428 <__aeabi_ui2d>
 800126e:	a334      	add	r3, pc, #208	; (adr r3, 8001340 <ADC_ScanState+0x278>)
 8001270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001274:	f7ff f952 	bl	800051c <__aeabi_dmul>
 8001278:	4603      	mov	r3, r0
 800127a:	460c      	mov	r4, r1
 800127c:	4618      	mov	r0, r3
 800127e:	4621      	mov	r1, r4
 8001280:	a335      	add	r3, pc, #212	; (adr r3, 8001358 <ADC_ScanState+0x290>)
 8001282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001286:	f7ff f949 	bl	800051c <__aeabi_dmul>
 800128a:	4603      	mov	r3, r0
 800128c:	460c      	mov	r4, r1
 800128e:	4a38      	ldr	r2, [pc, #224]	; (8001370 <ADC_ScanState+0x2a8>)
 8001290:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

		ADC_State.DataReady++;
 8001294:	4b36      	ldr	r3, [pc, #216]	; (8001370 <ADC_ScanState+0x2a8>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	3301      	adds	r3, #1
 800129a:	b2da      	uxtb	r2, r3
 800129c:	4b34      	ldr	r3, [pc, #208]	; (8001370 <ADC_ScanState+0x2a8>)
 800129e:	701a      	strb	r2, [r3, #0]
	}

	ADC_GetRAWData(CHANNEL_ADC_I_IN_12V);												// Канал АЦП - общий входной ток
 80012a0:	2017      	movs	r0, #23
 80012a2:	f7ff fedb 	bl	800105c <ADC_GetRAWData>
	if (ADC_State.ADC_RAW < 4096)
 80012a6:	4b32      	ldr	r3, [pc, #200]	; (8001370 <ADC_ScanState+0x2a8>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012ae:	d21d      	bcs.n	80012ec <ADC_ScanState+0x224>
	{
		ADC_State.I_IN_12V_value_amperes 	= ADC_State.ADC_RAW * (ADC_REF_VOLTAGE_DEFAULT / 4096) * DIVIDER_ADC_I_IN_12V;
 80012b0:	4b2f      	ldr	r3, [pc, #188]	; (8001370 <ADC_ScanState+0x2a8>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff f8b7 	bl	8000428 <__aeabi_ui2d>
 80012ba:	a321      	add	r3, pc, #132	; (adr r3, 8001340 <ADC_ScanState+0x278>)
 80012bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c0:	f7ff f92c 	bl	800051c <__aeabi_dmul>
 80012c4:	4603      	mov	r3, r0
 80012c6:	460c      	mov	r4, r1
 80012c8:	4618      	mov	r0, r3
 80012ca:	4621      	mov	r1, r4
 80012cc:	a324      	add	r3, pc, #144	; (adr r3, 8001360 <ADC_ScanState+0x298>)
 80012ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d2:	f7ff f923 	bl	800051c <__aeabi_dmul>
 80012d6:	4603      	mov	r3, r0
 80012d8:	460c      	mov	r4, r1
 80012da:	4a25      	ldr	r2, [pc, #148]	; (8001370 <ADC_ScanState+0x2a8>)
 80012dc:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

		ADC_State.DataReady++;
 80012e0:	4b23      	ldr	r3, [pc, #140]	; (8001370 <ADC_ScanState+0x2a8>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	3301      	adds	r3, #1
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	4b21      	ldr	r3, [pc, #132]	; (8001370 <ADC_ScanState+0x2a8>)
 80012ea:	701a      	strb	r2, [r3, #0]
	}

	ADC_GetRAWData(CHANNEL_ADC_I_MOTOR);												// Канал АЦП - ток мотора
 80012ec:	2018      	movs	r0, #24
 80012ee:	f7ff feb5 	bl	800105c <ADC_GetRAWData>
	if (ADC_State.ADC_RAW < 4096)
 80012f2:	4b1f      	ldr	r3, [pc, #124]	; (8001370 <ADC_ScanState+0x2a8>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012fa:	d21d      	bcs.n	8001338 <ADC_ScanState+0x270>
	{
		ADC_State.I_IN_MOTOR_value_amperes 	= ADC_State.ADC_RAW * (ADC_REF_VOLTAGE_DEFAULT / 4096) * DIVIDER_ADC_I_MOTOR;
 80012fc:	4b1c      	ldr	r3, [pc, #112]	; (8001370 <ADC_ScanState+0x2a8>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff f891 	bl	8000428 <__aeabi_ui2d>
 8001306:	a30e      	add	r3, pc, #56	; (adr r3, 8001340 <ADC_ScanState+0x278>)
 8001308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130c:	f7ff f906 	bl	800051c <__aeabi_dmul>
 8001310:	4603      	mov	r3, r0
 8001312:	460c      	mov	r4, r1
 8001314:	4618      	mov	r0, r3
 8001316:	4621      	mov	r1, r4
 8001318:	a313      	add	r3, pc, #76	; (adr r3, 8001368 <ADC_ScanState+0x2a0>)
 800131a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131e:	f7ff f8fd 	bl	800051c <__aeabi_dmul>
 8001322:	4603      	mov	r3, r0
 8001324:	460c      	mov	r4, r1
 8001326:	4a12      	ldr	r2, [pc, #72]	; (8001370 <ADC_ScanState+0x2a8>)
 8001328:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48

		ADC_State.DataReady++;
 800132c:	4b10      	ldr	r3, [pc, #64]	; (8001370 <ADC_ScanState+0x2a8>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	3301      	adds	r3, #1
 8001332:	b2da      	uxtb	r2, r3
 8001334:	4b0e      	ldr	r3, [pc, #56]	; (8001370 <ADC_ScanState+0x2a8>)
 8001336:	701a      	strb	r2, [r3, #0]
	}

}
 8001338:	bf00      	nop
 800133a:	bd98      	pop	{r3, r4, r7, pc}
 800133c:	f3af 8000 	nop.w
 8001340:	66666666 	.word	0x66666666
 8001344:	3f4a6666 	.word	0x3f4a6666
 8001348:	66666666 	.word	0x66666666
 800134c:	400a6666 	.word	0x400a6666
 8001350:	70a3d70a 	.word	0x70a3d70a
 8001354:	40180a3d 	.word	0x40180a3d
 8001358:	51eb851f 	.word	0x51eb851f
 800135c:	40181eb8 	.word	0x40181eb8
 8001360:	cccccccd 	.word	0xcccccccd
 8001364:	4010cccc 	.word	0x4010cccc
 8001368:	9999999a 	.word	0x9999999a
 800136c:	40099999 	.word	0x40099999
 8001370:	20008bb0 	.word	0x20008bb0
 8001374:	1ff800f8 	.word	0x1ff800f8
 8001378:	20008b50 	.word	0x20008b50
 800137c:	408f4000 	.word	0x408f4000
 8001380:	057619f1 	.word	0x057619f1
 8001384:	1ff800fa 	.word	0x1ff800fa
 8001388:	1ff800fe 	.word	0x1ff800fe
 800138c:	40590000 	.word	0x40590000
 8001390:	20008968 	.word	0x20008968

08001394 <BUZZER_Init>:

uint8_t			BUZZER_BuzzerState;														// состояние баззера (включен/выключен)

//======================================================================================
void BUZZER_Init(uint8_t state)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b090      	sub	sp, #64	; 0x40
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_GPIOA_CLK_ENABLE();
 800139e:	4b4e      	ldr	r3, [pc, #312]	; (80014d8 <BUZZER_Init+0x144>)
 80013a0:	69db      	ldr	r3, [r3, #28]
 80013a2:	4a4d      	ldr	r2, [pc, #308]	; (80014d8 <BUZZER_Init+0x144>)
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	61d3      	str	r3, [r2, #28]
 80013aa:	4b4b      	ldr	r3, [pc, #300]	; (80014d8 <BUZZER_Init+0x144>)
 80013ac:	69db      	ldr	r3, [r3, #28]
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	623b      	str	r3, [r7, #32]
 80013b4:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80013b6:	4b48      	ldr	r3, [pc, #288]	; (80014d8 <BUZZER_Init+0x144>)
 80013b8:	69db      	ldr	r3, [r3, #28]
 80013ba:	4a47      	ldr	r2, [pc, #284]	; (80014d8 <BUZZER_Init+0x144>)
 80013bc:	f043 0302 	orr.w	r3, r3, #2
 80013c0:	61d3      	str	r3, [r2, #28]
 80013c2:	4b45      	ldr	r3, [pc, #276]	; (80014d8 <BUZZER_Init+0x144>)
 80013c4:	69db      	ldr	r3, [r3, #28]
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	61fb      	str	r3, [r7, #28]
 80013cc:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80013ce:	4b42      	ldr	r3, [pc, #264]	; (80014d8 <BUZZER_Init+0x144>)
 80013d0:	69db      	ldr	r3, [r3, #28]
 80013d2:	4a41      	ldr	r2, [pc, #260]	; (80014d8 <BUZZER_Init+0x144>)
 80013d4:	f043 0304 	orr.w	r3, r3, #4
 80013d8:	61d3      	str	r3, [r2, #28]
 80013da:	4b3f      	ldr	r3, [pc, #252]	; (80014d8 <BUZZER_Init+0x144>)
 80013dc:	69db      	ldr	r3, [r3, #28]
 80013de:	f003 0304 	and.w	r3, r3, #4
 80013e2:	61bb      	str	r3, [r7, #24]
 80013e4:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80013e6:	4b3c      	ldr	r3, [pc, #240]	; (80014d8 <BUZZER_Init+0x144>)
 80013e8:	69db      	ldr	r3, [r3, #28]
 80013ea:	4a3b      	ldr	r2, [pc, #236]	; (80014d8 <BUZZER_Init+0x144>)
 80013ec:	f043 0308 	orr.w	r3, r3, #8
 80013f0:	61d3      	str	r3, [r2, #28]
 80013f2:	4b39      	ldr	r3, [pc, #228]	; (80014d8 <BUZZER_Init+0x144>)
 80013f4:	69db      	ldr	r3, [r3, #28]
 80013f6:	f003 0308 	and.w	r3, r3, #8
 80013fa:	617b      	str	r3, [r7, #20]
 80013fc:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80013fe:	4b36      	ldr	r3, [pc, #216]	; (80014d8 <BUZZER_Init+0x144>)
 8001400:	69db      	ldr	r3, [r3, #28]
 8001402:	4a35      	ldr	r2, [pc, #212]	; (80014d8 <BUZZER_Init+0x144>)
 8001404:	f043 0310 	orr.w	r3, r3, #16
 8001408:	61d3      	str	r3, [r2, #28]
 800140a:	4b33      	ldr	r3, [pc, #204]	; (80014d8 <BUZZER_Init+0x144>)
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	f003 0310 	and.w	r3, r3, #16
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001416:	4b30      	ldr	r3, [pc, #192]	; (80014d8 <BUZZER_Init+0x144>)
 8001418:	69db      	ldr	r3, [r3, #28]
 800141a:	4a2f      	ldr	r2, [pc, #188]	; (80014d8 <BUZZER_Init+0x144>)
 800141c:	f043 0320 	orr.w	r3, r3, #32
 8001420:	61d3      	str	r3, [r2, #28]
 8001422:	4b2d      	ldr	r3, [pc, #180]	; (80014d8 <BUZZER_Init+0x144>)
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	f003 0320 	and.w	r3, r3, #32
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]

	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 800142e:	2200      	movs	r2, #0
 8001430:	2120      	movs	r1, #32
 8001432:	482a      	ldr	r0, [pc, #168]	; (80014dc <BUZZER_Init+0x148>)
 8001434:	f006 fe41 	bl	80080ba <HAL_GPIO_WritePin>

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001438:	4b27      	ldr	r3, [pc, #156]	; (80014d8 <BUZZER_Init+0x144>)
 800143a:	69db      	ldr	r3, [r3, #28]
 800143c:	4a26      	ldr	r2, [pc, #152]	; (80014d8 <BUZZER_Init+0x144>)
 800143e:	f043 0301 	orr.w	r3, r3, #1
 8001442:	61d3      	str	r3, [r2, #28]
 8001444:	4b24      	ldr	r3, [pc, #144]	; (80014d8 <BUZZER_Init+0x144>)
 8001446:	69db      	ldr	r3, [r3, #28]
 8001448:	f003 0301 	and.w	r3, r3, #1
 800144c:	60bb      	str	r3, [r7, #8]
 800144e:	68bb      	ldr	r3, [r7, #8]
	GPIO_InitStruct.Pin 		= BUZZER_Pin;
 8001450:	2320      	movs	r3, #32
 8001452:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode 		= GPIO_MODE_OUTPUT_PP;
 8001454:	2301      	movs	r3, #1
 8001456:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull 		= GPIO_PULLDOWN;
 8001458:	2302      	movs	r3, #2
 800145a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed 		= GPIO_SPEED_FREQ_LOW;
 800145c:	2300      	movs	r3, #0
 800145e:	63bb      	str	r3, [r7, #56]	; 0x38


	HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001460:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001464:	4619      	mov	r1, r3
 8001466:	481d      	ldr	r0, [pc, #116]	; (80014dc <BUZZER_Init+0x148>)
 8001468:	f006 fc82 	bl	8007d70 <HAL_GPIO_Init>
	BUZZER_BuzzerState = state;
 800146c:	4a1c      	ldr	r2, [pc, #112]	; (80014e0 <BUZZER_Init+0x14c>)
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	7013      	strb	r3, [r2, #0]


	TIM_MasterConfigTypeDef sMasterConfig;

	htim6.Instance 				= TIM6;
 8001472:	4b1c      	ldr	r3, [pc, #112]	; (80014e4 <BUZZER_Init+0x150>)
 8001474:	4a1c      	ldr	r2, [pc, #112]	; (80014e8 <BUZZER_Init+0x154>)
 8001476:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler 		= 32;
 8001478:	4b1a      	ldr	r3, [pc, #104]	; (80014e4 <BUZZER_Init+0x150>)
 800147a:	2220      	movs	r2, #32
 800147c:	605a      	str	r2, [r3, #4]
	htim6.Init.Period 			= BUZZER_HALF_PERIOD_TIM;
 800147e:	4b19      	ldr	r3, [pc, #100]	; (80014e4 <BUZZER_Init+0x150>)
 8001480:	2279      	movs	r2, #121	; 0x79
 8001482:	60da      	str	r2, [r3, #12]
	htim6.Init.CounterMode 		= TIM_COUNTERMODE_UP;
 8001484:	4b17      	ldr	r3, [pc, #92]	; (80014e4 <BUZZER_Init+0x150>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800148a:	4b16      	ldr	r3, [pc, #88]	; (80014e4 <BUZZER_Init+0x150>)
 800148c:	2200      	movs	r2, #0
 800148e:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001490:	4814      	ldr	r0, [pc, #80]	; (80014e4 <BUZZER_Init+0x150>)
 8001492:	f009 fb41 	bl	800ab18 <HAL_TIM_Base_Init>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d002      	beq.n	80014a2 <BUZZER_Init+0x10e>
	{
		Error_Handler(4);
 800149c:	2004      	movs	r0, #4
 800149e:	f002 fac5 	bl	8003a2c <Error_Handler>
	}

	sMasterConfig.MasterOutputTrigger 	= TIM_TRGO_RESET;
 80014a2:	2300      	movs	r3, #0
 80014a4:	627b      	str	r3, [r7, #36]	; 0x24
	sMasterConfig.MasterSlaveMode 		= TIM_MASTERSLAVEMODE_DISABLE;
 80014a6:	2300      	movs	r3, #0
 80014a8:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80014aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ae:	4619      	mov	r1, r3
 80014b0:	480c      	ldr	r0, [pc, #48]	; (80014e4 <BUZZER_Init+0x150>)
 80014b2:	f00a fd9d 	bl	800bff0 <HAL_TIMEx_MasterConfigSynchronization>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d002      	beq.n	80014c2 <BUZZER_Init+0x12e>
	{
		Error_Handler(4);
 80014bc:	2004      	movs	r0, #4
 80014be:	f002 fab5 	bl	8003a2c <Error_Handler>
	}

	HAL_TIM_Base_MspInit(&htim6);														// Настройка прерываний для таймера
 80014c2:	4808      	ldr	r0, [pc, #32]	; (80014e4 <BUZZER_Init+0x150>)
 80014c4:	f001 fdfc 	bl	80030c0 <HAL_TIM_Base_MspInit>

	HAL_TIM_MspPostInit(&htim6);
 80014c8:	4806      	ldr	r0, [pc, #24]	; (80014e4 <BUZZER_Init+0x150>)
 80014ca:	f001 fe9b 	bl	8003204 <HAL_TIM_MspPostInit>

}
 80014ce:	bf00      	nop
 80014d0:	3740      	adds	r7, #64	; 0x40
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40020400 	.word	0x40020400
 80014e0:	20008c00 	.word	0x20008c00
 80014e4:	20008f0c 	.word	0x20008f0c
 80014e8:	40001000 	.word	0x40001000

080014ec <BUZZER_Beep>:
//======================================================================================
void BUZZER_Beep(void) 																	// Generates one short beep in RealMode with stupid waiting
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
//	htim6.Init.Period = 100;
//	HAL_TIM_Base_Init(&htim6);
	if (BUZZER_BuzzerState == BUZZER_STSTE_ON)
 80014f2:	4b0e      	ldr	r3, [pc, #56]	; (800152c <BUZZER_Beep+0x40>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d113      	bne.n	8001522 <BUZZER_Beep+0x36>
	{
		uint16_t len = BUZZER_NUM_HALF_PERIOD_NORM;
 80014fa:	2346      	movs	r3, #70	; 0x46
 80014fc:	80fb      	strh	r3, [r7, #6]
		while (len--)
 80014fe:	e006      	b.n	800150e <BUZZER_Beep+0x22>
		{
			BUZZER_INV;
 8001500:	2120      	movs	r1, #32
 8001502:	480b      	ldr	r0, [pc, #44]	; (8001530 <BUZZER_Beep+0x44>)
 8001504:	f006 fdf1 	bl	80080ea <HAL_GPIO_TogglePin>
			HAL_Delay(BUZZER_HALF_PERIOD);
 8001508:	2001      	movs	r0, #1
 800150a:	f005 fb59 	bl	8006bc0 <HAL_Delay>
		while (len--)
 800150e:	88fb      	ldrh	r3, [r7, #6]
 8001510:	1e5a      	subs	r2, r3, #1
 8001512:	80fa      	strh	r2, [r7, #6]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d1f3      	bne.n	8001500 <BUZZER_Beep+0x14>
		}
		BUZZER_OFF;
 8001518:	2200      	movs	r2, #0
 800151a:	2120      	movs	r1, #32
 800151c:	4804      	ldr	r0, [pc, #16]	; (8001530 <BUZZER_Beep+0x44>)
 800151e:	f006 fdcc 	bl	80080ba <HAL_GPIO_WritePin>
	}
}
 8001522:	bf00      	nop
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20008c00 	.word	0x20008c00
 8001530:	40020400 	.word	0x40020400

08001534 <BUZZER_BeepTIM>:
//======================================================================================
void BUZZER_BeepTIM(void) 																// Generates one short beep under RTOS
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
	if (BUZZER_BuzzerState == BUZZER_STSTE_ON)
 8001538:	4b09      	ldr	r3, [pc, #36]	; (8001560 <BUZZER_BeepTIM+0x2c>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d10d      	bne.n	800155c <BUZZER_BeepTIM+0x28>
	{
		HAL_TIM_Base_Start_IT(&htim6);													// Запуск тааймера, на обработчике состояния таймера - смена состояния пина баззера
 8001540:	4808      	ldr	r0, [pc, #32]	; (8001564 <BUZZER_BeepTIM+0x30>)
 8001542:	f009 fb91 	bl	800ac68 <HAL_TIM_Base_Start_IT>
		osDelay(BUZZER_NUM_HALF_PERIOD_NORM);											// если задержка через планировщик RTOS (минимум 1мс)
 8001546:	2046      	movs	r0, #70	; 0x46
 8001548:	f00f fed6 	bl	80112f8 <osDelay>
	//	HAL_Delay(BUZZER_NUM_HALF_PERIOD_NORM);											// если задержка через HAL (минимум 1мс)
		HAL_TIM_Base_Stop_IT(&htim6);
 800154c:	4805      	ldr	r0, [pc, #20]	; (8001564 <BUZZER_BeepTIM+0x30>)
 800154e:	f009 fbdd 	bl	800ad0c <HAL_TIM_Base_Stop_IT>
		BUZZER_OFF;
 8001552:	2200      	movs	r2, #0
 8001554:	2120      	movs	r1, #32
 8001556:	4804      	ldr	r0, [pc, #16]	; (8001568 <BUZZER_BeepTIM+0x34>)
 8001558:	f006 fdaf 	bl	80080ba <HAL_GPIO_WritePin>
	}
}
 800155c:	bf00      	nop
 800155e:	bd80      	pop	{r7, pc}
 8001560:	20008c00 	.word	0x20008c00
 8001564:	20008f0c 	.word	0x20008f0c
 8001568:	40020400 	.word	0x40020400

0800156c <BUZZER_Beep_TickTIM>:
		BUZZER_OFF;
	}
}
//======================================================================================
void BUZZER_Beep_TickTIM(void)															// Generates one very-very short beep
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
	if (BUZZER_BuzzerState == BUZZER_STSTE_ON)
 8001570:	4b09      	ldr	r3, [pc, #36]	; (8001598 <BUZZER_Beep_TickTIM+0x2c>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d10d      	bne.n	8001594 <BUZZER_Beep_TickTIM+0x28>
	{
		HAL_TIM_Base_Start_IT(&htim6);													// Запуск тааймера, на обработчике состояния таймера - смена состояния пина баззера
 8001578:	4808      	ldr	r0, [pc, #32]	; (800159c <BUZZER_Beep_TickTIM+0x30>)
 800157a:	f009 fb75 	bl	800ac68 <HAL_TIM_Base_Start_IT>
		osDelay(BUZZER_NUM_HALF_PERIOD_SHORT/4);										// если задержка через планировщик RTOS (минимум 1мс)
 800157e:	200a      	movs	r0, #10
 8001580:	f00f feba 	bl	80112f8 <osDelay>
	//	HAL_Delay(BUZZER_NUM_HALF_PERIOD_SHORT/4);										// если задержка через HAL (минимум 1мс)
		HAL_TIM_Base_Stop_IT(&htim6);
 8001584:	4805      	ldr	r0, [pc, #20]	; (800159c <BUZZER_Beep_TickTIM+0x30>)
 8001586:	f009 fbc1 	bl	800ad0c <HAL_TIM_Base_Stop_IT>
		BUZZER_OFF;
 800158a:	2200      	movs	r2, #0
 800158c:	2120      	movs	r1, #32
 800158e:	4804      	ldr	r0, [pc, #16]	; (80015a0 <BUZZER_Beep_TickTIM+0x34>)
 8001590:	f006 fd93 	bl	80080ba <HAL_GPIO_WritePin>
	}
}
 8001594:	bf00      	nop
 8001596:	bd80      	pop	{r7, pc}
 8001598:	20008c00 	.word	0x20008c00
 800159c:	20008f0c 	.word	0x20008f0c
 80015a0:	40020400 	.word	0x40020400

080015a4 <MX_DAC_Init>:

DAC_HandleTypeDef DacHandle;

//======================================================================================
void MX_DAC_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80015aa:	463b      	mov	r3, r7
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  DacHandle.Instance = DAC;
 80015b2:	4b10      	ldr	r3, [pc, #64]	; (80015f4 <MX_DAC_Init+0x50>)
 80015b4:	4a10      	ldr	r2, [pc, #64]	; (80015f8 <MX_DAC_Init+0x54>)
 80015b6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&DacHandle) != HAL_OK)
 80015b8:	480e      	ldr	r0, [pc, #56]	; (80015f4 <MX_DAC_Init+0x50>)
 80015ba:	f006 f98a 	bl	80078d2 <HAL_DAC_Init>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d002      	beq.n	80015ca <MX_DAC_Init+0x26>
  {
    Error_Handler(3);
 80015c4:	2003      	movs	r0, #3
 80015c6:	f002 fa31 	bl	8003a2c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80015ca:	2300      	movs	r3, #0
 80015cc:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80015ce:	2300      	movs	r3, #0
 80015d0:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&DacHandle, &sConfig, DACx_CHANNEL) != HAL_OK)
 80015d2:	463b      	mov	r3, r7
 80015d4:	2200      	movs	r2, #0
 80015d6:	4619      	mov	r1, r3
 80015d8:	4806      	ldr	r0, [pc, #24]	; (80015f4 <MX_DAC_Init+0x50>)
 80015da:	f006 fa0f 	bl	80079fc <HAL_DAC_ConfigChannel>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d002      	beq.n	80015ea <MX_DAC_Init+0x46>
  {
    Error_Handler(3);
 80015e4:	2003      	movs	r0, #3
 80015e6:	f002 fa21 	bl	8003a2c <Error_Handler>
  }

}
 80015ea:	bf00      	nop
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20008c04 	.word	0x20008c04
 80015f8:	40007400 	.word	0x40007400

080015fc <HAL_DAC_MspInit>:
//======================================================================================
void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08a      	sub	sp, #40	; 0x28
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001604:	f107 0314 	add.w	r3, r7, #20
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
 8001612:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a15      	ldr	r2, [pc, #84]	; (8001670 <HAL_DAC_MspInit+0x74>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d123      	bne.n	8001666 <HAL_DAC_MspInit+0x6a>
  {
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800161e:	4b15      	ldr	r3, [pc, #84]	; (8001674 <HAL_DAC_MspInit+0x78>)
 8001620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001622:	4a14      	ldr	r2, [pc, #80]	; (8001674 <HAL_DAC_MspInit+0x78>)
 8001624:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001628:	6253      	str	r3, [r2, #36]	; 0x24
 800162a:	4b12      	ldr	r3, [pc, #72]	; (8001674 <HAL_DAC_MspInit+0x78>)
 800162c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001632:	613b      	str	r3, [r7, #16]
 8001634:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001636:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <HAL_DAC_MspInit+0x78>)
 8001638:	69db      	ldr	r3, [r3, #28]
 800163a:	4a0e      	ldr	r2, [pc, #56]	; (8001674 <HAL_DAC_MspInit+0x78>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	61d3      	str	r3, [r2, #28]
 8001642:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <HAL_DAC_MspInit+0x78>)
 8001644:	69db      	ldr	r3, [r3, #28]
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = DAC1__MOTOR_SPEED_Pin;
 800164e:	2310      	movs	r3, #16
 8001650:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001652:	2303      	movs	r3, #3
 8001654:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DAC1__MOTOR_SPEED_GPIO_Port, &GPIO_InitStruct);
 800165a:	f107 0314 	add.w	r3, r7, #20
 800165e:	4619      	mov	r1, r3
 8001660:	4805      	ldr	r0, [pc, #20]	; (8001678 <HAL_DAC_MspInit+0x7c>)
 8001662:	f006 fb85 	bl	8007d70 <HAL_GPIO_Init>

  }
}
 8001666:	bf00      	nop
 8001668:	3728      	adds	r7, #40	; 0x28
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40007400 	.word	0x40007400
 8001674:	40023800 	.word	0x40023800
 8001678:	40020000 	.word	0x40020000

0800167c <DAC_SetValue>:
    HAL_GPIO_DeInit(DAC1__MOTOR_SPEED_GPIO_Port, DAC1__MOTOR_SPEED_Pin);
  }
}
//======================================================================================
void DAC_SetValue(uint8_t AValue)														// Установка значения в ЦАП
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	71fb      	strb	r3, [r7, #7]
	if (HAL_DAC_SetValue(&DacHandle, DACx_CHANNEL, DAC_ALIGN_8B_R, (uint32_t)AValue) != HAL_OK)
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	2208      	movs	r2, #8
 800168a:	2100      	movs	r1, #0
 800168c:	480b      	ldr	r0, [pc, #44]	; (80016bc <DAC_SetValue+0x40>)
 800168e:	f006 f991 	bl	80079b4 <HAL_DAC_SetValue>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d002      	beq.n	800169e <DAC_SetValue+0x22>
	{
	  Error_Handler(21);//Setting value Error
 8001698:	2015      	movs	r0, #21
 800169a:	f002 f9c7 	bl	8003a2c <Error_Handler>
	}

	if (HAL_DAC_Start(&DacHandle, DACx_CHANNEL) != HAL_OK)
 800169e:	2100      	movs	r1, #0
 80016a0:	4806      	ldr	r0, [pc, #24]	; (80016bc <DAC_SetValue+0x40>)
 80016a2:	f006 f938 	bl	8007916 <HAL_DAC_Start>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d002      	beq.n	80016b2 <DAC_SetValue+0x36>
	{
	  Error_Handler(21);//Start Error
 80016ac:	2015      	movs	r0, #21
 80016ae:	f002 f9bd 	bl	8003a2c <Error_Handler>
	}

}
 80016b2:	bf00      	nop
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20008c04 	.word	0x20008c04

080016c0 <MX_DMA_Init>:
#include <DMA.h>

//======================================================================================
void MX_DMA_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016c6:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <MX_DMA_Init+0x38>)
 80016c8:	69db      	ldr	r3, [r3, #28]
 80016ca:	4a0b      	ldr	r2, [pc, #44]	; (80016f8 <MX_DMA_Init+0x38>)
 80016cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016d0:	61d3      	str	r3, [r2, #28]
 80016d2:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <MX_DMA_Init+0x38>)
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016da:	607b      	str	r3, [r7, #4]
 80016dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80016de:	2200      	movs	r2, #0
 80016e0:	2100      	movs	r1, #0
 80016e2:	200f      	movs	r0, #15
 80016e4:	f006 f8cb 	bl	800787e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80016e8:	200f      	movs	r0, #15
 80016ea:	f006 f8e4 	bl	80078b6 <HAL_NVIC_EnableIRQ>

}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40023800 	.word	0x40023800

080016fc <DS18B20_Init>:

#include "main.h"
#include "cmsis_os.h" 																	// для osDelay(();
//=======================================================================================
void  DS18B20_Init(void)																// Инициализация термодатчиков
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08c      	sub	sp, #48	; 0x30
 8001700:	af00      	add	r7, sp, #0
	// Настройка GPIO
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001702:	f107 031c 	add.w	r3, r7, #28
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]
 800170c:	609a      	str	r2, [r3, #8]
 800170e:	60da      	str	r2, [r3, #12]
 8001710:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001712:	4b42      	ldr	r3, [pc, #264]	; (800181c <DS18B20_Init+0x120>)
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	4a41      	ldr	r2, [pc, #260]	; (800181c <DS18B20_Init+0x120>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	61d3      	str	r3, [r2, #28]
 800171e:	4b3f      	ldr	r3, [pc, #252]	; (800181c <DS18B20_Init+0x120>)
 8001720:	69db      	ldr	r3, [r3, #28]
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	61bb      	str	r3, [r7, #24]
 8001728:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800172a:	4b3c      	ldr	r3, [pc, #240]	; (800181c <DS18B20_Init+0x120>)
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	4a3b      	ldr	r2, [pc, #236]	; (800181c <DS18B20_Init+0x120>)
 8001730:	f043 0302 	orr.w	r3, r3, #2
 8001734:	61d3      	str	r3, [r2, #28]
 8001736:	4b39      	ldr	r3, [pc, #228]	; (800181c <DS18B20_Init+0x120>)
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	617b      	str	r3, [r7, #20]
 8001740:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001742:	4b36      	ldr	r3, [pc, #216]	; (800181c <DS18B20_Init+0x120>)
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	4a35      	ldr	r2, [pc, #212]	; (800181c <DS18B20_Init+0x120>)
 8001748:	f043 0304 	orr.w	r3, r3, #4
 800174c:	61d3      	str	r3, [r2, #28]
 800174e:	4b33      	ldr	r3, [pc, #204]	; (800181c <DS18B20_Init+0x120>)
 8001750:	69db      	ldr	r3, [r3, #28]
 8001752:	f003 0304 	and.w	r3, r3, #4
 8001756:	613b      	str	r3, [r7, #16]
 8001758:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800175a:	4b30      	ldr	r3, [pc, #192]	; (800181c <DS18B20_Init+0x120>)
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	4a2f      	ldr	r2, [pc, #188]	; (800181c <DS18B20_Init+0x120>)
 8001760:	f043 0308 	orr.w	r3, r3, #8
 8001764:	61d3      	str	r3, [r2, #28]
 8001766:	4b2d      	ldr	r3, [pc, #180]	; (800181c <DS18B20_Init+0x120>)
 8001768:	69db      	ldr	r3, [r3, #28]
 800176a:	f003 0308 	and.w	r3, r3, #8
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001772:	4b2a      	ldr	r3, [pc, #168]	; (800181c <DS18B20_Init+0x120>)
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	4a29      	ldr	r2, [pc, #164]	; (800181c <DS18B20_Init+0x120>)
 8001778:	f043 0310 	orr.w	r3, r3, #16
 800177c:	61d3      	str	r3, [r2, #28]
 800177e:	4b27      	ldr	r3, [pc, #156]	; (800181c <DS18B20_Init+0x120>)
 8001780:	69db      	ldr	r3, [r3, #28]
 8001782:	f003 0310 	and.w	r3, r3, #16
 8001786:	60bb      	str	r3, [r7, #8]
 8001788:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800178a:	4b24      	ldr	r3, [pc, #144]	; (800181c <DS18B20_Init+0x120>)
 800178c:	69db      	ldr	r3, [r3, #28]
 800178e:	4a23      	ldr	r2, [pc, #140]	; (800181c <DS18B20_Init+0x120>)
 8001790:	f043 0320 	orr.w	r3, r3, #32
 8001794:	61d3      	str	r3, [r2, #28]
 8001796:	4b21      	ldr	r3, [pc, #132]	; (800181c <DS18B20_Init+0x120>)
 8001798:	69db      	ldr	r3, [r3, #28]
 800179a:	f003 0320 	and.w	r3, r3, #32
 800179e:	607b      	str	r3, [r7, #4]
 80017a0:	687b      	ldr	r3, [r7, #4]

	HAL_GPIO_WritePin(TEMP_AIR_1W_GPIO_Port, 		TEMP_AIR_1W_Pin, 		GPIO_PIN_SET);
 80017a2:	2201      	movs	r2, #1
 80017a4:	2101      	movs	r1, #1
 80017a6:	481e      	ldr	r0, [pc, #120]	; (8001820 <DS18B20_Init+0x124>)
 80017a8:	f006 fc87 	bl	80080ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TEMP_MOTOR_1W_GPIO_Port, 		TEMP_MOTOR_1W_Pin, 		GPIO_PIN_SET);
 80017ac:	2201      	movs	r2, #1
 80017ae:	2102      	movs	r1, #2
 80017b0:	481b      	ldr	r0, [pc, #108]	; (8001820 <DS18B20_Init+0x124>)
 80017b2:	f006 fc82 	bl	80080ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TEMP_DRIVER_1W_GPIO_Port, 	TEMP_DRIVER_1W_Pin, 	GPIO_PIN_SET);
 80017b6:	2201      	movs	r2, #1
 80017b8:	2104      	movs	r1, #4
 80017ba:	4819      	ldr	r0, [pc, #100]	; (8001820 <DS18B20_Init+0x124>)
 80017bc:	f006 fc7d 	bl	80080ba <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = TEMP_AIR_1W_Pin;
 80017c0:	2301      	movs	r3, #1
 80017c2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c4:	2301      	movs	r3, #1
 80017c6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017cc:	2303      	movs	r3, #3
 80017ce:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(TEMP_AIR_1W_GPIO_Port, &GPIO_InitStruct);
 80017d0:	f107 031c 	add.w	r3, r7, #28
 80017d4:	4619      	mov	r1, r3
 80017d6:	4812      	ldr	r0, [pc, #72]	; (8001820 <DS18B20_Init+0x124>)
 80017d8:	f006 faca 	bl	8007d70 <HAL_GPIO_Init>


	GPIO_InitStruct.Pin = TEMP_MOTOR_1W_Pin;
 80017dc:	2302      	movs	r3, #2
 80017de:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e0:	2301      	movs	r3, #1
 80017e2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e8:	2303      	movs	r3, #3
 80017ea:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(TEMP_MOTOR_1W_GPIO_Port, &GPIO_InitStruct);
 80017ec:	f107 031c 	add.w	r3, r7, #28
 80017f0:	4619      	mov	r1, r3
 80017f2:	480b      	ldr	r0, [pc, #44]	; (8001820 <DS18B20_Init+0x124>)
 80017f4:	f006 fabc 	bl	8007d70 <HAL_GPIO_Init>


	GPIO_InitStruct.Pin = TEMP_DRIVER_1W_Pin;
 80017f8:	2304      	movs	r3, #4
 80017fa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017fc:	2301      	movs	r3, #1
 80017fe:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001804:	2303      	movs	r3, #3
 8001806:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(TEMP_DRIVER_1W_GPIO_Port, &GPIO_InitStruct);
 8001808:	f107 031c 	add.w	r3, r7, #28
 800180c:	4619      	mov	r1, r3
 800180e:	4804      	ldr	r0, [pc, #16]	; (8001820 <DS18B20_Init+0x124>)
 8001810:	f006 faae 	bl	8007d70 <HAL_GPIO_Init>
}
 8001814:	bf00      	nop
 8001816:	3730      	adds	r7, #48	; 0x30
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	40023800 	.word	0x40023800
 8001820:	40020400 	.word	0x40020400

08001824 <DS18B20_ConfigPinToRead>:
//=======================================================================================
void  DS18B20_ConfigPinToRead(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)					// Сконфигурировать GPIO пин как вход на чтение
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b088      	sub	sp, #32
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	460b      	mov	r3, r1
 800182e:	807b      	strh	r3, [r7, #2]
	// Настройка GPIO
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001830:	f107 030c 	add.w	r3, r7, #12
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin  = GPIO_Pin;
 8001840:	887b      	ldrh	r3, [r7, #2]
 8001842:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001844:	2300      	movs	r3, #0
 8001846:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001848:	f107 030c 	add.w	r3, r7, #12
 800184c:	4619      	mov	r1, r3
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f006 fa8e 	bl	8007d70 <HAL_GPIO_Init>
}
 8001854:	bf00      	nop
 8001856:	3720      	adds	r7, #32
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <DS18B20_ConfigPinToWrite>:
//=======================================================================================
void  DS18B20_ConfigPinToWrite(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)					// Сконфигурировать GPIO пин как выход на запись
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b088      	sub	sp, #32
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	460b      	mov	r3, r1
 8001866:	807b      	strh	r3, [r7, #2]
	// Настройка GPIO
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001868:	f107 030c 	add.w	r3, r7, #12
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin  = GPIO_Pin;
 8001878:	887b      	ldrh	r3, [r7, #2]
 800187a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187c:	2301      	movs	r3, #1
 800187e:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001880:	f107 030c 	add.w	r3, r7, #12
 8001884:	4619      	mov	r1, r3
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f006 fa72 	bl	8007d70 <HAL_GPIO_Init>
}
 800188c:	bf00      	nop
 800188e:	3720      	adds	r7, #32
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <DS18B20_ResetN>:

//=======================================================================================
// Транспортный уровень 1-Wire уровень программно:
//=======================================================================================
uint8_t DS18B20_ResetN(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)							// Сделать RESET на 1-Wire линии
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	460b      	mov	r3, r1
 800189e:	807b      	strh	r3, [r7, #2]
	uint8_t ret = 1;																	// Код возврата (0=Ок, 1=Ошибка)
 80018a0:	2301      	movs	r3, #1
 80018a2:	73fb      	strb	r3, [r7, #15]
	DS18B20_ConfigPinToWrite(GPIOx, GPIO_Pin);											// переключить порт в режим выхода
 80018a4:	887b      	ldrh	r3, [r7, #2]
 80018a6:	4619      	mov	r1, r3
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f7ff ffd7 	bl	800185c <DS18B20_ConfigPinToWrite>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018ae:	b672      	cpsid	i

	__disable_irq(); 																	// Глобально запретить все прерывания
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);									// Опустить линию ВНИЗ и подождать 480 мкс
 80018b0:	887b      	ldrh	r3, [r7, #2]
 80018b2:	2200      	movs	r2, #0
 80018b4:	4619      	mov	r1, r3
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f006 fbff 	bl	80080ba <HAL_GPIO_WritePin>
	Delay_us(480);
 80018bc:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80018c0:	f001 fcfe 	bl	80032c0 <Delay_us>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);									// Освобождаем линию ВВЕРХ и ждем 60 мкс
 80018c4:	887b      	ldrh	r3, [r7, #2]
 80018c6:	2201      	movs	r2, #1
 80018c8:	4619      	mov	r1, r3
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f006 fbf5 	bl	80080ba <HAL_GPIO_WritePin>
	DS18B20_ConfigPinToRead(GPIOx, GPIO_Pin);											// переключить порт в режим входа
 80018d0:	887b      	ldrh	r3, [r7, #2]
 80018d2:	4619      	mov	r1, r3
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f7ff ffa5 	bl	8001824 <DS18B20_ConfigPinToRead>
	Delay_us(60);
 80018da:	203c      	movs	r0, #60	; 0x3c
 80018dc:	f001 fcf0 	bl	80032c0 <Delay_us>
	ret = HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);											// Считываем состояние линии и ждем завершения 420 мкс
 80018e0:	887b      	ldrh	r3, [r7, #2]
 80018e2:	4619      	mov	r1, r3
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f006 fbd1 	bl	800808c <HAL_GPIO_ReadPin>
 80018ea:	4603      	mov	r3, r0
 80018ec:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 80018ee:	b662      	cpsie	i
	__enable_irq();  																	// Глобально разрешить обратно все прерывания

	Delay_us(420);
 80018f0:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80018f4:	f001 fce4 	bl	80032c0 <Delay_us>
	return ret;
 80018f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <DS18B20_Write_BitN>:
//=======================================================================================
void DS18B20_Write_BitN(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState) // Отправка 1 бита в 1-Wire
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b082      	sub	sp, #8
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
 800190a:	460b      	mov	r3, r1
 800190c:	807b      	strh	r3, [r7, #2]
 800190e:	4613      	mov	r3, r2
 8001910:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);									// Опустить линию ВНИЗ и подождать 1 мкс
 8001912:	887b      	ldrh	r3, [r7, #2]
 8001914:	2200      	movs	r2, #0
 8001916:	4619      	mov	r1, r3
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f006 fbce 	bl	80080ba <HAL_GPIO_WritePin>
	Delay_us(1);
 800191e:	2001      	movs	r0, #1
 8001920:	f001 fcce 	bl	80032c0 <Delay_us>
	if (PinState == GPIO_PIN_SET)														// Если нужно записать 1
 8001924:	787b      	ldrb	r3, [r7, #1]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d105      	bne.n	8001936 <DS18B20_Write_BitN+0x34>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);								// 		отпускаем линию ВВЕРХ
 800192a:	887b      	ldrh	r3, [r7, #2]
 800192c:	2201      	movs	r2, #1
 800192e:	4619      	mov	r1, r3
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f006 fbc2 	bl	80080ba <HAL_GPIO_WritePin>
	else																				// 		продолжаем держать линию ВНИЗу и ждем  60 мкс
	{
	}
	Delay_us(60);
 8001936:	203c      	movs	r0, #60	; 0x3c
 8001938:	f001 fcc2 	bl	80032c0 <Delay_us>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);									// 		отпускаем линию ВВЕРХ
 800193c:	887b      	ldrh	r3, [r7, #2]
 800193e:	2201      	movs	r2, #1
 8001940:	4619      	mov	r1, r3
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f006 fbb9 	bl	80080ba <HAL_GPIO_WritePin>
}
 8001948:	bf00      	nop
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <DS18B20_Write_ByteN>:
//=======================================================================================
void DS18B20_Write_ByteN(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint8_t byte) 			// Отправка 1 байта в 1-Wire
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	460b      	mov	r3, r1
 800195a:	807b      	strh	r3, [r7, #2]
 800195c:	4613      	mov	r3, r2
 800195e:	707b      	strb	r3, [r7, #1]
	uint8_t i = 8;
 8001960:	2308      	movs	r3, #8
 8001962:	73fb      	strb	r3, [r7, #15]
	uint8_t bit = 0;
 8001964:	2300      	movs	r3, #0
 8001966:	73bb      	strb	r3, [r7, #14]
	DS18B20_ConfigPinToWrite(GPIOx, GPIO_Pin);											// переключить порт в режим выхода
 8001968:	887b      	ldrh	r3, [r7, #2]
 800196a:	4619      	mov	r1, r3
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f7ff ff75 	bl	800185c <DS18B20_ConfigPinToWrite>
  __ASM volatile ("cpsid i" : : : "memory");
 8001972:	b672      	cpsid	i
	__disable_irq(); 																	// Глобально запретить все прерывания
	while (i--)
 8001974:	e00c      	b.n	8001990 <DS18B20_Write_ByteN+0x40>
	{
		bit = byte & 1;
 8001976:	787b      	ldrb	r3, [r7, #1]
 8001978:	f003 0301 	and.w	r3, r3, #1
 800197c:	73bb      	strb	r3, [r7, #14]
		DS18B20_Write_BitN(GPIOx, GPIO_Pin, bit);										// Пишем текущий бит
 800197e:	7bba      	ldrb	r2, [r7, #14]
 8001980:	887b      	ldrh	r3, [r7, #2]
 8001982:	4619      	mov	r1, r3
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f7ff ffbc 	bl	8001902 <DS18B20_Write_BitN>
		byte >>= 1;																		// и сдвигаем на 1 позицию вправо для записи следующего бита
 800198a:	787b      	ldrb	r3, [r7, #1]
 800198c:	085b      	lsrs	r3, r3, #1
 800198e:	707b      	strb	r3, [r7, #1]
	while (i--)
 8001990:	7bfb      	ldrb	r3, [r7, #15]
 8001992:	1e5a      	subs	r2, r3, #1
 8001994:	73fa      	strb	r2, [r7, #15]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d1ed      	bne.n	8001976 <DS18B20_Write_ByteN+0x26>
  __ASM volatile ("cpsie i" : : : "memory");
 800199a:	b662      	cpsie	i
	}
	__enable_irq();  																	// Глобально разрешить обратно все прерывания
}
 800199c:	bf00      	nop
 800199e:	3710      	adds	r7, #16
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <DS18B20_Read_BitN>:
//=======================================================================================
uint8_t DS18B20_Read_BitN(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) 						// Чтение 1 бита из 1-Wire
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	460b      	mov	r3, r1
 80019ae:	807b      	strh	r3, [r7, #2]
	uint8_t bit = 0;
 80019b0:	2300      	movs	r3, #0
 80019b2:	737b      	strb	r3, [r7, #13]
	uint16_t wait = 5;
 80019b4:	2305      	movs	r3, #5
 80019b6:	81fb      	strh	r3, [r7, #14]

	DS18B20_ConfigPinToWrite(GPIOx, GPIO_Pin);											// переключить порт в режим выхода
 80019b8:	887b      	ldrh	r3, [r7, #2]
 80019ba:	4619      	mov	r1, r3
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f7ff ff4d 	bl	800185c <DS18B20_ConfigPinToWrite>

	// запрос приема бита
//	__disable_irq(); 																	// Глобально запретить все прерывания здесь важна времянка и чтобы никто не отвлекал!!!
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);									// Опустить линию ВНИЗ и подождать 1 мкс
 80019c2:	887b      	ldrh	r3, [r7, #2]
 80019c4:	2200      	movs	r2, #0
 80019c6:	4619      	mov	r1, r3
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f006 fb76 	bl	80080ba <HAL_GPIO_WritePin>
//	Delay_us(1);
	while (wait--);																		// делаем так, т.к. вверхед на Delay_us(1); сильно больше необходимого интервала
 80019ce:	bf00      	nop
 80019d0:	89fb      	ldrh	r3, [r7, #14]
 80019d2:	1e5a      	subs	r2, r3, #1
 80019d4:	81fa      	strh	r2, [r7, #14]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1fa      	bne.n	80019d0 <DS18B20_Read_BitN+0x2c>

	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);									// Освобождаем линию ВВЕРХ
 80019da:	887b      	ldrh	r3, [r7, #2]
 80019dc:	2201      	movs	r2, #1
 80019de:	4619      	mov	r1, r3
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f006 fb6a 	bl	80080ba <HAL_GPIO_WritePin>

	// читаем ответа бита
	DS18B20_ConfigPinToRead(GPIOx, GPIO_Pin);											// переключить порт в режим входа
 80019e6:	887b      	ldrh	r3, [r7, #2]
 80019e8:	4619      	mov	r1, r3
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7ff ff1a 	bl	8001824 <DS18B20_ConfigPinToRead>
	//Delay_us(14);																		// и ждем 14 мкс
	//Delay_us(2);																		// Delay_us - не точно работает за счет оверхеда на HAL на таких задержках (при 14мкс пролетает мимо)

//	LED_LIGHT_SET;
	bit = HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);											// Считываем состояние линии
 80019f0:	887b      	ldrh	r3, [r7, #2]
 80019f2:	4619      	mov	r1, r3
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f006 fb49 	bl	800808c <HAL_GPIO_ReadPin>
 80019fa:	4603      	mov	r3, r0
 80019fc:	737b      	strb	r3, [r7, #13]
//	LED_LIGHT_RESE  T;

//	__enable_irq();  																	// Глобально разрешить обратно все прерывания

	Delay_us(50);																		// Ждем 45 мкс до конца, и возвращаем считанное значение
 80019fe:	2032      	movs	r0, #50	; 0x32
 8001a00:	f001 fc5e 	bl	80032c0 <Delay_us>

	return bit;
 8001a04:	7b7b      	ldrb	r3, [r7, #13]
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <DS18B20_Read_ByteN>:
//=======================================================================================
uint8_t DS18B20_Read_ByteN(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) 						// Чтение 1 байта из 1-Wire
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b084      	sub	sp, #16
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
 8001a16:	460b      	mov	r3, r1
 8001a18:	807b      	strh	r3, [r7, #2]
	uint8_t i = 8;
 8001a1a:	2308      	movs	r3, #8
 8001a1c:	73fb      	strb	r3, [r7, #15]
	uint8_t n = 0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a22:	b672      	cpsid	i

	__disable_irq(); 																	// Глобально запретить все прерывания
	while (i--)
 8001a24:	e00f      	b.n	8001a46 <DS18B20_Read_ByteN+0x38>
	{
		n >>= 1;																		// сдвигаем на 1 позицию вправо
 8001a26:	7bbb      	ldrb	r3, [r7, #14]
 8001a28:	085b      	lsrs	r3, r3, #1
 8001a2a:	73bb      	strb	r3, [r7, #14]
		n |= (DS18B20_Read_BitN(GPIOx, GPIO_Pin) << 7);									// и сохраняем считанное значение
 8001a2c:	887b      	ldrh	r3, [r7, #2]
 8001a2e:	4619      	mov	r1, r3
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f7ff ffb7 	bl	80019a4 <DS18B20_Read_BitN>
 8001a36:	4603      	mov	r3, r0
 8001a38:	01db      	lsls	r3, r3, #7
 8001a3a:	b25a      	sxtb	r2, r3
 8001a3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	b25b      	sxtb	r3, r3
 8001a44:	73bb      	strb	r3, [r7, #14]
	while (i--)
 8001a46:	7bfb      	ldrb	r3, [r7, #15]
 8001a48:	1e5a      	subs	r2, r3, #1
 8001a4a:	73fa      	strb	r2, [r7, #15]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1ea      	bne.n	8001a26 <DS18B20_Read_ByteN+0x18>
  __ASM volatile ("cpsie i" : : : "memory");
 8001a50:	b662      	cpsie	i
	}
	__enable_irq();  																	// Глобально разрешить обратно все прерывания

	return n;
 8001a52:	7bbb      	ldrb	r3, [r7, #14]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <DS18B20_Measure_Async_Start>:

//=======================================================================================
// High-level functions
//=======================================================================================
void DS18B20_Measure_Async_Start(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{	// Асинхронный старт измерения температуры чтобы в процессе можно было чем-то еще заняться.
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	460b      	mov	r3, r1
 8001a66:	807b      	strh	r3, [r7, #2]

	// Установка битности преобразования
	DS18B20_ResetN(GPIOx, GPIO_Pin);													// Сброс линии
 8001a68:	887b      	ldrh	r3, [r7, #2]
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f7ff ff11 	bl	8001894 <DS18B20_ResetN>
	DS18B20_Write_ByteN(GPIOx, GPIO_Pin, OW_CMD_SKIPROM);								// т.к. устройство только одно на линии - пропускаем проверку адреса
 8001a72:	887b      	ldrh	r3, [r7, #2]
 8001a74:	22cc      	movs	r2, #204	; 0xcc
 8001a76:	4619      	mov	r1, r3
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f7ff ff69 	bl	8001950 <DS18B20_Write_ByteN>
	DS18B20_Write_ByteN(GPIOx, GPIO_Pin, DS18B20_CMD_WSCRATCHPAD);						// пошлем команду о том что мы будем сейчас писать данные в ScratchPad (3 байта)
 8001a7e:	887b      	ldrh	r3, [r7, #2]
 8001a80:	224e      	movs	r2, #78	; 0x4e
 8001a82:	4619      	mov	r1, r3
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f7ff ff63 	bl	8001950 <DS18B20_Write_ByteN>
	DS18B20_Write_ByteN(GPIOx, GPIO_Pin, 0);											// запись регистра Th (верхний порог аларма, здесь нам не нужен)
 8001a8a:	887b      	ldrh	r3, [r7, #2]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	4619      	mov	r1, r3
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f7ff ff5d 	bl	8001950 <DS18B20_Write_ByteN>
	DS18B20_Write_ByteN(GPIOx, GPIO_Pin, 0);											// запись регистра Tl (нижний порог аларма, здесь нам не нужен)
 8001a96:	887b      	ldrh	r3, [r7, #2]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f7ff ff57 	bl	8001950 <DS18B20_Write_ByteN>
	DS18B20_Write_ByteN(GPIOx, GPIO_Pin, DS18B20_RES_12BIT);							// запись регистра конфигурации (разрядность преобразования температуры)
 8001aa2:	887b      	ldrh	r3, [r7, #2]
 8001aa4:	227f      	movs	r2, #127	; 0x7f
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f7ff ff51 	bl	8001950 <DS18B20_Write_ByteN>

	// Запуск преобразования
	DS18B20_ResetN(GPIOx, GPIO_Pin);													// Сброс линии
 8001aae:	887b      	ldrh	r3, [r7, #2]
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f7ff feee 	bl	8001894 <DS18B20_ResetN>
	DS18B20_Write_ByteN(GPIOx, GPIO_Pin, OW_CMD_SKIPROM);								// т.к. устройство только одно на линии - пропускаем проверку адреса
 8001ab8:	887b      	ldrh	r3, [r7, #2]
 8001aba:	22cc      	movs	r2, #204	; 0xcc
 8001abc:	4619      	mov	r1, r3
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7ff ff46 	bl	8001950 <DS18B20_Write_ByteN>

	DS18B20_Write_ByteN(GPIOx, GPIO_Pin, DS18B20_CMD_CONVERTTEMP);						// пошлем команду о том что нужно запусить процесс измерения
 8001ac4:	887b      	ldrh	r3, [r7, #2]
 8001ac6:	2244      	movs	r2, #68	; 0x44
 8001ac8:	4619      	mov	r1, r3
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f7ff ff40 	bl	8001950 <DS18B20_Write_ByteN>
}
 8001ad0:	bf00      	nop
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <DS18B20_Measure_Async_FinishN>:
//=======================================================================================
uint16_t DS18B20_Measure_Async_FinishN(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b088      	sub	sp, #32
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	807b      	strh	r3, [r7, #2]
	int16_t Temp_FULL = DS18B20_ERR;													// такого кода на бывает у этих датчиков (5 старших разрядов должны быть одинаково 0 или 1, там знак температуры пишется)
 8001ae4:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8001ae8:	83fb      	strh	r3, [r7, #30]
	int16_t Temp_LSByte;
	int16_t Temp_MSByte;
	uint8_t ScratchPad[DS18X20_SP_SIZE];
//	uint8_t CRC_Result = DS18X20_ERROR_CRC;

	if (DS18B20_ResetN(GPIOx, GPIO_Pin) == 0)											// Если на RESET пришел правильный ответ PRESENSE
 8001aea:	887b      	ldrh	r3, [r7, #2]
 8001aec:	4619      	mov	r1, r3
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff fed0 	bl	8001894 <DS18B20_ResetN>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d13e      	bne.n	8001b78 <DS18B20_Measure_Async_FinishN+0xa0>
	{
		DS18B20_Write_ByteN(GPIOx, GPIO_Pin, OW_CMD_SKIPROM);
 8001afa:	887b      	ldrh	r3, [r7, #2]
 8001afc:	22cc      	movs	r2, #204	; 0xcc
 8001afe:	4619      	mov	r1, r3
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f7ff ff25 	bl	8001950 <DS18B20_Write_ByteN>
		DS18B20_Write_ByteN(GPIOx, GPIO_Pin, DS18B20_CMD_RSCRATCHPAD);					// Запрос на чтение ScratchPad
 8001b06:	887b      	ldrh	r3, [r7, #2]
 8001b08:	22be      	movs	r2, #190	; 0xbe
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f7ff ff1f 	bl	8001950 <DS18B20_Write_ByteN>

		for (int i = 0; i < DS18X20_SP_SIZE; i++ )										// вычитываем полностью весь ScratchPad чтобы проверить по CRC
 8001b12:	2300      	movs	r3, #0
 8001b14:	61bb      	str	r3, [r7, #24]
 8001b16:	e00f      	b.n	8001b38 <DS18B20_Measure_Async_FinishN+0x60>
			ScratchPad[i] = DS18B20_Read_ByteN(GPIOx, GPIO_Pin);
 8001b18:	887b      	ldrh	r3, [r7, #2]
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f7ff ff76 	bl	8001a0e <DS18B20_Read_ByteN>
 8001b22:	4603      	mov	r3, r0
 8001b24:	4619      	mov	r1, r3
 8001b26:	f107 0208 	add.w	r2, r7, #8
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	460a      	mov	r2, r1
 8001b30:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < DS18X20_SP_SIZE; i++ )										// вычитываем полностью весь ScratchPad чтобы проверить по CRC
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	3301      	adds	r3, #1
 8001b36:	61bb      	str	r3, [r7, #24]
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	2b08      	cmp	r3, #8
 8001b3c:	ddec      	ble.n	8001b18 <DS18B20_Measure_Async_FinishN+0x40>

		DS18B20_ResetN(GPIOx, GPIO_Pin);												// Сброс по окончании чтения ScratchPad
 8001b3e:	887b      	ldrh	r3, [r7, #2]
 8001b40:	4619      	mov	r1, r3
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7ff fea6 	bl	8001894 <DS18B20_ResetN>


		// После вычисления контрольной суммы мастер должен сравнить получившееся значение с переданной CRC.
		// Если эти значения совпадают, значит прием данных прошел без ошибок.
		// Можно также вычислить контрольную сумму для всех 64 принятых бит, тогда результат должен быть равен нулю. (Из статьи Ридико Л.И.)
		if ( DS18B20_CRC8( &ScratchPad[0], DS18X20_SP_SIZE ) == 0 )								// если CRC проверен, возвращаем 2 байта температуры (потом декодировать)
 8001b48:	f107 0308 	add.w	r3, r7, #8
 8001b4c:	2109      	movs	r1, #9
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f000 f8ec 	bl	8001d2c <DS18B20_CRC8>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d10b      	bne.n	8001b72 <DS18B20_Measure_Async_FinishN+0x9a>
		{
			Temp_LSByte = ScratchPad[0];							// temp LSByte младший
 8001b5a:	7a3b      	ldrb	r3, [r7, #8]
 8001b5c:	82fb      	strh	r3, [r7, #22]
			Temp_MSByte = ScratchPad[1];							// temp MSByte старший
 8001b5e:	7a7b      	ldrb	r3, [r7, #9]
 8001b60:	82bb      	strh	r3, [r7, #20]
			Temp_FULL   = ((Temp_MSByte << 8) + (Temp_LSByte));
 8001b62:	8abb      	ldrh	r3, [r7, #20]
 8001b64:	021b      	lsls	r3, r3, #8
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	8afb      	ldrh	r3, [r7, #22]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	83fb      	strh	r3, [r7, #30]
 8001b70:	e002      	b.n	8001b78 <DS18B20_Measure_Async_FinishN+0xa0>
//			CRC_Result = DS18X20_ERROR_CRC;
		}
		else
		{
			// Если передача прошла с ошибкой - передаем ошибку
			Temp_FULL = DS18B20_ERR;
 8001b72:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8001b76:	83fb      	strh	r3, [r7, #30]
		}

	}
	return Temp_FULL;
 8001b78:	8bfb      	ldrh	r3, [r7, #30]
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3720      	adds	r7, #32
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
	...

08001b84 <DS18B20_Temperature_Double>:
	}
	return (int8_t)((TempWord & 0b0000011111110000) >> 4);								// целая часть
}
//=======================================================================================
double DS18B20_Temperature_Double(uint16_t TempWord)									// Получить температуру полностью со знаком и в double
{
 8001b84:	b590      	push	{r4, r7, lr}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	80fb      	strh	r3, [r7, #6]
	double temp_c = -56.0;
 8001b8e:	f04f 0300 	mov.w	r3, #0
 8001b92:	4c62      	ldr	r4, [pc, #392]	; (8001d1c <DS18B20_Temperature_Double+0x198>)
 8001b94:	e9c7 3402 	strd	r3, r4, [r7, #8]

	if (TempWord >= 0x800) 																// Ортицательная температура
 8001b98:	88fb      	ldrh	r3, [r7, #6]
 8001b9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b9e:	d363      	bcc.n	8001c68 <DS18B20_Temperature_Double+0xe4>
	{
		temp_c = 0;
 8001ba0:	f04f 0300 	mov.w	r3, #0
 8001ba4:	f04f 0400 	mov.w	r4, #0
 8001ba8:	e9c7 3402 	strd	r3, r4, [r7, #8]
		// дробная часть
		if(TempWord & 0x0001) temp_c += 0.06250;
 8001bac:	88fb      	ldrh	r3, [r7, #6]
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d00a      	beq.n	8001bcc <DS18B20_Temperature_Double+0x48>
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	4b59      	ldr	r3, [pc, #356]	; (8001d20 <DS18B20_Temperature_Double+0x19c>)
 8001bbc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bc0:	f7fe faf6 	bl	80001b0 <__adddf3>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	460c      	mov	r4, r1
 8001bc8:	e9c7 3402 	strd	r3, r4, [r7, #8]
		if(TempWord & 0x0002) temp_c += 0.12500;
 8001bcc:	88fb      	ldrh	r3, [r7, #6]
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d00b      	beq.n	8001bee <DS18B20_Temperature_Double+0x6a>
 8001bd6:	f04f 0200 	mov.w	r2, #0
 8001bda:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8001bde:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001be2:	f7fe fae5 	bl	80001b0 <__adddf3>
 8001be6:	4603      	mov	r3, r0
 8001be8:	460c      	mov	r4, r1
 8001bea:	e9c7 3402 	strd	r3, r4, [r7, #8]
		if(TempWord & 0x0004) temp_c += 0.25000;
 8001bee:	88fb      	ldrh	r3, [r7, #6]
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d00a      	beq.n	8001c0e <DS18B20_Temperature_Double+0x8a>
 8001bf8:	f04f 0200 	mov.w	r2, #0
 8001bfc:	4b49      	ldr	r3, [pc, #292]	; (8001d24 <DS18B20_Temperature_Double+0x1a0>)
 8001bfe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c02:	f7fe fad5 	bl	80001b0 <__adddf3>
 8001c06:	4603      	mov	r3, r0
 8001c08:	460c      	mov	r4, r1
 8001c0a:	e9c7 3402 	strd	r3, r4, [r7, #8]
		if(TempWord & 0x0008) temp_c += 0.50000;
 8001c0e:	88fb      	ldrh	r3, [r7, #6]
 8001c10:	f003 0308 	and.w	r3, r3, #8
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d00a      	beq.n	8001c2e <DS18B20_Temperature_Double+0xaa>
 8001c18:	f04f 0200 	mov.w	r2, #0
 8001c1c:	4b42      	ldr	r3, [pc, #264]	; (8001d28 <DS18B20_Temperature_Double+0x1a4>)
 8001c1e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c22:	f7fe fac5 	bl	80001b0 <__adddf3>
 8001c26:	4603      	mov	r3, r0
 8001c28:	460c      	mov	r4, r1
 8001c2a:	e9c7 3402 	strd	r3, r4, [r7, #8]

		// целая часть
		TempWord = (TempWord >> 4) & 0x00FF;
 8001c2e:	88fb      	ldrh	r3, [r7, #6]
 8001c30:	091b      	lsrs	r3, r3, #4
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	80fb      	strh	r3, [r7, #6]
		TempWord = TempWord - 0x0001; //subtract 1
 8001c38:	88fb      	ldrh	r3, [r7, #6]
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	80fb      	strh	r3, [r7, #6]
		TempWord = ~TempWord; //ones compliment
 8001c3e:	88fb      	ldrh	r3, [r7, #6]
 8001c40:	43db      	mvns	r3, r3
 8001c42:	80fb      	strh	r3, [r7, #6]
		temp_c = temp_c - (double)(TempWord & 0xFF);
 8001c44:	88fb      	ldrh	r3, [r7, #6]
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7fe fbfd 	bl	8000448 <__aeabi_i2d>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	460c      	mov	r4, r1
 8001c52:	461a      	mov	r2, r3
 8001c54:	4623      	mov	r3, r4
 8001c56:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c5a:	f7fe faa7 	bl	80001ac <__aeabi_dsub>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	460c      	mov	r4, r1
 8001c62:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8001c66:	e051      	b.n	8001d0c <DS18B20_Temperature_Double+0x188>
	}
	else 																				// Положительная температура
	{
		temp_c = 0;
 8001c68:	f04f 0300 	mov.w	r3, #0
 8001c6c:	f04f 0400 	mov.w	r4, #0
 8001c70:	e9c7 3402 	strd	r3, r4, [r7, #8]
		// целая часть
		temp_c = (TempWord >> 4) & 0x00FF;
 8001c74:	88fb      	ldrh	r3, [r7, #6]
 8001c76:	091b      	lsrs	r3, r3, #4
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7fe fbe3 	bl	8000448 <__aeabi_i2d>
 8001c82:	4603      	mov	r3, r0
 8001c84:	460c      	mov	r4, r1
 8001c86:	e9c7 3402 	strd	r3, r4, [r7, #8]
		// дробная часть
		if(TempWord & 0x0001) temp_c = temp_c + 0.06250;
 8001c8a:	88fb      	ldrh	r3, [r7, #6]
 8001c8c:	f003 0301 	and.w	r3, r3, #1
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d00a      	beq.n	8001caa <DS18B20_Temperature_Double+0x126>
 8001c94:	f04f 0200 	mov.w	r2, #0
 8001c98:	4b21      	ldr	r3, [pc, #132]	; (8001d20 <DS18B20_Temperature_Double+0x19c>)
 8001c9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c9e:	f7fe fa87 	bl	80001b0 <__adddf3>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	460c      	mov	r4, r1
 8001ca6:	e9c7 3402 	strd	r3, r4, [r7, #8]
		if(TempWord & 0x0002) temp_c = temp_c + 0.12500;
 8001caa:	88fb      	ldrh	r3, [r7, #6]
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d00b      	beq.n	8001ccc <DS18B20_Temperature_Double+0x148>
 8001cb4:	f04f 0200 	mov.w	r2, #0
 8001cb8:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8001cbc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001cc0:	f7fe fa76 	bl	80001b0 <__adddf3>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	460c      	mov	r4, r1
 8001cc8:	e9c7 3402 	strd	r3, r4, [r7, #8]
		if(TempWord & 0x0004) temp_c = temp_c + 0.25000;
 8001ccc:	88fb      	ldrh	r3, [r7, #6]
 8001cce:	f003 0304 	and.w	r3, r3, #4
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d00a      	beq.n	8001cec <DS18B20_Temperature_Double+0x168>
 8001cd6:	f04f 0200 	mov.w	r2, #0
 8001cda:	4b12      	ldr	r3, [pc, #72]	; (8001d24 <DS18B20_Temperature_Double+0x1a0>)
 8001cdc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ce0:	f7fe fa66 	bl	80001b0 <__adddf3>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	460c      	mov	r4, r1
 8001ce8:	e9c7 3402 	strd	r3, r4, [r7, #8]
		if(TempWord & 0x0008) temp_c = temp_c + 0.50000;
 8001cec:	88fb      	ldrh	r3, [r7, #6]
 8001cee:	f003 0308 	and.w	r3, r3, #8
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d00a      	beq.n	8001d0c <DS18B20_Temperature_Double+0x188>
 8001cf6:	f04f 0200 	mov.w	r2, #0
 8001cfa:	4b0b      	ldr	r3, [pc, #44]	; (8001d28 <DS18B20_Temperature_Double+0x1a4>)
 8001cfc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d00:	f7fe fa56 	bl	80001b0 <__adddf3>
 8001d04:	4603      	mov	r3, r0
 8001d06:	460c      	mov	r4, r1
 8001d08:	e9c7 3402 	strd	r3, r4, [r7, #8]
	}
	return temp_c;
 8001d0c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	4621      	mov	r1, r4
 8001d14:	3714      	adds	r7, #20
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd90      	pop	{r4, r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	c04c0000 	.word	0xc04c0000
 8001d20:	3fb00000 	.word	0x3fb00000
 8001d24:	3fd00000 	.word	0x3fd00000
 8001d28:	3fe00000 	.word	0x3fe00000

08001d2c <DS18B20_CRC8>:
//=======================================================================================
#define CRC8INIT    0x00
#define CRC8POLY    0x18              //0X18 = X^8+X^5+X^4+X^0
////=======================================================================================
uint8_t DS18B20_CRC8( uint8_t *data, uint16_t number_of_bytes_in_data )					// Рассчет CRC
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	460b      	mov	r3, r1
 8001d36:	807b      	strh	r3, [r7, #2]
	uint16_t loop_count;
	uint8_t  bit_counter;
	uint8_t  b;
	uint8_t  feedback_bit;

	crc = CRC8INIT;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	73fb      	strb	r3, [r7, #15]

	for (loop_count = 0; loop_count != number_of_bytes_in_data; loop_count++)
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	81bb      	strh	r3, [r7, #12]
 8001d40:	e02a      	b.n	8001d98 <DS18B20_CRC8+0x6c>
	{
		b = data[loop_count];
 8001d42:	89bb      	ldrh	r3, [r7, #12]
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	4413      	add	r3, r2
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	72bb      	strb	r3, [r7, #10]

		bit_counter = 8;
 8001d4c:	2308      	movs	r3, #8
 8001d4e:	72fb      	strb	r3, [r7, #11]
		do {
			feedback_bit = (crc ^ b) & 0x01;
 8001d50:	7bfa      	ldrb	r2, [r7, #15]
 8001d52:	7abb      	ldrb	r3, [r7, #10]
 8001d54:	4053      	eors	r3, r2
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	727b      	strb	r3, [r7, #9]

			if ( feedback_bit == 0x01 ) {
 8001d5e:	7a7b      	ldrb	r3, [r7, #9]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d103      	bne.n	8001d6c <DS18B20_CRC8+0x40>
				crc = crc ^ CRC8POLY;
 8001d64:	7bfb      	ldrb	r3, [r7, #15]
 8001d66:	f083 0318 	eor.w	r3, r3, #24
 8001d6a:	73fb      	strb	r3, [r7, #15]
			}
			crc = (crc >> 1) & 0x7F;
 8001d6c:	7bfb      	ldrb	r3, [r7, #15]
 8001d6e:	085b      	lsrs	r3, r3, #1
 8001d70:	73fb      	strb	r3, [r7, #15]
			if ( feedback_bit == 0x01 ) {
 8001d72:	7a7b      	ldrb	r3, [r7, #9]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d103      	bne.n	8001d80 <DS18B20_CRC8+0x54>
				crc = crc | 0x80;
 8001d78:	7bfb      	ldrb	r3, [r7, #15]
 8001d7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d7e:	73fb      	strb	r3, [r7, #15]
			}

			b = b >> 1;
 8001d80:	7abb      	ldrb	r3, [r7, #10]
 8001d82:	085b      	lsrs	r3, r3, #1
 8001d84:	72bb      	strb	r3, [r7, #10]
			bit_counter--;
 8001d86:	7afb      	ldrb	r3, [r7, #11]
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	72fb      	strb	r3, [r7, #11]

		} while (bit_counter > 0);
 8001d8c:	7afb      	ldrb	r3, [r7, #11]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1de      	bne.n	8001d50 <DS18B20_CRC8+0x24>
	for (loop_count = 0; loop_count != number_of_bytes_in_data; loop_count++)
 8001d92:	89bb      	ldrh	r3, [r7, #12]
 8001d94:	3301      	adds	r3, #1
 8001d96:	81bb      	strh	r3, [r7, #12]
 8001d98:	89ba      	ldrh	r2, [r7, #12]
 8001d9a:	887b      	ldrh	r3, [r7, #2]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d1d0      	bne.n	8001d42 <DS18B20_CRC8+0x16>
	}

	return crc;
 8001da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3714      	adds	r7, #20
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bc80      	pop	{r7}
 8001daa:	4770      	bx	lr

08001dac <Display_Test>:

static char str[18];																	// Для печати строк через sprintf

//======================================================================================
void Display_Test(uint16_t pos_x, uint16_t pos_y)										// Для тестов
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af04      	add	r7, sp, #16
 8001db2:	4603      	mov	r3, r0
 8001db4:	460a      	mov	r2, r1
 8001db6:	80fb      	strh	r3, [r7, #6]
 8001db8:	4613      	mov	r3, r2
 8001dba:	80bb      	strh	r3, [r7, #4]
//	sprintf(str, "%04.3f", ADC_State.Speed_value_volts);
//	LCD9488_GUI_Draw_StringColor(10, 230, str, (unsigned char*)LCD55Mono37x48, RED, CYAN, DRAW_NO_OVERLYING);

	sprintf(str, "%02d", Speed_value_percent);
 8001dbc:	4b0c      	ldr	r3, [pc, #48]	; (8001df0 <Display_Test+0x44>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	490c      	ldr	r1, [pc, #48]	; (8001df4 <Display_Test+0x48>)
 8001dc4:	480c      	ldr	r0, [pc, #48]	; (8001df8 <Display_Test+0x4c>)
 8001dc6:	f013 ff45 	bl	8015c54 <siprintf>
//	LCD9488_GUI_Draw_StringColor(200, 230, str, (unsigned char*)Digital7Mono32x48, RED, CYAN, DRAW_NO_OVERLYING);
	LCD9488_GUI_Draw_StringColor(pos_x, pos_y, str, (unsigned char*)Unispace32x48_Digits, RED, CYAN, DRAW_NO_OVERLYING);
 8001dca:	88b9      	ldrh	r1, [r7, #4]
 8001dcc:	88f8      	ldrh	r0, [r7, #6]
 8001dce:	2300      	movs	r3, #0
 8001dd0:	9302      	str	r3, [sp, #8]
 8001dd2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001dd6:	9301      	str	r3, [sp, #4]
 8001dd8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001ddc:	9300      	str	r3, [sp, #0]
 8001dde:	4b07      	ldr	r3, [pc, #28]	; (8001dfc <Display_Test+0x50>)
 8001de0:	4a05      	ldr	r2, [pc, #20]	; (8001df8 <Display_Test+0x4c>)
 8001de2:	f002 fe43 	bl	8004a6c <LCD9488_GUI_Draw_StringColor>


}
 8001de6:	bf00      	nop
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20008968 	.word	0x20008968
 8001df4:	08019c10 	.word	0x08019c10
 8001df8:	20000334 	.word	0x20000334
 8001dfc:	0801de5c 	.word	0x0801de5c

08001e00 <Display_SystemVoltage>:
//======================================================================================
void Display_SystemVoltage(uint16_t pos_x, uint16_t pos_y)								// Показать напряжение питания процессора
{
 8001e00:	b590      	push	{r4, r7, lr}
 8001e02:	b089      	sub	sp, #36	; 0x24
 8001e04:	af04      	add	r7, sp, #16
 8001e06:	4603      	mov	r3, r0
 8001e08:	460a      	mov	r2, r1
 8001e0a:	80fb      	strh	r3, [r7, #6]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	80bb      	strh	r3, [r7, #4]
	unsigned char* Font = (unsigned char*)Arial_9;
 8001e10:	4b1e      	ldr	r3, [pc, #120]	; (8001e8c <Display_SystemVoltage+0x8c>)
 8001e12:	60fb      	str	r3, [r7, #12]

	sprintf(str, "Vcc = %3.2fv", ADC_State.ADC_Ref_Voltage);
 8001e14:	4b1e      	ldr	r3, [pc, #120]	; (8001e90 <Display_SystemVoltage+0x90>)
 8001e16:	f103 0408 	add.w	r4, r3, #8
 8001e1a:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001e1e:	461a      	mov	r2, r3
 8001e20:	4623      	mov	r3, r4
 8001e22:	491c      	ldr	r1, [pc, #112]	; (8001e94 <Display_SystemVoltage+0x94>)
 8001e24:	481c      	ldr	r0, [pc, #112]	; (8001e98 <Display_SystemVoltage+0x98>)
 8001e26:	f013 ff15 	bl	8015c54 <siprintf>
	LCD9488_GUI_Draw_StringColor(pos_x, pos_y, str, Font, RED, CYAN, DRAW_NO_OVERLYING);
 8001e2a:	88b9      	ldrh	r1, [r7, #4]
 8001e2c:	88f8      	ldrh	r0, [r7, #6]
 8001e2e:	2300      	movs	r3, #0
 8001e30:	9302      	str	r3, [sp, #8]
 8001e32:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001e36:	9301      	str	r3, [sp, #4]
 8001e38:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001e3c:	9300      	str	r3, [sp, #0]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	4a15      	ldr	r2, [pc, #84]	; (8001e98 <Display_SystemVoltage+0x98>)
 8001e42:	f002 fe13 	bl	8004a6c <LCD9488_GUI_Draw_StringColor>

	sprintf(str, "Tmp = %+2dC", (int)ADC_State.CPU_Temperature);
 8001e46:	4b12      	ldr	r3, [pc, #72]	; (8001e90 <Display_SystemVoltage+0x90>)
 8001e48:	f103 0410 	add.w	r4, r3, #16
 8001e4c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001e50:	4618      	mov	r0, r3
 8001e52:	4621      	mov	r1, r4
 8001e54:	f7fe fe12 	bl	8000a7c <__aeabi_d2iz>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	490f      	ldr	r1, [pc, #60]	; (8001e9c <Display_SystemVoltage+0x9c>)
 8001e5e:	480e      	ldr	r0, [pc, #56]	; (8001e98 <Display_SystemVoltage+0x98>)
 8001e60:	f013 fef8 	bl	8015c54 <siprintf>
	LCD9488_GUI_Draw_StringColor(pos_x, pos_y + 10, str, Font, RED, CYAN, DRAW_NO_OVERLYING);
 8001e64:	88bb      	ldrh	r3, [r7, #4]
 8001e66:	330a      	adds	r3, #10
 8001e68:	b299      	uxth	r1, r3
 8001e6a:	88f8      	ldrh	r0, [r7, #6]
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	9302      	str	r3, [sp, #8]
 8001e70:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001e74:	9301      	str	r3, [sp, #4]
 8001e76:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001e7a:	9300      	str	r3, [sp, #0]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	4a06      	ldr	r2, [pc, #24]	; (8001e98 <Display_SystemVoltage+0x98>)
 8001e80:	f002 fdf4 	bl	8004a6c <LCD9488_GUI_Draw_StringColor>

}
 8001e84:	bf00      	nop
 8001e86:	3714      	adds	r7, #20
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd90      	pop	{r4, r7, pc}
 8001e8c:	0801d5b4 	.word	0x0801d5b4
 8001e90:	20008bb0 	.word	0x20008bb0
 8001e94:	08019c18 	.word	0x08019c18
 8001e98:	20000334 	.word	0x20000334
 8001e9c:	08019c28 	.word	0x08019c28

08001ea0 <Display_MotorDirection>:
//======================================================================================
void Display_MotorDirection(uint16_t pos_x, uint16_t pos_y, TMotorDirection AMotorDirection) // Показать направление вращения мотора
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b088      	sub	sp, #32
 8001ea4:	af04      	add	r7, sp, #16
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	80fb      	strh	r3, [r7, #6]
 8001eaa:	460b      	mov	r3, r1
 8001eac:	80bb      	strh	r3, [r7, #4]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	70fb      	strb	r3, [r7, #3]
	unsigned char* Font = (unsigned char*)Arial28x28;
 8001eb2:	4b1d      	ldr	r3, [pc, #116]	; (8001f28 <Display_MotorDirection+0x88>)
 8001eb4:	60fb      	str	r3, [r7, #12]
	switch (AMotorDirection)
 8001eb6:	78fb      	ldrb	r3, [r7, #3]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d013      	beq.n	8001ee4 <Display_MotorDirection+0x44>
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d020      	beq.n	8001f02 <Display_MotorDirection+0x62>
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d000      	beq.n	8001ec6 <Display_MotorDirection+0x26>
			break;
		case MD_REV:
			LCD9488_GUI_Draw_StringColor(pos_x, pos_y, "REVERSE", Font, RED, LIGHTBLUE, DRAW_NO_OVERLYING);
			break;
	}
}
 8001ec4:	e02c      	b.n	8001f20 <Display_MotorDirection+0x80>
			LCD9488_GUI_Draw_StringColor(pos_x, pos_y, " STOP  ", Font, RED, LIGHTBLUE, DRAW_NO_OVERLYING);
 8001ec6:	88b9      	ldrh	r1, [r7, #4]
 8001ec8:	88f8      	ldrh	r0, [r7, #6]
 8001eca:	2300      	movs	r3, #0
 8001ecc:	9302      	str	r3, [sp, #8]
 8001ece:	f647 537c 	movw	r3, #32124	; 0x7d7c
 8001ed2:	9301      	str	r3, [sp, #4]
 8001ed4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001ed8:	9300      	str	r3, [sp, #0]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	4a13      	ldr	r2, [pc, #76]	; (8001f2c <Display_MotorDirection+0x8c>)
 8001ede:	f002 fdc5 	bl	8004a6c <LCD9488_GUI_Draw_StringColor>
			break;
 8001ee2:	e01d      	b.n	8001f20 <Display_MotorDirection+0x80>
			LCD9488_GUI_Draw_StringColor(pos_x, pos_y, "FORWARD", Font, RED, LIGHTBLUE, DRAW_NO_OVERLYING);
 8001ee4:	88b9      	ldrh	r1, [r7, #4]
 8001ee6:	88f8      	ldrh	r0, [r7, #6]
 8001ee8:	2300      	movs	r3, #0
 8001eea:	9302      	str	r3, [sp, #8]
 8001eec:	f647 537c 	movw	r3, #32124	; 0x7d7c
 8001ef0:	9301      	str	r3, [sp, #4]
 8001ef2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001ef6:	9300      	str	r3, [sp, #0]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	4a0d      	ldr	r2, [pc, #52]	; (8001f30 <Display_MotorDirection+0x90>)
 8001efc:	f002 fdb6 	bl	8004a6c <LCD9488_GUI_Draw_StringColor>
			break;
 8001f00:	e00e      	b.n	8001f20 <Display_MotorDirection+0x80>
			LCD9488_GUI_Draw_StringColor(pos_x, pos_y, "REVERSE", Font, RED, LIGHTBLUE, DRAW_NO_OVERLYING);
 8001f02:	88b9      	ldrh	r1, [r7, #4]
 8001f04:	88f8      	ldrh	r0, [r7, #6]
 8001f06:	2300      	movs	r3, #0
 8001f08:	9302      	str	r3, [sp, #8]
 8001f0a:	f647 537c 	movw	r3, #32124	; 0x7d7c
 8001f0e:	9301      	str	r3, [sp, #4]
 8001f10:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001f14:	9300      	str	r3, [sp, #0]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	4a06      	ldr	r2, [pc, #24]	; (8001f34 <Display_MotorDirection+0x94>)
 8001f1a:	f002 fda7 	bl	8004a6c <LCD9488_GUI_Draw_StringColor>
			break;
 8001f1e:	bf00      	nop
}
 8001f20:	bf00      	nop
 8001f22:	3710      	adds	r7, #16
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	0801ab4c 	.word	0x0801ab4c
 8001f2c:	08019c34 	.word	0x08019c34
 8001f30:	08019c3c 	.word	0x08019c3c
 8001f34:	08019c44 	.word	0x08019c44

08001f38 <Display_MotorSpeed>:
//======================================================================================
void Display_MotorSpeed(uint16_t pos_x, uint16_t pos_y, uint16_t ASpeed) 					// Показать скорость вращения мотора
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b088      	sub	sp, #32
 8001f3c:	af04      	add	r7, sp, #16
 8001f3e:	4603      	mov	r3, r0
 8001f40:	80fb      	strh	r3, [r7, #6]
 8001f42:	460b      	mov	r3, r1
 8001f44:	80bb      	strh	r3, [r7, #4]
 8001f46:	4613      	mov	r3, r2
 8001f48:	807b      	strh	r3, [r7, #2]
	unsigned char* Font = (unsigned char*)Unispace32x48_Digits;
 8001f4a:	4b0c      	ldr	r3, [pc, #48]	; (8001f7c <Display_MotorSpeed+0x44>)
 8001f4c:	60fb      	str	r3, [r7, #12]

	sprintf(str, "%04d", (uint16_t)ASpeed);
 8001f4e:	887b      	ldrh	r3, [r7, #2]
 8001f50:	461a      	mov	r2, r3
 8001f52:	490b      	ldr	r1, [pc, #44]	; (8001f80 <Display_MotorSpeed+0x48>)
 8001f54:	480b      	ldr	r0, [pc, #44]	; (8001f84 <Display_MotorSpeed+0x4c>)
 8001f56:	f013 fe7d 	bl	8015c54 <siprintf>
	LCD9488_GUI_Draw_StringColor(pos_x, pos_y, str, Font, BLUE, WHITE, DRAW_NO_OVERLYING);
 8001f5a:	88b9      	ldrh	r1, [r7, #4]
 8001f5c:	88f8      	ldrh	r0, [r7, #6]
 8001f5e:	2300      	movs	r3, #0
 8001f60:	9302      	str	r3, [sp, #8]
 8001f62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f66:	9301      	str	r3, [sp, #4]
 8001f68:	231f      	movs	r3, #31
 8001f6a:	9300      	str	r3, [sp, #0]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	4a05      	ldr	r2, [pc, #20]	; (8001f84 <Display_MotorSpeed+0x4c>)
 8001f70:	f002 fd7c 	bl	8004a6c <LCD9488_GUI_Draw_StringColor>
}
 8001f74:	bf00      	nop
 8001f76:	3710      	adds	r7, #16
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	0801de5c 	.word	0x0801de5c
 8001f80:	08019c4c 	.word	0x08019c4c
 8001f84:	20000334 	.word	0x20000334

08001f88 <Display_Temperature>:
//======================================================================================
void Display_Temperature(uint16_t pos_x, uint16_t pos_y, double ATemp) 						// Показать температуру
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b08a      	sub	sp, #40	; 0x28
 8001f8c:	af04      	add	r7, sp, #16
 8001f8e:	e9c7 2300 	strd	r2, r3, [r7]
 8001f92:	4603      	mov	r3, r0
 8001f94:	81fb      	strh	r3, [r7, #14]
 8001f96:	460b      	mov	r3, r1
 8001f98:	81bb      	strh	r3, [r7, #12]
	unsigned char* Font = (unsigned char*)Arial28x28;
 8001f9a:	4b0c      	ldr	r3, [pc, #48]	; (8001fcc <Display_Temperature+0x44>)
 8001f9c:	617b      	str	r3, [r7, #20]

	sprintf(str, "Temp = %+2.1f C", ATemp );
 8001f9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001fa2:	490b      	ldr	r1, [pc, #44]	; (8001fd0 <Display_Temperature+0x48>)
 8001fa4:	480b      	ldr	r0, [pc, #44]	; (8001fd4 <Display_Temperature+0x4c>)
 8001fa6:	f013 fe55 	bl	8015c54 <siprintf>
	LCD9488_GUI_Draw_StringColor(pos_x, pos_y, str, Font, BLUE, WHITE, DRAW_NO_OVERLYING);
 8001faa:	89b9      	ldrh	r1, [r7, #12]
 8001fac:	89f8      	ldrh	r0, [r7, #14]
 8001fae:	2300      	movs	r3, #0
 8001fb0:	9302      	str	r3, [sp, #8]
 8001fb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fb6:	9301      	str	r3, [sp, #4]
 8001fb8:	231f      	movs	r3, #31
 8001fba:	9300      	str	r3, [sp, #0]
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	4a05      	ldr	r2, [pc, #20]	; (8001fd4 <Display_Temperature+0x4c>)
 8001fc0:	f002 fd54 	bl	8004a6c <LCD9488_GUI_Draw_StringColor>
}
 8001fc4:	bf00      	nop
 8001fc6:	3718      	adds	r7, #24
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	0801ab4c 	.word	0x0801ab4c
 8001fd0:	08019c54 	.word	0x08019c54
 8001fd4:	20000334 	.word	0x20000334

08001fd8 <Display_Encoder>:
//======================================================================================
void Display_Encoder(uint16_t pos_x, uint16_t pos_y)										// Показать значение энкодера
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af04      	add	r7, sp, #16
 8001fde:	4603      	mov	r3, r0
 8001fe0:	460a      	mov	r2, r1
 8001fe2:	80fb      	strh	r3, [r7, #6]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	80bb      	strh	r3, [r7, #4]
	sprintf(str, "%02d", (uint8_t)(ExchangeStruct.Encoder_State->MP_Encoder_Value));
 8001fe8:	4b0d      	ldr	r3, [pc, #52]	; (8002020 <Display_Encoder+0x48>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	490c      	ldr	r1, [pc, #48]	; (8002024 <Display_Encoder+0x4c>)
 8001ff4:	480c      	ldr	r0, [pc, #48]	; (8002028 <Display_Encoder+0x50>)
 8001ff6:	f013 fe2d 	bl	8015c54 <siprintf>
	LCD9488_GUI_Draw_StringColor(pos_x, pos_y, str, (unsigned char*)Unispace32x48_Digits, RED, CYAN, DRAW_NO_OVERLYING);
 8001ffa:	88b9      	ldrh	r1, [r7, #4]
 8001ffc:	88f8      	ldrh	r0, [r7, #6]
 8001ffe:	2300      	movs	r3, #0
 8002000:	9302      	str	r3, [sp, #8]
 8002002:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8002006:	9301      	str	r3, [sp, #4]
 8002008:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800200c:	9300      	str	r3, [sp, #0]
 800200e:	4b07      	ldr	r3, [pc, #28]	; (800202c <Display_Encoder+0x54>)
 8002010:	4a05      	ldr	r2, [pc, #20]	; (8002028 <Display_Encoder+0x50>)
 8002012:	f002 fd2b 	bl	8004a6c <LCD9488_GUI_Draw_StringColor>
}
 8002016:	bf00      	nop
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	20008c18 	.word	0x20008c18
 8002024:	08019c10 	.word	0x08019c10
 8002028:	20000334 	.word	0x20000334
 800202c:	0801de5c 	.word	0x0801de5c

08002030 <EEPROM_OptionsLoadDefault>:



//=======================================================================================
void EEPROM_OptionsLoadDefault(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
// MP_Power_Set_5V0(POWERSTATE_DISABLE);
// MP_Power_Set_10V(POWERSTATE_DISABLE);
// MP_Power_Set_EOP(POWERSTATE_DISABLE);
// MP_Power_Set_Encoder(POWERSTATE_DISABLE);
//
	ExchangeStruct.TerminalFormat = TERMINALFORMAT_HUMAN;
 8002034:	4b03      	ldr	r3, [pc, #12]	; (8002044 <EEPROM_OptionsLoadDefault+0x14>)
 8002036:	2200      	movs	r2, #0
 8002038:	735a      	strb	r2, [r3, #13]
//	ExchangeStruct.TerminalFormat = TERMINALFORMAT_MACHINE;
}
 800203a:	bf00      	nop
 800203c:	46bd      	mov	sp, r7
 800203e:	bc80      	pop	{r7}
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	20008c18 	.word	0x20008c18

08002048 <EEPROM_OptionsLoad>:
//=======================================================================================
void EEPROM_OptionsLoad(void)															// Загрузить настройки из энергонезависимой памяти
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
	EEPROM_OptionsLoadDefault();
 800204c:	f7ff fff0 	bl	8002030 <EEPROM_OptionsLoadDefault>
// ExchangeStruct.DeviceSerialNumber[8] = '\0';
//
//
// MP_BUZZER_BuzzerState = (((uint8_t)( *(__IO uint32_t*)(EEPROM_ADDR_BASE + EEPROM_ADDR_SETTINGS_BUZZER) ) == 0)?(BUZZER_STSTE_OFF):(BUZZER_STSTE_ON)) ;
//
}
 8002050:	bf00      	nop
 8002052:	bd80      	pop	{r7, pc}

08002054 <EEPROM_OptionsSave>:
//=======================================================================================
void EEPROM_OptionsSave(void)															// Сохранить настройки в энергонезависимой памяти
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
//	 // MP_ExchangeStruct.TerminalMode = TERMINALMODE_COMMAND;
//	 //	double ref_3v3 = 3.4596459;
//	 //	double ref_12v = 14.00116007;
//	 //	EEPROM_WriteObject(EEPROM_ADDR_SETTINGS_ADCREF3V3, &ref_3v3, sizeof(ref_3v3) );
//	 //	EEPROM_WriteObject(EEPROM_ADDR_SETTINGS_ADCREF12V, &ref_12v, sizeof(ref_12v) );
}
 8002058:	bf00      	nop
 800205a:	46bd      	mov	sp, r7
 800205c:	bc80      	pop	{r7}
 800205e:	4770      	bx	lr

08002060 <Encoder_Init>:
// на аппаратном таймере TIM3 в режиме энкодера
#include <Encoder.h>
#include "tim.h"
//=======================================================================================
void  Encoder_Init(void)																// Настройка GPIO портов для энкодера
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b08c      	sub	sp, #48	; 0x30
 8002064:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002066:	4b3f      	ldr	r3, [pc, #252]	; (8002164 <Encoder_Init+0x104>)
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	4a3e      	ldr	r2, [pc, #248]	; (8002164 <Encoder_Init+0x104>)
 800206c:	f043 0301 	orr.w	r3, r3, #1
 8002070:	61d3      	str	r3, [r2, #28]
 8002072:	4b3c      	ldr	r3, [pc, #240]	; (8002164 <Encoder_Init+0x104>)
 8002074:	69db      	ldr	r3, [r3, #28]
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	61bb      	str	r3, [r7, #24]
 800207c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800207e:	4b39      	ldr	r3, [pc, #228]	; (8002164 <Encoder_Init+0x104>)
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	4a38      	ldr	r2, [pc, #224]	; (8002164 <Encoder_Init+0x104>)
 8002084:	f043 0302 	orr.w	r3, r3, #2
 8002088:	61d3      	str	r3, [r2, #28]
 800208a:	4b36      	ldr	r3, [pc, #216]	; (8002164 <Encoder_Init+0x104>)
 800208c:	69db      	ldr	r3, [r3, #28]
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	617b      	str	r3, [r7, #20]
 8002094:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002096:	4b33      	ldr	r3, [pc, #204]	; (8002164 <Encoder_Init+0x104>)
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	4a32      	ldr	r2, [pc, #200]	; (8002164 <Encoder_Init+0x104>)
 800209c:	f043 0304 	orr.w	r3, r3, #4
 80020a0:	61d3      	str	r3, [r2, #28]
 80020a2:	4b30      	ldr	r3, [pc, #192]	; (8002164 <Encoder_Init+0x104>)
 80020a4:	69db      	ldr	r3, [r3, #28]
 80020a6:	f003 0304 	and.w	r3, r3, #4
 80020aa:	613b      	str	r3, [r7, #16]
 80020ac:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80020ae:	4b2d      	ldr	r3, [pc, #180]	; (8002164 <Encoder_Init+0x104>)
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	4a2c      	ldr	r2, [pc, #176]	; (8002164 <Encoder_Init+0x104>)
 80020b4:	f043 0308 	orr.w	r3, r3, #8
 80020b8:	61d3      	str	r3, [r2, #28]
 80020ba:	4b2a      	ldr	r3, [pc, #168]	; (8002164 <Encoder_Init+0x104>)
 80020bc:	69db      	ldr	r3, [r3, #28]
 80020be:	f003 0308 	and.w	r3, r3, #8
 80020c2:	60fb      	str	r3, [r7, #12]
 80020c4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80020c6:	4b27      	ldr	r3, [pc, #156]	; (8002164 <Encoder_Init+0x104>)
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	4a26      	ldr	r2, [pc, #152]	; (8002164 <Encoder_Init+0x104>)
 80020cc:	f043 0310 	orr.w	r3, r3, #16
 80020d0:	61d3      	str	r3, [r2, #28]
 80020d2:	4b24      	ldr	r3, [pc, #144]	; (8002164 <Encoder_Init+0x104>)
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	f003 0310 	and.w	r3, r3, #16
 80020da:	60bb      	str	r3, [r7, #8]
 80020dc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80020de:	4b21      	ldr	r3, [pc, #132]	; (8002164 <Encoder_Init+0x104>)
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	4a20      	ldr	r2, [pc, #128]	; (8002164 <Encoder_Init+0x104>)
 80020e4:	f043 0320 	orr.w	r3, r3, #32
 80020e8:	61d3      	str	r3, [r2, #28]
 80020ea:	4b1e      	ldr	r3, [pc, #120]	; (8002164 <Encoder_Init+0x104>)
 80020ec:	69db      	ldr	r3, [r3, #28]
 80020ee:	f003 0320 	and.w	r3, r3, #32
 80020f2:	607b      	str	r3, [r7, #4]
 80020f4:	687b      	ldr	r3, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct;

	// ENC_A
    GPIO_InitStruct.Pin 		= ENC_A_Pin;
 80020f6:	2308      	movs	r3, #8
 80020f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode 		= GPIO_MODE_AF_PP;
 80020fa:	2302      	movs	r3, #2
 80020fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 80020fe:	2300      	movs	r3, #0
 8002100:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed 		= GPIO_SPEED_FREQ_LOW;
 8002102:	2300      	movs	r3, #0
 8002104:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate 	= GPIO_AF2_TIM3;
 8002106:	2302      	movs	r3, #2
 8002108:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENC_A_GPIO_Port, &GPIO_InitStruct);
 800210a:	f107 031c 	add.w	r3, r7, #28
 800210e:	4619      	mov	r1, r3
 8002110:	4815      	ldr	r0, [pc, #84]	; (8002168 <Encoder_Init+0x108>)
 8002112:	f005 fe2d 	bl	8007d70 <HAL_GPIO_Init>

	// ENC_B
    GPIO_InitStruct.Pin 		= ENC_B_Pin;
 8002116:	2310      	movs	r3, #16
 8002118:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode 		= GPIO_MODE_AF_PP;
 800211a:	2302      	movs	r3, #2
 800211c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 800211e:	2300      	movs	r3, #0
 8002120:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed 		= GPIO_SPEED_FREQ_LOW;
 8002122:	2300      	movs	r3, #0
 8002124:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002126:	2302      	movs	r3, #2
 8002128:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENC_B_GPIO_Port, &GPIO_InitStruct);
 800212a:	f107 031c 	add.w	r3, r7, #28
 800212e:	4619      	mov	r1, r3
 8002130:	480d      	ldr	r0, [pc, #52]	; (8002168 <Encoder_Init+0x108>)
 8002132:	f005 fe1d 	bl	8007d70 <HAL_GPIO_Init>

	// ENC_BTN
	GPIO_InitStruct.Pin 		= ENC_BTN_Pin;
 8002136:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800213a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode 		= GPIO_MODE_IT_FALLING;
 800213c:	4b0b      	ldr	r3, [pc, #44]	; (800216c <Encoder_Init+0x10c>)
 800213e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 8002140:	2300      	movs	r3, #0
 8002142:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed		= GPIO_SPEED_FREQ_MEDIUM;
 8002144:	2301      	movs	r3, #1
 8002146:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(ENC_BTN_GPIO_Port, &GPIO_InitStruct);
 8002148:	f107 031c 	add.w	r3, r7, #28
 800214c:	4619      	mov	r1, r3
 800214e:	4808      	ldr	r0, [pc, #32]	; (8002170 <Encoder_Init+0x110>)
 8002150:	f005 fe0e 	bl	8007d70 <HAL_GPIO_Init>

	// включаем прерывания
	//  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 14, 0);
	//  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

    MX_TIM3_Init();																		// Настройка таймера TIM3 для работы с энкодером
 8002154:	f000 fdba 	bl	8002ccc <MX_TIM3_Init>
    Encoder_Start();																	// Начальная установка для энкодера
 8002158:	f000 f80c 	bl	8002174 <Encoder_Start>
}
 800215c:	bf00      	nop
 800215e:	3730      	adds	r7, #48	; 0x30
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40023800 	.word	0x40023800
 8002168:	40021000 	.word	0x40021000
 800216c:	10210000 	.word	0x10210000
 8002170:	40020c00 	.word	0x40020c00

08002174 <Encoder_Start>:
//=======================================================================================

//=======================================================================================
void Encoder_Start(void)																// Начальная установка для энкодера
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
	Encoder_State.MP_Encoder_Value 				= ENCODER_VAL_DEFAULT;
 8002178:	4b08      	ldr	r3, [pc, #32]	; (800219c <Encoder_Start+0x28>)
 800217a:	2200      	movs	r2, #0
 800217c:	601a      	str	r2, [r3, #0]
	Encoder_State.MP_Encoder_Value_old 			= ENCODER_VAL_DEFAULT;
 800217e:	4b07      	ldr	r3, [pc, #28]	; (800219c <Encoder_Start+0x28>)
 8002180:	2200      	movs	r2, #0
 8002182:	605a      	str	r2, [r3, #4]
//	Encoder_State.MP_Encoder_Value_prev 		= ENCODER_VAL_DEFAULT;
	__HAL_TIM_SET_COUNTER(&htim3, Encoder_State.MP_Encoder_Value);
 8002184:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <Encoder_Start+0x2c>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a04      	ldr	r2, [pc, #16]	; (800219c <Encoder_Start+0x28>)
 800218a:	6812      	ldr	r2, [r2, #0]
 800218c:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 800218e:	213c      	movs	r1, #60	; 0x3c
 8002190:	4803      	ldr	r0, [pc, #12]	; (80021a0 <Encoder_Start+0x2c>)
 8002192:	f009 f86f 	bl	800b274 <HAL_TIM_Encoder_Start_IT>
}
 8002196:	bf00      	nop
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	20008b3c 	.word	0x20008b3c
 80021a0:	20008e8c 	.word	0x20008e8c

080021a4 <Encoder_Scan>:
	__HAL_TIM_SET_COUNTER(&htim3, Encoder_State.MP_Encoder_Value);
	HAL_TIM_Encoder_Stop_IT(&htim3, TIM_CHANNEL_ALL);
}
//=======================================================================================
uint8_t Encoder_Scan(void)																// Сканировать состояние энкодера
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
	Encoder_State.MP_Encoder_Value 				= __HAL_TIM_GET_COUNTER(&htim3);
 80021a8:	4b1e      	ldr	r3, [pc, #120]	; (8002224 <Encoder_Scan+0x80>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ae:	4a1e      	ldr	r2, [pc, #120]	; (8002228 <Encoder_Scan+0x84>)
 80021b0:	6013      	str	r3, [r2, #0]
	Encoder_State.MP_Encoder_Dir 				= __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3);
 80021b2:	4b1c      	ldr	r3, [pc, #112]	; (8002224 <Encoder_Scan+0x80>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0310 	and.w	r3, r3, #16
 80021bc:	2b10      	cmp	r3, #16
 80021be:	bf0c      	ite	eq
 80021c0:	2301      	moveq	r3, #1
 80021c2:	2300      	movne	r3, #0
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	461a      	mov	r2, r3
 80021c8:	4b17      	ldr	r3, [pc, #92]	; (8002228 <Encoder_Scan+0x84>)
 80021ca:	609a      	str	r2, [r3, #8]
	Encoder_State.MP_Encoder_Delta				= Encoder_State.MP_Encoder_Value - Encoder_State.MP_Encoder_Value_old;
 80021cc:	4b16      	ldr	r3, [pc, #88]	; (8002228 <Encoder_Scan+0x84>)
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	4b15      	ldr	r3, [pc, #84]	; (8002228 <Encoder_Scan+0x84>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	461a      	mov	r2, r3
 80021d8:	4b13      	ldr	r3, [pc, #76]	; (8002228 <Encoder_Scan+0x84>)
 80021da:	60da      	str	r2, [r3, #12]
	Encoder_State.fEncoder3Changes				= ( Encoder_State.MP_Encoder_Delta != 0 );
 80021dc:	4b12      	ldr	r3, [pc, #72]	; (8002228 <Encoder_Scan+0x84>)
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	bf14      	ite	ne
 80021e4:	2301      	movne	r3, #1
 80021e6:	2300      	moveq	r3, #0
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	461a      	mov	r2, r3
 80021ec:	4b0e      	ldr	r3, [pc, #56]	; (8002228 <Encoder_Scan+0x84>)
 80021ee:	741a      	strb	r2, [r3, #16]
	Encoder_State.Btn_pressed					= ENC_BTN_PRESSED;
 80021f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021f4:	480d      	ldr	r0, [pc, #52]	; (800222c <Encoder_Scan+0x88>)
 80021f6:	f005 ff49 	bl	800808c <HAL_GPIO_ReadPin>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	bf0c      	ite	eq
 8002200:	2301      	moveq	r3, #1
 8002202:	2300      	movne	r3, #0
 8002204:	b2db      	uxtb	r3, r3
 8002206:	461a      	mov	r2, r3
 8002208:	4b07      	ldr	r3, [pc, #28]	; (8002228 <Encoder_Scan+0x84>)
 800220a:	745a      	strb	r2, [r3, #17]

	if (Encoder_State.fEncoder3Changes)
 800220c:	4b06      	ldr	r3, [pc, #24]	; (8002228 <Encoder_Scan+0x84>)
 800220e:	7c1b      	ldrb	r3, [r3, #16]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d003      	beq.n	800221c <Encoder_Scan+0x78>
	{
		Encoder_State.MP_Encoder_Value_old = Encoder_State.MP_Encoder_Value;			// обновить предыдущее состояние энкодера для следующего цикла сканирования
 8002214:	4b04      	ldr	r3, [pc, #16]	; (8002228 <Encoder_Scan+0x84>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a03      	ldr	r2, [pc, #12]	; (8002228 <Encoder_Scan+0x84>)
 800221a:	6053      	str	r3, [r2, #4]
	}

	return Encoder_State.fEncoder3Changes;
 800221c:	4b02      	ldr	r3, [pc, #8]	; (8002228 <Encoder_Scan+0x84>)
 800221e:	7c1b      	ldrb	r3, [r3, #16]
}
 8002220:	4618      	mov	r0, r3
 8002222:	bd80      	pop	{r7, pc}
 8002224:	20008e8c 	.word	0x20008e8c
 8002228:	20008b3c 	.word	0x20008b3c
 800222c:	40020c00 	.word	0x40020c00

08002230 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
//__weak void configureTimerForRunTimeStats(void)
void configureTimerForRunTimeStats(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim9);
 8002234:	4802      	ldr	r0, [pc, #8]	; (8002240 <configureTimerForRunTimeStats+0x10>)
 8002236:	f008 fcaf 	bl	800ab98 <HAL_TIM_Base_Start>
}
 800223a:	bf00      	nop
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	20008f4c 	.word	0x20008f4c

08002244 <getRunTimeCounterValue>:

//__weak unsigned long getRunTimeCounterValue(void)
unsigned long getRunTimeCounterValue(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
    static unsigned long counter = 0;

     counter += __HAL_TIM_GET_COUNTER(&htim9);
 8002248:	4b08      	ldr	r3, [pc, #32]	; (800226c <getRunTimeCounterValue+0x28>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800224e:	4b08      	ldr	r3, [pc, #32]	; (8002270 <getRunTimeCounterValue+0x2c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4413      	add	r3, r2
 8002254:	4a06      	ldr	r2, [pc, #24]	; (8002270 <getRunTimeCounterValue+0x2c>)
 8002256:	6013      	str	r3, [r2, #0]
     __HAL_TIM_SET_COUNTER(&htim9, 0);
 8002258:	4b04      	ldr	r3, [pc, #16]	; (800226c <getRunTimeCounterValue+0x28>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2200      	movs	r2, #0
 800225e:	625a      	str	r2, [r3, #36]	; 0x24

     return counter;
 8002260:	4b03      	ldr	r3, [pc, #12]	; (8002270 <getRunTimeCounterValue+0x2c>)
 8002262:	681b      	ldr	r3, [r3, #0]
}
 8002264:	4618      	mov	r0, r3
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr
 800226c:	20008f4c 	.word	0x20008f4c
 8002270:	20000348 	.word	0x20000348

08002274 <MX_FREERTOS_Init>:

//======================================================================================
void MX_FREERTOS_Init(void)																// FreeRTOS initialization
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  // Create the mutex(es)
  myMutex_I2C1Handle 		= osMutexNew(&myMutex_I2C1_attributes);						// creation of myMutex_I2C1
 8002278:	4838      	ldr	r0, [pc, #224]	; (800235c <MX_FREERTOS_Init+0xe8>)
 800227a:	f00f f86b 	bl	8011354 <osMutexNew>
 800227e:	4602      	mov	r2, r0
 8002280:	4b37      	ldr	r3, [pc, #220]	; (8002360 <MX_FREERTOS_Init+0xec>)
 8002282:	601a      	str	r2, [r3, #0]
  MircoRL_Tx_MutexHandle 	= osMutexNew(&MutexMircoRL_Tx_attributes);					// creation of MutexMircoRL_Tx
 8002284:	4837      	ldr	r0, [pc, #220]	; (8002364 <MX_FREERTOS_Init+0xf0>)
 8002286:	f00f f865 	bl	8011354 <osMutexNew>
 800228a:	4602      	mov	r2, r0
 800228c:	4b36      	ldr	r3, [pc, #216]	; (8002368 <MX_FREERTOS_Init+0xf4>)
 800228e:	601a      	str	r2, [r3, #0]
  MircoRL_TxCMD_MutexHandle	= osMutexNew(&MutexMircoRL_TxCMD_attributes);				// creation of MutexMircoRL_TxCMD
 8002290:	4836      	ldr	r0, [pc, #216]	; (800236c <MX_FREERTOS_Init+0xf8>)
 8002292:	f00f f85f 	bl	8011354 <osMutexNew>
 8002296:	4602      	mov	r2, r0
 8002298:	4b35      	ldr	r3, [pc, #212]	; (8002370 <MX_FREERTOS_Init+0xfc>)
 800229a:	601a      	str	r2, [r3, #0]

  MicroRL_xRxSemaphore = xSemaphoreCreateCounting(10,0);
 800229c:	2100      	movs	r1, #0
 800229e:	200a      	movs	r0, #10
 80022a0:	f00f fcf7 	bl	8011c92 <xQueueCreateCountingSemaphore>
 80022a4:	4602      	mov	r2, r0
 80022a6:	4b33      	ldr	r3, [pc, #204]	; (8002374 <MX_FREERTOS_Init+0x100>)
 80022a8:	601a      	str	r2, [r3, #0]
  MicroRL_xTxSemaphore = xSemaphoreCreateBinary();
 80022aa:	2203      	movs	r2, #3
 80022ac:	2100      	movs	r1, #0
 80022ae:	2001      	movs	r0, #1
 80022b0:	f00f fbda 	bl	8011a68 <xQueueGenericCreate>
 80022b4:	4602      	mov	r2, r0
 80022b6:	4b30      	ldr	r3, [pc, #192]	; (8002378 <MX_FREERTOS_Init+0x104>)
 80022b8:	601a      	str	r2, [r3, #0]
  xSemaphoreGive(MicroRL_xTxSemaphore);
 80022ba:	4b2f      	ldr	r3, [pc, #188]	; (8002378 <MX_FREERTOS_Init+0x104>)
 80022bc:	6818      	ldr	r0, [r3, #0]
 80022be:	2300      	movs	r3, #0
 80022c0:	2200      	movs	r2, #0
 80022c2:	2100      	movs	r1, #0
 80022c4:	f00f fd16 	bl	8011cf4 <xQueueGenericSend>

  // Create the queue(s)
  myQueue_UART_RxHandle 	= osMessageQueueNew (32, sizeof(uint8_t), &myQueue_UART_Rx_attributes);	// creation of myQueue_UART_Rx
 80022c8:	4a2c      	ldr	r2, [pc, #176]	; (800237c <MX_FREERTOS_Init+0x108>)
 80022ca:	2101      	movs	r1, #1
 80022cc:	2020      	movs	r0, #32
 80022ce:	f00f f989 	bl	80115e4 <osMessageQueueNew>
 80022d2:	4602      	mov	r2, r0
 80022d4:	4b2a      	ldr	r3, [pc, #168]	; (8002380 <MX_FREERTOS_Init+0x10c>)
 80022d6:	601a      	str	r2, [r3, #0]

  // Create the thread(s)
  defaultTaskHandle 		= osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80022d8:	4a2a      	ldr	r2, [pc, #168]	; (8002384 <MX_FREERTOS_Init+0x110>)
 80022da:	2100      	movs	r1, #0
 80022dc:	482a      	ldr	r0, [pc, #168]	; (8002388 <MX_FREERTOS_Init+0x114>)
 80022de:	f00e ff61 	bl	80111a4 <osThreadNew>
 80022e2:	4602      	mov	r2, r0
 80022e4:	4b29      	ldr	r3, [pc, #164]	; (800238c <MX_FREERTOS_Init+0x118>)
 80022e6:	601a      	str	r2, [r3, #0]
  myTask_IMUHandle 			= osThreadNew(StartTask_IMU, NULL, &myTask_IMU_attributes);
 80022e8:	4a29      	ldr	r2, [pc, #164]	; (8002390 <MX_FREERTOS_Init+0x11c>)
 80022ea:	2100      	movs	r1, #0
 80022ec:	4829      	ldr	r0, [pc, #164]	; (8002394 <MX_FREERTOS_Init+0x120>)
 80022ee:	f00e ff59 	bl	80111a4 <osThreadNew>
 80022f2:	4602      	mov	r2, r0
 80022f4:	4b28      	ldr	r3, [pc, #160]	; (8002398 <MX_FREERTOS_Init+0x124>)
 80022f6:	601a      	str	r2, [r3, #0]
  myTask_LCDHandle 			= osThreadNew(StartTask_LCD, NULL, &myTask_LCD_attributes);
 80022f8:	4a28      	ldr	r2, [pc, #160]	; (800239c <MX_FREERTOS_Init+0x128>)
 80022fa:	2100      	movs	r1, #0
 80022fc:	4828      	ldr	r0, [pc, #160]	; (80023a0 <MX_FREERTOS_Init+0x12c>)
 80022fe:	f00e ff51 	bl	80111a4 <osThreadNew>
 8002302:	4602      	mov	r2, r0
 8002304:	4b27      	ldr	r3, [pc, #156]	; (80023a4 <MX_FREERTOS_Init+0x130>)
 8002306:	601a      	str	r2, [r3, #0]
  myTask_ADCHandle 			= osThreadNew(StartTask_ADC, NULL, &myTask_ADC_attributes);
 8002308:	4a27      	ldr	r2, [pc, #156]	; (80023a8 <MX_FREERTOS_Init+0x134>)
 800230a:	2100      	movs	r1, #0
 800230c:	4827      	ldr	r0, [pc, #156]	; (80023ac <MX_FREERTOS_Init+0x138>)
 800230e:	f00e ff49 	bl	80111a4 <osThreadNew>
 8002312:	4602      	mov	r2, r0
 8002314:	4b26      	ldr	r3, [pc, #152]	; (80023b0 <MX_FREERTOS_Init+0x13c>)
 8002316:	601a      	str	r2, [r3, #0]
  myTask_ScanCTRLHandle 	= osThreadNew(StartTask_ScanControls, NULL, &myTask_ScanCTRL_attributes);
 8002318:	4a26      	ldr	r2, [pc, #152]	; (80023b4 <MX_FREERTOS_Init+0x140>)
 800231a:	2100      	movs	r1, #0
 800231c:	4826      	ldr	r0, [pc, #152]	; (80023b8 <MX_FREERTOS_Init+0x144>)
 800231e:	f00e ff41 	bl	80111a4 <osThreadNew>
 8002322:	4602      	mov	r2, r0
 8002324:	4b25      	ldr	r3, [pc, #148]	; (80023bc <MX_FREERTOS_Init+0x148>)
 8002326:	601a      	str	r2, [r3, #0]
  myTask_ScanTempHandle 	= osThreadNew(StartTask_ScanTemperature, NULL, &myTask_ScanTemp_attributes);
 8002328:	4a25      	ldr	r2, [pc, #148]	; (80023c0 <MX_FREERTOS_Init+0x14c>)
 800232a:	2100      	movs	r1, #0
 800232c:	4825      	ldr	r0, [pc, #148]	; (80023c4 <MX_FREERTOS_Init+0x150>)
 800232e:	f00e ff39 	bl	80111a4 <osThreadNew>
 8002332:	4602      	mov	r2, r0
 8002334:	4b24      	ldr	r3, [pc, #144]	; (80023c8 <MX_FREERTOS_Init+0x154>)
 8002336:	601a      	str	r2, [r3, #0]
  myTask_SetStateHandle 	= osThreadNew(StartTask_SetState, NULL, &myTask_SetState_attributes);
 8002338:	4a24      	ldr	r2, [pc, #144]	; (80023cc <MX_FREERTOS_Init+0x158>)
 800233a:	2100      	movs	r1, #0
 800233c:	4824      	ldr	r0, [pc, #144]	; (80023d0 <MX_FREERTOS_Init+0x15c>)
 800233e:	f00e ff31 	bl	80111a4 <osThreadNew>
 8002342:	4602      	mov	r2, r0
 8002344:	4b23      	ldr	r3, [pc, #140]	; (80023d4 <MX_FREERTOS_Init+0x160>)
 8002346:	601a      	str	r2, [r3, #0]
  myTask_MicroRLHandle 		= osThreadNew(StartTask_MircoRL, NULL, &myTask_MicroRL_attributes);
 8002348:	4a23      	ldr	r2, [pc, #140]	; (80023d8 <MX_FREERTOS_Init+0x164>)
 800234a:	2100      	movs	r1, #0
 800234c:	4823      	ldr	r0, [pc, #140]	; (80023dc <MX_FREERTOS_Init+0x168>)
 800234e:	f00e ff29 	bl	80111a4 <osThreadNew>
 8002352:	4602      	mov	r2, r0
 8002354:	4b22      	ldr	r3, [pc, #136]	; (80023e0 <MX_FREERTOS_Init+0x16c>)
 8002356:	601a      	str	r2, [r3, #0]
}
 8002358:	bf00      	nop
 800235a:	bd80      	pop	{r7, pc}
 800235c:	0801aaf8 	.word	0x0801aaf8
 8002360:	20008cb4 	.word	0x20008cb4
 8002364:	0801ab08 	.word	0x0801ab08
 8002368:	20008a24 	.word	0x20008a24
 800236c:	0801ab18 	.word	0x0801ab18
 8002370:	20008ba4 	.word	0x20008ba4
 8002374:	20008958 	.word	0x20008958
 8002378:	20008a08 	.word	0x20008a08
 800237c:	0801aae0 	.word	0x0801aae0
 8002380:	20008c38 	.word	0x20008c38
 8002384:	0801a9c0 	.word	0x0801a9c0
 8002388:	080023e5 	.word	0x080023e5
 800238c:	20008c2c 	.word	0x20008c2c
 8002390:	0801a9e4 	.word	0x0801a9e4
 8002394:	080023fd 	.word	0x080023fd
 8002398:	20008c30 	.word	0x20008c30
 800239c:	0801aa08 	.word	0x0801aa08
 80023a0:	0800240d 	.word	0x0800240d
 80023a4:	20008cc0 	.word	0x20008cc0
 80023a8:	0801aa2c 	.word	0x0801aa2c
 80023ac:	080024a1 	.word	0x080024a1
 80023b0:	20008cb8 	.word	0x20008cb8
 80023b4:	0801aa50 	.word	0x0801aa50
 80023b8:	080024b5 	.word	0x080024b5
 80023bc:	20008c8c 	.word	0x20008c8c
 80023c0:	0801aa74 	.word	0x0801aa74
 80023c4:	080024e9 	.word	0x080024e9
 80023c8:	20008c34 	.word	0x20008c34
 80023cc:	0801aa98 	.word	0x0801aa98
 80023d0:	080025a9 	.word	0x080025a9
 80023d4:	20008cbc 	.word	0x20008cbc
 80023d8:	0801aabc 	.word	0x0801aabc
 80023dc:	08002651 	.word	0x08002651
 80023e0:	20008c90 	.word	0x20008c90

080023e4 <StartDefaultTask>:
//======================================================================================
void StartDefaultTask(void *argument)													// Поток по-умолчанию
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]

  MX_USB_DEVICE_Init();																	// init code for USB_DEVICE
 80023ec:	f012 f8de 	bl	80145ac <MX_USB_DEVICE_Init>

  BUZZER_BeepTIM();																		// Квакнуть баззером при старте
 80023f0:	f7ff f8a0 	bl	8001534 <BUZZER_BeepTIM>

  for(;;)
  {
	//LED_LIGHT_INV;
	// LED_GREEN_INV;
    osDelay(100);
 80023f4:	2064      	movs	r0, #100	; 0x64
 80023f6:	f00e ff7f 	bl	80112f8 <osDelay>
 80023fa:	e7fb      	b.n	80023f4 <StartDefaultTask+0x10>

080023fc <StartTask_IMU>:

  }
}
//======================================================================================
void StartTask_IMU(void *argument)														// Поток сканирования данных от МЕМС по вибрации
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    osDelay(10);
 8002404:	200a      	movs	r0, #10
 8002406:	f00e ff77 	bl	80112f8 <osDelay>
 800240a:	e7fb      	b.n	8002404 <StartTask_IMU+0x8>

0800240c <StartTask_LCD>:
  }
}
//======================================================================================
void StartTask_LCD(void *argument)														// Поток вывода на LCD экран
{
 800240c:	b590      	push	{r4, r7, lr}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]

  for(;;)
  {
	Display_Test(200,230);
 8002414:	21e6      	movs	r1, #230	; 0xe6
 8002416:	20c8      	movs	r0, #200	; 0xc8
 8002418:	f7ff fcc8 	bl	8001dac <Display_Test>
	Display_MotorDirection(50, 50, MotorDirection);										// Показать направление вращения мотора
 800241c:	4b1a      	ldr	r3, [pc, #104]	; (8002488 <StartTask_LCD+0x7c>)
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	461a      	mov	r2, r3
 8002422:	2132      	movs	r1, #50	; 0x32
 8002424:	2032      	movs	r0, #50	; 0x32
 8002426:	f7ff fd3b 	bl	8001ea0 <Display_MotorDirection>
	Display_MotorSpeed(250, 50, MotorSpeed);											// Показать скорость вращения мотора
 800242a:	4b18      	ldr	r3, [pc, #96]	; (800248c <StartTask_LCD+0x80>)
 800242c:	881b      	ldrh	r3, [r3, #0]
 800242e:	461a      	mov	r2, r3
 8002430:	2132      	movs	r1, #50	; 0x32
 8002432:	20fa      	movs	r0, #250	; 0xfa
 8002434:	f7ff fd80 	bl	8001f38 <Display_MotorSpeed>

	Display_SystemVoltage(100, 5);
 8002438:	2105      	movs	r1, #5
 800243a:	2064      	movs	r0, #100	; 0x64
 800243c:	f7ff fce0 	bl	8001e00 <Display_SystemVoltage>

	Display_Temperature(10, 100, Temperature_Motor);									// Темература от датчика мотора
 8002440:	4b13      	ldr	r3, [pc, #76]	; (8002490 <StartTask_LCD+0x84>)
 8002442:	cb18      	ldmia	r3, {r3, r4}
 8002444:	461a      	mov	r2, r3
 8002446:	4623      	mov	r3, r4
 8002448:	2164      	movs	r1, #100	; 0x64
 800244a:	200a      	movs	r0, #10
 800244c:	f7ff fd9c 	bl	8001f88 <Display_Temperature>
	Display_Temperature(10, 140, Temperature_Driver);									// Темература от датчика драйвера
 8002450:	4b10      	ldr	r3, [pc, #64]	; (8002494 <StartTask_LCD+0x88>)
 8002452:	cb18      	ldmia	r3, {r3, r4}
 8002454:	461a      	mov	r2, r3
 8002456:	4623      	mov	r3, r4
 8002458:	218c      	movs	r1, #140	; 0x8c
 800245a:	200a      	movs	r0, #10
 800245c:	f7ff fd94 	bl	8001f88 <Display_Temperature>
	Display_Temperature(10, 180, Temperature_Air);										// Темература от датчика воздуха
 8002460:	4b0d      	ldr	r3, [pc, #52]	; (8002498 <StartTask_LCD+0x8c>)
 8002462:	cb18      	ldmia	r3, {r3, r4}
 8002464:	461a      	mov	r2, r3
 8002466:	4623      	mov	r3, r4
 8002468:	21b4      	movs	r1, #180	; 0xb4
 800246a:	200a      	movs	r0, #10
 800246c:	f7ff fd8c 	bl	8001f88 <Display_Temperature>

	Display_Encoder(50, 230);															// Значение энкодера
 8002470:	21e6      	movs	r1, #230	; 0xe6
 8002472:	2032      	movs	r0, #50	; 0x32
 8002474:	f7ff fdb0 	bl	8001fd8 <Display_Encoder>

	LED_GREEN_INV;
 8002478:	2110      	movs	r1, #16
 800247a:	4808      	ldr	r0, [pc, #32]	; (800249c <StartTask_LCD+0x90>)
 800247c:	f005 fe35 	bl	80080ea <HAL_GPIO_TogglePin>

    osDelay(200);
 8002480:	20c8      	movs	r0, #200	; 0xc8
 8002482:	f00e ff39 	bl	80112f8 <osDelay>
	Display_Test(200,230);
 8002486:	e7c5      	b.n	8002414 <StartTask_LCD+0x8>
 8002488:	20008ba8 	.word	0x20008ba8
 800248c:	20008a0c 	.word	0x20008a0c
 8002490:	20008960 	.word	0x20008960
 8002494:	20008a18 	.word	0x20008a18
 8002498:	20008970 	.word	0x20008970
 800249c:	40020800 	.word	0x40020800

080024a0 <StartTask_ADC>:
  }
}
//======================================================================================
void StartTask_ADC(void *argument)														// Поток для сканирования АЦП (Напряжения питания и мотора, Тока питания и мотора, положения регулятора скорости)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]

  for(;;)
  {
	ADC_ScanState();																	// Замер из АЦП по всем каналам сразу
 80024a8:	f7fe fe0e 	bl	80010c8 <ADC_ScanState>
    osDelay(50);
 80024ac:	2032      	movs	r0, #50	; 0x32
 80024ae:	f00e ff23 	bl	80112f8 <osDelay>
	ADC_ScanState();																	// Замер из АЦП по всем каналам сразу
 80024b2:	e7f9      	b.n	80024a8 <StartTask_ADC+0x8>

080024b4 <StartTask_ScanControls>:
  }
}
//======================================================================================
void StartTask_ScanControls(void *argument)												// Поток сканироваяни элементов управления
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  HAL_TIM_Base_Start_IT(&htim4);
 80024bc:	4809      	ldr	r0, [pc, #36]	; (80024e4 <StartTask_ScanControls+0x30>)
 80024be:	f008 fbd3 	bl	800ac68 <HAL_TIM_Base_Start_IT>

  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);											// Запустить TIM4 для анализа оборотов бака
 80024c2:	2100      	movs	r1, #0
 80024c4:	4807      	ldr	r0, [pc, #28]	; (80024e4 <StartTask_ScanControls+0x30>)
 80024c6:	f008 fd6d 	bl	800afa4 <HAL_TIM_IC_Start_IT>

  for(;;)
  {
	Motor_Scan_DirectionState(); 														// Сканирование переключателя направления движения мотора
 80024ca:	f001 fae7 	bl	8003a9c <Motor_Scan_DirectionState>

	if (Encoder_Scan())																	// Просканировать энкодер и если состояние энкодера поменялось, выполниить действие
 80024ce:	f7ff fe69 	bl	80021a4 <Encoder_Scan>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <StartTask_ScanControls+0x28>
	{
		BUZZER_Beep_TickTIM();															// Сделать короткий тик баззером на каждую смену энкодера
 80024d8:	f7ff f848 	bl	800156c <BUZZER_Beep_TickTIM>
//	if (HAL_GPIO_ReadPin(SNS_HALL_IN_GPIO_Port,  SNS_HALL_IN_Pin) == GPIO_PIN_RESET)
//		LED_LIGHT_RESET;
//	else
//		LED_LIGHT_SET;

    osDelay(10);
 80024dc:	200a      	movs	r0, #10
 80024de:	f00e ff0b 	bl	80112f8 <osDelay>
	Motor_Scan_DirectionState(); 														// Сканирование переключателя направления движения мотора
 80024e2:	e7f2      	b.n	80024ca <StartTask_ScanControls+0x16>
 80024e4:	20008e0c 	.word	0x20008e0c

080024e8 <StartTask_ScanTemperature>:
  }
}
//======================================================================================
void StartTask_ScanTemperature(void *argument)											// Поток сканирования температуры по 1-Wire от термодатчиков DS18B20
{
 80024e8:	b590      	push	{r4, r7, lr}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  osDelay(200);
 80024f0:	20c8      	movs	r0, #200	; 0xc8
 80024f2:	f00e ff01 	bl	80112f8 <osDelay>

  for(;;)
  {
	DS18B20_Measure_Async_Start(TEMP_MOTOR_1W_GPIO_Port, 	TEMP_MOTOR_1W_Pin);			// Запрос на старт замера температуры мотора
 80024f6:	2102      	movs	r1, #2
 80024f8:	4824      	ldr	r0, [pc, #144]	; (800258c <StartTask_ScanTemperature+0xa4>)
 80024fa:	f7ff faaf 	bl	8001a5c <DS18B20_Measure_Async_Start>
	DS18B20_Measure_Async_Start(TEMP_DRIVER_1W_GPIO_Port,	TEMP_DRIVER_1W_Pin);		// Запрос на старт замера температуры драйвера мотора
 80024fe:	2104      	movs	r1, #4
 8002500:	4822      	ldr	r0, [pc, #136]	; (800258c <StartTask_ScanTemperature+0xa4>)
 8002502:	f7ff faab 	bl	8001a5c <DS18B20_Measure_Async_Start>
	DS18B20_Measure_Async_Start(TEMP_AIR_1W_GPIO_Port, 		TEMP_AIR_1W_Pin);			// Запрос на старт замера температуры воздуха
 8002506:	2101      	movs	r1, #1
 8002508:	4820      	ldr	r0, [pc, #128]	; (800258c <StartTask_ScanTemperature+0xa4>)
 800250a:	f7ff faa7 	bl	8001a5c <DS18B20_Measure_Async_Start>
	osDelay(1000);																		// задержка для 12-битного преобразования
 800250e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002512:	f00e fef1 	bl	80112f8 <osDelay>
	Temperature_Motor_RAW	= DS18B20_Measure_Async_FinishN(TEMP_MOTOR_1W_GPIO_Port, 	TEMP_MOTOR_1W_Pin);			// Возврат ответа от финальной фазы замера для температуры мотора
 8002516:	2102      	movs	r1, #2
 8002518:	481c      	ldr	r0, [pc, #112]	; (800258c <StartTask_ScanTemperature+0xa4>)
 800251a:	f7ff fadd 	bl	8001ad8 <DS18B20_Measure_Async_FinishN>
 800251e:	4603      	mov	r3, r0
 8002520:	461a      	mov	r2, r3
 8002522:	4b1b      	ldr	r3, [pc, #108]	; (8002590 <StartTask_ScanTemperature+0xa8>)
 8002524:	801a      	strh	r2, [r3, #0]
	Temperature_Driver_RAW	= DS18B20_Measure_Async_FinishN(TEMP_DRIVER_1W_GPIO_Port, 	TEMP_DRIVER_1W_Pin);		// Возврат ответа от финальной фазы замера для температуры драйвера мотора
 8002526:	2104      	movs	r1, #4
 8002528:	4818      	ldr	r0, [pc, #96]	; (800258c <StartTask_ScanTemperature+0xa4>)
 800252a:	f7ff fad5 	bl	8001ad8 <DS18B20_Measure_Async_FinishN>
 800252e:	4603      	mov	r3, r0
 8002530:	461a      	mov	r2, r3
 8002532:	4b18      	ldr	r3, [pc, #96]	; (8002594 <StartTask_ScanTemperature+0xac>)
 8002534:	801a      	strh	r2, [r3, #0]
	Temperature_Air_RAW		= DS18B20_Measure_Async_FinishN(TEMP_AIR_1W_GPIO_Port, 		TEMP_AIR_1W_Pin);			// Возврат ответа от финальной фазы замера для температуры воздуха
 8002536:	2101      	movs	r1, #1
 8002538:	4814      	ldr	r0, [pc, #80]	; (800258c <StartTask_ScanTemperature+0xa4>)
 800253a:	f7ff facd 	bl	8001ad8 <DS18B20_Measure_Async_FinishN>
 800253e:	4603      	mov	r3, r0
 8002540:	461a      	mov	r2, r3
 8002542:	4b15      	ldr	r3, [pc, #84]	; (8002598 <StartTask_ScanTemperature+0xb0>)
 8002544:	801a      	strh	r2, [r3, #0]

	Temperature_Motor		= DS18B20_Temperature_Double(Temperature_Motor_RAW);		// Пересчет в double
 8002546:	4b12      	ldr	r3, [pc, #72]	; (8002590 <StartTask_ScanTemperature+0xa8>)
 8002548:	881b      	ldrh	r3, [r3, #0]
 800254a:	4618      	mov	r0, r3
 800254c:	f7ff fb1a 	bl	8001b84 <DS18B20_Temperature_Double>
 8002550:	4603      	mov	r3, r0
 8002552:	460c      	mov	r4, r1
 8002554:	4a11      	ldr	r2, [pc, #68]	; (800259c <StartTask_ScanTemperature+0xb4>)
 8002556:	e9c2 3400 	strd	r3, r4, [r2]
	Temperature_Driver		= DS18B20_Temperature_Double(Temperature_Driver_RAW);		// Пересчет в double
 800255a:	4b0e      	ldr	r3, [pc, #56]	; (8002594 <StartTask_ScanTemperature+0xac>)
 800255c:	881b      	ldrh	r3, [r3, #0]
 800255e:	4618      	mov	r0, r3
 8002560:	f7ff fb10 	bl	8001b84 <DS18B20_Temperature_Double>
 8002564:	4603      	mov	r3, r0
 8002566:	460c      	mov	r4, r1
 8002568:	4a0d      	ldr	r2, [pc, #52]	; (80025a0 <StartTask_ScanTemperature+0xb8>)
 800256a:	e9c2 3400 	strd	r3, r4, [r2]
	Temperature_Air			= DS18B20_Temperature_Double(Temperature_Air_RAW);			// Пересчет в double
 800256e:	4b0a      	ldr	r3, [pc, #40]	; (8002598 <StartTask_ScanTemperature+0xb0>)
 8002570:	881b      	ldrh	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f7ff fb06 	bl	8001b84 <DS18B20_Temperature_Double>
 8002578:	4603      	mov	r3, r0
 800257a:	460c      	mov	r4, r1
 800257c:	4a09      	ldr	r2, [pc, #36]	; (80025a4 <StartTask_ScanTemperature+0xbc>)
 800257e:	e9c2 3400 	strd	r3, r4, [r2]

    osDelay(15000);																		// Интервал сканирования температур - 10 сек
 8002582:	f643 2098 	movw	r0, #15000	; 0x3a98
 8002586:	f00e feb7 	bl	80112f8 <osDelay>
	DS18B20_Measure_Async_Start(TEMP_MOTOR_1W_GPIO_Port, 	TEMP_MOTOR_1W_Pin);			// Запрос на старт замера температуры мотора
 800258a:	e7b4      	b.n	80024f6 <StartTask_ScanTemperature+0xe>
 800258c:	40020400 	.word	0x40020400
 8002590:	20008b34 	.word	0x20008b34
 8002594:	20008a0e 	.word	0x20008a0e
 8002598:	20008b2c 	.word	0x20008b2c
 800259c:	20008960 	.word	0x20008960
 80025a0:	20008a18 	.word	0x20008a18
 80025a4:	20008970 	.word	0x20008970

080025a8 <StartTask_SetState>:
  }
}
//======================================================================================
void StartTask_SetState(void *argument)													// Поток установки сотояний системы
{
 80025a8:	b590      	push	{r4, r7, lr}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  for(;;)
  {

	Motor_Set_DirectionState(MotorDirection);											// Установить направление мотора
 80025b0:	4b23      	ldr	r3, [pc, #140]	; (8002640 <StartTask_SetState+0x98>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f001 fac3 	bl	8003b40 <Motor_Set_DirectionState>

	//DAC_SetValue((uint8_t)((double)Speed_value_percent*(double)2.55));				// Установить скорость мотора и пересчитать шкалу из  [0..100] в [0..255], получим на выход е DAC напряжение [0..3.3V]
	DAC_SetValue((uint8_t)((double)Speed_value_percent*(double)1.58));					// Установить скорость мотора и пересчитать шкалу из  [0..100] в [0..255], получим на выход е DAC напряжение [0..3.3V] (1.58 - коэф чтобы получить на выходе 0..5V после ЦАП+ОУ)
 80025ba:	4b22      	ldr	r3, [pc, #136]	; (8002644 <StartTask_SetState+0x9c>)
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f7fd ff32 	bl	8000428 <__aeabi_ui2d>
 80025c4:	a31a      	add	r3, pc, #104	; (adr r3, 8002630 <StartTask_SetState+0x88>)
 80025c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ca:	f7fd ffa7 	bl	800051c <__aeabi_dmul>
 80025ce:	4603      	mov	r3, r0
 80025d0:	460c      	mov	r4, r1
 80025d2:	4618      	mov	r0, r3
 80025d4:	4621      	mov	r1, r4
 80025d6:	f7fe fa79 	bl	8000acc <__aeabi_d2uiz>
 80025da:	4603      	mov	r3, r0
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff f84c 	bl	800167c <DAC_SetValue>

	MotorSpeed = ((MotorSpeed_Period > 0) ? ((uint16_t)((double)60000/(double)MotorSpeed_Period)) : (0) );			// Пересчет периода оборотов мотора от датчика Холла в скорость (стелано на таймере-4)
 80025e4:	4b18      	ldr	r3, [pc, #96]	; (8002648 <StartTask_SetState+0xa0>)
 80025e6:	881b      	ldrh	r3, [r3, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d016      	beq.n	800261a <StartTask_SetState+0x72>
 80025ec:	4b16      	ldr	r3, [pc, #88]	; (8002648 <StartTask_SetState+0xa0>)
 80025ee:	881b      	ldrh	r3, [r3, #0]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7fd ff19 	bl	8000428 <__aeabi_ui2d>
 80025f6:	4603      	mov	r3, r0
 80025f8:	460c      	mov	r4, r1
 80025fa:	461a      	mov	r2, r3
 80025fc:	4623      	mov	r3, r4
 80025fe:	a10e      	add	r1, pc, #56	; (adr r1, 8002638 <StartTask_SetState+0x90>)
 8002600:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002604:	f7fe f8b4 	bl	8000770 <__aeabi_ddiv>
 8002608:	4603      	mov	r3, r0
 800260a:	460c      	mov	r4, r1
 800260c:	4618      	mov	r0, r3
 800260e:	4621      	mov	r1, r4
 8002610:	f7fe fa5c 	bl	8000acc <__aeabi_d2uiz>
 8002614:	4603      	mov	r3, r0
 8002616:	b29b      	uxth	r3, r3
 8002618:	e000      	b.n	800261c <StartTask_SetState+0x74>
 800261a:	2300      	movs	r3, #0
 800261c:	4a0b      	ldr	r2, [pc, #44]	; (800264c <StartTask_SetState+0xa4>)
 800261e:	8013      	strh	r3, [r2, #0]


	//FAN_Set_Speed(Speed_value_percent);													// Установить скорость мотора вентилятора охлаждения (ШИМ)
	FAN_Set_Speed(0);																	// Установить скорость мотора вентилятора охлаждения (ШИМ)
 8002620:	2000      	movs	r0, #0
 8002622:	f001 fad7 	bl	8003bd4 <FAN_Set_Speed>



    osDelay(20);
 8002626:	2014      	movs	r0, #20
 8002628:	f00e fe66 	bl	80112f8 <osDelay>
	Motor_Set_DirectionState(MotorDirection);											// Установить направление мотора
 800262c:	e7c0      	b.n	80025b0 <StartTask_SetState+0x8>
 800262e:	bf00      	nop
 8002630:	147ae148 	.word	0x147ae148
 8002634:	3ff947ae 	.word	0x3ff947ae
 8002638:	00000000 	.word	0x00000000
 800263c:	40ed4c00 	.word	0x40ed4c00
 8002640:	20008ba8 	.word	0x20008ba8
 8002644:	20008968 	.word	0x20008968
 8002648:	20008a20 	.word	0x20008a20
 800264c:	20008a0c 	.word	0x20008a0c

08002650 <StartTask_MircoRL>:
  }
}
//======================================================================================
void StartTask_MircoRL(void *argument)													// командный интерпретатор
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
	UNUSED(argument);
	microrl_terminalInit();																// нициализация командного интерпретатора
 8002658:	f003 fb12 	bl	8005c80 <microrl_terminalInit>

	HAL_UART_Receive_IT(&huart5, (uint8_t *)MainCPU_Rx_Buffer, 1);						// делаем начальный запрос на асинхронный прием обного байта - стартуем прием данных от UART на прерываниях
 800265c:	2201      	movs	r2, #1
 800265e:	4903      	ldr	r1, [pc, #12]	; (800266c <StartTask_MircoRL+0x1c>)
 8002660:	4803      	ldr	r0, [pc, #12]	; (8002670 <StartTask_MircoRL+0x20>)
 8002662:	f009 fe09 	bl	800c278 <HAL_UART_Receive_IT>

	while(1)
	{
		microrl_terminalProcess();														// Процесс просыпается от семафора MicroRL_xRxSemaphore
 8002666:	f003 fb3f 	bl	8005ce8 <microrl_terminalProcess>
 800266a:	e7fc      	b.n	8002666 <StartTask_MircoRL+0x16>
 800266c:	20008b30 	.word	0x20008b30
 8002670:	20008fcc 	.word	0x20008fcc

08002674 <HAL_UART_RxCpltCallback>:
	}
}
//=======================================================================================
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
//			if( GPS_Rx_QueueHandle != 0 )
//				xQueueSendFromISR( GPS_Rx_QueueHandle,  ( void * )&MP_GPS_USART_RxBuffer[0], &xHigherPriorityTaskWoken  ); // записываем в очередь принятый байт от GPS
//			HAL_UART_Receive_IT(&huart3, (uint8_t *)MP_GPS_USART_RxBuffer, 1);			// делаем запрос на асинхронный прием обного байта
//		}
//
	if ( huart->Instance == UART5 ) 												// Если это колбэк по прерыванию от USART-5  - запрос в терминал MicroRL командной строки
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a1a      	ldr	r2, [pc, #104]	; (80026ec <HAL_UART_RxCpltCallback+0x78>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d12d      	bne.n	80026e2 <HAL_UART_RxCpltCallback+0x6e>
	{
		//USART2->DR = MainCPU_Rx_Buffer[0];										// делаем эхо вывод в виртуальный COM-порта на PC (самый быстрый вариант)

		MircoRL_sRxRingBuf.data[MircoRL_sRxRingBuf.wrIdx++] = MainCPU_Rx_Buffer[0];	// складываем полученный байт в кольцевой буфер приема
 8002686:	4b1a      	ldr	r3, [pc, #104]	; (80026f0 <HAL_UART_RxCpltCallback+0x7c>)
 8002688:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800268c:	1c5a      	adds	r2, r3, #1
 800268e:	4918      	ldr	r1, [pc, #96]	; (80026f0 <HAL_UART_RxCpltCallback+0x7c>)
 8002690:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
 8002694:	4a17      	ldr	r2, [pc, #92]	; (80026f4 <HAL_UART_RxCpltCallback+0x80>)
 8002696:	7811      	ldrb	r1, [r2, #0]
 8002698:	4a15      	ldr	r2, [pc, #84]	; (80026f0 <HAL_UART_RxCpltCallback+0x7c>)
 800269a:	54d1      	strb	r1, [r2, r3]
		if (MircoRL_sRxRingBuf.wrIdx >= MICRORL_uartSIZE_OF_RING_BUFFER)			// переход через 0
 800269c:	4b14      	ldr	r3, [pc, #80]	; (80026f0 <HAL_UART_RxCpltCallback+0x7c>)
 800269e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026a2:	2b7f      	cmp	r3, #127	; 0x7f
 80026a4:	dd03      	ble.n	80026ae <HAL_UART_RxCpltCallback+0x3a>
		{
			MircoRL_sRxRingBuf.wrIdx = 0;
 80026a6:	4b12      	ldr	r3, [pc, #72]	; (80026f0 <HAL_UART_RxCpltCallback+0x7c>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		}
		portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 80026ae:	2300      	movs	r3, #0
 80026b0:	60fb      	str	r3, [r7, #12]
		xSemaphoreGiveFromISR(MicroRL_xRxSemaphore, &xHigherPriorityTaskWoken);		// Семафорим в StartTask_MircoRL что прилетел байт из UART и что-то с ним нужно сделать
 80026b2:	4b11      	ldr	r3, [pc, #68]	; (80026f8 <HAL_UART_RxCpltCallback+0x84>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f107 020c 	add.w	r2, r7, #12
 80026ba:	4611      	mov	r1, r2
 80026bc:	4618      	mov	r0, r3
 80026be:	f00f fca7 	bl	8012010 <xQueueGiveFromISR>
		if( xHigherPriorityTaskWoken != pdFALSE )
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d007      	beq.n	80026d8 <HAL_UART_RxCpltCallback+0x64>
		{
			portYIELD();
 80026c8:	4b0c      	ldr	r3, [pc, #48]	; (80026fc <HAL_UART_RxCpltCallback+0x88>)
 80026ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	f3bf 8f4f 	dsb	sy
 80026d4:	f3bf 8f6f 	isb	sy
		}
		HAL_UART_Receive_IT(&huart5, (uint8_t *)MainCPU_Rx_Buffer, 1);				// делаем опять запрос на асинхронный прием обного байта
 80026d8:	2201      	movs	r2, #1
 80026da:	4906      	ldr	r1, [pc, #24]	; (80026f4 <HAL_UART_RxCpltCallback+0x80>)
 80026dc:	4808      	ldr	r0, [pc, #32]	; (8002700 <HAL_UART_RxCpltCallback+0x8c>)
 80026de:	f009 fdcb 	bl	800c278 <HAL_UART_Receive_IT>
	}
}
 80026e2:	bf00      	nop
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	40005000 	.word	0x40005000
 80026f0:	2000897c 	.word	0x2000897c
 80026f4:	20008b30 	.word	0x20008b30
 80026f8:	20008958 	.word	0x20008958
 80026fc:	e000ed04 	.word	0xe000ed04
 8002700:	20008fcc 	.word	0x20008fcc

08002704 <MX_GPIO_Init>:
//         EXTI
//     PA8 ------> RCC_MCO

//======================================================================================
void MX_GPIO_Init(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b08c      	sub	sp, #48	; 0x30
 8002708:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800270a:	f107 031c 	add.w	r3, r7, #28
 800270e:	2200      	movs	r2, #0
 8002710:	601a      	str	r2, [r3, #0]
 8002712:	605a      	str	r2, [r3, #4]
 8002714:	609a      	str	r2, [r3, #8]
 8002716:	60da      	str	r2, [r3, #12]
 8002718:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800271a:	4b52      	ldr	r3, [pc, #328]	; (8002864 <MX_GPIO_Init+0x160>)
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	4a51      	ldr	r2, [pc, #324]	; (8002864 <MX_GPIO_Init+0x160>)
 8002720:	f043 0301 	orr.w	r3, r3, #1
 8002724:	61d3      	str	r3, [r2, #28]
 8002726:	4b4f      	ldr	r3, [pc, #316]	; (8002864 <MX_GPIO_Init+0x160>)
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	61bb      	str	r3, [r7, #24]
 8002730:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002732:	4b4c      	ldr	r3, [pc, #304]	; (8002864 <MX_GPIO_Init+0x160>)
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	4a4b      	ldr	r2, [pc, #300]	; (8002864 <MX_GPIO_Init+0x160>)
 8002738:	f043 0302 	orr.w	r3, r3, #2
 800273c:	61d3      	str	r3, [r2, #28]
 800273e:	4b49      	ldr	r3, [pc, #292]	; (8002864 <MX_GPIO_Init+0x160>)
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	617b      	str	r3, [r7, #20]
 8002748:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800274a:	4b46      	ldr	r3, [pc, #280]	; (8002864 <MX_GPIO_Init+0x160>)
 800274c:	69db      	ldr	r3, [r3, #28]
 800274e:	4a45      	ldr	r2, [pc, #276]	; (8002864 <MX_GPIO_Init+0x160>)
 8002750:	f043 0304 	orr.w	r3, r3, #4
 8002754:	61d3      	str	r3, [r2, #28]
 8002756:	4b43      	ldr	r3, [pc, #268]	; (8002864 <MX_GPIO_Init+0x160>)
 8002758:	69db      	ldr	r3, [r3, #28]
 800275a:	f003 0304 	and.w	r3, r3, #4
 800275e:	613b      	str	r3, [r7, #16]
 8002760:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002762:	4b40      	ldr	r3, [pc, #256]	; (8002864 <MX_GPIO_Init+0x160>)
 8002764:	69db      	ldr	r3, [r3, #28]
 8002766:	4a3f      	ldr	r2, [pc, #252]	; (8002864 <MX_GPIO_Init+0x160>)
 8002768:	f043 0308 	orr.w	r3, r3, #8
 800276c:	61d3      	str	r3, [r2, #28]
 800276e:	4b3d      	ldr	r3, [pc, #244]	; (8002864 <MX_GPIO_Init+0x160>)
 8002770:	69db      	ldr	r3, [r3, #28]
 8002772:	f003 0308 	and.w	r3, r3, #8
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800277a:	4b3a      	ldr	r3, [pc, #232]	; (8002864 <MX_GPIO_Init+0x160>)
 800277c:	69db      	ldr	r3, [r3, #28]
 800277e:	4a39      	ldr	r2, [pc, #228]	; (8002864 <MX_GPIO_Init+0x160>)
 8002780:	f043 0310 	orr.w	r3, r3, #16
 8002784:	61d3      	str	r3, [r2, #28]
 8002786:	4b37      	ldr	r3, [pc, #220]	; (8002864 <MX_GPIO_Init+0x160>)
 8002788:	69db      	ldr	r3, [r3, #28]
 800278a:	f003 0310 	and.w	r3, r3, #16
 800278e:	60bb      	str	r3, [r7, #8]
 8002790:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002792:	4b34      	ldr	r3, [pc, #208]	; (8002864 <MX_GPIO_Init+0x160>)
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	4a33      	ldr	r2, [pc, #204]	; (8002864 <MX_GPIO_Init+0x160>)
 8002798:	f043 0320 	orr.w	r3, r3, #32
 800279c:	61d3      	str	r3, [r2, #28]
 800279e:	4b31      	ldr	r3, [pc, #196]	; (8002864 <MX_GPIO_Init+0x160>)
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	f003 0320 	and.w	r3, r3, #32
 80027a6:	607b      	str	r3, [r7, #4]
 80027a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_LIGHT_Pin|MOTOR_FWD_Pin|MOTOR_BWD_Pin, GPIO_PIN_RESET);
 80027aa:	2200      	movs	r2, #0
 80027ac:	21e0      	movs	r1, #224	; 0xe0
 80027ae:	482e      	ldr	r0, [pc, #184]	; (8002868 <MX_GPIO_Init+0x164>)
 80027b0:	f005 fc83 	bl	80080ba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI2_LCD_DC_Pin|SPI2_LCD_RST_Pin|SPI2_LCD_CS_Pin|SPI2_LCD_LED_Pin
 80027b4:	2200      	movs	r2, #0
 80027b6:	211f      	movs	r1, #31
 80027b8:	482c      	ldr	r0, [pc, #176]	; (800286c <MX_GPIO_Init+0x168>)
 80027ba:	f005 fc7e 	bl	80080ba <HAL_GPIO_WritePin>
                          |LED_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_SD_CS_Pin, GPIO_PIN_RESET);
 80027be:	2200      	movs	r2, #0
 80027c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027c4:	482a      	ldr	r0, [pc, #168]	; (8002870 <MX_GPIO_Init+0x16c>)
 80027c6:	f005 fc78 	bl	80080ba <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = LED_LIGHT_Pin|MOTOR_FWD_Pin|MOTOR_BWD_Pin;
 80027ca:	23e0      	movs	r3, #224	; 0xe0
 80027cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027ce:	2301      	movs	r3, #1
 80027d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d2:	2300      	movs	r3, #0
 80027d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d6:	2300      	movs	r3, #0
 80027d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027da:	f107 031c 	add.w	r3, r7, #28
 80027de:	4619      	mov	r1, r3
 80027e0:	4821      	ldr	r0, [pc, #132]	; (8002868 <MX_GPIO_Init+0x164>)
 80027e2:	f005 fac5 	bl	8007d70 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SPI2_LCD_DC_Pin|SPI2_LCD_RST_Pin|SPI2_LCD_CS_Pin|SPI2_LCD_LED_Pin
 80027e6:	231f      	movs	r3, #31
 80027e8:	61fb      	str	r3, [r7, #28]
                          |LED_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027ea:	2301      	movs	r3, #1
 80027ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ee:	2300      	movs	r3, #0
 80027f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f2:	2300      	movs	r3, #0
 80027f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027f6:	f107 031c 	add.w	r3, r7, #28
 80027fa:	4619      	mov	r1, r3
 80027fc:	481b      	ldr	r0, [pc, #108]	; (800286c <MX_GPIO_Init+0x168>)
 80027fe:	f005 fab7 	bl	8007d70 <HAL_GPIO_Init>


  GPIO_InitStruct.Pin = SPI1_SD_CS_Pin;
 8002802:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002806:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002808:	2301      	movs	r3, #1
 800280a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280c:	2300      	movs	r3, #0
 800280e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002810:	2300      	movs	r3, #0
 8002812:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI1_SD_CS_GPIO_Port, &GPIO_InitStruct);
 8002814:	f107 031c 	add.w	r3, r7, #28
 8002818:	4619      	mov	r1, r3
 800281a:	4815      	ldr	r0, [pc, #84]	; (8002870 <MX_GPIO_Init+0x16c>)
 800281c:	f005 faa8 	bl	8007d70 <HAL_GPIO_Init>


  GPIO_InitStruct.Pin = INT_IMU_Pin;
 8002820:	2301      	movs	r3, #1
 8002822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002824:	4b13      	ldr	r3, [pc, #76]	; (8002874 <MX_GPIO_Init+0x170>)
 8002826:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002828:	2300      	movs	r3, #0
 800282a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(INT_IMU_GPIO_Port, &GPIO_InitStruct);
 800282c:	f107 031c 	add.w	r3, r7, #28
 8002830:	4619      	mov	r1, r3
 8002832:	4811      	ldr	r0, [pc, #68]	; (8002878 <MX_GPIO_Init+0x174>)
 8002834:	f005 fa9c 	bl	8007d70 <HAL_GPIO_Init>

  // Выход тактовой частоты MCO
  GPIO_InitStruct.Pin = MCO_Pin;
 8002838:	f44f 7380 	mov.w	r3, #256	; 0x100
 800283c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283e:	2302      	movs	r3, #2
 8002840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002842:	2300      	movs	r3, #0
 8002844:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002846:	2300      	movs	r3, #0
 8002848:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800284a:	2300      	movs	r3, #0
 800284c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MCO_GPIO_Port, &GPIO_InitStruct);
 800284e:	f107 031c 	add.w	r3, r7, #28
 8002852:	4619      	mov	r1, r3
 8002854:	4809      	ldr	r0, [pc, #36]	; (800287c <MX_GPIO_Init+0x178>)
 8002856:	f005 fa8b 	bl	8007d70 <HAL_GPIO_Init>

}
 800285a:	bf00      	nop
 800285c:	3730      	adds	r7, #48	; 0x30
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	40023800 	.word	0x40023800
 8002868:	40021000 	.word	0x40021000
 800286c:	40020800 	.word	0x40020800
 8002870:	40020400 	.word	0x40020400
 8002874:	10110000 	.word	0x10110000
 8002878:	40020c00 	.word	0x40020c00
 800287c:	40020000 	.word	0x40020000

08002880 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

//======================================================================================
void MX_I2C1_Init(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8002884:	4b13      	ldr	r3, [pc, #76]	; (80028d4 <MX_I2C1_Init+0x54>)
 8002886:	4a14      	ldr	r2, [pc, #80]	; (80028d8 <MX_I2C1_Init+0x58>)
 8002888:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800288a:	4b12      	ldr	r3, [pc, #72]	; (80028d4 <MX_I2C1_Init+0x54>)
 800288c:	4a13      	ldr	r2, [pc, #76]	; (80028dc <MX_I2C1_Init+0x5c>)
 800288e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002890:	4b10      	ldr	r3, [pc, #64]	; (80028d4 <MX_I2C1_Init+0x54>)
 8002892:	2200      	movs	r2, #0
 8002894:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002896:	4b0f      	ldr	r3, [pc, #60]	; (80028d4 <MX_I2C1_Init+0x54>)
 8002898:	2200      	movs	r2, #0
 800289a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800289c:	4b0d      	ldr	r3, [pc, #52]	; (80028d4 <MX_I2C1_Init+0x54>)
 800289e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80028a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028a4:	4b0b      	ldr	r3, [pc, #44]	; (80028d4 <MX_I2C1_Init+0x54>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80028aa:	4b0a      	ldr	r3, [pc, #40]	; (80028d4 <MX_I2C1_Init+0x54>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028b0:	4b08      	ldr	r3, [pc, #32]	; (80028d4 <MX_I2C1_Init+0x54>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028b6:	4b07      	ldr	r3, [pc, #28]	; (80028d4 <MX_I2C1_Init+0x54>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80028bc:	4805      	ldr	r0, [pc, #20]	; (80028d4 <MX_I2C1_Init+0x54>)
 80028be:	f005 fc2d 	bl	800811c <HAL_I2C_Init>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d002      	beq.n	80028ce <MX_I2C1_Init+0x4e>
  {
    Error_Handler(7);
 80028c8:	2007      	movs	r0, #7
 80028ca:	f001 f8af 	bl	8003a2c <Error_Handler>
  }

}
 80028ce:	bf00      	nop
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	20008cc4 	.word	0x20008cc4
 80028d8:	40005400 	.word	0x40005400
 80028dc:	00061a80 	.word	0x00061a80

080028e0 <HAL_I2C_MspInit>:
//======================================================================================
void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b08a      	sub	sp, #40	; 0x28
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e8:	f107 0314 	add.w	r3, r7, #20
 80028ec:	2200      	movs	r2, #0
 80028ee:	601a      	str	r2, [r3, #0]
 80028f0:	605a      	str	r2, [r3, #4]
 80028f2:	609a      	str	r2, [r3, #8]
 80028f4:	60da      	str	r2, [r3, #12]
 80028f6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a17      	ldr	r2, [pc, #92]	; (800295c <HAL_I2C_MspInit+0x7c>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d128      	bne.n	8002954 <HAL_I2C_MspInit+0x74>
  {
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002902:	4b17      	ldr	r3, [pc, #92]	; (8002960 <HAL_I2C_MspInit+0x80>)
 8002904:	69db      	ldr	r3, [r3, #28]
 8002906:	4a16      	ldr	r2, [pc, #88]	; (8002960 <HAL_I2C_MspInit+0x80>)
 8002908:	f043 0302 	orr.w	r3, r3, #2
 800290c:	61d3      	str	r3, [r2, #28]
 800290e:	4b14      	ldr	r3, [pc, #80]	; (8002960 <HAL_I2C_MspInit+0x80>)
 8002910:	69db      	ldr	r3, [r3, #28]
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	613b      	str	r3, [r7, #16]
 8002918:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800291a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800291e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002920:	2312      	movs	r3, #18
 8002922:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002924:	2301      	movs	r3, #1
 8002926:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002928:	2303      	movs	r3, #3
 800292a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800292c:	2304      	movs	r3, #4
 800292e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002930:	f107 0314 	add.w	r3, r7, #20
 8002934:	4619      	mov	r1, r3
 8002936:	480b      	ldr	r0, [pc, #44]	; (8002964 <HAL_I2C_MspInit+0x84>)
 8002938:	f005 fa1a 	bl	8007d70 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800293c:	4b08      	ldr	r3, [pc, #32]	; (8002960 <HAL_I2C_MspInit+0x80>)
 800293e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002940:	4a07      	ldr	r2, [pc, #28]	; (8002960 <HAL_I2C_MspInit+0x80>)
 8002942:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002946:	6253      	str	r3, [r2, #36]	; 0x24
 8002948:	4b05      	ldr	r3, [pc, #20]	; (8002960 <HAL_I2C_MspInit+0x80>)
 800294a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002950:	60fb      	str	r3, [r7, #12]
 8002952:	68fb      	ldr	r3, [r7, #12]
  }
}
 8002954:	bf00      	nop
 8002956:	3728      	adds	r7, #40	; 0x28
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	40005400 	.word	0x40005400
 8002960:	40023800 	.word	0x40023800
 8002964:	40020400 	.word	0x40020400

08002968 <Keys_Init>:
 */
#include "keys.h"

//=======================================================================================
void  Keys_Init(void)																	// Настройка GPIO портов для кнопок
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b08c      	sub	sp, #48	; 0x30
 800296c:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800296e:	4b4b      	ldr	r3, [pc, #300]	; (8002a9c <Keys_Init+0x134>)
 8002970:	69db      	ldr	r3, [r3, #28]
 8002972:	4a4a      	ldr	r2, [pc, #296]	; (8002a9c <Keys_Init+0x134>)
 8002974:	f043 0301 	orr.w	r3, r3, #1
 8002978:	61d3      	str	r3, [r2, #28]
 800297a:	4b48      	ldr	r3, [pc, #288]	; (8002a9c <Keys_Init+0x134>)
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	61bb      	str	r3, [r7, #24]
 8002984:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002986:	4b45      	ldr	r3, [pc, #276]	; (8002a9c <Keys_Init+0x134>)
 8002988:	69db      	ldr	r3, [r3, #28]
 800298a:	4a44      	ldr	r2, [pc, #272]	; (8002a9c <Keys_Init+0x134>)
 800298c:	f043 0302 	orr.w	r3, r3, #2
 8002990:	61d3      	str	r3, [r2, #28]
 8002992:	4b42      	ldr	r3, [pc, #264]	; (8002a9c <Keys_Init+0x134>)
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	617b      	str	r3, [r7, #20]
 800299c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800299e:	4b3f      	ldr	r3, [pc, #252]	; (8002a9c <Keys_Init+0x134>)
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	4a3e      	ldr	r2, [pc, #248]	; (8002a9c <Keys_Init+0x134>)
 80029a4:	f043 0304 	orr.w	r3, r3, #4
 80029a8:	61d3      	str	r3, [r2, #28]
 80029aa:	4b3c      	ldr	r3, [pc, #240]	; (8002a9c <Keys_Init+0x134>)
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	f003 0304 	and.w	r3, r3, #4
 80029b2:	613b      	str	r3, [r7, #16]
 80029b4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80029b6:	4b39      	ldr	r3, [pc, #228]	; (8002a9c <Keys_Init+0x134>)
 80029b8:	69db      	ldr	r3, [r3, #28]
 80029ba:	4a38      	ldr	r2, [pc, #224]	; (8002a9c <Keys_Init+0x134>)
 80029bc:	f043 0308 	orr.w	r3, r3, #8
 80029c0:	61d3      	str	r3, [r2, #28]
 80029c2:	4b36      	ldr	r3, [pc, #216]	; (8002a9c <Keys_Init+0x134>)
 80029c4:	69db      	ldr	r3, [r3, #28]
 80029c6:	f003 0308 	and.w	r3, r3, #8
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80029ce:	4b33      	ldr	r3, [pc, #204]	; (8002a9c <Keys_Init+0x134>)
 80029d0:	69db      	ldr	r3, [r3, #28]
 80029d2:	4a32      	ldr	r2, [pc, #200]	; (8002a9c <Keys_Init+0x134>)
 80029d4:	f043 0310 	orr.w	r3, r3, #16
 80029d8:	61d3      	str	r3, [r2, #28]
 80029da:	4b30      	ldr	r3, [pc, #192]	; (8002a9c <Keys_Init+0x134>)
 80029dc:	69db      	ldr	r3, [r3, #28]
 80029de:	f003 0310 	and.w	r3, r3, #16
 80029e2:	60bb      	str	r3, [r7, #8]
 80029e4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80029e6:	4b2d      	ldr	r3, [pc, #180]	; (8002a9c <Keys_Init+0x134>)
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	4a2c      	ldr	r2, [pc, #176]	; (8002a9c <Keys_Init+0x134>)
 80029ec:	f043 0320 	orr.w	r3, r3, #32
 80029f0:	61d3      	str	r3, [r2, #28]
 80029f2:	4b2a      	ldr	r3, [pc, #168]	; (8002a9c <Keys_Init+0x134>)
 80029f4:	69db      	ldr	r3, [r3, #28]
 80029f6:	f003 0320 	and.w	r3, r3, #32
 80029fa:	607b      	str	r3, [r7, #4]
 80029fc:	687b      	ldr	r3, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct;


	// BTN_START
	GPIO_InitStruct.Pin 		= BTN_START_Pin;
 80029fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a02:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode 		= GPIO_MODE_IT_FALLING;
 8002a04:	4b26      	ldr	r3, [pc, #152]	; (8002aa0 <Keys_Init+0x138>)
 8002a06:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed		= GPIO_SPEED_FREQ_MEDIUM;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(BTN_START_GPIO_Port, &GPIO_InitStruct);
 8002a10:	f107 031c 	add.w	r3, r7, #28
 8002a14:	4619      	mov	r1, r3
 8002a16:	4823      	ldr	r0, [pc, #140]	; (8002aa4 <Keys_Init+0x13c>)
 8002a18:	f005 f9aa 	bl	8007d70 <HAL_GPIO_Init>


	// BTN_STOP
	GPIO_InitStruct.Pin 		= BTN_STOP_Pin;
 8002a1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a20:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode 		= GPIO_MODE_IT_FALLING;
 8002a22:	4b1f      	ldr	r3, [pc, #124]	; (8002aa0 <Keys_Init+0x138>)
 8002a24:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 8002a26:	2300      	movs	r3, #0
 8002a28:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed		= GPIO_SPEED_FREQ_MEDIUM;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(BTN_STOP_GPIO_Port, &GPIO_InitStruct);
 8002a2e:	f107 031c 	add.w	r3, r7, #28
 8002a32:	4619      	mov	r1, r3
 8002a34:	481b      	ldr	r0, [pc, #108]	; (8002aa4 <Keys_Init+0x13c>)
 8002a36:	f005 f99b 	bl	8007d70 <HAL_GPIO_Init>

	// BTN_MOTOR
	GPIO_InitStruct.Pin 		= BTN_MOTOR_Pin;
 8002a3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a3e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode 		= GPIO_MODE_IT_FALLING;
 8002a40:	4b17      	ldr	r3, [pc, #92]	; (8002aa0 <Keys_Init+0x138>)
 8002a42:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 8002a44:	2300      	movs	r3, #0
 8002a46:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed		= GPIO_SPEED_FREQ_MEDIUM;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(BTN_MOTOR_GPIO_Port, &GPIO_InitStruct);
 8002a4c:	f107 031c 	add.w	r3, r7, #28
 8002a50:	4619      	mov	r1, r3
 8002a52:	4814      	ldr	r0, [pc, #80]	; (8002aa4 <Keys_Init+0x13c>)
 8002a54:	f005 f98c 	bl	8007d70 <HAL_GPIO_Init>

	// Вход переключателя МОТОР ВПЕРЕД
	GPIO_InitStruct.Pin 		= BTN_FWD_Pin;
 8002a58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a5c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode 		= GPIO_MODE_IT_FALLING;
 8002a5e:	4b10      	ldr	r3, [pc, #64]	; (8002aa0 <Keys_Init+0x138>)
 8002a60:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 8002a62:	2300      	movs	r3, #0
 8002a64:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed		= GPIO_SPEED_FREQ_MEDIUM;
 8002a66:	2301      	movs	r3, #1
 8002a68:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(BTN_FWD_GPIO_Port, &GPIO_InitStruct);
 8002a6a:	f107 031c 	add.w	r3, r7, #28
 8002a6e:	4619      	mov	r1, r3
 8002a70:	480c      	ldr	r0, [pc, #48]	; (8002aa4 <Keys_Init+0x13c>)
 8002a72:	f005 f97d 	bl	8007d70 <HAL_GPIO_Init>

	// Вход переключателя МОТОР НАЗАД
	GPIO_InitStruct.Pin 		= BTN_BWD_Pin;
 8002a76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a7a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode 		= GPIO_MODE_IT_FALLING;
 8002a7c:	4b08      	ldr	r3, [pc, #32]	; (8002aa0 <Keys_Init+0x138>)
 8002a7e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 8002a80:	2300      	movs	r3, #0
 8002a82:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed		= GPIO_SPEED_FREQ_MEDIUM;
 8002a84:	2301      	movs	r3, #1
 8002a86:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(BTN_BWD_GPIO_Port, &GPIO_InitStruct);
 8002a88:	f107 031c 	add.w	r3, r7, #28
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	4805      	ldr	r0, [pc, #20]	; (8002aa4 <Keys_Init+0x13c>)
 8002a90:	f005 f96e 	bl	8007d70 <HAL_GPIO_Init>
	 // включаем прерывания
	//  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 14, 0);
	//  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);


}
 8002a94:	bf00      	nop
 8002a96:	3730      	adds	r7, #48	; 0x30
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	40023800 	.word	0x40023800
 8002aa0:	10210000 	.word	0x10210000
 8002aa4:	40020c00 	.word	0x40020c00

08002aa8 <MX_SPI1_Init>:

DMA_HandleTypeDef hdma_spi2_tx;

//======================================================================================
void MX_SPI1_Init(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8002aac:	4b18      	ldr	r3, [pc, #96]	; (8002b10 <MX_SPI1_Init+0x68>)
 8002aae:	4a19      	ldr	r2, [pc, #100]	; (8002b14 <MX_SPI1_Init+0x6c>)
 8002ab0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002ab2:	4b17      	ldr	r3, [pc, #92]	; (8002b10 <MX_SPI1_Init+0x68>)
 8002ab4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002ab8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002aba:	4b15      	ldr	r3, [pc, #84]	; (8002b10 <MX_SPI1_Init+0x68>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ac0:	4b13      	ldr	r3, [pc, #76]	; (8002b10 <MX_SPI1_Init+0x68>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ac6:	4b12      	ldr	r3, [pc, #72]	; (8002b10 <MX_SPI1_Init+0x68>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002acc:	4b10      	ldr	r3, [pc, #64]	; (8002b10 <MX_SPI1_Init+0x68>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002ad2:	4b0f      	ldr	r3, [pc, #60]	; (8002b10 <MX_SPI1_Init+0x68>)
 8002ad4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ad8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ada:	4b0d      	ldr	r3, [pc, #52]	; (8002b10 <MX_SPI1_Init+0x68>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ae0:	4b0b      	ldr	r3, [pc, #44]	; (8002b10 <MX_SPI1_Init+0x68>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ae6:	4b0a      	ldr	r3, [pc, #40]	; (8002b10 <MX_SPI1_Init+0x68>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002aec:	4b08      	ldr	r3, [pc, #32]	; (8002b10 <MX_SPI1_Init+0x68>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002af2:	4b07      	ldr	r3, [pc, #28]	; (8002b10 <MX_SPI1_Init+0x68>)
 8002af4:	220a      	movs	r2, #10
 8002af6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002af8:	4805      	ldr	r0, [pc, #20]	; (8002b10 <MX_SPI1_Init+0x68>)
 8002afa:	f007 fd7d 	bl	800a5f8 <HAL_SPI_Init>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d002      	beq.n	8002b0a <MX_SPI1_Init+0x62>
  {
    Error_Handler(6);
 8002b04:	2006      	movs	r0, #6
 8002b06:	f000 ff91 	bl	8003a2c <Error_Handler>
  }

}
 8002b0a:	bf00      	nop
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	20008d70 	.word	0x20008d70
 8002b14:	40013000 	.word	0x40013000

08002b18 <MX_SPI2_Init>:
//======================================================================================
void MX_SPI2_Init(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8002b1c:	4b18      	ldr	r3, [pc, #96]	; (8002b80 <MX_SPI2_Init+0x68>)
 8002b1e:	4a19      	ldr	r2, [pc, #100]	; (8002b84 <MX_SPI2_Init+0x6c>)
 8002b20:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002b22:	4b17      	ldr	r3, [pc, #92]	; (8002b80 <MX_SPI2_Init+0x68>)
 8002b24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002b28:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002b2a:	4b15      	ldr	r3, [pc, #84]	; (8002b80 <MX_SPI2_Init+0x68>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b30:	4b13      	ldr	r3, [pc, #76]	; (8002b80 <MX_SPI2_Init+0x68>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b36:	4b12      	ldr	r3, [pc, #72]	; (8002b80 <MX_SPI2_Init+0x68>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b3c:	4b10      	ldr	r3, [pc, #64]	; (8002b80 <MX_SPI2_Init+0x68>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002b42:	4b0f      	ldr	r3, [pc, #60]	; (8002b80 <MX_SPI2_Init+0x68>)
 8002b44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b48:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b4a:	4b0d      	ldr	r3, [pc, #52]	; (8002b80 <MX_SPI2_Init+0x68>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b50:	4b0b      	ldr	r3, [pc, #44]	; (8002b80 <MX_SPI2_Init+0x68>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b56:	4b0a      	ldr	r3, [pc, #40]	; (8002b80 <MX_SPI2_Init+0x68>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b5c:	4b08      	ldr	r3, [pc, #32]	; (8002b80 <MX_SPI2_Init+0x68>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002b62:	4b07      	ldr	r3, [pc, #28]	; (8002b80 <MX_SPI2_Init+0x68>)
 8002b64:	220a      	movs	r2, #10
 8002b66:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002b68:	4805      	ldr	r0, [pc, #20]	; (8002b80 <MX_SPI2_Init+0x68>)
 8002b6a:	f007 fd45 	bl	800a5f8 <HAL_SPI_Init>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d002      	beq.n	8002b7a <MX_SPI2_Init+0x62>
  {
    Error_Handler(6);
 8002b74:	2006      	movs	r0, #6
 8002b76:	f000 ff59 	bl	8003a2c <Error_Handler>
  }

}
 8002b7a:	bf00      	nop
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	20008d18 	.word	0x20008d18
 8002b84:	40003800 	.word	0x40003800

08002b88 <HAL_SPI_MspInit>:
//======================================================================================
void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b08c      	sub	sp, #48	; 0x30
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b90:	f107 031c 	add.w	r3, r7, #28
 8002b94:	2200      	movs	r2, #0
 8002b96:	601a      	str	r2, [r3, #0]
 8002b98:	605a      	str	r2, [r3, #4]
 8002b9a:	609a      	str	r2, [r3, #8]
 8002b9c:	60da      	str	r2, [r3, #12]
 8002b9e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a42      	ldr	r2, [pc, #264]	; (8002cb0 <HAL_SPI_MspInit+0x128>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d128      	bne.n	8002bfc <HAL_SPI_MspInit+0x74>
  {
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002baa:	4b42      	ldr	r3, [pc, #264]	; (8002cb4 <HAL_SPI_MspInit+0x12c>)
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	4a41      	ldr	r2, [pc, #260]	; (8002cb4 <HAL_SPI_MspInit+0x12c>)
 8002bb0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002bb4:	6213      	str	r3, [r2, #32]
 8002bb6:	4b3f      	ldr	r3, [pc, #252]	; (8002cb4 <HAL_SPI_MspInit+0x12c>)
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bbe:	61bb      	str	r3, [r7, #24]
 8002bc0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bc2:	4b3c      	ldr	r3, [pc, #240]	; (8002cb4 <HAL_SPI_MspInit+0x12c>)
 8002bc4:	69db      	ldr	r3, [r3, #28]
 8002bc6:	4a3b      	ldr	r2, [pc, #236]	; (8002cb4 <HAL_SPI_MspInit+0x12c>)
 8002bc8:	f043 0301 	orr.w	r3, r3, #1
 8002bcc:	61d3      	str	r3, [r2, #28]
 8002bce:	4b39      	ldr	r3, [pc, #228]	; (8002cb4 <HAL_SPI_MspInit+0x12c>)
 8002bd0:	69db      	ldr	r3, [r3, #28]
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	617b      	str	r3, [r7, #20]
 8002bd8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SD_SCK_Pin|SPI1_SD_MISO_Pin|SPI1_SD_MOSI_Pin;
 8002bda:	23e0      	movs	r3, #224	; 0xe0
 8002bdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bde:	2302      	movs	r3, #2
 8002be0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be2:	2300      	movs	r3, #0
 8002be4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002be6:	2303      	movs	r3, #3
 8002be8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002bea:	2305      	movs	r3, #5
 8002bec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bee:	f107 031c 	add.w	r3, r7, #28
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	4830      	ldr	r0, [pc, #192]	; (8002cb8 <HAL_SPI_MspInit+0x130>)
 8002bf6:	f005 f8bb 	bl	8007d70 <HAL_GPIO_Init>
      Error_Handler(6);
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
  }
}
 8002bfa:	e055      	b.n	8002ca8 <HAL_SPI_MspInit+0x120>
  else if(spiHandle->Instance==SPI2)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a2e      	ldr	r2, [pc, #184]	; (8002cbc <HAL_SPI_MspInit+0x134>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d150      	bne.n	8002ca8 <HAL_SPI_MspInit+0x120>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002c06:	4b2b      	ldr	r3, [pc, #172]	; (8002cb4 <HAL_SPI_MspInit+0x12c>)
 8002c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0a:	4a2a      	ldr	r2, [pc, #168]	; (8002cb4 <HAL_SPI_MspInit+0x12c>)
 8002c0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c10:	6253      	str	r3, [r2, #36]	; 0x24
 8002c12:	4b28      	ldr	r3, [pc, #160]	; (8002cb4 <HAL_SPI_MspInit+0x12c>)
 8002c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c1a:	613b      	str	r3, [r7, #16]
 8002c1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c1e:	4b25      	ldr	r3, [pc, #148]	; (8002cb4 <HAL_SPI_MspInit+0x12c>)
 8002c20:	69db      	ldr	r3, [r3, #28]
 8002c22:	4a24      	ldr	r2, [pc, #144]	; (8002cb4 <HAL_SPI_MspInit+0x12c>)
 8002c24:	f043 0302 	orr.w	r3, r3, #2
 8002c28:	61d3      	str	r3, [r2, #28]
 8002c2a:	4b22      	ldr	r3, [pc, #136]	; (8002cb4 <HAL_SPI_MspInit+0x12c>)
 8002c2c:	69db      	ldr	r3, [r3, #28]
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	60fb      	str	r3, [r7, #12]
 8002c34:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI2_SCK_Pin|SPI2_MISO_Pin|SPI2_MOSI_Pin;
 8002c36:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002c3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c40:	2300      	movs	r3, #0
 8002c42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c44:	2303      	movs	r3, #3
 8002c46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002c48:	2305      	movs	r3, #5
 8002c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c4c:	f107 031c 	add.w	r3, r7, #28
 8002c50:	4619      	mov	r1, r3
 8002c52:	481b      	ldr	r0, [pc, #108]	; (8002cc0 <HAL_SPI_MspInit+0x138>)
 8002c54:	f005 f88c 	bl	8007d70 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8002c58:	4b1a      	ldr	r3, [pc, #104]	; (8002cc4 <HAL_SPI_MspInit+0x13c>)
 8002c5a:	4a1b      	ldr	r2, [pc, #108]	; (8002cc8 <HAL_SPI_MspInit+0x140>)
 8002c5c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c5e:	4b19      	ldr	r3, [pc, #100]	; (8002cc4 <HAL_SPI_MspInit+0x13c>)
 8002c60:	2210      	movs	r2, #16
 8002c62:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c64:	4b17      	ldr	r3, [pc, #92]	; (8002cc4 <HAL_SPI_MspInit+0x13c>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c6a:	4b16      	ldr	r3, [pc, #88]	; (8002cc4 <HAL_SPI_MspInit+0x13c>)
 8002c6c:	2280      	movs	r2, #128	; 0x80
 8002c6e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c70:	4b14      	ldr	r3, [pc, #80]	; (8002cc4 <HAL_SPI_MspInit+0x13c>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c76:	4b13      	ldr	r3, [pc, #76]	; (8002cc4 <HAL_SPI_MspInit+0x13c>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002c7c:	4b11      	ldr	r3, [pc, #68]	; (8002cc4 <HAL_SPI_MspInit+0x13c>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002c82:	4b10      	ldr	r3, [pc, #64]	; (8002cc4 <HAL_SPI_MspInit+0x13c>)
 8002c84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c88:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002c8a:	480e      	ldr	r0, [pc, #56]	; (8002cc4 <HAL_SPI_MspInit+0x13c>)
 8002c8c:	f004 ff0c 	bl	8007aa8 <HAL_DMA_Init>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d002      	beq.n	8002c9c <HAL_SPI_MspInit+0x114>
      Error_Handler(6);
 8002c96:	2006      	movs	r0, #6
 8002c98:	f000 fec8 	bl	8003a2c <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a09      	ldr	r2, [pc, #36]	; (8002cc4 <HAL_SPI_MspInit+0x13c>)
 8002ca0:	649a      	str	r2, [r3, #72]	; 0x48
 8002ca2:	4a08      	ldr	r2, [pc, #32]	; (8002cc4 <HAL_SPI_MspInit+0x13c>)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6253      	str	r3, [r2, #36]	; 0x24
}
 8002ca8:	bf00      	nop
 8002caa:	3730      	adds	r7, #48	; 0x30
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	40013000 	.word	0x40013000
 8002cb4:	40023800 	.word	0x40023800
 8002cb8:	40020000 	.word	0x40020000
 8002cbc:	40003800 	.word	0x40003800
 8002cc0:	40020400 	.word	0x40020400
 8002cc4:	20008dc8 	.word	0x20008dc8
 8002cc8:	40026058 	.word	0x40026058

08002ccc <MX_TIM3_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

//======================================================================================
void MX_TIM3_Init(void)																	// обслуживание энкодера для меню
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b08c      	sub	sp, #48	; 0x30
 8002cd0:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8002cd2:	f107 030c 	add.w	r3, r7, #12
 8002cd6:	2224      	movs	r2, #36	; 0x24
 8002cd8:	2100      	movs	r1, #0
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f012 f902 	bl	8014ee4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ce0:	1d3b      	adds	r3, r7, #4
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	601a      	str	r2, [r3, #0]
 8002ce6:	605a      	str	r2, [r3, #4]

  // Такая настройка дает 1 шаг счетчика энкодера на 1 тик энкодера в механике (дефолтная дает 4 шага на 1 механический тик)
  htim3.Instance 				= TIM3;
 8002ce8:	4b1f      	ldr	r3, [pc, #124]	; (8002d68 <MX_TIM3_Init+0x9c>)
 8002cea:	4a20      	ldr	r2, [pc, #128]	; (8002d6c <MX_TIM3_Init+0xa0>)
 8002cec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler 			= 1;
 8002cee:	4b1e      	ldr	r3, [pc, #120]	; (8002d68 <MX_TIM3_Init+0x9c>)
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode		= TIM_COUNTERMODE_UP;
 8002cf4:	4b1c      	ldr	r3, [pc, #112]	; (8002d68 <MX_TIM3_Init+0x9c>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period 			= ENCODER_VAL_PERIOD;
 8002cfa:	4b1b      	ldr	r3, [pc, #108]	; (8002d68 <MX_TIM3_Init+0x9c>)
 8002cfc:	2214      	movs	r2, #20
 8002cfe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision 		= TIM_CLOCKDIVISION_DIV1;
 8002d00:	4b19      	ldr	r3, [pc, #100]	; (8002d68 <MX_TIM3_Init+0x9c>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	611a      	str	r2, [r3, #16]
  sConfig.EncoderMode 			= TIM_ENCODERMODE_TI2;	// для grayhill энкодера - счет по обоим фронтам, 32 тика на оборот
 8002d06:	2302      	movs	r3, #2
 8002d08:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity 			= TIM_ICPOLARITY_FALLING;
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection 			= TIM_ICSELECTION_DIRECTTI;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler 			= TIM_ICPSC_DIV1;
 8002d12:	2300      	movs	r3, #0
 8002d14:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter 			= 16;
 8002d16:	2310      	movs	r3, #16
 8002d18:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity 			= TIM_ICPOLARITY_FALLING;
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection 			= TIM_ICSELECTION_DIRECTTI;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler 			= TIM_ICPSC_DIV1;
 8002d22:	2300      	movs	r3, #0
 8002d24:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter 			= 16;
 8002d26:	2310      	movs	r3, #16
 8002d28:	62fb      	str	r3, [r7, #44]	; 0x2c


  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002d2a:	f107 030c 	add.w	r3, r7, #12
 8002d2e:	4619      	mov	r1, r3
 8002d30:	480d      	ldr	r0, [pc, #52]	; (8002d68 <MX_TIM3_Init+0x9c>)
 8002d32:	f008 fa01 	bl	800b138 <HAL_TIM_Encoder_Init>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d002      	beq.n	8002d42 <MX_TIM3_Init+0x76>
  {
    Error_Handler(4);
 8002d3c:	2004      	movs	r0, #4
 8002d3e:	f000 fe75 	bl	8003a2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d42:	2300      	movs	r3, #0
 8002d44:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d46:	2300      	movs	r3, #0
 8002d48:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002d4a:	1d3b      	adds	r3, r7, #4
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	4806      	ldr	r0, [pc, #24]	; (8002d68 <MX_TIM3_Init+0x9c>)
 8002d50:	f009 f94e 	bl	800bff0 <HAL_TIMEx_MasterConfigSynchronization>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d002      	beq.n	8002d60 <MX_TIM3_Init+0x94>
  {
    Error_Handler(4);
 8002d5a:	2004      	movs	r0, #4
 8002d5c:	f000 fe66 	bl	8003a2c <Error_Handler>
  }
}
 8002d60:	bf00      	nop
 8002d62:	3730      	adds	r7, #48	; 0x30
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	20008e8c 	.word	0x20008e8c
 8002d6c:	40000400 	.word	0x40000400

08002d70 <MX_TIM4_Init>:
//======================================================================================
void MX_TIM4_Init(void)																	// Для рассчета периода сигнала от магнитного датчика оборотов бака (скорость оборотов)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b08a      	sub	sp, #40	; 0x28
 8002d74:	af00      	add	r7, sp, #0
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d76:	f107 0318 	add.w	r3, r7, #24
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	601a      	str	r2, [r3, #0]
 8002d7e:	605a      	str	r2, [r3, #4]
 8002d80:	609a      	str	r2, [r3, #8]
 8002d82:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d84:	f107 0310 	add.w	r3, r7, #16
 8002d88:	2200      	movs	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]
 8002d8c:	605a      	str	r2, [r3, #4]
	  TIM_IC_InitTypeDef sConfigIC = {0};
 8002d8e:	463b      	mov	r3, r7
 8002d90:	2200      	movs	r2, #0
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	605a      	str	r2, [r3, #4]
 8002d96:	609a      	str	r2, [r3, #8]
 8002d98:	60da      	str	r2, [r3, #12]

	  htim4.Instance = TIM4;
 8002d9a:	4b2f      	ldr	r3, [pc, #188]	; (8002e58 <MX_TIM4_Init+0xe8>)
 8002d9c:	4a2f      	ldr	r2, [pc, #188]	; (8002e5c <MX_TIM4_Init+0xec>)
 8002d9e:	601a      	str	r2, [r3, #0]
	  htim4.Init.Prescaler = 32000 - 1;													// точность счета по 100мкс
 8002da0:	4b2d      	ldr	r3, [pc, #180]	; (8002e58 <MX_TIM4_Init+0xe8>)
 8002da2:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8002da6:	605a      	str	r2, [r3, #4]
	  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002da8:	4b2b      	ldr	r3, [pc, #172]	; (8002e58 <MX_TIM4_Init+0xe8>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	609a      	str	r2, [r3, #8]
	  htim4.Init.Period = 3000; 														// переполнение за 3 сек (до 20 оборотов в минуту считаем нулевой скоростью)
 8002dae:	4b2a      	ldr	r3, [pc, #168]	; (8002e58 <MX_TIM4_Init+0xe8>)
 8002db0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002db4:	60da      	str	r2, [r3, #12]
	  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8002db6:	4b28      	ldr	r3, [pc, #160]	; (8002e58 <MX_TIM4_Init+0xe8>)
 8002db8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dbc:	611a      	str	r2, [r3, #16]
	  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dbe:	4b26      	ldr	r3, [pc, #152]	; (8002e58 <MX_TIM4_Init+0xe8>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	615a      	str	r2, [r3, #20]
	  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002dc4:	4824      	ldr	r0, [pc, #144]	; (8002e58 <MX_TIM4_Init+0xe8>)
 8002dc6:	f007 fea7 	bl	800ab18 <HAL_TIM_Base_Init>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d002      	beq.n	8002dd6 <MX_TIM4_Init+0x66>
	  {
	    Error_Handler(4);
 8002dd0:	2004      	movs	r0, #4
 8002dd2:	f000 fe2b 	bl	8003a2c <Error_Handler>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002dd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dda:	61bb      	str	r3, [r7, #24]
	  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002ddc:	f107 0318 	add.w	r3, r7, #24
 8002de0:	4619      	mov	r1, r3
 8002de2:	481d      	ldr	r0, [pc, #116]	; (8002e58 <MX_TIM4_Init+0xe8>)
 8002de4:	f008 fcfe 	bl	800b7e4 <HAL_TIM_ConfigClockSource>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d002      	beq.n	8002df4 <MX_TIM4_Init+0x84>
	  {
	    Error_Handler(4);
 8002dee:	2004      	movs	r0, #4
 8002df0:	f000 fe1c 	bl	8003a2c <Error_Handler>
	  }
	  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8002df4:	4818      	ldr	r0, [pc, #96]	; (8002e58 <MX_TIM4_Init+0xe8>)
 8002df6:	f008 f88d 	bl	800af14 <HAL_TIM_IC_Init>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d002      	beq.n	8002e06 <MX_TIM4_Init+0x96>
	  {
	    Error_Handler(4);
 8002e00:	2004      	movs	r0, #4
 8002e02:	f000 fe13 	bl	8003a2c <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e06:	2300      	movs	r3, #0
 8002e08:	613b      	str	r3, [r7, #16]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	617b      	str	r3, [r7, #20]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002e0e:	f107 0310 	add.w	r3, r7, #16
 8002e12:	4619      	mov	r1, r3
 8002e14:	4810      	ldr	r0, [pc, #64]	; (8002e58 <MX_TIM4_Init+0xe8>)
 8002e16:	f009 f8eb 	bl	800bff0 <HAL_TIMEx_MasterConfigSynchronization>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d002      	beq.n	8002e26 <MX_TIM4_Init+0xb6>
	  {
	    Error_Handler(4);
 8002e20:	2004      	movs	r0, #4
 8002e22:	f000 fe03 	bl	8003a2c <Error_Handler>
	  }
	  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002e26:	2300      	movs	r3, #0
 8002e28:	603b      	str	r3, [r7, #0]
	  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	607b      	str	r3, [r7, #4]
	  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	60bb      	str	r3, [r7, #8]
	  sConfigIC.ICFilter = 0;
 8002e32:	2300      	movs	r3, #0
 8002e34:	60fb      	str	r3, [r7, #12]
	  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002e36:	463b      	mov	r3, r7
 8002e38:	2200      	movs	r2, #0
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	4806      	ldr	r0, [pc, #24]	; (8002e58 <MX_TIM4_Init+0xe8>)
 8002e3e:	f008 fb7e 	bl	800b53e <HAL_TIM_IC_ConfigChannel>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d002      	beq.n	8002e4e <MX_TIM4_Init+0xde>
	  {
	    Error_Handler(4);
 8002e48:	2004      	movs	r0, #4
 8002e4a:	f000 fdef 	bl	8003a2c <Error_Handler>
//  {
//    Error_Handler(4);
//  }
//  HAL_TIM_MspPostInit(&htim4);

}
 8002e4e:	bf00      	nop
 8002e50:	3728      	adds	r7, #40	; 0x28
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	20008e0c 	.word	0x20008e0c
 8002e5c:	40000800 	.word	0x40000800

08002e60 <MX_TIM6_Init>:
//======================================================================================
void MX_TIM6_Init(void)																	// Для генерации звука на динамике (чтобы не хрипел от прерываний и RtOS)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
//  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
//  {
//    Error_Handler(4);
//  }
//
}
 8002e64:	bf00      	nop
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bc80      	pop	{r7}
 8002e6a:	4770      	bx	lr

08002e6c <MX_TIM9_Init>:
//======================================================================================
void MX_TIM9_Init(void)																	// источник микросекундных тиков (для отладки FreeRTOS)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e72:	f107 0308 	add.w	r3, r7, #8
 8002e76:	2200      	movs	r2, #0
 8002e78:	601a      	str	r2, [r3, #0]
 8002e7a:	605a      	str	r2, [r3, #4]
 8002e7c:	609a      	str	r2, [r3, #8]
 8002e7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e80:	463b      	mov	r3, r7
 8002e82:	2200      	movs	r2, #0
 8002e84:	601a      	str	r2, [r3, #0]
 8002e86:	605a      	str	r2, [r3, #4]

  htim9.Instance = TIM9;
 8002e88:	4b1e      	ldr	r3, [pc, #120]	; (8002f04 <MX_TIM9_Init+0x98>)
 8002e8a:	4a1f      	ldr	r2, [pc, #124]	; (8002f08 <MX_TIM9_Init+0x9c>)
 8002e8c:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 32;
 8002e8e:	4b1d      	ldr	r3, [pc, #116]	; (8002f04 <MX_TIM9_Init+0x98>)
 8002e90:	2220      	movs	r2, #32
 8002e92:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e94:	4b1b      	ldr	r3, [pc, #108]	; (8002f04 <MX_TIM9_Init+0x98>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8002e9a:	4b1a      	ldr	r3, [pc, #104]	; (8002f04 <MX_TIM9_Init+0x98>)
 8002e9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ea0:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ea2:	4b18      	ldr	r3, [pc, #96]	; (8002f04 <MX_TIM9_Init+0x98>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ea8:	4b16      	ldr	r3, [pc, #88]	; (8002f04 <MX_TIM9_Init+0x98>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002eae:	4815      	ldr	r0, [pc, #84]	; (8002f04 <MX_TIM9_Init+0x98>)
 8002eb0:	f007 fe32 	bl	800ab18 <HAL_TIM_Base_Init>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d002      	beq.n	8002ec0 <MX_TIM9_Init+0x54>
  {
    Error_Handler(4);
 8002eba:	2004      	movs	r0, #4
 8002ebc:	f000 fdb6 	bl	8003a2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ec0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ec4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002ec6:	f107 0308 	add.w	r3, r7, #8
 8002eca:	4619      	mov	r1, r3
 8002ecc:	480d      	ldr	r0, [pc, #52]	; (8002f04 <MX_TIM9_Init+0x98>)
 8002ece:	f008 fc89 	bl	800b7e4 <HAL_TIM_ConfigClockSource>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d002      	beq.n	8002ede <MX_TIM9_Init+0x72>
  {
    Error_Handler(4);
 8002ed8:	2004      	movs	r0, #4
 8002eda:	f000 fda7 	bl	8003a2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim9, &sMasterConfig) != HAL_OK)
 8002ee6:	463b      	mov	r3, r7
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4806      	ldr	r0, [pc, #24]	; (8002f04 <MX_TIM9_Init+0x98>)
 8002eec:	f009 f880 	bl	800bff0 <HAL_TIMEx_MasterConfigSynchronization>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d002      	beq.n	8002efc <MX_TIM9_Init+0x90>
  {
    Error_Handler(4);
 8002ef6:	2004      	movs	r0, #4
 8002ef8:	f000 fd98 	bl	8003a2c <Error_Handler>
  }

}
 8002efc:	bf00      	nop
 8002efe:	3718      	adds	r7, #24
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	20008f4c 	.word	0x20008f4c
 8002f08:	40010800 	.word	0x40010800

08002f0c <MX_TIM10_Init>:
//======================================================================================
void MX_TIM10_Init(void)																	// источник микросекундных тиков (для DelayUS() )
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f12:	f107 0308 	add.w	r3, r7, #8
 8002f16:	2200      	movs	r2, #0
 8002f18:	601a      	str	r2, [r3, #0]
 8002f1a:	605a      	str	r2, [r3, #4]
 8002f1c:	609a      	str	r2, [r3, #8]
 8002f1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f20:	463b      	mov	r3, r7
 8002f22:	2200      	movs	r2, #0
 8002f24:	601a      	str	r2, [r3, #0]
 8002f26:	605a      	str	r2, [r3, #4]

  htim10.Instance = TIM10;
 8002f28:	4b1e      	ldr	r3, [pc, #120]	; (8002fa4 <MX_TIM10_Init+0x98>)
 8002f2a:	4a1f      	ldr	r2, [pc, #124]	; (8002fa8 <MX_TIM10_Init+0x9c>)
 8002f2c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 32;
 8002f2e:	4b1d      	ldr	r3, [pc, #116]	; (8002fa4 <MX_TIM10_Init+0x98>)
 8002f30:	2220      	movs	r2, #32
 8002f32:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f34:	4b1b      	ldr	r3, [pc, #108]	; (8002fa4 <MX_TIM10_Init+0x98>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8002f3a:	4b1a      	ldr	r3, [pc, #104]	; (8002fa4 <MX_TIM10_Init+0x98>)
 8002f3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f40:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f42:	4b18      	ldr	r3, [pc, #96]	; (8002fa4 <MX_TIM10_Init+0x98>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f48:	4b16      	ldr	r3, [pc, #88]	; (8002fa4 <MX_TIM10_Init+0x98>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002f4e:	4815      	ldr	r0, [pc, #84]	; (8002fa4 <MX_TIM10_Init+0x98>)
 8002f50:	f007 fde2 	bl	800ab18 <HAL_TIM_Base_Init>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d002      	beq.n	8002f60 <MX_TIM10_Init+0x54>
  {
    Error_Handler(4);
 8002f5a:	2004      	movs	r0, #4
 8002f5c:	f000 fd66 	bl	8003a2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f64:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim10, &sClockSourceConfig) != HAL_OK)
 8002f66:	f107 0308 	add.w	r3, r7, #8
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	480d      	ldr	r0, [pc, #52]	; (8002fa4 <MX_TIM10_Init+0x98>)
 8002f6e:	f008 fc39 	bl	800b7e4 <HAL_TIM_ConfigClockSource>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d002      	beq.n	8002f7e <MX_TIM10_Init+0x72>
  {
    Error_Handler(4);
 8002f78:	2004      	movs	r0, #4
 8002f7a:	f000 fd57 	bl	8003a2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f82:	2300      	movs	r3, #0
 8002f84:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim10, &sMasterConfig) != HAL_OK)
 8002f86:	463b      	mov	r3, r7
 8002f88:	4619      	mov	r1, r3
 8002f8a:	4806      	ldr	r0, [pc, #24]	; (8002fa4 <MX_TIM10_Init+0x98>)
 8002f8c:	f009 f830 	bl	800bff0 <HAL_TIMEx_MasterConfigSynchronization>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d002      	beq.n	8002f9c <MX_TIM10_Init+0x90>
  {
    Error_Handler(4);
 8002f96:	2004      	movs	r0, #4
 8002f98:	f000 fd48 	bl	8003a2c <Error_Handler>
  }

}
 8002f9c:	bf00      	nop
 8002f9e:	3718      	adds	r7, #24
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	20008e4c 	.word	0x20008e4c
 8002fa8:	40010c00 	.word	0x40010c00

08002fac <MX_TIM11_Init>:
//======================================================================================

void MX_TIM11_Init(void)																// ШИМ управление оборотами мотора вентилятора охлаждения контроллера двигателя
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b088      	sub	sp, #32
 8002fb0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fb2:	f107 0310 	add.w	r3, r7, #16
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	601a      	str	r2, [r3, #0]
 8002fba:	605a      	str	r2, [r3, #4]
 8002fbc:	609a      	str	r2, [r3, #8]
 8002fbe:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002fc0:	463b      	mov	r3, r7
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	601a      	str	r2, [r3, #0]
 8002fc6:	605a      	str	r2, [r3, #4]
 8002fc8:	609a      	str	r2, [r3, #8]
 8002fca:	60da      	str	r2, [r3, #12]

  htim11.Instance = TIM11;
 8002fcc:	4b27      	ldr	r3, [pc, #156]	; (800306c <MX_TIM11_Init+0xc0>)
 8002fce:	4a28      	ldr	r2, [pc, #160]	; (8003070 <MX_TIM11_Init+0xc4>)
 8002fd0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 32000;  														// Делим с тактовой процессора 32000000/32000 = 1000Гц на вход счетчика (1мс на 1 тик)
 8002fd2:	4b26      	ldr	r3, [pc, #152]	; (800306c <MX_TIM11_Init+0xc0>)
 8002fd4:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8002fd8:	605a      	str	r2, [r3, #4]
  htim11.Init.Period = 100;																// 100 тиков полный цикл = 100мс = 10Гц период ШИМ. В TIM11->CCR1 записывается сравнение 0..100 - получаем нужную скважность
 8002fda:	4b24      	ldr	r3, [pc, #144]	; (800306c <MX_TIM11_Init+0xc0>)
 8002fdc:	2264      	movs	r2, #100	; 0x64
 8002fde:	60da      	str	r2, [r3, #12]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fe0:	4b22      	ldr	r3, [pc, #136]	; (800306c <MX_TIM11_Init+0xc0>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	609a      	str	r2, [r3, #8]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fe6:	4b21      	ldr	r3, [pc, #132]	; (800306c <MX_TIM11_Init+0xc0>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fec:	4b1f      	ldr	r3, [pc, #124]	; (800306c <MX_TIM11_Init+0xc0>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002ff2:	481e      	ldr	r0, [pc, #120]	; (800306c <MX_TIM11_Init+0xc0>)
 8002ff4:	f007 fd90 	bl	800ab18 <HAL_TIM_Base_Init>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d002      	beq.n	8003004 <MX_TIM11_Init+0x58>
  {
    Error_Handler(4);
 8002ffe:	2004      	movs	r0, #4
 8003000:	f000 fd14 	bl	8003a2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003004:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003008:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim11, &sClockSourceConfig) != HAL_OK)
 800300a:	f107 0310 	add.w	r3, r7, #16
 800300e:	4619      	mov	r1, r3
 8003010:	4816      	ldr	r0, [pc, #88]	; (800306c <MX_TIM11_Init+0xc0>)
 8003012:	f008 fbe7 	bl	800b7e4 <HAL_TIM_ConfigClockSource>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d002      	beq.n	8003022 <MX_TIM11_Init+0x76>
  {
    Error_Handler(4);
 800301c:	2004      	movs	r0, #4
 800301e:	f000 fd05 	bl	8003a2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8003022:	4812      	ldr	r0, [pc, #72]	; (800306c <MX_TIM11_Init+0xc0>)
 8003024:	f007 fe98 	bl	800ad58 <HAL_TIM_PWM_Init>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d002      	beq.n	8003034 <MX_TIM11_Init+0x88>
  {
    Error_Handler(4);
 800302e:	2004      	movs	r0, #4
 8003030:	f000 fcfc 	bl	8003a2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003034:	2360      	movs	r3, #96	; 0x60
 8003036:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003038:	2300      	movs	r3, #0
 800303a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800303c:	2300      	movs	r3, #0
 800303e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003040:	2300      	movs	r3, #0
 8003042:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003044:	463b      	mov	r3, r7
 8003046:	2200      	movs	r2, #0
 8003048:	4619      	mov	r1, r3
 800304a:	4808      	ldr	r0, [pc, #32]	; (800306c <MX_TIM11_Init+0xc0>)
 800304c:	f008 fb0c 	bl	800b668 <HAL_TIM_PWM_ConfigChannel>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d002      	beq.n	800305c <MX_TIM11_Init+0xb0>
  {
    Error_Handler(4);
 8003056:	2004      	movs	r0, #4
 8003058:	f000 fce8 	bl	8003a2c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim11);
 800305c:	4803      	ldr	r0, [pc, #12]	; (800306c <MX_TIM11_Init+0xc0>)
 800305e:	f000 f8d1 	bl	8003204 <HAL_TIM_MspPostInit>

}
 8003062:	bf00      	nop
 8003064:	3720      	adds	r7, #32
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	20008ecc 	.word	0x20008ecc
 8003070:	40011000 	.word	0x40011000

08003074 <HAL_TIM_Encoder_MspInit>:
//======================================================================================
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]

//  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(tim_encoderHandle->Instance==TIM3)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a0d      	ldr	r2, [pc, #52]	; (80030b8 <HAL_TIM_Encoder_MspInit+0x44>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d113      	bne.n	80030ae <HAL_TIM_Encoder_MspInit+0x3a>
  {
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003086:	4b0d      	ldr	r3, [pc, #52]	; (80030bc <HAL_TIM_Encoder_MspInit+0x48>)
 8003088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308a:	4a0c      	ldr	r2, [pc, #48]	; (80030bc <HAL_TIM_Encoder_MspInit+0x48>)
 800308c:	f043 0302 	orr.w	r3, r3, #2
 8003090:	6253      	str	r3, [r2, #36]	; 0x24
 8003092:	4b0a      	ldr	r3, [pc, #40]	; (80030bc <HAL_TIM_Encoder_MspInit+0x48>)
 8003094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	60fb      	str	r3, [r7, #12]
 800309c:	68fb      	ldr	r3, [r7, #12]
//    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
//    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800309e:	2200      	movs	r2, #0
 80030a0:	2100      	movs	r1, #0
 80030a2:	201d      	movs	r0, #29
 80030a4:	f004 fbeb 	bl	800787e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80030a8:	201d      	movs	r0, #29
 80030aa:	f004 fc04 	bl	80078b6 <HAL_NVIC_EnableIRQ>
  }
}
 80030ae:	bf00      	nop
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	40000400 	.word	0x40000400
 80030bc:	40023800 	.word	0x40023800

080030c0 <HAL_TIM_Base_MspInit>:
//======================================================================================
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b08e      	sub	sp, #56	; 0x38
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030cc:	2200      	movs	r2, #0
 80030ce:	601a      	str	r2, [r3, #0]
 80030d0:	605a      	str	r2, [r3, #4]
 80030d2:	609a      	str	r2, [r3, #8]
 80030d4:	60da      	str	r2, [r3, #12]
 80030d6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM4)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a42      	ldr	r2, [pc, #264]	; (80031e8 <HAL_TIM_Base_MspInit+0x128>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d12f      	bne.n	8003142 <HAL_TIM_Base_MspInit+0x82>
  {
	/* TIM4 clock enable */
	__HAL_RCC_TIM4_CLK_ENABLE();
 80030e2:	4b42      	ldr	r3, [pc, #264]	; (80031ec <HAL_TIM_Base_MspInit+0x12c>)
 80030e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e6:	4a41      	ldr	r2, [pc, #260]	; (80031ec <HAL_TIM_Base_MspInit+0x12c>)
 80030e8:	f043 0304 	orr.w	r3, r3, #4
 80030ec:	6253      	str	r3, [r2, #36]	; 0x24
 80030ee:	4b3f      	ldr	r3, [pc, #252]	; (80031ec <HAL_TIM_Base_MspInit+0x12c>)
 80030f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f2:	f003 0304 	and.w	r3, r3, #4
 80030f6:	623b      	str	r3, [r7, #32]
 80030f8:	6a3b      	ldr	r3, [r7, #32]

	__HAL_RCC_GPIOB_CLK_ENABLE();
 80030fa:	4b3c      	ldr	r3, [pc, #240]	; (80031ec <HAL_TIM_Base_MspInit+0x12c>)
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	4a3b      	ldr	r2, [pc, #236]	; (80031ec <HAL_TIM_Base_MspInit+0x12c>)
 8003100:	f043 0302 	orr.w	r3, r3, #2
 8003104:	61d3      	str	r3, [r2, #28]
 8003106:	4b39      	ldr	r3, [pc, #228]	; (80031ec <HAL_TIM_Base_MspInit+0x12c>)
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	61fb      	str	r3, [r7, #28]
 8003110:	69fb      	ldr	r3, [r7, #28]
	/**TIM4 GPIO Configuration
	PB6     ------> TIM4_CH1
	*/
	GPIO_InitStruct.Pin = SNS_HALL_IN_Pin;
 8003112:	2340      	movs	r3, #64	; 0x40
 8003114:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003116:	2302      	movs	r3, #2
 8003118:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800311a:	2300      	movs	r3, #0
 800311c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800311e:	2300      	movs	r3, #0
 8003120:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003122:	2302      	movs	r3, #2
 8003124:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(SNS_HALL_IN_GPIO_Port, &GPIO_InitStruct);
 8003126:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800312a:	4619      	mov	r1, r3
 800312c:	4830      	ldr	r0, [pc, #192]	; (80031f0 <HAL_TIM_Base_MspInit+0x130>)
 800312e:	f004 fe1f 	bl	8007d70 <HAL_GPIO_Init>

	/* TIM4 interrupt Init */
	HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003132:	2200      	movs	r2, #0
 8003134:	2100      	movs	r1, #0
 8003136:	201e      	movs	r0, #30
 8003138:	f004 fba1 	bl	800787e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800313c:	201e      	movs	r0, #30
 800313e:	f004 fbba 	bl	80078b6 <HAL_NVIC_EnableIRQ>
  }
  if(tim_baseHandle->Instance==TIM6)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a2b      	ldr	r2, [pc, #172]	; (80031f4 <HAL_TIM_Base_MspInit+0x134>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d114      	bne.n	8003176 <HAL_TIM_Base_MspInit+0xb6>
  {
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800314c:	4b27      	ldr	r3, [pc, #156]	; (80031ec <HAL_TIM_Base_MspInit+0x12c>)
 800314e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003150:	4a26      	ldr	r2, [pc, #152]	; (80031ec <HAL_TIM_Base_MspInit+0x12c>)
 8003152:	f043 0310 	orr.w	r3, r3, #16
 8003156:	6253      	str	r3, [r2, #36]	; 0x24
 8003158:	4b24      	ldr	r3, [pc, #144]	; (80031ec <HAL_TIM_Base_MspInit+0x12c>)
 800315a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315c:	f003 0310 	and.w	r3, r3, #16
 8003160:	61bb      	str	r3, [r7, #24]
 8003162:	69bb      	ldr	r3, [r7, #24]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8003164:	2200      	movs	r2, #0
 8003166:	2100      	movs	r1, #0
 8003168:	202b      	movs	r0, #43	; 0x2b
 800316a:	f004 fb88 	bl	800787e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800316e:	202b      	movs	r0, #43	; 0x2b
 8003170:	f004 fba1 	bl	80078b6 <HAL_NVIC_EnableIRQ>
  else if(tim_baseHandle->Instance==TIM11)
  {
    /* TIM11 clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
  }
}
 8003174:	e034      	b.n	80031e0 <HAL_TIM_Base_MspInit+0x120>
  else if(tim_baseHandle->Instance==TIM9)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a1f      	ldr	r2, [pc, #124]	; (80031f8 <HAL_TIM_Base_MspInit+0x138>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d10c      	bne.n	800319a <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003180:	4b1a      	ldr	r3, [pc, #104]	; (80031ec <HAL_TIM_Base_MspInit+0x12c>)
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	4a19      	ldr	r2, [pc, #100]	; (80031ec <HAL_TIM_Base_MspInit+0x12c>)
 8003186:	f043 0304 	orr.w	r3, r3, #4
 800318a:	6213      	str	r3, [r2, #32]
 800318c:	4b17      	ldr	r3, [pc, #92]	; (80031ec <HAL_TIM_Base_MspInit+0x12c>)
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	f003 0304 	and.w	r3, r3, #4
 8003194:	617b      	str	r3, [r7, #20]
 8003196:	697b      	ldr	r3, [r7, #20]
}
 8003198:	e022      	b.n	80031e0 <HAL_TIM_Base_MspInit+0x120>
  else if(tim_baseHandle->Instance==TIM10)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a17      	ldr	r2, [pc, #92]	; (80031fc <HAL_TIM_Base_MspInit+0x13c>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d10c      	bne.n	80031be <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80031a4:	4b11      	ldr	r3, [pc, #68]	; (80031ec <HAL_TIM_Base_MspInit+0x12c>)
 80031a6:	6a1b      	ldr	r3, [r3, #32]
 80031a8:	4a10      	ldr	r2, [pc, #64]	; (80031ec <HAL_TIM_Base_MspInit+0x12c>)
 80031aa:	f043 0308 	orr.w	r3, r3, #8
 80031ae:	6213      	str	r3, [r2, #32]
 80031b0:	4b0e      	ldr	r3, [pc, #56]	; (80031ec <HAL_TIM_Base_MspInit+0x12c>)
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	f003 0308 	and.w	r3, r3, #8
 80031b8:	613b      	str	r3, [r7, #16]
 80031ba:	693b      	ldr	r3, [r7, #16]
}
 80031bc:	e010      	b.n	80031e0 <HAL_TIM_Base_MspInit+0x120>
  else if(tim_baseHandle->Instance==TIM11)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a0f      	ldr	r2, [pc, #60]	; (8003200 <HAL_TIM_Base_MspInit+0x140>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d10b      	bne.n	80031e0 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80031c8:	4b08      	ldr	r3, [pc, #32]	; (80031ec <HAL_TIM_Base_MspInit+0x12c>)
 80031ca:	6a1b      	ldr	r3, [r3, #32]
 80031cc:	4a07      	ldr	r2, [pc, #28]	; (80031ec <HAL_TIM_Base_MspInit+0x12c>)
 80031ce:	f043 0310 	orr.w	r3, r3, #16
 80031d2:	6213      	str	r3, [r2, #32]
 80031d4:	4b05      	ldr	r3, [pc, #20]	; (80031ec <HAL_TIM_Base_MspInit+0x12c>)
 80031d6:	6a1b      	ldr	r3, [r3, #32]
 80031d8:	f003 0310 	and.w	r3, r3, #16
 80031dc:	60fb      	str	r3, [r7, #12]
 80031de:	68fb      	ldr	r3, [r7, #12]
}
 80031e0:	bf00      	nop
 80031e2:	3738      	adds	r7, #56	; 0x38
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	40000800 	.word	0x40000800
 80031ec:	40023800 	.word	0x40023800
 80031f0:	40020400 	.word	0x40020400
 80031f4:	40001000 	.word	0x40001000
 80031f8:	40010800 	.word	0x40010800
 80031fc:	40010c00 	.word	0x40010c00
 8003200:	40011000 	.word	0x40011000

08003204 <HAL_TIM_MspPostInit>:
//======================================================================================
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b08a      	sub	sp, #40	; 0x28
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800320c:	f107 0314 	add.w	r3, r7, #20
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]
 8003214:	605a      	str	r2, [r3, #4]
 8003216:	609a      	str	r2, [r3, #8]
 8003218:	60da      	str	r2, [r3, #12]
 800321a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a22      	ldr	r2, [pc, #136]	; (80032ac <HAL_TIM_MspPostInit+0xa8>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d11c      	bne.n	8003260 <HAL_TIM_MspPostInit+0x5c>
  {
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003226:	4b22      	ldr	r3, [pc, #136]	; (80032b0 <HAL_TIM_MspPostInit+0xac>)
 8003228:	69db      	ldr	r3, [r3, #28]
 800322a:	4a21      	ldr	r2, [pc, #132]	; (80032b0 <HAL_TIM_MspPostInit+0xac>)
 800322c:	f043 0302 	orr.w	r3, r3, #2
 8003230:	61d3      	str	r3, [r2, #28]
 8003232:	4b1f      	ldr	r3, [pc, #124]	; (80032b0 <HAL_TIM_MspPostInit+0xac>)
 8003234:	69db      	ldr	r3, [r3, #28]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	613b      	str	r3, [r7, #16]
 800323c:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = SNS_HALL_IN_Pin;
 800323e:	2340      	movs	r3, #64	; 0x40
 8003240:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003242:	2302      	movs	r3, #2
 8003244:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003246:	2300      	movs	r3, #0
 8003248:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800324a:	2300      	movs	r3, #0
 800324c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800324e:	2302      	movs	r3, #2
 8003250:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SNS_HALL_IN_GPIO_Port, &GPIO_InitStruct);
 8003252:	f107 0314 	add.w	r3, r7, #20
 8003256:	4619      	mov	r1, r3
 8003258:	4816      	ldr	r0, [pc, #88]	; (80032b4 <HAL_TIM_MspPostInit+0xb0>)
 800325a:	f004 fd89 	bl	8007d70 <HAL_GPIO_Init>
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
    HAL_GPIO_Init(PWM_COOLING_GPIO_Port, &GPIO_InitStruct);
  }

}
 800325e:	e020      	b.n	80032a2 <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM11)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a14      	ldr	r2, [pc, #80]	; (80032b8 <HAL_TIM_MspPostInit+0xb4>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d11b      	bne.n	80032a2 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800326a:	4b11      	ldr	r3, [pc, #68]	; (80032b0 <HAL_TIM_MspPostInit+0xac>)
 800326c:	69db      	ldr	r3, [r3, #28]
 800326e:	4a10      	ldr	r2, [pc, #64]	; (80032b0 <HAL_TIM_MspPostInit+0xac>)
 8003270:	f043 0310 	orr.w	r3, r3, #16
 8003274:	61d3      	str	r3, [r2, #28]
 8003276:	4b0e      	ldr	r3, [pc, #56]	; (80032b0 <HAL_TIM_MspPostInit+0xac>)
 8003278:	69db      	ldr	r3, [r3, #28]
 800327a:	f003 0310 	and.w	r3, r3, #16
 800327e:	60fb      	str	r3, [r7, #12]
 8003280:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_COOLING_Pin;
 8003282:	2302      	movs	r3, #2
 8003284:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003286:	2302      	movs	r3, #2
 8003288:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800328a:	2300      	movs	r3, #0
 800328c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800328e:	2300      	movs	r3, #0
 8003290:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8003292:	2303      	movs	r3, #3
 8003294:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_COOLING_GPIO_Port, &GPIO_InitStruct);
 8003296:	f107 0314 	add.w	r3, r7, #20
 800329a:	4619      	mov	r1, r3
 800329c:	4807      	ldr	r0, [pc, #28]	; (80032bc <HAL_TIM_MspPostInit+0xb8>)
 800329e:	f004 fd67 	bl	8007d70 <HAL_GPIO_Init>
}
 80032a2:	bf00      	nop
 80032a4:	3728      	adds	r7, #40	; 0x28
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	40000800 	.word	0x40000800
 80032b0:	40023800 	.word	0x40023800
 80032b4:	40020400 	.word	0x40020400
 80032b8:	40011000 	.word	0x40011000
 80032bc:	40021000 	.word	0x40021000

080032c0 <Delay_us>:
    __HAL_RCC_TIM11_CLK_DISABLE();
  }
}
//======================================================================================
void Delay_us(uint16_t us)																// Микросекундные задержки 0 .. 65535 мкс
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	4603      	mov	r3, r0
 80032c8:	80fb      	strh	r3, [r7, #6]
	// Таймер TIM10 настроен на тики равные 1 мкс
    __HAL_TIM_SET_COUNTER(&htim10, 0);													// обнуляем счётчик
 80032ca:	4b0a      	ldr	r3, [pc, #40]	; (80032f4 <Delay_us+0x34>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2200      	movs	r2, #0
 80032d0:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_TIM_Base_Start(&htim10);
 80032d2:	4808      	ldr	r0, [pc, #32]	; (80032f4 <Delay_us+0x34>)
 80032d4:	f007 fc60 	bl	800ab98 <HAL_TIM_Base_Start>
    while(__HAL_TIM_GET_COUNTER(&htim10) <= us)								// ждем пока не натикает до
 80032d8:	bf00      	nop
 80032da:	4b06      	ldr	r3, [pc, #24]	; (80032f4 <Delay_us+0x34>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032e0:	88fb      	ldrh	r3, [r7, #6]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d9f9      	bls.n	80032da <Delay_us+0x1a>
    {
    }
    HAL_TIM_Base_Stop(&htim10);
 80032e6:	4803      	ldr	r0, [pc, #12]	; (80032f4 <Delay_us+0x34>)
 80032e8:	f007 fca0 	bl	800ac2c <HAL_TIM_Base_Stop>
}
 80032ec:	bf00      	nop
 80032ee:	3708      	adds	r7, #8
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	20008e4c 	.word	0x20008e4c

080032f8 <__io_putchar>:
/**
  * @brief	Переопределение функции вывода симвода для того чтобы printf из стандартной C библиотеки выводил данные в виртуальный COM-порт через USART2
  * 		Retargets the C library printf function to the USART.
  */
PUTCHAR_PROTOTYPE
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  /* USART implementation of fputc  */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 100);		// вывод для отладки в виртуальный порт ПК		[115200bps 8N1]
 8003300:	1d39      	adds	r1, r7, #4
 8003302:	2364      	movs	r3, #100	; 0x64
 8003304:	2201      	movs	r2, #1
 8003306:	4804      	ldr	r0, [pc, #16]	; (8003318 <__io_putchar+0x20>)
 8003308:	f008 ff1d 	bl	800c146 <HAL_UART_Transmit>
  //HAL_UART_Transmit(&huart4, (uint8_t *)&ch, 1, 100);		// вывод для ПК									[115200bps 8N1]
//    huart2.Instance->DR = (uint8_t *)ch;
  return ch;
 800330c:	687b      	ldr	r3, [r7, #4]
}
 800330e:	4618      	mov	r0, r3
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	2000908c 	.word	0x2000908c

0800331c <MX_USART1_UART_Init>:
//=======================================================================================

//======================================================================================
void MX_USART1_UART_Init(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8003320:	4b11      	ldr	r3, [pc, #68]	; (8003368 <MX_USART1_UART_Init+0x4c>)
 8003322:	4a12      	ldr	r2, [pc, #72]	; (800336c <MX_USART1_UART_Init+0x50>)
 8003324:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003326:	4b10      	ldr	r3, [pc, #64]	; (8003368 <MX_USART1_UART_Init+0x4c>)
 8003328:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800332c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800332e:	4b0e      	ldr	r3, [pc, #56]	; (8003368 <MX_USART1_UART_Init+0x4c>)
 8003330:	2200      	movs	r2, #0
 8003332:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003334:	4b0c      	ldr	r3, [pc, #48]	; (8003368 <MX_USART1_UART_Init+0x4c>)
 8003336:	2200      	movs	r2, #0
 8003338:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800333a:	4b0b      	ldr	r3, [pc, #44]	; (8003368 <MX_USART1_UART_Init+0x4c>)
 800333c:	2200      	movs	r2, #0
 800333e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003340:	4b09      	ldr	r3, [pc, #36]	; (8003368 <MX_USART1_UART_Init+0x4c>)
 8003342:	220c      	movs	r2, #12
 8003344:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003346:	4b08      	ldr	r3, [pc, #32]	; (8003368 <MX_USART1_UART_Init+0x4c>)
 8003348:	2200      	movs	r2, #0
 800334a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800334c:	4b06      	ldr	r3, [pc, #24]	; (8003368 <MX_USART1_UART_Init+0x4c>)
 800334e:	2200      	movs	r2, #0
 8003350:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003352:	4805      	ldr	r0, [pc, #20]	; (8003368 <MX_USART1_UART_Init+0x4c>)
 8003354:	f008 feaa 	bl	800c0ac <HAL_UART_Init>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d002      	beq.n	8003364 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler(5);
 800335e:	2005      	movs	r0, #5
 8003360:	f000 fb64 	bl	8003a2c <Error_Handler>
  }

}
 8003364:	bf00      	nop
 8003366:	bd80      	pop	{r7, pc}
 8003368:	2000900c 	.word	0x2000900c
 800336c:	40013800 	.word	0x40013800

08003370 <MX_USART2_UART_Init>:
//======================================================================================
void MX_USART2_UART_Init(void)															// Virtual COM-Port возможность вывода сообщений с помощью простого printf (переопределен putc и заглушки к stdlib)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8003374:	4b11      	ldr	r3, [pc, #68]	; (80033bc <MX_USART2_UART_Init+0x4c>)
 8003376:	4a12      	ldr	r2, [pc, #72]	; (80033c0 <MX_USART2_UART_Init+0x50>)
 8003378:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800337a:	4b10      	ldr	r3, [pc, #64]	; (80033bc <MX_USART2_UART_Init+0x4c>)
 800337c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003380:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003382:	4b0e      	ldr	r3, [pc, #56]	; (80033bc <MX_USART2_UART_Init+0x4c>)
 8003384:	2200      	movs	r2, #0
 8003386:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003388:	4b0c      	ldr	r3, [pc, #48]	; (80033bc <MX_USART2_UART_Init+0x4c>)
 800338a:	2200      	movs	r2, #0
 800338c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800338e:	4b0b      	ldr	r3, [pc, #44]	; (80033bc <MX_USART2_UART_Init+0x4c>)
 8003390:	2200      	movs	r2, #0
 8003392:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003394:	4b09      	ldr	r3, [pc, #36]	; (80033bc <MX_USART2_UART_Init+0x4c>)
 8003396:	220c      	movs	r2, #12
 8003398:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800339a:	4b08      	ldr	r3, [pc, #32]	; (80033bc <MX_USART2_UART_Init+0x4c>)
 800339c:	2200      	movs	r2, #0
 800339e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80033a0:	4b06      	ldr	r3, [pc, #24]	; (80033bc <MX_USART2_UART_Init+0x4c>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80033a6:	4805      	ldr	r0, [pc, #20]	; (80033bc <MX_USART2_UART_Init+0x4c>)
 80033a8:	f008 fe80 	bl	800c0ac <HAL_UART_Init>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d002      	beq.n	80033b8 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler(5);
 80033b2:	2005      	movs	r0, #5
 80033b4:	f000 fb3a 	bl	8003a2c <Error_Handler>
  }

}
 80033b8:	bf00      	nop
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	2000908c 	.word	0x2000908c
 80033c0:	40004400 	.word	0x40004400

080033c4 <MX_USART3_UART_Init>:
//======================================================================================
void MX_USART3_UART_Init(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80033c8:	4b11      	ldr	r3, [pc, #68]	; (8003410 <MX_USART3_UART_Init+0x4c>)
 80033ca:	4a12      	ldr	r2, [pc, #72]	; (8003414 <MX_USART3_UART_Init+0x50>)
 80033cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80033ce:	4b10      	ldr	r3, [pc, #64]	; (8003410 <MX_USART3_UART_Init+0x4c>)
 80033d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80033d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80033d6:	4b0e      	ldr	r3, [pc, #56]	; (8003410 <MX_USART3_UART_Init+0x4c>)
 80033d8:	2200      	movs	r2, #0
 80033da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80033dc:	4b0c      	ldr	r3, [pc, #48]	; (8003410 <MX_USART3_UART_Init+0x4c>)
 80033de:	2200      	movs	r2, #0
 80033e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80033e2:	4b0b      	ldr	r3, [pc, #44]	; (8003410 <MX_USART3_UART_Init+0x4c>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80033e8:	4b09      	ldr	r3, [pc, #36]	; (8003410 <MX_USART3_UART_Init+0x4c>)
 80033ea:	220c      	movs	r2, #12
 80033ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033ee:	4b08      	ldr	r3, [pc, #32]	; (8003410 <MX_USART3_UART_Init+0x4c>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80033f4:	4b06      	ldr	r3, [pc, #24]	; (8003410 <MX_USART3_UART_Init+0x4c>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80033fa:	4805      	ldr	r0, [pc, #20]	; (8003410 <MX_USART3_UART_Init+0x4c>)
 80033fc:	f008 fe56 	bl	800c0ac <HAL_UART_Init>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d002      	beq.n	800340c <MX_USART3_UART_Init+0x48>
  {
    Error_Handler(5);
 8003406:	2005      	movs	r0, #5
 8003408:	f000 fb10 	bl	8003a2c <Error_Handler>
  }

}
 800340c:	bf00      	nop
 800340e:	bd80      	pop	{r7, pc}
 8003410:	20008f8c 	.word	0x20008f8c
 8003414:	40004800 	.word	0x40004800

08003418 <MX_UART4_Init>:
//======================================================================================
void MX_UART4_Init(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 800341c:	4b11      	ldr	r3, [pc, #68]	; (8003464 <MX_UART4_Init+0x4c>)
 800341e:	4a12      	ldr	r2, [pc, #72]	; (8003468 <MX_UART4_Init+0x50>)
 8003420:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8003422:	4b10      	ldr	r3, [pc, #64]	; (8003464 <MX_UART4_Init+0x4c>)
 8003424:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003428:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800342a:	4b0e      	ldr	r3, [pc, #56]	; (8003464 <MX_UART4_Init+0x4c>)
 800342c:	2200      	movs	r2, #0
 800342e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003430:	4b0c      	ldr	r3, [pc, #48]	; (8003464 <MX_UART4_Init+0x4c>)
 8003432:	2200      	movs	r2, #0
 8003434:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003436:	4b0b      	ldr	r3, [pc, #44]	; (8003464 <MX_UART4_Init+0x4c>)
 8003438:	2200      	movs	r2, #0
 800343a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800343c:	4b09      	ldr	r3, [pc, #36]	; (8003464 <MX_UART4_Init+0x4c>)
 800343e:	220c      	movs	r2, #12
 8003440:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003442:	4b08      	ldr	r3, [pc, #32]	; (8003464 <MX_UART4_Init+0x4c>)
 8003444:	2200      	movs	r2, #0
 8003446:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003448:	4b06      	ldr	r3, [pc, #24]	; (8003464 <MX_UART4_Init+0x4c>)
 800344a:	2200      	movs	r2, #0
 800344c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800344e:	4805      	ldr	r0, [pc, #20]	; (8003464 <MX_UART4_Init+0x4c>)
 8003450:	f008 fe2c 	bl	800c0ac <HAL_UART_Init>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d002      	beq.n	8003460 <MX_UART4_Init+0x48>
  {
    Error_Handler(5);
 800345a:	2005      	movs	r0, #5
 800345c:	f000 fae6 	bl	8003a2c <Error_Handler>
  }

}
 8003460:	bf00      	nop
 8003462:	bd80      	pop	{r7, pc}
 8003464:	2000904c 	.word	0x2000904c
 8003468:	40004c00 	.word	0x40004c00

0800346c <MX_UART5_Init>:
//======================================================================================
void MX_UART5_Init(void)																// Консоль MicroRL (через BLUETOOTH адаптер)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	af00      	add	r7, sp, #0

  huart5.Instance = UART5;
 8003470:	4b11      	ldr	r3, [pc, #68]	; (80034b8 <MX_UART5_Init+0x4c>)
 8003472:	4a12      	ldr	r2, [pc, #72]	; (80034bc <MX_UART5_Init+0x50>)
 8003474:	601a      	str	r2, [r3, #0]
//  huart5.Init.BaudRate = 115200;
  huart5.Init.BaudRate = 9600;
 8003476:	4b10      	ldr	r3, [pc, #64]	; (80034b8 <MX_UART5_Init+0x4c>)
 8003478:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800347c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800347e:	4b0e      	ldr	r3, [pc, #56]	; (80034b8 <MX_UART5_Init+0x4c>)
 8003480:	2200      	movs	r2, #0
 8003482:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003484:	4b0c      	ldr	r3, [pc, #48]	; (80034b8 <MX_UART5_Init+0x4c>)
 8003486:	2200      	movs	r2, #0
 8003488:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800348a:	4b0b      	ldr	r3, [pc, #44]	; (80034b8 <MX_UART5_Init+0x4c>)
 800348c:	2200      	movs	r2, #0
 800348e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003490:	4b09      	ldr	r3, [pc, #36]	; (80034b8 <MX_UART5_Init+0x4c>)
 8003492:	220c      	movs	r2, #12
 8003494:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003496:	4b08      	ldr	r3, [pc, #32]	; (80034b8 <MX_UART5_Init+0x4c>)
 8003498:	2200      	movs	r2, #0
 800349a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800349c:	4b06      	ldr	r3, [pc, #24]	; (80034b8 <MX_UART5_Init+0x4c>)
 800349e:	2200      	movs	r2, #0
 80034a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80034a2:	4805      	ldr	r0, [pc, #20]	; (80034b8 <MX_UART5_Init+0x4c>)
 80034a4:	f008 fe02 	bl	800c0ac <HAL_UART_Init>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d002      	beq.n	80034b4 <MX_UART5_Init+0x48>
  {
    Error_Handler(5);
 80034ae:	2005      	movs	r0, #5
 80034b0:	f000 fabc 	bl	8003a2c <Error_Handler>
  }

}
 80034b4:	bf00      	nop
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	20008fcc 	.word	0x20008fcc
 80034bc:	40005000 	.word	0x40005000

080034c0 <HAL_UART_MspInit>:
//======================================================================================
void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b092      	sub	sp, #72	; 0x48
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80034cc:	2200      	movs	r2, #0
 80034ce:	601a      	str	r2, [r3, #0]
 80034d0:	605a      	str	r2, [r3, #4]
 80034d2:	609a      	str	r2, [r3, #8]
 80034d4:	60da      	str	r2, [r3, #12]
 80034d6:	611a      	str	r2, [r3, #16]

  if(uartHandle->Instance==USART1)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a97      	ldr	r2, [pc, #604]	; (800373c <HAL_UART_MspInit+0x27c>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d131      	bne.n	8003546 <HAL_UART_MspInit+0x86>
  {
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80034e2:	4b97      	ldr	r3, [pc, #604]	; (8003740 <HAL_UART_MspInit+0x280>)
 80034e4:	6a1b      	ldr	r3, [r3, #32]
 80034e6:	4a96      	ldr	r2, [pc, #600]	; (8003740 <HAL_UART_MspInit+0x280>)
 80034e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034ec:	6213      	str	r3, [r2, #32]
 80034ee:	4b94      	ldr	r3, [pc, #592]	; (8003740 <HAL_UART_MspInit+0x280>)
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034f6:	633b      	str	r3, [r7, #48]	; 0x30
 80034f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034fa:	4b91      	ldr	r3, [pc, #580]	; (8003740 <HAL_UART_MspInit+0x280>)
 80034fc:	69db      	ldr	r3, [r3, #28]
 80034fe:	4a90      	ldr	r2, [pc, #576]	; (8003740 <HAL_UART_MspInit+0x280>)
 8003500:	f043 0301 	orr.w	r3, r3, #1
 8003504:	61d3      	str	r3, [r2, #28]
 8003506:	4b8e      	ldr	r3, [pc, #568]	; (8003740 <HAL_UART_MspInit+0x280>)
 8003508:	69db      	ldr	r3, [r3, #28]
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8003512:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003516:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003518:	2302      	movs	r3, #2
 800351a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800351c:	2300      	movs	r3, #0
 800351e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003520:	2303      	movs	r3, #3
 8003522:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003524:	2307      	movs	r3, #7
 8003526:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003528:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800352c:	4619      	mov	r1, r3
 800352e:	4885      	ldr	r0, [pc, #532]	; (8003744 <HAL_UART_MspInit+0x284>)
 8003530:	f004 fc1e 	bl	8007d70 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, PRIORITY_ISR_USART1, 0);
 8003534:	2200      	movs	r2, #0
 8003536:	2109      	movs	r1, #9
 8003538:	2025      	movs	r0, #37	; 0x25
 800353a:	f004 f9a0 	bl	800787e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800353e:	2025      	movs	r0, #37	; 0x25
 8003540:	f004 f9b9 	bl	80078b6 <HAL_NVIC_EnableIRQ>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, PRIORITY_ISR_USART5_MainCPU, 0);
    HAL_NVIC_EnableIRQ(UART5_IRQn);
  }
}
 8003544:	e0f5      	b.n	8003732 <HAL_UART_MspInit+0x272>
  else if(uartHandle->Instance==USART2)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a7f      	ldr	r2, [pc, #508]	; (8003748 <HAL_UART_MspInit+0x288>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d130      	bne.n	80035b2 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003550:	4b7b      	ldr	r3, [pc, #492]	; (8003740 <HAL_UART_MspInit+0x280>)
 8003552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003554:	4a7a      	ldr	r2, [pc, #488]	; (8003740 <HAL_UART_MspInit+0x280>)
 8003556:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800355a:	6253      	str	r3, [r2, #36]	; 0x24
 800355c:	4b78      	ldr	r3, [pc, #480]	; (8003740 <HAL_UART_MspInit+0x280>)
 800355e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003564:	62bb      	str	r3, [r7, #40]	; 0x28
 8003566:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003568:	4b75      	ldr	r3, [pc, #468]	; (8003740 <HAL_UART_MspInit+0x280>)
 800356a:	69db      	ldr	r3, [r3, #28]
 800356c:	4a74      	ldr	r2, [pc, #464]	; (8003740 <HAL_UART_MspInit+0x280>)
 800356e:	f043 0301 	orr.w	r3, r3, #1
 8003572:	61d3      	str	r3, [r2, #28]
 8003574:	4b72      	ldr	r3, [pc, #456]	; (8003740 <HAL_UART_MspInit+0x280>)
 8003576:	69db      	ldr	r3, [r3, #28]
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	627b      	str	r3, [r7, #36]	; 0x24
 800357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8003580:	230c      	movs	r3, #12
 8003582:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003584:	2302      	movs	r3, #2
 8003586:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003588:	2300      	movs	r3, #0
 800358a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800358c:	2303      	movs	r3, #3
 800358e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003590:	2307      	movs	r3, #7
 8003592:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003594:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003598:	4619      	mov	r1, r3
 800359a:	486a      	ldr	r0, [pc, #424]	; (8003744 <HAL_UART_MspInit+0x284>)
 800359c:	f004 fbe8 	bl	8007d70 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, PRIORITY_ISR_USART2, 0);
 80035a0:	2200      	movs	r2, #0
 80035a2:	2108      	movs	r1, #8
 80035a4:	2026      	movs	r0, #38	; 0x26
 80035a6:	f004 f96a 	bl	800787e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80035aa:	2026      	movs	r0, #38	; 0x26
 80035ac:	f004 f983 	bl	80078b6 <HAL_NVIC_EnableIRQ>
}
 80035b0:	e0bf      	b.n	8003732 <HAL_UART_MspInit+0x272>
  else if(uartHandle->Instance==USART3)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a65      	ldr	r2, [pc, #404]	; (800374c <HAL_UART_MspInit+0x28c>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d131      	bne.n	8003620 <HAL_UART_MspInit+0x160>
    __HAL_RCC_USART3_CLK_ENABLE();
 80035bc:	4b60      	ldr	r3, [pc, #384]	; (8003740 <HAL_UART_MspInit+0x280>)
 80035be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c0:	4a5f      	ldr	r2, [pc, #380]	; (8003740 <HAL_UART_MspInit+0x280>)
 80035c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035c6:	6253      	str	r3, [r2, #36]	; 0x24
 80035c8:	4b5d      	ldr	r3, [pc, #372]	; (8003740 <HAL_UART_MspInit+0x280>)
 80035ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035d0:	623b      	str	r3, [r7, #32]
 80035d2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035d4:	4b5a      	ldr	r3, [pc, #360]	; (8003740 <HAL_UART_MspInit+0x280>)
 80035d6:	69db      	ldr	r3, [r3, #28]
 80035d8:	4a59      	ldr	r2, [pc, #356]	; (8003740 <HAL_UART_MspInit+0x280>)
 80035da:	f043 0302 	orr.w	r3, r3, #2
 80035de:	61d3      	str	r3, [r2, #28]
 80035e0:	4b57      	ldr	r3, [pc, #348]	; (8003740 <HAL_UART_MspInit+0x280>)
 80035e2:	69db      	ldr	r3, [r3, #28]
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	61fb      	str	r3, [r7, #28]
 80035ea:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = USART3_TX_Pin|USART3_RX_Pin;
 80035ec:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80035f0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f2:	2302      	movs	r3, #2
 80035f4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f6:	2300      	movs	r3, #0
 80035f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035fa:	2303      	movs	r3, #3
 80035fc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80035fe:	2307      	movs	r3, #7
 8003600:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003602:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003606:	4619      	mov	r1, r3
 8003608:	4851      	ldr	r0, [pc, #324]	; (8003750 <HAL_UART_MspInit+0x290>)
 800360a:	f004 fbb1 	bl	8007d70 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, PRIORITY_ISR_USART3, 0);
 800360e:	2200      	movs	r2, #0
 8003610:	2107      	movs	r1, #7
 8003612:	2027      	movs	r0, #39	; 0x27
 8003614:	f004 f933 	bl	800787e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003618:	2027      	movs	r0, #39	; 0x27
 800361a:	f004 f94c 	bl	80078b6 <HAL_NVIC_EnableIRQ>
}
 800361e:	e088      	b.n	8003732 <HAL_UART_MspInit+0x272>
  else if(uartHandle->Instance==UART4)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a4b      	ldr	r2, [pc, #300]	; (8003754 <HAL_UART_MspInit+0x294>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d131      	bne.n	800368e <HAL_UART_MspInit+0x1ce>
    __HAL_RCC_UART4_CLK_ENABLE();
 800362a:	4b45      	ldr	r3, [pc, #276]	; (8003740 <HAL_UART_MspInit+0x280>)
 800362c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362e:	4a44      	ldr	r2, [pc, #272]	; (8003740 <HAL_UART_MspInit+0x280>)
 8003630:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003634:	6253      	str	r3, [r2, #36]	; 0x24
 8003636:	4b42      	ldr	r3, [pc, #264]	; (8003740 <HAL_UART_MspInit+0x280>)
 8003638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800363e:	61bb      	str	r3, [r7, #24]
 8003640:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003642:	4b3f      	ldr	r3, [pc, #252]	; (8003740 <HAL_UART_MspInit+0x280>)
 8003644:	69db      	ldr	r3, [r3, #28]
 8003646:	4a3e      	ldr	r2, [pc, #248]	; (8003740 <HAL_UART_MspInit+0x280>)
 8003648:	f043 0304 	orr.w	r3, r3, #4
 800364c:	61d3      	str	r3, [r2, #28]
 800364e:	4b3c      	ldr	r3, [pc, #240]	; (8003740 <HAL_UART_MspInit+0x280>)
 8003650:	69db      	ldr	r3, [r3, #28]
 8003652:	f003 0304 	and.w	r3, r3, #4
 8003656:	617b      	str	r3, [r7, #20]
 8003658:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = UART4_TX_Pin|UART4_RX_Pin;
 800365a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800365e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003660:	2302      	movs	r3, #2
 8003662:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003664:	2301      	movs	r3, #1
 8003666:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003668:	2303      	movs	r3, #3
 800366a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800366c:	2308      	movs	r3, #8
 800366e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003670:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003674:	4619      	mov	r1, r3
 8003676:	4838      	ldr	r0, [pc, #224]	; (8003758 <HAL_UART_MspInit+0x298>)
 8003678:	f004 fb7a 	bl	8007d70 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART4_IRQn, PRIORITY_ISR_USART4, 0);
 800367c:	2200      	movs	r2, #0
 800367e:	2106      	movs	r1, #6
 8003680:	2030      	movs	r0, #48	; 0x30
 8003682:	f004 f8fc 	bl	800787e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003686:	2030      	movs	r0, #48	; 0x30
 8003688:	f004 f915 	bl	80078b6 <HAL_NVIC_EnableIRQ>
}
 800368c:	e051      	b.n	8003732 <HAL_UART_MspInit+0x272>
  else if(uartHandle->Instance==UART5)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a32      	ldr	r2, [pc, #200]	; (800375c <HAL_UART_MspInit+0x29c>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d14c      	bne.n	8003732 <HAL_UART_MspInit+0x272>
    __HAL_RCC_UART5_CLK_ENABLE();
 8003698:	4b29      	ldr	r3, [pc, #164]	; (8003740 <HAL_UART_MspInit+0x280>)
 800369a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369c:	4a28      	ldr	r2, [pc, #160]	; (8003740 <HAL_UART_MspInit+0x280>)
 800369e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036a2:	6253      	str	r3, [r2, #36]	; 0x24
 80036a4:	4b26      	ldr	r3, [pc, #152]	; (8003740 <HAL_UART_MspInit+0x280>)
 80036a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036ac:	613b      	str	r3, [r7, #16]
 80036ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036b0:	4b23      	ldr	r3, [pc, #140]	; (8003740 <HAL_UART_MspInit+0x280>)
 80036b2:	69db      	ldr	r3, [r3, #28]
 80036b4:	4a22      	ldr	r2, [pc, #136]	; (8003740 <HAL_UART_MspInit+0x280>)
 80036b6:	f043 0304 	orr.w	r3, r3, #4
 80036ba:	61d3      	str	r3, [r2, #28]
 80036bc:	4b20      	ldr	r3, [pc, #128]	; (8003740 <HAL_UART_MspInit+0x280>)
 80036be:	69db      	ldr	r3, [r3, #28]
 80036c0:	f003 0304 	and.w	r3, r3, #4
 80036c4:	60fb      	str	r3, [r7, #12]
 80036c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80036c8:	4b1d      	ldr	r3, [pc, #116]	; (8003740 <HAL_UART_MspInit+0x280>)
 80036ca:	69db      	ldr	r3, [r3, #28]
 80036cc:	4a1c      	ldr	r2, [pc, #112]	; (8003740 <HAL_UART_MspInit+0x280>)
 80036ce:	f043 0308 	orr.w	r3, r3, #8
 80036d2:	61d3      	str	r3, [r2, #28]
 80036d4:	4b1a      	ldr	r3, [pc, #104]	; (8003740 <HAL_UART_MspInit+0x280>)
 80036d6:	69db      	ldr	r3, [r3, #28]
 80036d8:	f003 0308 	and.w	r3, r3, #8
 80036dc:	60bb      	str	r3, [r7, #8]
 80036de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = UART5_TX_Pin;
 80036e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036e4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036e6:	2302      	movs	r3, #2
 80036e8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036ea:	2301      	movs	r3, #1
 80036ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036ee:	2303      	movs	r3, #3
 80036f0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80036f2:	2308      	movs	r3, #8
 80036f4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(UART5_TX_GPIO_Port, &GPIO_InitStruct);
 80036f6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80036fa:	4619      	mov	r1, r3
 80036fc:	4816      	ldr	r0, [pc, #88]	; (8003758 <HAL_UART_MspInit+0x298>)
 80036fe:	f004 fb37 	bl	8007d70 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART5_RX_Pin;
 8003702:	2304      	movs	r3, #4
 8003704:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003706:	2302      	movs	r3, #2
 8003708:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800370a:	2301      	movs	r3, #1
 800370c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800370e:	2303      	movs	r3, #3
 8003710:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003712:	2308      	movs	r3, #8
 8003714:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(UART5_RX_GPIO_Port, &GPIO_InitStruct);
 8003716:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800371a:	4619      	mov	r1, r3
 800371c:	4810      	ldr	r0, [pc, #64]	; (8003760 <HAL_UART_MspInit+0x2a0>)
 800371e:	f004 fb27 	bl	8007d70 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, PRIORITY_ISR_USART5_MainCPU, 0);
 8003722:	2200      	movs	r2, #0
 8003724:	2105      	movs	r1, #5
 8003726:	2031      	movs	r0, #49	; 0x31
 8003728:	f004 f8a9 	bl	800787e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800372c:	2031      	movs	r0, #49	; 0x31
 800372e:	f004 f8c2 	bl	80078b6 <HAL_NVIC_EnableIRQ>
}
 8003732:	bf00      	nop
 8003734:	3748      	adds	r7, #72	; 0x48
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	40013800 	.word	0x40013800
 8003740:	40023800 	.word	0x40023800
 8003744:	40020000 	.word	0x40020000
 8003748:	40004400 	.word	0x40004400
 800374c:	40004800 	.word	0x40004800
 8003750:	40020400 	.word	0x40020400
 8003754:	40004c00 	.word	0x40004c00
 8003758:	40020800 	.word	0x40020800
 800375c:	40005000 	.word	0x40005000
 8003760:	40020c00 	.word	0x40020c00

08003764 <fatfs_test>:
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);

//======================================================================================
int fatfs_test(void)
{
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0

}
 8003768:	bf00      	nop
 800376a:	4618      	mov	r0, r3
 800376c:	46bd      	mov	sp, r7
 800376e:	bc80      	pop	{r7}
 8003770:	4770      	bx	lr
	...

08003774 <main>:

//======================================================================================
int main(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0
	HAL_Init();																			// Настройка HAL
 8003778:	f003 f9ed 	bl	8006b56 <HAL_Init>
	SystemClock_Config();																// Настройка системы тактирования
 800377c:	f000 f896 	bl	80038ac <SystemClock_Config>

	MX_GPIO_Init();																		// Настройка пинов GPIO, не привязанных к блокам SPI, UART, I2C, keys, encoder, ADC, DAC
 8003780:	f7fe ffc0 	bl	8002704 <MX_GPIO_Init>
	MX_DMA_Init();																		// Настройка DMA
 8003784:	f7fd ff9c 	bl	80016c0 <MX_DMA_Init>
	MX_SPI1_Init();																		// Настройка SPI1 для работы с SD картой
 8003788:	f7ff f98e 	bl	8002aa8 <MX_SPI1_Init>
	MX_SPI2_Init();																		// Настройка SPI2 для работы с LCD экраном ILI9488
 800378c:	f7ff f9c4 	bl	8002b18 <MX_SPI2_Init>
	MX_I2C1_Init();																		// Настройка I2C для работы с IMU
 8003790:	f7ff f876 	bl	8002880 <MX_I2C1_Init>

	MX_USART1_UART_Init();																// Настройка USART1
 8003794:	f7ff fdc2 	bl	800331c <MX_USART1_UART_Init>
	MX_USART2_UART_Init();																// Настройка USART2 для Virtual COM-Port
 8003798:	f7ff fdea 	bl	8003370 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();																// Настройка USART3
 800379c:	f7ff fe12 	bl	80033c4 <MX_USART3_UART_Init>
	MX_UART4_Init();																	// Настройка UART4
 80037a0:	f7ff fe3a 	bl	8003418 <MX_UART4_Init>
	MX_UART5_Init();																	// Настройка UART5 терминальной связи с ПК
 80037a4:	f7ff fe62 	bl	800346c <MX_UART5_Init>

	MX_DAC_Init();																		// Настройка ЦАП для управления скоростью мотора
 80037a8:	f7fd fefc 	bl	80015a4 <MX_DAC_Init>
	MX_ADC_Init();																		// Настройка АЦП для измерения токов, напряжений, регулятора скорости
 80037ac:	f7fd fb80 	bl	8000eb0 <MX_ADC_Init>
	MX_TIM3_Init();																		// Настройка для работы энкодера
 80037b0:	f7ff fa8c 	bl	8002ccc <MX_TIM3_Init>
	MX_TIM6_Init();																		// Настройка для работы динамика
 80037b4:	f7ff fb54 	bl	8002e60 <MX_TIM6_Init>
	MX_TIM4_Init();																		// Настройка для работы тахометра оборотов бака
 80037b8:	f7ff fada 	bl	8002d70 <MX_TIM4_Init>
	MX_TIM9_Init();																		// Настройка для отладки FreeRTOS
 80037bc:	f7ff fb56 	bl	8002e6c <MX_TIM9_Init>
	MX_TIM10_Init();																	// Настройка источника микросекундных тиков (для DelayUS() со сбросом ) нужен для 1-Wire DS18B20
 80037c0:	f7ff fba4 	bl	8002f0c <MX_TIM10_Init>
	MX_TIM11_Init();																	// Настройка для ШИМ управления оборотами мотора вентилятора охлаждения контроллера двигателя
 80037c4:	f7ff fbf2 	bl	8002fac <MX_TIM11_Init>

	DS18B20_Init();																		// Инициализация термодатчиков
 80037c8:	f7fd ff98 	bl	80016fc <DS18B20_Init>

	Encoder_Init();																		// Настройка энкодера (GPIO, Таймер, переменные)
 80037cc:	f7fe fc48 	bl	8002060 <Encoder_Init>

	MX_FATFS_Init();																	// Настройка для работы с файлами на SD Card
 80037d0:	f00b f9a2 	bl	800eb18 <MX_FATFS_Init>

	Keys_Init();																		// Настройка GPIO портов для кнопок
 80037d4:	f7ff f8c8 	bl	8002968 <Keys_Init>
	Encoder_Init();																		// Настройка GPIO портов для энкодера
 80037d8:	f7fe fc42 	bl	8002060 <Encoder_Init>

	FAN_Init();																			// Настройка ШИМ-управления для двигателя вентилятора ихлажения
 80037dc:	f000 f9e4 	bl	8003ba8 <FAN_Init>


	BUZZER_Init(BUZZER_STSTE_ON);														// Инициализация и включение пъезодинамика (пищалки/баззера)
 80037e0:	2001      	movs	r0, #1
 80037e2:	f7fd fdd7 	bl	8001394 <BUZZER_Init>

  //  // фейковый трансмит для настройки SPI
  //  uint8_t data = 0;
  //  HAL_SPI_Transmit(&LCD_SPI, &data, 1, 10);

	HAL_Delay(100);
 80037e6:	2064      	movs	r0, #100	; 0x64
 80037e8:	f003 f9ea 	bl	8006bc0 <HAL_Delay>
	LCD9488_Init();	   																	// Инициализаци экрана LCD ILI9488
 80037ec:	f000 fc1c 	bl	8004028 <LCD9488_Init>
	HAL_Delay(100);
 80037f0:	2064      	movs	r0, #100	; 0x64
 80037f2:	f003 f9e5 	bl	8006bc0 <HAL_Delay>

	LCD9488_GUI_SetOrientation(1);														// Установка ориентации экрана
 80037f6:	2001      	movs	r0, #1
 80037f8:	f000 fed0 	bl	800459c <LCD9488_GUI_SetOrientation>
	HAL_Delay(100);
 80037fc:	2064      	movs	r0, #100	; 0x64
 80037fe:	f003 f9df 	bl	8006bc0 <HAL_Delay>



	//подключаем в единую структуру все данные от переферии
	ExchangeStruct.Encoder_State =			&Encoder_State;							// структура с информацией от энкодера
 8003802:	4b1a      	ldr	r3, [pc, #104]	; (800386c <main+0xf8>)
 8003804:	4a1a      	ldr	r2, [pc, #104]	; (8003870 <main+0xfc>)
 8003806:	601a      	str	r2, [r3, #0]


	EEPROM_OptionsLoad();																// чтение настроек по умолчанию и чтение сознаненных настроек из EEPROM
 8003808:	f7fe fc1e 	bl	8002048 <EEPROM_OptionsLoad>

	BUZZER_Beep();
 800380c:	f7fd fe6e 	bl	80014ec <BUZZER_Beep>



	// Рисуем начальную заставку на UART2
	printf("\033[2J"); 																	// Очистка окна терминала.   //https://www.linux.org.ru/forum/development/628620
 8003810:	4818      	ldr	r0, [pc, #96]	; (8003874 <main+0x100>)
 8003812:	f012 f99f 	bl	8015b54 <iprintf>
	printf("\033[0;0H"); 																// задает абсолютные координаты курсора (строка, столбец)  // https://www.opennet.ru/base/dev/console_ctl.txt.html
 8003816:	4818      	ldr	r0, [pc, #96]	; (8003878 <main+0x104>)
 8003818:	f012 f99c 	bl	8015b54 <iprintf>
	printf("Medogonka. Alex Shamilich\n");												// Строка приветствия
 800381c:	4817      	ldr	r0, [pc, #92]	; (800387c <main+0x108>)
 800381e:	f012 fa0d 	bl	8015c3c <puts>
	printf("Version: %s\n", FIRMWARE_VER);
 8003822:	4917      	ldr	r1, [pc, #92]	; (8003880 <main+0x10c>)
 8003824:	4817      	ldr	r0, [pc, #92]	; (8003884 <main+0x110>)
 8003826:	f012 f995 	bl	8015b54 <iprintf>
	printf("  Date: %s\n", __DATE__);
 800382a:	4917      	ldr	r1, [pc, #92]	; (8003888 <main+0x114>)
 800382c:	4817      	ldr	r0, [pc, #92]	; (800388c <main+0x118>)
 800382e:	f012 f991 	bl	8015b54 <iprintf>
	printf("  Time: %s\n", __TIME__);
 8003832:	4917      	ldr	r1, [pc, #92]	; (8003890 <main+0x11c>)
 8003834:	4817      	ldr	r0, [pc, #92]	; (8003894 <main+0x120>)
 8003836:	f012 f98d 	bl	8015b54 <iprintf>
	printf("FreeRTOS, MircoRL, ADC, DAC, 1-Wire\n");
 800383a:	4817      	ldr	r0, [pc, #92]	; (8003898 <main+0x124>)
 800383c:	f012 f9fe 	bl	8015c3c <puts>
	printf("UART2->Virtual_COM\n");
 8003840:	4816      	ldr	r0, [pc, #88]	; (800389c <main+0x128>)
 8003842:	f012 f9fb 	bl	8015c3c <puts>
	printf("UART5->MicroRL\n");
 8003846:	4816      	ldr	r0, [pc, #88]	; (80038a0 <main+0x12c>)
 8003848:	f012 f9f8 	bl	8015c3c <puts>
	printf("TIM4, TIM9, TIM10, TIM11 \n");
 800384c:	4815      	ldr	r0, [pc, #84]	; (80038a4 <main+0x130>)
 800384e:	f012 f9f5 	bl	8015c3c <puts>
	printf("18B20, Encoder\n");
 8003852:	4815      	ldr	r0, [pc, #84]	; (80038a8 <main+0x134>)
 8003854:	f012 f9f2 	bl	8015c3c <puts>


	fatfs_test();
 8003858:	f7ff ff84 	bl	8003764 <fatfs_test>

//	main_test();																		// Тесты LCD

	osKernelInitialize();  																// Настройка планировщика FreeRTOS
 800385c:	f00d fc3c 	bl	80110d8 <osKernelInitialize>
	MX_FREERTOS_Init();																	// Настройка объектов FreeRTOS
 8003860:	f7fe fd08 	bl	8002274 <MX_FREERTOS_Init>
	osKernelStart();																	// Запуск планировщика FreeRTOS
 8003864:	f00d fc6a 	bl	801113c <osKernelStart>



	// После старта планировщика сюда мы никогда не должны зайти, поэтому бесконечный цикл.
	while (1)
 8003868:	e7fe      	b.n	8003868 <main+0xf4>
 800386a:	bf00      	nop
 800386c:	20008c18 	.word	0x20008c18
 8003870:	20008b3c 	.word	0x20008b3c
 8003874:	08019d18 	.word	0x08019d18
 8003878:	08019d20 	.word	0x08019d20
 800387c:	08019d28 	.word	0x08019d28
 8003880:	08019d44 	.word	0x08019d44
 8003884:	08019d4c 	.word	0x08019d4c
 8003888:	08019d5c 	.word	0x08019d5c
 800388c:	08019d68 	.word	0x08019d68
 8003890:	08019d74 	.word	0x08019d74
 8003894:	08019d80 	.word	0x08019d80
 8003898:	08019d8c 	.word	0x08019d8c
 800389c:	08019db0 	.word	0x08019db0
 80038a0:	08019dc4 	.word	0x08019dc4
 80038a4:	08019dd4 	.word	0x08019dd4
 80038a8:	08019df0 	.word	0x08019df0

080038ac <SystemClock_Config>:
	{
	}
}
//======================================================================================
void SystemClock_Config(void)															// System Clock Configuration
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b092      	sub	sp, #72	; 0x48
 80038b0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80038b2:	f107 0314 	add.w	r3, r7, #20
 80038b6:	2234      	movs	r2, #52	; 0x34
 80038b8:	2100      	movs	r1, #0
 80038ba:	4618      	mov	r0, r3
 80038bc:	f011 fb12 	bl	8014ee4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80038c0:	463b      	mov	r3, r7
 80038c2:	2200      	movs	r2, #0
 80038c4:	601a      	str	r2, [r3, #0]
 80038c6:	605a      	str	r2, [r3, #4]
 80038c8:	609a      	str	r2, [r3, #8]
 80038ca:	60da      	str	r2, [r3, #12]
 80038cc:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	*/
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80038ce:	4b23      	ldr	r3, [pc, #140]	; (800395c <SystemClock_Config+0xb0>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80038d6:	4a21      	ldr	r2, [pc, #132]	; (800395c <SystemClock_Config+0xb0>)
 80038d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80038dc:	6013      	str	r3, [r2, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80038de:	2303      	movs	r3, #3
 80038e0:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80038e2:	2301      	movs	r3, #1
 80038e4:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80038e6:	2301      	movs	r3, #1
 80038e8:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80038ea:	2310      	movs	r3, #16
 80038ec:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80038ee:	2302      	movs	r3, #2
 80038f0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80038f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038f6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80038f8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80038fc:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80038fe:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003902:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003904:	f107 0314 	add.w	r3, r7, #20
 8003908:	4618      	mov	r0, r3
 800390a:	f006 f84f 	bl	80099ac <HAL_RCC_OscConfig>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d002      	beq.n	800391a <SystemClock_Config+0x6e>
	{
	Error_Handler(0);
 8003914:	2000      	movs	r0, #0
 8003916:	f000 f889 	bl	8003a2c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800391a:	230f      	movs	r3, #15
 800391c:	603b      	str	r3, [r7, #0]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800391e:	2303      	movs	r3, #3
 8003920:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003922:	2300      	movs	r3, #0
 8003924:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003926:	2300      	movs	r3, #0
 8003928:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800392a:	2300      	movs	r3, #0
 800392c:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800392e:	463b      	mov	r3, r7
 8003930:	2101      	movs	r1, #1
 8003932:	4618      	mov	r0, r3
 8003934:	f006 fb6a 	bl	800a00c <HAL_RCC_ClockConfig>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d002      	beq.n	8003944 <SystemClock_Config+0x98>
	{
	Error_Handler(0);
 800393e:	2000      	movs	r0, #0
 8003940:	f000 f874 	bl	8003a2c <Error_Handler>
	}
	HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_16);
 8003944:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003948:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800394c:	2000      	movs	r0, #0
 800394e:	f006 fc91 	bl	800a274 <HAL_RCC_MCOConfig>
}
 8003952:	bf00      	nop
 8003954:	3748      	adds	r7, #72	; 0x48
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	40007000 	.word	0x40007000

08003960 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM4)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a0c      	ldr	r2, [pc, #48]	; (80039a0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d102      	bne.n	8003978 <HAL_TIM_PeriodElapsedCallback+0x18>
  {
	MotorSpeed_Period 	= 0;															// Если натикало больше чем период таймера (htim4.Init.Period), то считаем скорость мотора нулевой
 8003972:	4b0c      	ldr	r3, [pc, #48]	; (80039a4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8003974:	2200      	movs	r2, #0
 8003976:	801a      	strh	r2, [r3, #0]
  }

  if (htim->Instance == TIM7)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a0a      	ldr	r2, [pc, #40]	; (80039a8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d101      	bne.n	8003986 <HAL_TIM_PeriodElapsedCallback+0x26>
  {
    HAL_IncTick();
 8003982:	f003 f901 	bl	8006b88 <HAL_IncTick>
  }
  if (htim->Instance == TIM6)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a08      	ldr	r2, [pc, #32]	; (80039ac <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d103      	bne.n	8003998 <HAL_TIM_PeriodElapsedCallback+0x38>
  {
	BUZZER_INV;																			// меняем состояние пина баззера
 8003990:	2120      	movs	r1, #32
 8003992:	4807      	ldr	r0, [pc, #28]	; (80039b0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8003994:	f004 fba9 	bl	80080ea <HAL_GPIO_TogglePin>
  }

}
 8003998:	bf00      	nop
 800399a:	3708      	adds	r7, #8
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	40000800 	.word	0x40000800
 80039a4:	20008a20 	.word	0x20008a20
 80039a8:	40001400 	.word	0x40001400
 80039ac:	40001000 	.word	0x40001000
 80039b0:	40020400 	.word	0x40020400

080039b4 <HAL_TIM_IC_CaptureCallback>:
//======================================================================================
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4)															// Считаем скорость по интервалу импульсов от датчика скорости
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a08      	ldr	r2, [pc, #32]	; (80039e4 <HAL_TIM_IC_CaptureCallback+0x30>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d109      	bne.n	80039da <HAL_TIM_IC_CaptureCallback+0x26>
	{
		MotorSpeed_Period = __HAL_TIM_GET_COUNTER(&htim4);
 80039c6:	4b08      	ldr	r3, [pc, #32]	; (80039e8 <HAL_TIM_IC_CaptureCallback+0x34>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039cc:	b29a      	uxth	r2, r3
 80039ce:	4b07      	ldr	r3, [pc, #28]	; (80039ec <HAL_TIM_IC_CaptureCallback+0x38>)
 80039d0:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim4, 0);
 80039d2:	4b05      	ldr	r3, [pc, #20]	; (80039e8 <HAL_TIM_IC_CaptureCallback+0x34>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2200      	movs	r2, #0
 80039d8:	625a      	str	r2, [r3, #36]	; 0x24
	}

}
 80039da:	bf00      	nop
 80039dc:	370c      	adds	r7, #12
 80039de:	46bd      	mov	sp, r7
 80039e0:	bc80      	pop	{r7}
 80039e2:	4770      	bx	lr
 80039e4:	40000800 	.word	0x40000800
 80039e8:	20008e0c 	.word	0x20008e0c
 80039ec:	20008a20 	.word	0x20008a20

080039f0 <Delay_for_errror>:
//======================================================================================
void Delay_for_errror(uint32_t ms) 														// должна работать вне зависимости от прерываний. Когда все рухнуло и нужно диодом показать код ошибки
{
 80039f0:	b480      	push	{r7}
 80039f2:	b085      	sub	sp, #20
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
    volatile uint32_t 	nCount;
    nCount = SystemCoreClock / 10000 * ms;
 80039f8:	4b0a      	ldr	r3, [pc, #40]	; (8003a24 <Delay_for_errror+0x34>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a0a      	ldr	r2, [pc, #40]	; (8003a28 <Delay_for_errror+0x38>)
 80039fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003a02:	0b5b      	lsrs	r3, r3, #13
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	fb02 f303 	mul.w	r3, r2, r3
 8003a0a:	60fb      	str	r3, [r7, #12]
    for (; nCount!=0; nCount--);
 8003a0c:	e002      	b.n	8003a14 <Delay_for_errror+0x24>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	3b01      	subs	r3, #1
 8003a12:	60fb      	str	r3, [r7, #12]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d1f9      	bne.n	8003a0e <Delay_for_errror+0x1e>
}
 8003a1a:	bf00      	nop
 8003a1c:	3714      	adds	r7, #20
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bc80      	pop	{r7}
 8003a22:	4770      	bx	lr
 8003a24:	20000000 	.word	0x20000000
 8003a28:	d1b71759 	.word	0xd1b71759

08003a2c <Error_Handler>:
//=======================================================================================
void Error_Handler(uint8_t err_num)														// Обработчик ошибок
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	4603      	mov	r3, r0
 8003a34:	71fb      	strb	r3, [r7, #7]
  //gl_err_num = err_num;
  while(1)
  {
	LED_GREEN_SET;
 8003a36:	2201      	movs	r2, #1
 8003a38:	2110      	movs	r1, #16
 8003a3a:	4817      	ldr	r0, [pc, #92]	; (8003a98 <Error_Handler+0x6c>)
 8003a3c:	f004 fb3d 	bl	80080ba <HAL_GPIO_WritePin>
	Delay_for_errror(500);
 8003a40:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003a44:	f7ff ffd4 	bl	80039f0 <Delay_for_errror>
	LED_GREEN_RESET;
 8003a48:	2200      	movs	r2, #0
 8003a4a:	2110      	movs	r1, #16
 8003a4c:	4812      	ldr	r0, [pc, #72]	; (8003a98 <Error_Handler+0x6c>)
 8003a4e:	f004 fb34 	bl	80080ba <HAL_GPIO_WritePin>
    Delay_for_errror(500);
 8003a52:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003a56:	f7ff ffcb 	bl	80039f0 <Delay_for_errror>
    for(uint8_t i=0; i < err_num; ++i)
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	73fb      	strb	r3, [r7, #15]
 8003a5e:	e012      	b.n	8003a86 <Error_Handler+0x5a>
    {
    	LED_GREEN_SET;
 8003a60:	2201      	movs	r2, #1
 8003a62:	2110      	movs	r1, #16
 8003a64:	480c      	ldr	r0, [pc, #48]	; (8003a98 <Error_Handler+0x6c>)
 8003a66:	f004 fb28 	bl	80080ba <HAL_GPIO_WritePin>
    	Delay_for_errror(130);
 8003a6a:	2082      	movs	r0, #130	; 0x82
 8003a6c:	f7ff ffc0 	bl	80039f0 <Delay_for_errror>
    	LED_GREEN_RESET;
 8003a70:	2200      	movs	r2, #0
 8003a72:	2110      	movs	r1, #16
 8003a74:	4808      	ldr	r0, [pc, #32]	; (8003a98 <Error_Handler+0x6c>)
 8003a76:	f004 fb20 	bl	80080ba <HAL_GPIO_WritePin>
        Delay_for_errror(130);
 8003a7a:	2082      	movs	r0, #130	; 0x82
 8003a7c:	f7ff ffb8 	bl	80039f0 <Delay_for_errror>
    for(uint8_t i=0; i < err_num; ++i)
 8003a80:	7bfb      	ldrb	r3, [r7, #15]
 8003a82:	3301      	adds	r3, #1
 8003a84:	73fb      	strb	r3, [r7, #15]
 8003a86:	7bfa      	ldrb	r2, [r7, #15]
 8003a88:	79fb      	ldrb	r3, [r7, #7]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d3e8      	bcc.n	8003a60 <Error_Handler+0x34>
    }
    Delay_for_errror(1000);
 8003a8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a92:	f7ff ffad 	bl	80039f0 <Delay_for_errror>
	LED_GREEN_SET;
 8003a96:	e7ce      	b.n	8003a36 <Error_Handler+0xa>
 8003a98:	40020800 	.word	0x40020800

08003a9c <Motor_Scan_DirectionState>:
	osDelay(100);
	MOTOR_BWD_SET;
}
//=======================================================================================
void  Motor_Scan_DirectionState(void)													// Просканировать состояние переключателя направления мотора
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
	GPIO_PinState FWD = HAL_GPIO_ReadPin(BTN_FWD_GPIO_Port,  BTN_FWD_Pin);
 8003aa2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003aa6:	4824      	ldr	r0, [pc, #144]	; (8003b38 <Motor_Scan_DirectionState+0x9c>)
 8003aa8:	f004 faf0 	bl	800808c <HAL_GPIO_ReadPin>
 8003aac:	4603      	mov	r3, r0
 8003aae:	71fb      	strb	r3, [r7, #7]
	GPIO_PinState BWD = HAL_GPIO_ReadPin(BTN_BWD_GPIO_Port,  BTN_BWD_Pin);
 8003ab0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003ab4:	4820      	ldr	r0, [pc, #128]	; (8003b38 <Motor_Scan_DirectionState+0x9c>)
 8003ab6:	f004 fae9 	bl	800808c <HAL_GPIO_ReadPin>
 8003aba:	4603      	mov	r3, r0
 8003abc:	71bb      	strb	r3, [r7, #6]

	if ( (FWD == GPIO_PIN_SET) &
 8003abe:	79fb      	ldrb	r3, [r7, #7]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	bf0c      	ite	eq
 8003ac4:	2301      	moveq	r3, #1
 8003ac6:	2300      	movne	r3, #0
 8003ac8:	b2da      	uxtb	r2, r3
 8003aca:	79bb      	ldrb	r3, [r7, #6]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	bf0c      	ite	eq
 8003ad0:	2301      	moveq	r3, #1
 8003ad2:	2300      	movne	r3, #0
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d002      	beq.n	8003ae4 <Motor_Scan_DirectionState+0x48>
		 (BWD == GPIO_PIN_SET) )
	{
		MotorDirection = MD_STOP;
 8003ade:	4b17      	ldr	r3, [pc, #92]	; (8003b3c <Motor_Scan_DirectionState+0xa0>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	701a      	strb	r2, [r3, #0]
	}
	if ( (FWD == GPIO_PIN_SET) &
 8003ae4:	79fb      	ldrb	r3, [r7, #7]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	bf0c      	ite	eq
 8003aea:	2301      	moveq	r3, #1
 8003aec:	2300      	movne	r3, #0
 8003aee:	b2da      	uxtb	r2, r3
 8003af0:	79bb      	ldrb	r3, [r7, #6]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	bf0c      	ite	eq
 8003af6:	2301      	moveq	r3, #1
 8003af8:	2300      	movne	r3, #0
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	4013      	ands	r3, r2
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d002      	beq.n	8003b0a <Motor_Scan_DirectionState+0x6e>
		 (BWD == GPIO_PIN_RESET) )
	{
		MotorDirection = MD_FWD;
 8003b04:	4b0d      	ldr	r3, [pc, #52]	; (8003b3c <Motor_Scan_DirectionState+0xa0>)
 8003b06:	2201      	movs	r2, #1
 8003b08:	701a      	strb	r2, [r3, #0]
	}
	if ( (FWD == GPIO_PIN_RESET) &
 8003b0a:	79fb      	ldrb	r3, [r7, #7]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	bf0c      	ite	eq
 8003b10:	2301      	moveq	r3, #1
 8003b12:	2300      	movne	r3, #0
 8003b14:	b2da      	uxtb	r2, r3
 8003b16:	79bb      	ldrb	r3, [r7, #6]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	bf0c      	ite	eq
 8003b1c:	2301      	moveq	r3, #1
 8003b1e:	2300      	movne	r3, #0
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	4013      	ands	r3, r2
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d002      	beq.n	8003b30 <Motor_Scan_DirectionState+0x94>
		 (BWD == GPIO_PIN_SET) )
	{
		MotorDirection = MD_REV;
 8003b2a:	4b04      	ldr	r3, [pc, #16]	; (8003b3c <Motor_Scan_DirectionState+0xa0>)
 8003b2c:	2202      	movs	r2, #2
 8003b2e:	701a      	strb	r2, [r3, #0]
	}

}
 8003b30:	bf00      	nop
 8003b32:	3708      	adds	r7, #8
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	40020c00 	.word	0x40020c00
 8003b3c:	20008ba8 	.word	0x20008ba8

08003b40 <Motor_Set_DirectionState>:
//=======================================================================================
void  Motor_Set_DirectionState(TMotorDirection ADir)									// Установить направление мотора
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	4603      	mov	r3, r0
 8003b48:	71fb      	strb	r3, [r7, #7]
	switch (ADir)
 8003b4a:	79fb      	ldrb	r3, [r7, #7]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d00f      	beq.n	8003b70 <Motor_Set_DirectionState+0x30>
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d018      	beq.n	8003b86 <Motor_Set_DirectionState+0x46>
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d000      	beq.n	8003b5a <Motor_Set_DirectionState+0x1a>
			MOTOR_FWD_RESET;
			MOTOR_BWD_SET;
			break;
	}

}
 8003b58:	e020      	b.n	8003b9c <Motor_Set_DirectionState+0x5c>
			MOTOR_FWD_RESET;
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	2140      	movs	r1, #64	; 0x40
 8003b5e:	4811      	ldr	r0, [pc, #68]	; (8003ba4 <Motor_Set_DirectionState+0x64>)
 8003b60:	f004 faab 	bl	80080ba <HAL_GPIO_WritePin>
			MOTOR_BWD_RESET;
 8003b64:	2200      	movs	r2, #0
 8003b66:	2180      	movs	r1, #128	; 0x80
 8003b68:	480e      	ldr	r0, [pc, #56]	; (8003ba4 <Motor_Set_DirectionState+0x64>)
 8003b6a:	f004 faa6 	bl	80080ba <HAL_GPIO_WritePin>
			break;
 8003b6e:	e015      	b.n	8003b9c <Motor_Set_DirectionState+0x5c>
			MOTOR_FWD_SET;
 8003b70:	2201      	movs	r2, #1
 8003b72:	2140      	movs	r1, #64	; 0x40
 8003b74:	480b      	ldr	r0, [pc, #44]	; (8003ba4 <Motor_Set_DirectionState+0x64>)
 8003b76:	f004 faa0 	bl	80080ba <HAL_GPIO_WritePin>
			MOTOR_BWD_RESET;
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	2180      	movs	r1, #128	; 0x80
 8003b7e:	4809      	ldr	r0, [pc, #36]	; (8003ba4 <Motor_Set_DirectionState+0x64>)
 8003b80:	f004 fa9b 	bl	80080ba <HAL_GPIO_WritePin>
			break;
 8003b84:	e00a      	b.n	8003b9c <Motor_Set_DirectionState+0x5c>
			MOTOR_FWD_RESET;
 8003b86:	2200      	movs	r2, #0
 8003b88:	2140      	movs	r1, #64	; 0x40
 8003b8a:	4806      	ldr	r0, [pc, #24]	; (8003ba4 <Motor_Set_DirectionState+0x64>)
 8003b8c:	f004 fa95 	bl	80080ba <HAL_GPIO_WritePin>
			MOTOR_BWD_SET;
 8003b90:	2201      	movs	r2, #1
 8003b92:	2180      	movs	r1, #128	; 0x80
 8003b94:	4803      	ldr	r0, [pc, #12]	; (8003ba4 <Motor_Set_DirectionState+0x64>)
 8003b96:	f004 fa90 	bl	80080ba <HAL_GPIO_WritePin>
			break;
 8003b9a:	bf00      	nop
}
 8003b9c:	bf00      	nop
 8003b9e:	3708      	adds	r7, #8
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	40021000 	.word	0x40021000

08003ba8 <FAN_Init>:
//=======================================================================================
void  FAN_Init(void)																	// Инициализация управления мотором вентилятора охлажения
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	af00      	add	r7, sp, #0
	MX_TIM11_Init();																	// Инициализация таймера для ШИМ
 8003bac:	f7ff f9fe 	bl	8002fac <MX_TIM11_Init>

	FAN_Set_Start();																	// Включить мотор вентилятора охлажения
 8003bb0:	f000 f806 	bl	8003bc0 <FAN_Set_Start>
	FAN_Set_Speed(FAN_SPEED_DEFAULT);													// Установить скорость вентилятора по-умолчанию
 8003bb4:	2064      	movs	r0, #100	; 0x64
 8003bb6:	f000 f80d 	bl	8003bd4 <FAN_Set_Speed>
}
 8003bba:	bf00      	nop
 8003bbc:	bd80      	pop	{r7, pc}
	...

08003bc0 <FAN_Set_Start>:
//=======================================================================================
void  FAN_Set_Start(void)																// Включить мотор вентилятора охлажения
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 8003bc4:	2100      	movs	r1, #0
 8003bc6:	4802      	ldr	r0, [pc, #8]	; (8003bd0 <FAN_Set_Start+0x10>)
 8003bc8:	f007 f90e 	bl	800ade8 <HAL_TIM_PWM_Start>
}
 8003bcc:	bf00      	nop
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	20008ecc 	.word	0x20008ecc

08003bd4 <FAN_Set_Speed>:
{
	HAL_TIM_PWM_Stop(&htim11, TIM_CHANNEL_1);
}
//=======================================================================================
void  FAN_Set_Speed(uint8_t APercent)													// Установить скорость мотора вентилятора охлажения
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	4603      	mov	r3, r0
 8003bdc:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, APercent);							// Т.к. период ШИМ таймера задан в (htim11.Init.Period = 100;),
 8003bde:	4b04      	ldr	r3, [pc, #16]	; (8003bf0 <FAN_Set_Speed+0x1c>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	79fa      	ldrb	r2, [r7, #7]
 8003be4:	635a      	str	r2, [r3, #52]	; 0x34
																						// скважность тут задаем от 0 до 100.
																						// Частота ШИМ определяется соотношением (htim11.Init.Prescaler = 32000;) с тактовой частотой
}
 8003be6:	bf00      	nop
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bc80      	pop	{r7}
 8003bee:	4770      	bx	lr
 8003bf0:	20008ecc 	.word	0x20008ecc

08003bf4 <HAL_MspInit>:
  ******************************************************************************
  */
#include "main.h"

void HAL_MspInit(void)																	// Initializes the Global MSP.
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af00      	add	r7, sp, #0

  __HAL_RCC_COMP_CLK_ENABLE();
 8003bfa:	4b14      	ldr	r3, [pc, #80]	; (8003c4c <HAL_MspInit+0x58>)
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfe:	4a13      	ldr	r2, [pc, #76]	; (8003c4c <HAL_MspInit+0x58>)
 8003c00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c04:	6253      	str	r3, [r2, #36]	; 0x24
 8003c06:	4b11      	ldr	r3, [pc, #68]	; (8003c4c <HAL_MspInit+0x58>)
 8003c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c0e:	60fb      	str	r3, [r7, #12]
 8003c10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c12:	4b0e      	ldr	r3, [pc, #56]	; (8003c4c <HAL_MspInit+0x58>)
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	4a0d      	ldr	r2, [pc, #52]	; (8003c4c <HAL_MspInit+0x58>)
 8003c18:	f043 0301 	orr.w	r3, r3, #1
 8003c1c:	6213      	str	r3, [r2, #32]
 8003c1e:	4b0b      	ldr	r3, [pc, #44]	; (8003c4c <HAL_MspInit+0x58>)
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	60bb      	str	r3, [r7, #8]
 8003c28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c2a:	4b08      	ldr	r3, [pc, #32]	; (8003c4c <HAL_MspInit+0x58>)
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2e:	4a07      	ldr	r2, [pc, #28]	; (8003c4c <HAL_MspInit+0x58>)
 8003c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c34:	6253      	str	r3, [r2, #36]	; 0x24
 8003c36:	4b05      	ldr	r3, [pc, #20]	; (8003c4c <HAL_MspInit+0x58>)
 8003c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c3e:	607b      	str	r3, [r7, #4]
 8003c40:	687b      	ldr	r3, [r7, #4]

}
 8003c42:	bf00      	nop
 8003c44:	3714      	adds	r7, #20
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bc80      	pop	{r7}
 8003c4a:	4770      	bx	lr
 8003c4c:	40023800 	.word	0x40023800

08003c50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b08c      	sub	sp, #48	; 0x30
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8003c60:	2200      	movs	r2, #0
 8003c62:	6879      	ldr	r1, [r7, #4]
 8003c64:	202c      	movs	r0, #44	; 0x2c
 8003c66:	f003 fe0a 	bl	800787e <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003c6a:	202c      	movs	r0, #44	; 0x2c
 8003c6c:	f003 fe23 	bl	80078b6 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8003c70:	4b1e      	ldr	r3, [pc, #120]	; (8003cec <HAL_InitTick+0x9c>)
 8003c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c74:	4a1d      	ldr	r2, [pc, #116]	; (8003cec <HAL_InitTick+0x9c>)
 8003c76:	f043 0320 	orr.w	r3, r3, #32
 8003c7a:	6253      	str	r3, [r2, #36]	; 0x24
 8003c7c:	4b1b      	ldr	r3, [pc, #108]	; (8003cec <HAL_InitTick+0x9c>)
 8003c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c80:	f003 0320 	and.w	r3, r3, #32
 8003c84:	60fb      	str	r3, [r7, #12]
 8003c86:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003c88:	f107 0210 	add.w	r2, r7, #16
 8003c8c:	f107 0314 	add.w	r3, r7, #20
 8003c90:	4611      	mov	r1, r2
 8003c92:	4618      	mov	r0, r3
 8003c94:	f006 fc20 	bl	800a4d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003c98:	f006 fbf6 	bl	800a488 <HAL_RCC_GetPCLK1Freq>
 8003c9c:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca0:	4a13      	ldr	r2, [pc, #76]	; (8003cf0 <HAL_InitTick+0xa0>)
 8003ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca6:	0c9b      	lsrs	r3, r3, #18
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8003cac:	4b11      	ldr	r3, [pc, #68]	; (8003cf4 <HAL_InitTick+0xa4>)
 8003cae:	4a12      	ldr	r2, [pc, #72]	; (8003cf8 <HAL_InitTick+0xa8>)
 8003cb0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 8003cb2:	4b10      	ldr	r3, [pc, #64]	; (8003cf4 <HAL_InitTick+0xa4>)
 8003cb4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003cb8:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8003cba:	4a0e      	ldr	r2, [pc, #56]	; (8003cf4 <HAL_InitTick+0xa4>)
 8003cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cbe:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8003cc0:	4b0c      	ldr	r3, [pc, #48]	; (8003cf4 <HAL_InitTick+0xa4>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cc6:	4b0b      	ldr	r3, [pc, #44]	; (8003cf4 <HAL_InitTick+0xa4>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8003ccc:	4809      	ldr	r0, [pc, #36]	; (8003cf4 <HAL_InitTick+0xa4>)
 8003cce:	f006 ff23 	bl	800ab18 <HAL_TIM_Base_Init>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d104      	bne.n	8003ce2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8003cd8:	4806      	ldr	r0, [pc, #24]	; (8003cf4 <HAL_InitTick+0xa4>)
 8003cda:	f006 ffc5 	bl	800ac68 <HAL_TIM_Base_Start_IT>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	e000      	b.n	8003ce4 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3730      	adds	r7, #48	; 0x30
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	40023800 	.word	0x40023800
 8003cf0:	431bde83 	.word	0x431bde83
 8003cf4:	200090cc 	.word	0x200090cc
 8003cf8:	40001400 	.word	0x40001400

08003cfc <NMI_Handler>:
//======================================================================================
/******************************************************************************/
/*           Cortex-M3 Processor Interruption and Exception Handlers          */
/******************************************************************************/
void NMI_Handler(void)																	// Non maskable interrupt.
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003d00:	bf00      	nop
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bc80      	pop	{r7}
 8003d06:	4770      	bx	lr

08003d08 <HardFault_Handler>:
//======================================================================================
void HardFault_Handler(void)															// Hard fault interrupt.
{
 8003d08:	b480      	push	{r7}
 8003d0a:	af00      	add	r7, sp, #0
  while (1)
 8003d0c:	e7fe      	b.n	8003d0c <HardFault_Handler+0x4>

08003d0e <MemManage_Handler>:
  {
  }
}
//======================================================================================
void MemManage_Handler(void)															// Memory management fault.
{
 8003d0e:	b480      	push	{r7}
 8003d10:	af00      	add	r7, sp, #0
  while (1)
 8003d12:	e7fe      	b.n	8003d12 <MemManage_Handler+0x4>

08003d14 <BusFault_Handler>:
  {
  }
}
//======================================================================================
void BusFault_Handler(void)																// Pre-fetch fault, memory access fault.
{
 8003d14:	b480      	push	{r7}
 8003d16:	af00      	add	r7, sp, #0
  while (1)
 8003d18:	e7fe      	b.n	8003d18 <BusFault_Handler+0x4>

08003d1a <UsageFault_Handler>:
  {
  }
}
//======================================================================================
void UsageFault_Handler(void)															// Undefined instruction or illegal state.
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	af00      	add	r7, sp, #0
  while (1)
 8003d1e:	e7fe      	b.n	8003d1e <UsageFault_Handler+0x4>

08003d20 <DebugMon_Handler>:
//======================================================================================
/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
}
 8003d24:	bf00      	nop
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bc80      	pop	{r7}
 8003d2a:	4770      	bx	lr

08003d2c <DMA1_Channel5_IRQHandler>:
/* please refer to the startup file (startup_stm32l1xx.s).                    */
/******************************************************************************/

//======================================================================================
void DMA1_Channel5_IRQHandler(void)														// DMA1 channel5 global interrupt.
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8003d30:	4802      	ldr	r0, [pc, #8]	; (8003d3c <DMA1_Channel5_IRQHandler+0x10>)
 8003d32:	f003 ff6e 	bl	8007c12 <HAL_DMA_IRQHandler>
}
 8003d36:	bf00      	nop
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	20008dc8 	.word	0x20008dc8

08003d40 <ADC1_IRQHandler>:
//======================================================================================
void ADC1_IRQHandler(void)																// ADC global interrupt.
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	af00      	add	r7, sp, #0
  HAL_ADC_IRQHandler(&hadc);
 8003d44:	4802      	ldr	r0, [pc, #8]	; (8003d50 <ADC1_IRQHandler+0x10>)
 8003d46:	f003 f9c4 	bl	80070d2 <HAL_ADC_IRQHandler>
}
 8003d4a:	bf00      	nop
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	20008b50 	.word	0x20008b50

08003d54 <USB_LP_IRQHandler>:
//======================================================================================
void USB_LP_IRQHandler(void)															// USB low priority interrupt.
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	af00      	add	r7, sp, #0
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003d58:	4802      	ldr	r0, [pc, #8]	; (8003d64 <USB_LP_IRQHandler+0x10>)
 8003d5a:	f004 fc1b 	bl	8008594 <HAL_PCD_IRQHandler>
}
 8003d5e:	bf00      	nop
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	20009b40 	.word	0x20009b40

08003d68 <USART1_IRQHandler>:
//======================================================================================
void USART1_IRQHandler(void)															// USART1 global interrupt.
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart1);
 8003d6c:	4802      	ldr	r0, [pc, #8]	; (8003d78 <USART1_IRQHandler+0x10>)
 8003d6e:	f008 fad7 	bl	800c320 <HAL_UART_IRQHandler>
}
 8003d72:	bf00      	nop
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	2000900c 	.word	0x2000900c

08003d7c <USART2_IRQHandler>:
//======================================================================================
void USART2_IRQHandler(void)															// USART2 global interrupt.
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart2);
 8003d80:	4802      	ldr	r0, [pc, #8]	; (8003d8c <USART2_IRQHandler+0x10>)
 8003d82:	f008 facd 	bl	800c320 <HAL_UART_IRQHandler>
}
 8003d86:	bf00      	nop
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	2000908c 	.word	0x2000908c

08003d90 <USART3_IRQHandler>:
//======================================================================================
void USART3_IRQHandler(void)															// USART3 global interrupt.
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart3);
 8003d94:	4802      	ldr	r0, [pc, #8]	; (8003da0 <USART3_IRQHandler+0x10>)
 8003d96:	f008 fac3 	bl	800c320 <HAL_UART_IRQHandler>
}
 8003d9a:	bf00      	nop
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	20008f8c 	.word	0x20008f8c

08003da4 <UART4_IRQHandler>:
//======================================================================================
void UART4_IRQHandler(void)																// UART4 global interrupt.
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart4);
 8003da8:	4802      	ldr	r0, [pc, #8]	; (8003db4 <UART4_IRQHandler+0x10>)
 8003daa:	f008 fab9 	bl	800c320 <HAL_UART_IRQHandler>
}
 8003dae:	bf00      	nop
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	2000904c 	.word	0x2000904c

08003db8 <UART5_IRQHandler>:
//======================================================================================
void UART5_IRQHandler(void)																// UART5 global interrupt.
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart5);
 8003dbc:	4802      	ldr	r0, [pc, #8]	; (8003dc8 <UART5_IRQHandler+0x10>)
 8003dbe:	f008 faaf 	bl	800c320 <HAL_UART_IRQHandler>
}
 8003dc2:	bf00      	nop
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	20008fcc 	.word	0x20008fcc

08003dcc <TIM3_IRQHandler>:
//======================================================================================
void TIM3_IRQHandler(void)																// TIM3 global interrupt.
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim3);
 8003dd0:	4802      	ldr	r0, [pc, #8]	; (8003ddc <TIM3_IRQHandler+0x10>)
 8003dd2:	f007 fad8 	bl	800b386 <HAL_TIM_IRQHandler>
}
 8003dd6:	bf00      	nop
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	20008e8c 	.word	0x20008e8c

08003de0 <TIM4_IRQHandler>:
//======================================================================================
void TIM4_IRQHandler(void)																// TIM4 global interrupt.
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim4);
 8003de4:	4802      	ldr	r0, [pc, #8]	; (8003df0 <TIM4_IRQHandler+0x10>)
 8003de6:	f007 face 	bl	800b386 <HAL_TIM_IRQHandler>
}
 8003dea:	bf00      	nop
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	20008e0c 	.word	0x20008e0c

08003df4 <TIM6_IRQHandler>:
//======================================================================================
void TIM6_IRQHandler(void)																// TIM6 global interrupt.
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim6);
 8003df8:	4802      	ldr	r0, [pc, #8]	; (8003e04 <TIM6_IRQHandler+0x10>)
 8003dfa:	f007 fac4 	bl	800b386 <HAL_TIM_IRQHandler>
}
 8003dfe:	bf00      	nop
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	20008f0c 	.word	0x20008f0c

08003e08 <TIM7_IRQHandler>:
//======================================================================================
void TIM7_IRQHandler(void)																// TIM7 global interrupt.
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim7);
 8003e0c:	4802      	ldr	r0, [pc, #8]	; (8003e18 <TIM7_IRQHandler+0x10>)
 8003e0e:	f007 faba 	bl	800b386 <HAL_TIM_IRQHandler>
}
 8003e12:	bf00      	nop
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	200090cc 	.word	0x200090cc

08003e1c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b086      	sub	sp, #24
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e28:	2300      	movs	r3, #0
 8003e2a:	617b      	str	r3, [r7, #20]
 8003e2c:	e00a      	b.n	8003e44 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003e2e:	f3af 8000 	nop.w
 8003e32:	4601      	mov	r1, r0
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	1c5a      	adds	r2, r3, #1
 8003e38:	60ba      	str	r2, [r7, #8]
 8003e3a:	b2ca      	uxtb	r2, r1
 8003e3c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	3301      	adds	r3, #1
 8003e42:	617b      	str	r3, [r7, #20]
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	dbf0      	blt.n	8003e2e <_read+0x12>
	}

return len;
 8003e4c:	687b      	ldr	r3, [r7, #4]
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3718      	adds	r7, #24
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <_write>:

int _write(int file, char *ptr, int len)
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b086      	sub	sp, #24
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	60f8      	str	r0, [r7, #12]
 8003e5e:	60b9      	str	r1, [r7, #8]
 8003e60:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e62:	2300      	movs	r3, #0
 8003e64:	617b      	str	r3, [r7, #20]
 8003e66:	e009      	b.n	8003e7c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	1c5a      	adds	r2, r3, #1
 8003e6c:	60ba      	str	r2, [r7, #8]
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7ff fa41 	bl	80032f8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	3301      	adds	r3, #1
 8003e7a:	617b      	str	r3, [r7, #20]
 8003e7c:	697a      	ldr	r2, [r7, #20]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	dbf1      	blt.n	8003e68 <_write+0x12>
	}
	return len;
 8003e84:	687b      	ldr	r3, [r7, #4]
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3718      	adds	r7, #24
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <_close>:
	return (caddr_t) prev_heap_end;
}
*/

int _close(int file)
{
 8003e8e:	b480      	push	{r7}
 8003e90:	b083      	sub	sp, #12
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
	return -1;
 8003e96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	370c      	adds	r7, #12
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bc80      	pop	{r7}
 8003ea2:	4770      	bx	lr

08003ea4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003eb4:	605a      	str	r2, [r3, #4]
	return 0;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bc80      	pop	{r7}
 8003ec0:	4770      	bx	lr

08003ec2 <_isatty>:

int _isatty(int file)
{
 8003ec2:	b480      	push	{r7}
 8003ec4:	b083      	sub	sp, #12
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
	return 1;
 8003eca:	2301      	movs	r3, #1
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bc80      	pop	{r7}
 8003ed4:	4770      	bx	lr

08003ed6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ed6:	b480      	push	{r7}
 8003ed8:	b085      	sub	sp, #20
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	60f8      	str	r0, [r7, #12]
 8003ede:	60b9      	str	r1, [r7, #8]
 8003ee0:	607a      	str	r2, [r7, #4]
	return 0;
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3714      	adds	r7, #20
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bc80      	pop	{r7}
 8003eec:	4770      	bx	lr
	...

08003ef0 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	af00      	add	r7, sp, #0
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003ef4:	4b03      	ldr	r3, [pc, #12]	; (8003f04 <SystemInit+0x14>)
 8003ef6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003efa:	609a      	str	r2, [r3, #8]
#endif
}
 8003efc:	bf00      	nop
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bc80      	pop	{r7}
 8003f02:	4770      	bx	lr
 8003f04:	e000ed00 	.word	0xe000ed00

08003f08 <LCD9488_Init_GPIO>:
uint16_t LCD9488_Point_Color = 0x0000;
uint16_t LCD9488_Back_Color  = 0xFFFF;
uint16_t LCD9488_DeviceCode;
//=======================================================================================
void LCD9488_Init_GPIO(void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b08a      	sub	sp, #40	; 0x28
 8003f0c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f0e:	f107 0314 	add.w	r3, r7, #20
 8003f12:	2200      	movs	r2, #0
 8003f14:	601a      	str	r2, [r3, #0]
 8003f16:	605a      	str	r2, [r3, #4]
 8003f18:	609a      	str	r2, [r3, #8]
 8003f1a:	60da      	str	r2, [r3, #12]
 8003f1c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003f1e:	4b40      	ldr	r3, [pc, #256]	; (8004020 <LCD9488_Init_GPIO+0x118>)
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	4a3f      	ldr	r2, [pc, #252]	; (8004020 <LCD9488_Init_GPIO+0x118>)
 8003f24:	f043 0301 	orr.w	r3, r3, #1
 8003f28:	61d3      	str	r3, [r2, #28]
 8003f2a:	4b3d      	ldr	r3, [pc, #244]	; (8004020 <LCD9488_Init_GPIO+0x118>)
 8003f2c:	69db      	ldr	r3, [r3, #28]
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	613b      	str	r3, [r7, #16]
 8003f34:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003f36:	4b3a      	ldr	r3, [pc, #232]	; (8004020 <LCD9488_Init_GPIO+0x118>)
 8003f38:	69db      	ldr	r3, [r3, #28]
 8003f3a:	4a39      	ldr	r2, [pc, #228]	; (8004020 <LCD9488_Init_GPIO+0x118>)
 8003f3c:	f043 0302 	orr.w	r3, r3, #2
 8003f40:	61d3      	str	r3, [r2, #28]
 8003f42:	4b37      	ldr	r3, [pc, #220]	; (8004020 <LCD9488_Init_GPIO+0x118>)
 8003f44:	69db      	ldr	r3, [r3, #28]
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	60fb      	str	r3, [r7, #12]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003f4e:	4b34      	ldr	r3, [pc, #208]	; (8004020 <LCD9488_Init_GPIO+0x118>)
 8003f50:	69db      	ldr	r3, [r3, #28]
 8003f52:	4a33      	ldr	r2, [pc, #204]	; (8004020 <LCD9488_Init_GPIO+0x118>)
 8003f54:	f043 0304 	orr.w	r3, r3, #4
 8003f58:	61d3      	str	r3, [r2, #28]
 8003f5a:	4b31      	ldr	r3, [pc, #196]	; (8004020 <LCD9488_Init_GPIO+0x118>)
 8003f5c:	69db      	ldr	r3, [r3, #28]
 8003f5e:	f003 0304 	and.w	r3, r3, #4
 8003f62:	60bb      	str	r3, [r7, #8]
 8003f64:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8003f66:	4b2e      	ldr	r3, [pc, #184]	; (8004020 <LCD9488_Init_GPIO+0x118>)
 8003f68:	69db      	ldr	r3, [r3, #28]
 8003f6a:	4a2d      	ldr	r2, [pc, #180]	; (8004020 <LCD9488_Init_GPIO+0x118>)
 8003f6c:	f043 0308 	orr.w	r3, r3, #8
 8003f70:	61d3      	str	r3, [r2, #28]
 8003f72:	4b2b      	ldr	r3, [pc, #172]	; (8004020 <LCD9488_Init_GPIO+0x118>)
 8003f74:	69db      	ldr	r3, [r3, #28]
 8003f76:	f003 0308 	and.w	r3, r3, #8
 8003f7a:	607b      	str	r3, [r7, #4]
 8003f7c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD9488_DC_RS_GPIO_Port, 		LCD9488_DC_RS_Pin, 	GPIO_PIN_RESET);
 8003f7e:	2200      	movs	r2, #0
 8003f80:	2101      	movs	r1, #1
 8003f82:	4828      	ldr	r0, [pc, #160]	; (8004024 <LCD9488_Init_GPIO+0x11c>)
 8003f84:	f004 f899 	bl	80080ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD9488_CS_GPIO_Port, 		LCD9488_CS_Pin, 	GPIO_PIN_RESET);
 8003f88:	2200      	movs	r2, #0
 8003f8a:	2104      	movs	r1, #4
 8003f8c:	4825      	ldr	r0, [pc, #148]	; (8004024 <LCD9488_Init_GPIO+0x11c>)
 8003f8e:	f004 f894 	bl	80080ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD9488_RST_GPIO_Port, 		LCD9488_RST_Pin, 	GPIO_PIN_RESET);
 8003f92:	2200      	movs	r2, #0
 8003f94:	2102      	movs	r1, #2
 8003f96:	4823      	ldr	r0, [pc, #140]	; (8004024 <LCD9488_Init_GPIO+0x11c>)
 8003f98:	f004 f88f 	bl	80080ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD9488_LED_GPIO_Port, 		LCD9488_LED_Pin, 	GPIO_PIN_RESET);
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	2108      	movs	r1, #8
 8003fa0:	4820      	ldr	r0, [pc, #128]	; (8004024 <LCD9488_Init_GPIO+0x11c>)
 8003fa2:	f004 f88a 	bl	80080ba <HAL_GPIO_WritePin>
//	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
//	GPIO_InitStruct.Pull = GPIO_NOPULL;
//	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

	GPIO_InitStruct.Pin = LCD9488_DC_RS_Pin;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003faa:	2301      	movs	r3, #1
 8003fac:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003fb2:	2302      	movs	r3, #2
 8003fb4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LCD9488_DC_RS_GPIO_Port, &GPIO_InitStruct);
 8003fb6:	f107 0314 	add.w	r3, r7, #20
 8003fba:	4619      	mov	r1, r3
 8003fbc:	4819      	ldr	r0, [pc, #100]	; (8004024 <LCD9488_Init_GPIO+0x11c>)
 8003fbe:	f003 fed7 	bl	8007d70 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD9488_CS_Pin;
 8003fc2:	2304      	movs	r3, #4
 8003fc4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003fce:	2302      	movs	r3, #2
 8003fd0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LCD9488_CS_GPIO_Port, &GPIO_InitStruct);
 8003fd2:	f107 0314 	add.w	r3, r7, #20
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	4812      	ldr	r0, [pc, #72]	; (8004024 <LCD9488_Init_GPIO+0x11c>)
 8003fda:	f003 fec9 	bl	8007d70 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD9488_RST_Pin;
 8003fde:	2302      	movs	r3, #2
 8003fe0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003fea:	2302      	movs	r3, #2
 8003fec:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LCD9488_RST_GPIO_Port, &GPIO_InitStruct);
 8003fee:	f107 0314 	add.w	r3, r7, #20
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	480b      	ldr	r0, [pc, #44]	; (8004024 <LCD9488_Init_GPIO+0x11c>)
 8003ff6:	f003 febb 	bl	8007d70 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD9488_LED_Pin;
 8003ffa:	2308      	movs	r3, #8
 8003ffc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ffe:	2301      	movs	r3, #1
 8004000:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004002:	2300      	movs	r3, #0
 8004004:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004006:	2302      	movs	r3, #2
 8004008:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LCD9488_LED_GPIO_Port, &GPIO_InitStruct);
 800400a:	f107 0314 	add.w	r3, r7, #20
 800400e:	4619      	mov	r1, r3
 8004010:	4804      	ldr	r0, [pc, #16]	; (8004024 <LCD9488_Init_GPIO+0x11c>)
 8004012:	f003 fead 	bl	8007d70 <HAL_GPIO_Init>
}
 8004016:	bf00      	nop
 8004018:	3728      	adds	r7, #40	; 0x28
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	40023800 	.word	0x40023800
 8004024:	40020800 	.word	0x40020800

08004028 <LCD9488_Init>:
//=======================================================================================
void LCD9488_Init(void)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	af00      	add	r7, sp, #0
	MX_SPI2_Init();
 800402c:	f7fe fd74 	bl	8002b18 <MX_SPI2_Init>
	HAL_Delay(100);
 8004030:	2064      	movs	r0, #100	; 0x64
 8004032:	f002 fdc5 	bl	8006bc0 <HAL_Delay>
	LCD9488_Init_GPIO();
 8004036:	f7ff ff67 	bl	8003f08 <LCD9488_Init_GPIO>

	LCD9488_LED_SET;//Включить подсветку
 800403a:	2201      	movs	r2, #1
 800403c:	2108      	movs	r1, #8
 800403e:	4870      	ldr	r0, [pc, #448]	; (8004200 <LCD9488_Init+0x1d8>)
 8004040:	f004 f83b 	bl	80080ba <HAL_GPIO_WritePin>

	HAL_Delay(100);
 8004044:	2064      	movs	r0, #100	; 0x64
 8004046:	f002 fdbb 	bl	8006bc0 <HAL_Delay>
 	LCD9488_RESET();
 800404a:	f000 fa3d 	bl	80044c8 <LCD9488_RESET>
 	HAL_Delay(100);
 800404e:	2064      	movs	r0, #100	; 0x64
 8004050:	f002 fdb6 	bl	8006bc0 <HAL_Delay>

	LCD9488_Transport_WR_REG(0XF7);
 8004054:	20f7      	movs	r0, #247	; 0xf7
 8004056:	f000 f8ed 	bl	8004234 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(0xA9);
 800405a:	20a9      	movs	r0, #169	; 0xa9
 800405c:	f000 f910 	bl	8004280 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x51);
 8004060:	2051      	movs	r0, #81	; 0x51
 8004062:	f000 f90d 	bl	8004280 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x2C);
 8004066:	202c      	movs	r0, #44	; 0x2c
 8004068:	f000 f90a 	bl	8004280 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x82);
 800406c:	2082      	movs	r0, #130	; 0x82
 800406e:	f000 f907 	bl	8004280 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0xC0);
 8004072:	20c0      	movs	r0, #192	; 0xc0
 8004074:	f000 f8de 	bl	8004234 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(0x11);
 8004078:	2011      	movs	r0, #17
 800407a:	f000 f901 	bl	8004280 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x09);
 800407e:	2009      	movs	r0, #9
 8004080:	f000 f8fe 	bl	8004280 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0xC1);
 8004084:	20c1      	movs	r0, #193	; 0xc1
 8004086:	f000 f8d5 	bl	8004234 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(0x41);
 800408a:	2041      	movs	r0, #65	; 0x41
 800408c:	f000 f8f8 	bl	8004280 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0XC5);
 8004090:	20c5      	movs	r0, #197	; 0xc5
 8004092:	f000 f8cf 	bl	8004234 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(0x00);
 8004096:	2000      	movs	r0, #0
 8004098:	f000 f8f2 	bl	8004280 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x0A);
 800409c:	200a      	movs	r0, #10
 800409e:	f000 f8ef 	bl	8004280 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x80);
 80040a2:	2080      	movs	r0, #128	; 0x80
 80040a4:	f000 f8ec 	bl	8004280 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0xB1);
 80040a8:	20b1      	movs	r0, #177	; 0xb1
 80040aa:	f000 f8c3 	bl	8004234 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(0xB0);
 80040ae:	20b0      	movs	r0, #176	; 0xb0
 80040b0:	f000 f8e6 	bl	8004280 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x11);
 80040b4:	2011      	movs	r0, #17
 80040b6:	f000 f8e3 	bl	8004280 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0xB4);
 80040ba:	20b4      	movs	r0, #180	; 0xb4
 80040bc:	f000 f8ba 	bl	8004234 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(0x02);
 80040c0:	2002      	movs	r0, #2
 80040c2:	f000 f8dd 	bl	8004280 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0xB6);
 80040c6:	20b6      	movs	r0, #182	; 0xb6
 80040c8:	f000 f8b4 	bl	8004234 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(0x02);
 80040cc:	2002      	movs	r0, #2
 80040ce:	f000 f8d7 	bl	8004280 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x42);
 80040d2:	2042      	movs	r0, #66	; 0x42
 80040d4:	f000 f8d4 	bl	8004280 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0xB7);
 80040d8:	20b7      	movs	r0, #183	; 0xb7
 80040da:	f000 f8ab 	bl	8004234 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(0xc6);
 80040de:	20c6      	movs	r0, #198	; 0xc6
 80040e0:	f000 f8ce 	bl	8004280 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0xBE);
 80040e4:	20be      	movs	r0, #190	; 0xbe
 80040e6:	f000 f8a5 	bl	8004234 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(0x00);
 80040ea:	2000      	movs	r0, #0
 80040ec:	f000 f8c8 	bl	8004280 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x04);
 80040f0:	2004      	movs	r0, #4
 80040f2:	f000 f8c5 	bl	8004280 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0xE9);
 80040f6:	20e9      	movs	r0, #233	; 0xe9
 80040f8:	f000 f89c 	bl	8004234 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(0x00);
 80040fc:	2000      	movs	r0, #0
 80040fe:	f000 f8bf 	bl	8004280 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0x36);
 8004102:	2036      	movs	r0, #54	; 0x36
 8004104:	f000 f896 	bl	8004234 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA((1<<3)|(0<<7)|(1<<6)|(1<<5));
 8004108:	2068      	movs	r0, #104	; 0x68
 800410a:	f000 f8b9 	bl	8004280 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0x3A);
 800410e:	203a      	movs	r0, #58	; 0x3a
 8004110:	f000 f890 	bl	8004234 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(0x66);
 8004114:	2066      	movs	r0, #102	; 0x66
 8004116:	f000 f8b3 	bl	8004280 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0xE0);
 800411a:	20e0      	movs	r0, #224	; 0xe0
 800411c:	f000 f88a 	bl	8004234 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(0x00);
 8004120:	2000      	movs	r0, #0
 8004122:	f000 f8ad 	bl	8004280 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x07);
 8004126:	2007      	movs	r0, #7
 8004128:	f000 f8aa 	bl	8004280 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x10);
 800412c:	2010      	movs	r0, #16
 800412e:	f000 f8a7 	bl	8004280 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x09);
 8004132:	2009      	movs	r0, #9
 8004134:	f000 f8a4 	bl	8004280 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x17);
 8004138:	2017      	movs	r0, #23
 800413a:	f000 f8a1 	bl	8004280 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x0B);
 800413e:	200b      	movs	r0, #11
 8004140:	f000 f89e 	bl	8004280 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x41);
 8004144:	2041      	movs	r0, #65	; 0x41
 8004146:	f000 f89b 	bl	8004280 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x89);
 800414a:	2089      	movs	r0, #137	; 0x89
 800414c:	f000 f898 	bl	8004280 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x4B);
 8004150:	204b      	movs	r0, #75	; 0x4b
 8004152:	f000 f895 	bl	8004280 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x0A);
 8004156:	200a      	movs	r0, #10
 8004158:	f000 f892 	bl	8004280 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x0C);
 800415c:	200c      	movs	r0, #12
 800415e:	f000 f88f 	bl	8004280 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x0E);
 8004162:	200e      	movs	r0, #14
 8004164:	f000 f88c 	bl	8004280 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x18);
 8004168:	2018      	movs	r0, #24
 800416a:	f000 f889 	bl	8004280 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x1B);
 800416e:	201b      	movs	r0, #27
 8004170:	f000 f886 	bl	8004280 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x0F);
 8004174:	200f      	movs	r0, #15
 8004176:	f000 f883 	bl	8004280 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0XE1);
 800417a:	20e1      	movs	r0, #225	; 0xe1
 800417c:	f000 f85a 	bl	8004234 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(0x00);
 8004180:	2000      	movs	r0, #0
 8004182:	f000 f87d 	bl	8004280 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x17);
 8004186:	2017      	movs	r0, #23
 8004188:	f000 f87a 	bl	8004280 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x1A);
 800418c:	201a      	movs	r0, #26
 800418e:	f000 f877 	bl	8004280 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x04);
 8004192:	2004      	movs	r0, #4
 8004194:	f000 f874 	bl	8004280 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x0E);
 8004198:	200e      	movs	r0, #14
 800419a:	f000 f871 	bl	8004280 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x06);
 800419e:	2006      	movs	r0, #6
 80041a0:	f000 f86e 	bl	8004280 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x2F);
 80041a4:	202f      	movs	r0, #47	; 0x2f
 80041a6:	f000 f86b 	bl	8004280 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x45);
 80041aa:	2045      	movs	r0, #69	; 0x45
 80041ac:	f000 f868 	bl	8004280 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x43);
 80041b0:	2043      	movs	r0, #67	; 0x43
 80041b2:	f000 f865 	bl	8004280 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x02);
 80041b6:	2002      	movs	r0, #2
 80041b8:	f000 f862 	bl	8004280 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x0A);
 80041bc:	200a      	movs	r0, #10
 80041be:	f000 f85f 	bl	8004280 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x09);
 80041c2:	2009      	movs	r0, #9
 80041c4:	f000 f85c 	bl	8004280 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x32);
 80041c8:	2032      	movs	r0, #50	; 0x32
 80041ca:	f000 f859 	bl	8004280 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x36);
 80041ce:	2036      	movs	r0, #54	; 0x36
 80041d0:	f000 f856 	bl	8004280 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x0F);
 80041d4:	200f      	movs	r0, #15
 80041d6:	f000 f853 	bl	8004280 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0x11);
 80041da:	2011      	movs	r0, #17
 80041dc:	f000 f82a 	bl	8004234 <LCD9488_Transport_WR_REG>
	HAL_Delay(120);
 80041e0:	2078      	movs	r0, #120	; 0x78
 80041e2:	f002 fced 	bl	8006bc0 <HAL_Delay>
	LCD9488_Transport_WR_REG(0x29);
 80041e6:	2029      	movs	r0, #41	; 0x29
 80041e8:	f000 f824 	bl	8004234 <LCD9488_Transport_WR_REG>

	LCD9488_GUI_SetOrientation(USE_HORIZONTAL);
 80041ec:	2000      	movs	r0, #0
 80041ee:	f000 f9d5 	bl	800459c <LCD9488_GUI_SetOrientation>
	LCD9488_GUI_Clear(WHITE);
 80041f2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80041f6:	f000 f8f7 	bl	80043e8 <LCD9488_GUI_Clear>

}
 80041fa:	bf00      	nop
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	40020800 	.word	0x40020800

08004204 <LCD9488_Transport_SPI_WriteByte>:
//=======================================================================================
void LCD9488_Transport_SPI_WriteByte(uint8_t Byte)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	4603      	mov	r3, r0
 800420c:	71fb      	strb	r3, [r7, #7]
	while ( !( LCD_SPI.Instance->SR & SPI_SR_TXE ) );
 800420e:	bf00      	nop
 8004210:	4b07      	ldr	r3, [pc, #28]	; (8004230 <LCD9488_Transport_SPI_WriteByte+0x2c>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d0f8      	beq.n	8004210 <LCD9488_Transport_SPI_WriteByte+0xc>
		LCD_SPI.Instance->DR = Byte;
 800421e:	4b04      	ldr	r3, [pc, #16]	; (8004230 <LCD9488_Transport_SPI_WriteByte+0x2c>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	79fa      	ldrb	r2, [r7, #7]
 8004224:	60da      	str	r2, [r3, #12]
}
 8004226:	bf00      	nop
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	bc80      	pop	{r7}
 800422e:	4770      	bx	lr
 8004230:	20008d18 	.word	0x20008d18

08004234 <LCD9488_Transport_WR_REG>:
//=======================================================================================
void LCD9488_Transport_WR_REG(uint8_t data)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	4603      	mov	r3, r0
 800423c:	71fb      	strb	r3, [r7, #7]
   LCD9488_CS_CLR;
 800423e:	2200      	movs	r2, #0
 8004240:	2104      	movs	r1, #4
 8004242:	480d      	ldr	r0, [pc, #52]	; (8004278 <LCD9488_Transport_WR_REG+0x44>)
 8004244:	f003 ff39 	bl	80080ba <HAL_GPIO_WritePin>
   LCD9488_RS_CLR;
 8004248:	2200      	movs	r2, #0
 800424a:	2101      	movs	r1, #1
 800424c:	480a      	ldr	r0, [pc, #40]	; (8004278 <LCD9488_Transport_WR_REG+0x44>)
 800424e:	f003 ff34 	bl	80080ba <HAL_GPIO_WritePin>
   LCD9488_Transport_SPI_WriteByte(data);
 8004252:	79fb      	ldrb	r3, [r7, #7]
 8004254:	4618      	mov	r0, r3
 8004256:	f7ff ffd5 	bl	8004204 <LCD9488_Transport_SPI_WriteByte>
   HAL_SPI_Transmit(&LCD_SPI, &data, 1, 10);
 800425a:	1df9      	adds	r1, r7, #7
 800425c:	230a      	movs	r3, #10
 800425e:	2201      	movs	r2, #1
 8004260:	4806      	ldr	r0, [pc, #24]	; (800427c <LCD9488_Transport_WR_REG+0x48>)
 8004262:	f006 fa52 	bl	800a70a <HAL_SPI_Transmit>
   LCD9488_CS_SET;
 8004266:	2201      	movs	r2, #1
 8004268:	2104      	movs	r1, #4
 800426a:	4803      	ldr	r0, [pc, #12]	; (8004278 <LCD9488_Transport_WR_REG+0x44>)
 800426c:	f003 ff25 	bl	80080ba <HAL_GPIO_WritePin>
}
 8004270:	bf00      	nop
 8004272:	3708      	adds	r7, #8
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	40020800 	.word	0x40020800
 800427c:	20008d18 	.word	0x20008d18

08004280 <LCD9488_Transport_WR_DATA>:
//=======================================================================================
void LCD9488_Transport_WR_DATA(uint8_t data)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	4603      	mov	r3, r0
 8004288:	71fb      	strb	r3, [r7, #7]
   LCD9488_CS_CLR;
 800428a:	2200      	movs	r2, #0
 800428c:	2104      	movs	r1, #4
 800428e:	480a      	ldr	r0, [pc, #40]	; (80042b8 <LCD9488_Transport_WR_DATA+0x38>)
 8004290:	f003 ff13 	bl	80080ba <HAL_GPIO_WritePin>
   LCD9488_RS_SET;
 8004294:	2201      	movs	r2, #1
 8004296:	2101      	movs	r1, #1
 8004298:	4807      	ldr	r0, [pc, #28]	; (80042b8 <LCD9488_Transport_WR_DATA+0x38>)
 800429a:	f003 ff0e 	bl	80080ba <HAL_GPIO_WritePin>
   LCD9488_Transport_SPI_WriteByte(data);
 800429e:	79fb      	ldrb	r3, [r7, #7]
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7ff ffaf 	bl	8004204 <LCD9488_Transport_SPI_WriteByte>
   LCD9488_CS_SET;
 80042a6:	2201      	movs	r2, #1
 80042a8:	2104      	movs	r1, #4
 80042aa:	4803      	ldr	r0, [pc, #12]	; (80042b8 <LCD9488_Transport_WR_DATA+0x38>)
 80042ac:	f003 ff05 	bl	80080ba <HAL_GPIO_WritePin>
}
 80042b0:	bf00      	nop
 80042b2:	3708      	adds	r7, #8
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	40020800 	.word	0x40020800

080042bc <LCD9488_WriteReg>:
//=======================================================================================
void LCD9488_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	4603      	mov	r3, r0
 80042c4:	460a      	mov	r2, r1
 80042c6:	71fb      	strb	r3, [r7, #7]
 80042c8:	4613      	mov	r3, r2
 80042ca:	80bb      	strh	r3, [r7, #4]
	LCD9488_Transport_WR_REG(LCD_Reg);
 80042cc:	79fb      	ldrb	r3, [r7, #7]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7ff ffb0 	bl	8004234 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(LCD_RegValue);
 80042d4:	88bb      	ldrh	r3, [r7, #4]
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	4618      	mov	r0, r3
 80042da:	f7ff ffd1 	bl	8004280 <LCD9488_Transport_WR_DATA>
}
 80042de:	bf00      	nop
 80042e0:	3708      	adds	r7, #8
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
	...

080042e8 <LCD9488_WriteRAM_Prepare>:
//=======================================================================================
void LCD9488_WriteRAM_Prepare(void)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	af00      	add	r7, sp, #0
	LCD9488_Transport_WR_REG(LCD9488_DEV.WramCmd);
 80042ec:	4b03      	ldr	r3, [pc, #12]	; (80042fc <LCD9488_WriteRAM_Prepare+0x14>)
 80042ee:	891b      	ldrh	r3, [r3, #8]
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7ff ff9e 	bl	8004234 <LCD9488_Transport_WR_REG>
}
 80042f8:	bf00      	nop
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	20009110 	.word	0x20009110

08004300 <LCD9488_WriteData_16Bit>:
//=======================================================================================
void LCD9488_WriteData_16Bit(uint16_t Data)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	4603      	mov	r3, r0
 8004308:	80fb      	strh	r3, [r7, #6]
	uint8_t r = (Data>>8)&0xF8; 	// RED Color
 800430a:	88fb      	ldrh	r3, [r7, #6]
 800430c:	0a1b      	lsrs	r3, r3, #8
 800430e:	b29b      	uxth	r3, r3
 8004310:	b2db      	uxtb	r3, r3
 8004312:	f023 0307 	bic.w	r3, r3, #7
 8004316:	73fb      	strb	r3, [r7, #15]
	uint8_t g = (Data>>3)&0xFC; 	// Green Color
 8004318:	88fb      	ldrh	r3, [r7, #6]
 800431a:	08db      	lsrs	r3, r3, #3
 800431c:	b29b      	uxth	r3, r3
 800431e:	b2db      	uxtb	r3, r3
 8004320:	f023 0303 	bic.w	r3, r3, #3
 8004324:	73bb      	strb	r3, [r7, #14]
	uint8_t b = Data<<3; 			// Blue Color
 8004326:	88fb      	ldrh	r3, [r7, #6]
 8004328:	b2db      	uxtb	r3, r3
 800432a:	00db      	lsls	r3, r3, #3
 800432c:	737b      	strb	r3, [r7, #13]

	LCD9488_CS_CLR;
 800432e:	2200      	movs	r2, #0
 8004330:	2104      	movs	r1, #4
 8004332:	481e      	ldr	r0, [pc, #120]	; (80043ac <LCD9488_WriteData_16Bit+0xac>)
 8004334:	f003 fec1 	bl	80080ba <HAL_GPIO_WritePin>
	LCD9488_RS_SET;
 8004338:	2201      	movs	r2, #1
 800433a:	2101      	movs	r1, #1
 800433c:	481b      	ldr	r0, [pc, #108]	; (80043ac <LCD9488_WriteData_16Bit+0xac>)
 800433e:	f003 febc 	bl	80080ba <HAL_GPIO_WritePin>
	while ( !( LCD_SPI.Instance->SR & SPI_SR_TXE ) );
 8004342:	bf00      	nop
 8004344:	4b1a      	ldr	r3, [pc, #104]	; (80043b0 <LCD9488_WriteData_16Bit+0xb0>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	2b00      	cmp	r3, #0
 8004350:	d0f8      	beq.n	8004344 <LCD9488_WriteData_16Bit+0x44>
		LCD_SPI.Instance->DR = r;
 8004352:	4b17      	ldr	r3, [pc, #92]	; (80043b0 <LCD9488_WriteData_16Bit+0xb0>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	7bfa      	ldrb	r2, [r7, #15]
 8004358:	60da      	str	r2, [r3, #12]

	while ( !( LCD_SPI.Instance->SR & SPI_SR_TXE ) );
 800435a:	bf00      	nop
 800435c:	4b14      	ldr	r3, [pc, #80]	; (80043b0 <LCD9488_WriteData_16Bit+0xb0>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d0f8      	beq.n	800435c <LCD9488_WriteData_16Bit+0x5c>
		LCD_SPI.Instance->DR = g;
 800436a:	4b11      	ldr	r3, [pc, #68]	; (80043b0 <LCD9488_WriteData_16Bit+0xb0>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	7bba      	ldrb	r2, [r7, #14]
 8004370:	60da      	str	r2, [r3, #12]

	while ( !( LCD_SPI.Instance->SR & SPI_SR_TXE ) );
 8004372:	bf00      	nop
 8004374:	4b0e      	ldr	r3, [pc, #56]	; (80043b0 <LCD9488_WriteData_16Bit+0xb0>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f003 0302 	and.w	r3, r3, #2
 800437e:	2b00      	cmp	r3, #0
 8004380:	d0f8      	beq.n	8004374 <LCD9488_WriteData_16Bit+0x74>
		LCD_SPI.Instance->DR = b;
 8004382:	4b0b      	ldr	r3, [pc, #44]	; (80043b0 <LCD9488_WriteData_16Bit+0xb0>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	7b7a      	ldrb	r2, [r7, #13]
 8004388:	60da      	str	r2, [r3, #12]

	while ( !( LCD_SPI.Instance->SR & SPI_SR_TXE ) );
 800438a:	bf00      	nop
 800438c:	4b08      	ldr	r3, [pc, #32]	; (80043b0 <LCD9488_WriteData_16Bit+0xb0>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f003 0302 	and.w	r3, r3, #2
 8004396:	2b00      	cmp	r3, #0
 8004398:	d0f8      	beq.n	800438c <LCD9488_WriteData_16Bit+0x8c>

	LCD9488_CS_SET;
 800439a:	2201      	movs	r2, #1
 800439c:	2104      	movs	r1, #4
 800439e:	4803      	ldr	r0, [pc, #12]	; (80043ac <LCD9488_WriteData_16Bit+0xac>)
 80043a0:	f003 fe8b 	bl	80080ba <HAL_GPIO_WritePin>
}
 80043a4:	bf00      	nop
 80043a6:	3710      	adds	r7, #16
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	40020800 	.word	0x40020800
 80043b0:	20008d18 	.word	0x20008d18

080043b4 <LCD9488_GUI_Draw_Point>:
//=======================================================================================
void LCD9488_GUI_Draw_Point(uint16_t x,uint16_t y)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	4603      	mov	r3, r0
 80043bc:	460a      	mov	r2, r1
 80043be:	80fb      	strh	r3, [r7, #6]
 80043c0:	4613      	mov	r3, r2
 80043c2:	80bb      	strh	r3, [r7, #4]
	LCD9488_GUI_SetCursor(x,y);
 80043c4:	88ba      	ldrh	r2, [r7, #4]
 80043c6:	88fb      	ldrh	r3, [r7, #6]
 80043c8:	4611      	mov	r1, r2
 80043ca:	4618      	mov	r0, r3
 80043cc:	f000 f93e 	bl	800464c <LCD9488_GUI_SetCursor>
	LCD9488_WriteData_16Bit(LCD9488_Point_Color);
 80043d0:	4b04      	ldr	r3, [pc, #16]	; (80043e4 <LCD9488_GUI_Draw_Point+0x30>)
 80043d2:	881b      	ldrh	r3, [r3, #0]
 80043d4:	4618      	mov	r0, r3
 80043d6:	f7ff ff93 	bl	8004300 <LCD9488_WriteData_16Bit>
}
 80043da:	bf00      	nop
 80043dc:	3708      	adds	r7, #8
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	2000034c 	.word	0x2000034c

080043e8 <LCD9488_GUI_Clear>:
//=======================================================================================
void LCD9488_GUI_Clear(uint16_t Color)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	4603      	mov	r3, r0
 80043f0:	80fb      	strh	r3, [r7, #6]
	LCD9488_GUI_SetWindows(0,0,LCD9488_DEV.Width-1,LCD9488_DEV.Height-1);
 80043f2:	4b32      	ldr	r3, [pc, #200]	; (80044bc <LCD9488_GUI_Clear+0xd4>)
 80043f4:	881b      	ldrh	r3, [r3, #0]
 80043f6:	3b01      	subs	r3, #1
 80043f8:	b29a      	uxth	r2, r3
 80043fa:	4b30      	ldr	r3, [pc, #192]	; (80044bc <LCD9488_GUI_Clear+0xd4>)
 80043fc:	885b      	ldrh	r3, [r3, #2]
 80043fe:	3b01      	subs	r3, #1
 8004400:	b29b      	uxth	r3, r3
 8004402:	2100      	movs	r1, #0
 8004404:	2000      	movs	r0, #0
 8004406:	f000 f875 	bl	80044f4 <LCD9488_GUI_SetWindows>
	LCD9488_CS_CLR;
 800440a:	2200      	movs	r2, #0
 800440c:	2104      	movs	r1, #4
 800440e:	482c      	ldr	r0, [pc, #176]	; (80044c0 <LCD9488_GUI_Clear+0xd8>)
 8004410:	f003 fe53 	bl	80080ba <HAL_GPIO_WritePin>
	LCD9488_RS_SET;
 8004414:	2201      	movs	r2, #1
 8004416:	2101      	movs	r1, #1
 8004418:	4829      	ldr	r0, [pc, #164]	; (80044c0 <LCD9488_GUI_Clear+0xd8>)
 800441a:	f003 fe4e 	bl	80080ba <HAL_GPIO_WritePin>
	uint32_t cnt = LCD9488_DEV.Height * LCD9488_DEV.Width;
 800441e:	4b27      	ldr	r3, [pc, #156]	; (80044bc <LCD9488_GUI_Clear+0xd4>)
 8004420:	885b      	ldrh	r3, [r3, #2]
 8004422:	461a      	mov	r2, r3
 8004424:	4b25      	ldr	r3, [pc, #148]	; (80044bc <LCD9488_GUI_Clear+0xd4>)
 8004426:	881b      	ldrh	r3, [r3, #0]
 8004428:	fb03 f302 	mul.w	r3, r3, r2
 800442c:	60fb      	str	r3, [r7, #12]
	uint8_t r = (Color>>8)&0xF8; 	// RED Color
 800442e:	88fb      	ldrh	r3, [r7, #6]
 8004430:	0a1b      	lsrs	r3, r3, #8
 8004432:	b29b      	uxth	r3, r3
 8004434:	b2db      	uxtb	r3, r3
 8004436:	f023 0307 	bic.w	r3, r3, #7
 800443a:	72fb      	strb	r3, [r7, #11]
	uint8_t g = (Color>>3)&0xFC; 	// Green Color
 800443c:	88fb      	ldrh	r3, [r7, #6]
 800443e:	08db      	lsrs	r3, r3, #3
 8004440:	b29b      	uxth	r3, r3
 8004442:	b2db      	uxtb	r3, r3
 8004444:	f023 0303 	bic.w	r3, r3, #3
 8004448:	72bb      	strb	r3, [r7, #10]
	uint8_t b = Color<<3; 			// Blue Color
 800444a:	88fb      	ldrh	r3, [r7, #6]
 800444c:	b2db      	uxtb	r3, r3
 800444e:	00db      	lsls	r3, r3, #3
 8004450:	727b      	strb	r3, [r7, #9]

	while (cnt)
 8004452:	e026      	b.n	80044a2 <LCD9488_GUI_Clear+0xba>
	{
		while ( !( LCD_SPI.Instance->SR & SPI_SR_TXE ) );
 8004454:	bf00      	nop
 8004456:	4b1b      	ldr	r3, [pc, #108]	; (80044c4 <LCD9488_GUI_Clear+0xdc>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d0f8      	beq.n	8004456 <LCD9488_GUI_Clear+0x6e>
			LCD_SPI.Instance->DR = r;//RED
 8004464:	4b17      	ldr	r3, [pc, #92]	; (80044c4 <LCD9488_GUI_Clear+0xdc>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	7afa      	ldrb	r2, [r7, #11]
 800446a:	60da      	str	r2, [r3, #12]

		while ( !( LCD_SPI.Instance->SR & SPI_SR_TXE ) );
 800446c:	bf00      	nop
 800446e:	4b15      	ldr	r3, [pc, #84]	; (80044c4 <LCD9488_GUI_Clear+0xdc>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	2b00      	cmp	r3, #0
 800447a:	d0f8      	beq.n	800446e <LCD9488_GUI_Clear+0x86>
			LCD_SPI.Instance->DR = g;//GREEN
 800447c:	4b11      	ldr	r3, [pc, #68]	; (80044c4 <LCD9488_GUI_Clear+0xdc>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	7aba      	ldrb	r2, [r7, #10]
 8004482:	60da      	str	r2, [r3, #12]

		while ( !( LCD_SPI.Instance->SR & SPI_SR_TXE ) );
 8004484:	bf00      	nop
 8004486:	4b0f      	ldr	r3, [pc, #60]	; (80044c4 <LCD9488_GUI_Clear+0xdc>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f003 0302 	and.w	r3, r3, #2
 8004490:	2b00      	cmp	r3, #0
 8004492:	d0f8      	beq.n	8004486 <LCD9488_GUI_Clear+0x9e>
			LCD_SPI.Instance->DR = b;//BLUE
 8004494:	4b0b      	ldr	r3, [pc, #44]	; (80044c4 <LCD9488_GUI_Clear+0xdc>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	7a7a      	ldrb	r2, [r7, #9]
 800449a:	60da      	str	r2, [r3, #12]

		cnt--;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	3b01      	subs	r3, #1
 80044a0:	60fb      	str	r3, [r7, #12]
	while (cnt)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1d5      	bne.n	8004454 <LCD9488_GUI_Clear+0x6c>
	}
	LCD9488_CS_SET;
 80044a8:	2201      	movs	r2, #1
 80044aa:	2104      	movs	r1, #4
 80044ac:	4804      	ldr	r0, [pc, #16]	; (80044c0 <LCD9488_GUI_Clear+0xd8>)
 80044ae:	f003 fe04 	bl	80080ba <HAL_GPIO_WritePin>
}
 80044b2:	bf00      	nop
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	20009110 	.word	0x20009110
 80044c0:	40020800 	.word	0x40020800
 80044c4:	20008d18 	.word	0x20008d18

080044c8 <LCD9488_RESET>:

//=======================================================================================
void LCD9488_RESET(void)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	af00      	add	r7, sp, #0
	LCD9488_RST_CLR;
 80044cc:	2200      	movs	r2, #0
 80044ce:	2102      	movs	r1, #2
 80044d0:	4807      	ldr	r0, [pc, #28]	; (80044f0 <LCD9488_RESET+0x28>)
 80044d2:	f003 fdf2 	bl	80080ba <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80044d6:	2064      	movs	r0, #100	; 0x64
 80044d8:	f002 fb72 	bl	8006bc0 <HAL_Delay>
	LCD9488_RST_SET;
 80044dc:	2201      	movs	r2, #1
 80044de:	2102      	movs	r1, #2
 80044e0:	4803      	ldr	r0, [pc, #12]	; (80044f0 <LCD9488_RESET+0x28>)
 80044e2:	f003 fdea 	bl	80080ba <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80044e6:	2032      	movs	r0, #50	; 0x32
 80044e8:	f002 fb6a 	bl	8006bc0 <HAL_Delay>
}
 80044ec:	bf00      	nop
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	40020800 	.word	0x40020800

080044f4 <LCD9488_GUI_SetWindows>:
//=======================================================================================
void LCD9488_GUI_SetWindows(uint16_t xStar, uint16_t yStar,uint16_t xEnd,uint16_t yEnd)
{
 80044f4:	b590      	push	{r4, r7, lr}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	4604      	mov	r4, r0
 80044fc:	4608      	mov	r0, r1
 80044fe:	4611      	mov	r1, r2
 8004500:	461a      	mov	r2, r3
 8004502:	4623      	mov	r3, r4
 8004504:	80fb      	strh	r3, [r7, #6]
 8004506:	4603      	mov	r3, r0
 8004508:	80bb      	strh	r3, [r7, #4]
 800450a:	460b      	mov	r3, r1
 800450c:	807b      	strh	r3, [r7, #2]
 800450e:	4613      	mov	r3, r2
 8004510:	803b      	strh	r3, [r7, #0]
	LCD9488_Transport_WR_REG(LCD9488_DEV.SetXcmd);
 8004512:	4b21      	ldr	r3, [pc, #132]	; (8004598 <LCD9488_GUI_SetWindows+0xa4>)
 8004514:	895b      	ldrh	r3, [r3, #10]
 8004516:	b2db      	uxtb	r3, r3
 8004518:	4618      	mov	r0, r3
 800451a:	f7ff fe8b 	bl	8004234 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(xStar>>8);
 800451e:	88fb      	ldrh	r3, [r7, #6]
 8004520:	0a1b      	lsrs	r3, r3, #8
 8004522:	b29b      	uxth	r3, r3
 8004524:	b2db      	uxtb	r3, r3
 8004526:	4618      	mov	r0, r3
 8004528:	f7ff feaa 	bl	8004280 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x00FF&xStar);
 800452c:	88fb      	ldrh	r3, [r7, #6]
 800452e:	b2db      	uxtb	r3, r3
 8004530:	4618      	mov	r0, r3
 8004532:	f7ff fea5 	bl	8004280 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(xEnd>>8);
 8004536:	887b      	ldrh	r3, [r7, #2]
 8004538:	0a1b      	lsrs	r3, r3, #8
 800453a:	b29b      	uxth	r3, r3
 800453c:	b2db      	uxtb	r3, r3
 800453e:	4618      	mov	r0, r3
 8004540:	f7ff fe9e 	bl	8004280 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x00FF&xEnd);
 8004544:	887b      	ldrh	r3, [r7, #2]
 8004546:	b2db      	uxtb	r3, r3
 8004548:	4618      	mov	r0, r3
 800454a:	f7ff fe99 	bl	8004280 <LCD9488_Transport_WR_DATA>

	LCD9488_Transport_WR_REG(LCD9488_DEV.SetYcmd);
 800454e:	4b12      	ldr	r3, [pc, #72]	; (8004598 <LCD9488_GUI_SetWindows+0xa4>)
 8004550:	899b      	ldrh	r3, [r3, #12]
 8004552:	b2db      	uxtb	r3, r3
 8004554:	4618      	mov	r0, r3
 8004556:	f7ff fe6d 	bl	8004234 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(yStar>>8);
 800455a:	88bb      	ldrh	r3, [r7, #4]
 800455c:	0a1b      	lsrs	r3, r3, #8
 800455e:	b29b      	uxth	r3, r3
 8004560:	b2db      	uxtb	r3, r3
 8004562:	4618      	mov	r0, r3
 8004564:	f7ff fe8c 	bl	8004280 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x00FF&yStar);
 8004568:	88bb      	ldrh	r3, [r7, #4]
 800456a:	b2db      	uxtb	r3, r3
 800456c:	4618      	mov	r0, r3
 800456e:	f7ff fe87 	bl	8004280 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(yEnd>>8);
 8004572:	883b      	ldrh	r3, [r7, #0]
 8004574:	0a1b      	lsrs	r3, r3, #8
 8004576:	b29b      	uxth	r3, r3
 8004578:	b2db      	uxtb	r3, r3
 800457a:	4618      	mov	r0, r3
 800457c:	f7ff fe80 	bl	8004280 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x00FF&yEnd);
 8004580:	883b      	ldrh	r3, [r7, #0]
 8004582:	b2db      	uxtb	r3, r3
 8004584:	4618      	mov	r0, r3
 8004586:	f7ff fe7b 	bl	8004280 <LCD9488_Transport_WR_DATA>

	LCD9488_WriteRAM_Prepare();
 800458a:	f7ff fead 	bl	80042e8 <LCD9488_WriteRAM_Prepare>
}
 800458e:	bf00      	nop
 8004590:	370c      	adds	r7, #12
 8004592:	46bd      	mov	sp, r7
 8004594:	bd90      	pop	{r4, r7, pc}
 8004596:	bf00      	nop
 8004598:	20009110 	.word	0x20009110

0800459c <LCD9488_GUI_SetOrientation>:
//=======================================================================================
void LCD9488_GUI_SetOrientation(uint8_t direction)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	4603      	mov	r3, r0
 80045a4:	71fb      	strb	r3, [r7, #7]
			LCD9488_DEV.SetXcmd=0x2A;
 80045a6:	4b28      	ldr	r3, [pc, #160]	; (8004648 <LCD9488_GUI_SetOrientation+0xac>)
 80045a8:	222a      	movs	r2, #42	; 0x2a
 80045aa:	815a      	strh	r2, [r3, #10]
			LCD9488_DEV.SetYcmd=0x2B;
 80045ac:	4b26      	ldr	r3, [pc, #152]	; (8004648 <LCD9488_GUI_SetOrientation+0xac>)
 80045ae:	222b      	movs	r2, #43	; 0x2b
 80045b0:	819a      	strh	r2, [r3, #12]
			LCD9488_DEV.WramCmd=0x2C;
 80045b2:	4b25      	ldr	r3, [pc, #148]	; (8004648 <LCD9488_GUI_SetOrientation+0xac>)
 80045b4:	222c      	movs	r2, #44	; 0x2c
 80045b6:	811a      	strh	r2, [r3, #8]
	switch(direction){
 80045b8:	79fb      	ldrb	r3, [r7, #7]
 80045ba:	2b03      	cmp	r3, #3
 80045bc:	d83e      	bhi.n	800463c <LCD9488_GUI_SetOrientation+0xa0>
 80045be:	a201      	add	r2, pc, #4	; (adr r2, 80045c4 <LCD9488_GUI_SetOrientation+0x28>)
 80045c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c4:	080045d5 	.word	0x080045d5
 80045c8:	080045ef 	.word	0x080045ef
 80045cc:	08004609 	.word	0x08004609
 80045d0:	08004623 	.word	0x08004623
		case 0:										// 0 degree
			LCD9488_DEV.Width=LCD_W;
 80045d4:	4b1c      	ldr	r3, [pc, #112]	; (8004648 <LCD9488_GUI_SetOrientation+0xac>)
 80045d6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80045da:	801a      	strh	r2, [r3, #0]
			LCD9488_DEV.Height=LCD_H;
 80045dc:	4b1a      	ldr	r3, [pc, #104]	; (8004648 <LCD9488_GUI_SetOrientation+0xac>)
 80045de:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80045e2:	805a      	strh	r2, [r3, #2]
			LCD9488_WriteReg(0x36,(1<<3)|(0<<6)|(0<<7));//BGR==1,MY==0,MX==0,MV==0
 80045e4:	2108      	movs	r1, #8
 80045e6:	2036      	movs	r0, #54	; 0x36
 80045e8:	f7ff fe68 	bl	80042bc <LCD9488_WriteReg>
		break;
 80045ec:	e027      	b.n	800463e <LCD9488_GUI_SetOrientation+0xa2>
		case 1:										// 90 degree
			LCD9488_DEV.Width=LCD_H;
 80045ee:	4b16      	ldr	r3, [pc, #88]	; (8004648 <LCD9488_GUI_SetOrientation+0xac>)
 80045f0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80045f4:	801a      	strh	r2, [r3, #0]
			LCD9488_DEV.Height=LCD_W;
 80045f6:	4b14      	ldr	r3, [pc, #80]	; (8004648 <LCD9488_GUI_SetOrientation+0xac>)
 80045f8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80045fc:	805a      	strh	r2, [r3, #2]
			LCD9488_WriteReg(0x36,(1<<3)|(0<<7)|(1<<6)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
 80045fe:	2168      	movs	r1, #104	; 0x68
 8004600:	2036      	movs	r0, #54	; 0x36
 8004602:	f7ff fe5b 	bl	80042bc <LCD9488_WriteReg>
		break;
 8004606:	e01a      	b.n	800463e <LCD9488_GUI_SetOrientation+0xa2>
		case 2:										// 180 degree
			LCD9488_DEV.Width=LCD_W;
 8004608:	4b0f      	ldr	r3, [pc, #60]	; (8004648 <LCD9488_GUI_SetOrientation+0xac>)
 800460a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800460e:	801a      	strh	r2, [r3, #0]
			LCD9488_DEV.Height=LCD_H;
 8004610:	4b0d      	ldr	r3, [pc, #52]	; (8004648 <LCD9488_GUI_SetOrientation+0xac>)
 8004612:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004616:	805a      	strh	r2, [r3, #2]
			LCD9488_WriteReg(0x36,(1<<3)|(1<<6)|(1<<7));//BGR==1,MY==0,MX==0,MV==0
 8004618:	21c8      	movs	r1, #200	; 0xc8
 800461a:	2036      	movs	r0, #54	; 0x36
 800461c:	f7ff fe4e 	bl	80042bc <LCD9488_WriteReg>
		break;
 8004620:	e00d      	b.n	800463e <LCD9488_GUI_SetOrientation+0xa2>
		case 3:										// 270 degree
			LCD9488_DEV.Width=LCD_H;
 8004622:	4b09      	ldr	r3, [pc, #36]	; (8004648 <LCD9488_GUI_SetOrientation+0xac>)
 8004624:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004628:	801a      	strh	r2, [r3, #0]
			LCD9488_DEV.Height=LCD_W;
 800462a:	4b07      	ldr	r3, [pc, #28]	; (8004648 <LCD9488_GUI_SetOrientation+0xac>)
 800462c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004630:	805a      	strh	r2, [r3, #2]
			LCD9488_WriteReg(0x36,(1<<3)|(1<<7)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
 8004632:	21a8      	movs	r1, #168	; 0xa8
 8004634:	2036      	movs	r0, #54	; 0x36
 8004636:	f7ff fe41 	bl	80042bc <LCD9488_WriteReg>
		break;
 800463a:	e000      	b.n	800463e <LCD9488_GUI_SetOrientation+0xa2>
		default:break;
 800463c:	bf00      	nop
	}
}
 800463e:	bf00      	nop
 8004640:	3708      	adds	r7, #8
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	20009110 	.word	0x20009110

0800464c <LCD9488_GUI_SetCursor>:
//=======================================================================================
void LCD9488_GUI_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	4603      	mov	r3, r0
 8004654:	460a      	mov	r2, r1
 8004656:	80fb      	strh	r3, [r7, #6]
 8004658:	4613      	mov	r3, r2
 800465a:	80bb      	strh	r3, [r7, #4]
	LCD9488_GUI_SetWindows(Xpos,Ypos,Xpos,Ypos);										// Окно размером в 1 точку
 800465c:	88bb      	ldrh	r3, [r7, #4]
 800465e:	88fa      	ldrh	r2, [r7, #6]
 8004660:	88b9      	ldrh	r1, [r7, #4]
 8004662:	88f8      	ldrh	r0, [r7, #6]
 8004664:	f7ff ff46 	bl	80044f4 <LCD9488_GUI_SetWindows>
}
 8004668:	bf00      	nop
 800466a:	3708      	adds	r7, #8
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <LCD9488_GUI_SetFont>:
		LCD9488_GUI_Fill(a,y,b,y,LCD9488_Point_Color);
	}
}
//=======================================================================================
void LCD9488_GUI_SetFont(unsigned char* AFont, uint16_t AFontColor, uint16_t ABackgroundColor) // Установить параметры для выбранного шрифта
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	460b      	mov	r3, r1
 800467a:	807b      	strh	r3, [r7, #2]
 800467c:	4613      	mov	r3, r2
 800467e:	803b      	strh	r3, [r7, #0]
	LCD9488_CurrentFont = AFont;														// Указатель на массив с данными шрифта
 8004680:	4a15      	ldr	r2, [pc, #84]	; (80046d8 <LCD9488_GUI_SetFont+0x68>)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6013      	str	r3, [r2, #0]
	LCD9488_Point_Color = AFontColor;													// Цвет пикселей рисования
 8004686:	4a15      	ldr	r2, [pc, #84]	; (80046dc <LCD9488_GUI_SetFont+0x6c>)
 8004688:	887b      	ldrh	r3, [r7, #2]
 800468a:	8013      	strh	r3, [r2, #0]
	LCD9488_Back_Color  = ABackgroundColor;												// Цвет фона
 800468c:	4a14      	ldr	r2, [pc, #80]	; (80046e0 <LCD9488_GUI_SetFont+0x70>)
 800468e:	883b      	ldrh	r3, [r7, #0]
 8004690:	8013      	strh	r3, [r2, #0]

	// Прочитать параметры шрифта
	LCD9488_CurrentFont_FirstChar		= LCD9488_CurrentFont[0];          				// Первый символ в наборе
 8004692:	4b11      	ldr	r3, [pc, #68]	; (80046d8 <LCD9488_GUI_SetFont+0x68>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	781a      	ldrb	r2, [r3, #0]
 8004698:	4b12      	ldr	r3, [pc, #72]	; (80046e4 <LCD9488_GUI_SetFont+0x74>)
 800469a:	701a      	strb	r2, [r3, #0]
	LCD9488_CurrentFont_LastChar		= LCD9488_CurrentFont[1];          				// Последний символ в наборе
 800469c:	4b0e      	ldr	r3, [pc, #56]	; (80046d8 <LCD9488_GUI_SetFont+0x68>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	785a      	ldrb	r2, [r3, #1]
 80046a2:	4b11      	ldr	r3, [pc, #68]	; (80046e8 <LCD9488_GUI_SetFont+0x78>)
 80046a4:	701a      	strb	r2, [r3, #0]
	LCD9488_CurrentFont_Offset			= LCD9488_CurrentFont[2];          				// Число байтов на 1 символ в массиве шрифта
 80046a6:	4b0c      	ldr	r3, [pc, #48]	; (80046d8 <LCD9488_GUI_SetFont+0x68>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	789a      	ldrb	r2, [r3, #2]
 80046ac:	4b0f      	ldr	r3, [pc, #60]	; (80046ec <LCD9488_GUI_SetFont+0x7c>)
 80046ae:	701a      	strb	r2, [r3, #0]
	LCD9488_CurrentFont_PixHoriz 		= LCD9488_CurrentFont[3];           			// Размер символов по горизонтали
 80046b0:	4b09      	ldr	r3, [pc, #36]	; (80046d8 <LCD9488_GUI_SetFont+0x68>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	78da      	ldrb	r2, [r3, #3]
 80046b6:	4b0e      	ldr	r3, [pc, #56]	; (80046f0 <LCD9488_GUI_SetFont+0x80>)
 80046b8:	701a      	strb	r2, [r3, #0]
	LCD9488_CurrentFont_PixVert 		= LCD9488_CurrentFont[4];                   	// Размер символов по вертикали
 80046ba:	4b07      	ldr	r3, [pc, #28]	; (80046d8 <LCD9488_GUI_SetFont+0x68>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	791a      	ldrb	r2, [r3, #4]
 80046c0:	4b0c      	ldr	r3, [pc, #48]	; (80046f4 <LCD9488_GUI_SetFont+0x84>)
 80046c2:	701a      	strb	r2, [r3, #0]
	LCD9488_CurrentFont_BytesPerLine	= LCD9488_CurrentFont[5];                   	// Число байт на 1 горизонтальную линию в символе
 80046c4:	4b04      	ldr	r3, [pc, #16]	; (80046d8 <LCD9488_GUI_SetFont+0x68>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	795a      	ldrb	r2, [r3, #5]
 80046ca:	4b0b      	ldr	r3, [pc, #44]	; (80046f8 <LCD9488_GUI_SetFont+0x88>)
 80046cc:	701a      	strb	r2, [r3, #0]
}
 80046ce:	bf00      	nop
 80046d0:	370c      	adds	r7, #12
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bc80      	pop	{r7}
 80046d6:	4770      	bx	lr
 80046d8:	20008978 	.word	0x20008978
 80046dc:	2000034c 	.word	0x2000034c
 80046e0:	20000004 	.word	0x20000004
 80046e4:	20008aa0 	.word	0x20008aa0
 80046e8:	20008a04 	.word	0x20008a04
 80046ec:	20008a16 	.word	0x20008a16
 80046f0:	20008a15 	.word	0x20008a15
 80046f4:	20008a14 	.word	0x20008a14
 80046f8:	20008aa1 	.word	0x20008aa1

080046fc <LCD9488_GUI_GotoXY>:
//=======================================================================================
void LCD9488_GUI_GotoXY(uint16_t x1, uint16_t y1)										// Установить координаты начала для печати символа или строки
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	4603      	mov	r3, r0
 8004704:	460a      	mov	r2, r1
 8004706:	80fb      	strh	r3, [r7, #6]
 8004708:	4613      	mov	r3, r2
 800470a:	80bb      	strh	r3, [r7, #4]
	char_x = x1;
 800470c:	88fb      	ldrh	r3, [r7, #6]
 800470e:	4a05      	ldr	r2, [pc, #20]	; (8004724 <LCD9488_GUI_GotoXY+0x28>)
 8004710:	6013      	str	r3, [r2, #0]
	char_y = y1;
 8004712:	88bb      	ldrh	r3, [r7, #4]
 8004714:	4a04      	ldr	r2, [pc, #16]	; (8004728 <LCD9488_GUI_GotoXY+0x2c>)
 8004716:	6013      	str	r3, [r2, #0]
}
 8004718:	bf00      	nop
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	bc80      	pop	{r7}
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	20008a10 	.word	0x20008a10
 8004728:	20008b38 	.word	0x20008b38

0800472c <LCD9488_GUI_Draw_Char>:
//=======================================================================================
void LCD9488_GUI_Draw_Char(uint16_t fc, uint16_t bc, uint8_t c, ADrawType Overlying)
{
 800472c:	b590      	push	{r4, r7, lr}
 800472e:	b089      	sub	sp, #36	; 0x24
 8004730:	af00      	add	r7, sp, #0
 8004732:	4604      	mov	r4, r0
 8004734:	4608      	mov	r0, r1
 8004736:	4611      	mov	r1, r2
 8004738:	461a      	mov	r2, r3
 800473a:	4623      	mov	r3, r4
 800473c:	80fb      	strh	r3, [r7, #6]
 800473e:	4603      	mov	r3, r0
 8004740:	80bb      	strh	r3, [r7, #4]
 8004742:	460b      	mov	r3, r1
 8004744:	70fb      	strb	r3, [r7, #3]
 8004746:	4613      	mov	r3, r2
 8004748:	70bb      	strb	r3, [r7, #2]
    unsigned int b;
    unsigned char* CurCharBitmap;														// начало данных для текущего символа в массиве шрифта
    unsigned char z, cur_width;

    if ((c < LCD9488_CurrentFont_FirstChar) || (c > LCD9488_CurrentFont_LastChar))
 800474a:	4b74      	ldr	r3, [pc, #464]	; (800491c <LCD9488_GUI_Draw_Char+0x1f0>)
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	78fa      	ldrb	r2, [r7, #3]
 8004750:	429a      	cmp	r2, r3
 8004752:	f0c0 817b 	bcc.w	8004a4c <LCD9488_GUI_Draw_Char+0x320>
 8004756:	4b72      	ldr	r3, [pc, #456]	; (8004920 <LCD9488_GUI_Draw_Char+0x1f4>)
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	78fa      	ldrb	r2, [r7, #3]
 800475c:	429a      	cmp	r2, r3
 800475e:	f200 8175 	bhi.w	8004a4c <LCD9488_GUI_Draw_Char+0x320>
    {
    	return;  																		// работаем только с символами, которые есть в шрифте
    }

	c = c - LCD9488_CurrentFont_FirstChar; 												// сдвигаем до 1го символа в наборе (см ASCII таблицу)
 8004762:	4b6e      	ldr	r3, [pc, #440]	; (800491c <LCD9488_GUI_Draw_Char+0x1f0>)
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	78fa      	ldrb	r2, [r7, #3]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	70fb      	strb	r3, [r7, #3]

    if (char_x + LCD9488_CurrentFont_PixHoriz > LCD9488_DEV.Width)
 800476c:	4b6d      	ldr	r3, [pc, #436]	; (8004924 <LCD9488_GUI_Draw_Char+0x1f8>)
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	461a      	mov	r2, r3
 8004772:	4b6d      	ldr	r3, [pc, #436]	; (8004928 <LCD9488_GUI_Draw_Char+0x1fc>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4413      	add	r3, r2
 8004778:	4a6c      	ldr	r2, [pc, #432]	; (800492c <LCD9488_GUI_Draw_Char+0x200>)
 800477a:	8812      	ldrh	r2, [r2, #0]
 800477c:	4293      	cmp	r3, r2
 800477e:	d918      	bls.n	80047b2 <LCD9488_GUI_Draw_Char+0x86>
     {
         char_x = 0;
 8004780:	4b69      	ldr	r3, [pc, #420]	; (8004928 <LCD9488_GUI_Draw_Char+0x1fc>)
 8004782:	2200      	movs	r2, #0
 8004784:	601a      	str	r2, [r3, #0]
         char_y = char_y + LCD9488_CurrentFont_PixVert;
 8004786:	4b6a      	ldr	r3, [pc, #424]	; (8004930 <LCD9488_GUI_Draw_Char+0x204>)
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	461a      	mov	r2, r3
 800478c:	4b69      	ldr	r3, [pc, #420]	; (8004934 <LCD9488_GUI_Draw_Char+0x208>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4413      	add	r3, r2
 8004792:	4a68      	ldr	r2, [pc, #416]	; (8004934 <LCD9488_GUI_Draw_Char+0x208>)
 8004794:	6013      	str	r3, [r2, #0]
         if (char_y >= (LCD9488_DEV.Height - LCD9488_CurrentFont_PixVert) )
 8004796:	4b65      	ldr	r3, [pc, #404]	; (800492c <LCD9488_GUI_Draw_Char+0x200>)
 8004798:	885b      	ldrh	r3, [r3, #2]
 800479a:	461a      	mov	r2, r3
 800479c:	4b64      	ldr	r3, [pc, #400]	; (8004930 <LCD9488_GUI_Draw_Char+0x204>)
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	461a      	mov	r2, r3
 80047a4:	4b63      	ldr	r3, [pc, #396]	; (8004934 <LCD9488_GUI_Draw_Char+0x208>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d802      	bhi.n	80047b2 <LCD9488_GUI_Draw_Char+0x86>
         {
             char_y = 0;
 80047ac:	4b61      	ldr	r3, [pc, #388]	; (8004934 <LCD9488_GUI_Draw_Char+0x208>)
 80047ae:	2200      	movs	r2, #0
 80047b0:	601a      	str	r2, [r3, #0]
         }
     }

    CurCharBitmap = &LCD9488_CurrentFont[((c) * LCD9488_CurrentFont_Offset) + 6]; 		// начало массива текущего символа (с = номер символа; offset = сколько байтов на символ в шрифте; 6 = первые 6 байт во всем массиве - заголовок с параметрами шрифта)
 80047b2:	4b61      	ldr	r3, [pc, #388]	; (8004938 <LCD9488_GUI_Draw_Char+0x20c>)
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	78fb      	ldrb	r3, [r7, #3]
 80047b8:	4960      	ldr	r1, [pc, #384]	; (800493c <LCD9488_GUI_Draw_Char+0x210>)
 80047ba:	7809      	ldrb	r1, [r1, #0]
 80047bc:	fb01 f303 	mul.w	r3, r1, r3
 80047c0:	3306      	adds	r3, #6
 80047c2:	4413      	add	r3, r2
 80047c4:	617b      	str	r3, [r7, #20]

    cur_width = CurCharBitmap[0];                          								// ширина текущего символа - в начале каждого символа первый байт - его ширина
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	74fb      	strb	r3, [r7, #19]

    if (Overlying == DRAW_OVERLYING)													// Если режим наложения - рисуем только значащие точки символа поверх того что уже нарисовано (медленно)
 80047cc:	78bb      	ldrb	r3, [r7, #2]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d150      	bne.n	8004874 <LCD9488_GUI_Draw_Char+0x148>
    {
        for (uint8_t cur_y = 0; cur_y < LCD9488_CurrentFont_PixVert; cur_y++)			// перебор по вертикали
 80047d2:	2300      	movs	r3, #0
 80047d4:	77fb      	strb	r3, [r7, #31]
 80047d6:	e03c      	b.n	8004852 <LCD9488_GUI_Draw_Char+0x126>
        {
           for (uint8_t cur_x = 0; cur_x < LCD9488_CurrentFont_PixHoriz; cur_x++)		// перебор по горизонтали
 80047d8:	2300      	movs	r3, #0
 80047da:	77bb      	strb	r3, [r7, #30]
 80047dc:	e031      	b.n	8004842 <LCD9488_GUI_Draw_Char+0x116>
           {
               z =  CurCharBitmap[LCD9488_CurrentFont_BytesPerLine * cur_x + ((cur_y & 0xF8) >> 3) + 1];
 80047de:	4b58      	ldr	r3, [pc, #352]	; (8004940 <LCD9488_GUI_Draw_Char+0x214>)
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	461a      	mov	r2, r3
 80047e4:	7fbb      	ldrb	r3, [r7, #30]
 80047e6:	fb03 f302 	mul.w	r3, r3, r2
 80047ea:	7ffa      	ldrb	r2, [r7, #31]
 80047ec:	08d2      	lsrs	r2, r2, #3
 80047ee:	b2d2      	uxtb	r2, r2
 80047f0:	4413      	add	r3, r2
 80047f2:	3301      	adds	r3, #1
 80047f4:	697a      	ldr	r2, [r7, #20]
 80047f6:	4413      	add	r3, r2
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	74bb      	strb	r3, [r7, #18]

               b = 1 << (cur_y & 0x07);
 80047fc:	7ffb      	ldrb	r3, [r7, #31]
 80047fe:	f003 0307 	and.w	r3, r3, #7
 8004802:	2201      	movs	r2, #1
 8004804:	fa02 f303 	lsl.w	r3, r2, r3
 8004808:	60fb      	str	r3, [r7, #12]

               if (( z & b ) == 0x00) 													// фон, там где нет точки изображения символа
 800480a:	7cba      	ldrb	r2, [r7, #18]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	4013      	ands	r3, r2
 8004810:	2b00      	cmp	r3, #0
 8004812:	d013      	beq.n	800483c <LCD9488_GUI_Draw_Char+0x110>
               {

               }
               else																		// точка изображения символа
               {
            	   LCD9488_Point_Color = fc;											// устанавливаем цвет точки
 8004814:	4a4b      	ldr	r2, [pc, #300]	; (8004944 <LCD9488_GUI_Draw_Char+0x218>)
 8004816:	88fb      	ldrh	r3, [r7, #6]
 8004818:	8013      	strh	r3, [r2, #0]
            	   LCD9488_GUI_Draw_Point(char_x + cur_x, char_y + cur_y);				// Рисуем точку по координатам
 800481a:	7fbb      	ldrb	r3, [r7, #30]
 800481c:	b29a      	uxth	r2, r3
 800481e:	4b42      	ldr	r3, [pc, #264]	; (8004928 <LCD9488_GUI_Draw_Char+0x1fc>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	b29b      	uxth	r3, r3
 8004824:	4413      	add	r3, r2
 8004826:	b298      	uxth	r0, r3
 8004828:	7ffb      	ldrb	r3, [r7, #31]
 800482a:	b29a      	uxth	r2, r3
 800482c:	4b41      	ldr	r3, [pc, #260]	; (8004934 <LCD9488_GUI_Draw_Char+0x208>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	b29b      	uxth	r3, r3
 8004832:	4413      	add	r3, r2
 8004834:	b29b      	uxth	r3, r3
 8004836:	4619      	mov	r1, r3
 8004838:	f7ff fdbc 	bl	80043b4 <LCD9488_GUI_Draw_Point>
           for (uint8_t cur_x = 0; cur_x < LCD9488_CurrentFont_PixHoriz; cur_x++)		// перебор по горизонтали
 800483c:	7fbb      	ldrb	r3, [r7, #30]
 800483e:	3301      	adds	r3, #1
 8004840:	77bb      	strb	r3, [r7, #30]
 8004842:	4b38      	ldr	r3, [pc, #224]	; (8004924 <LCD9488_GUI_Draw_Char+0x1f8>)
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	7fba      	ldrb	r2, [r7, #30]
 8004848:	429a      	cmp	r2, r3
 800484a:	d3c8      	bcc.n	80047de <LCD9488_GUI_Draw_Char+0xb2>
        for (uint8_t cur_y = 0; cur_y < LCD9488_CurrentFont_PixVert; cur_y++)			// перебор по вертикали
 800484c:	7ffb      	ldrb	r3, [r7, #31]
 800484e:	3301      	adds	r3, #1
 8004850:	77fb      	strb	r3, [r7, #31]
 8004852:	4b37      	ldr	r3, [pc, #220]	; (8004930 <LCD9488_GUI_Draw_Char+0x204>)
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	7ffa      	ldrb	r2, [r7, #31]
 8004858:	429a      	cmp	r2, r3
 800485a:	d3bd      	bcc.n	80047d8 <LCD9488_GUI_Draw_Char+0xac>
               }


           }
       }
       LCD9488_GUI_SetWindows(0,0,LCD9488_DEV.Width-1,LCD9488_DEV.Height-1);
 800485c:	4b33      	ldr	r3, [pc, #204]	; (800492c <LCD9488_GUI_Draw_Char+0x200>)
 800485e:	881b      	ldrh	r3, [r3, #0]
 8004860:	3b01      	subs	r3, #1
 8004862:	b29a      	uxth	r2, r3
 8004864:	4b31      	ldr	r3, [pc, #196]	; (800492c <LCD9488_GUI_Draw_Char+0x200>)
 8004866:	885b      	ldrh	r3, [r3, #2]
 8004868:	3b01      	subs	r3, #1
 800486a:	b29b      	uxth	r3, r3
 800486c:	2100      	movs	r1, #0
 800486e:	2000      	movs	r0, #0
 8004870:	f7ff fe40 	bl	80044f4 <LCD9488_GUI_SetWindows>

    }
    if (Overlying == DRAW_NO_OVERLYING)													// Если НЕ режим наложения - рисуем символ цветом fc на фоне bc
 8004874:	78bb      	ldrb	r3, [r7, #2]
 8004876:	2b00      	cmp	r3, #0
 8004878:	f040 80d1 	bne.w	8004a1e <LCD9488_GUI_Draw_Char+0x2f2>
    {
    	uint8_t red, green, blue;														// цветовые компопнеты точки

        LCD9488_GUI_SetWindows(char_x, char_y, char_x + LCD9488_CurrentFont_PixHoriz - 1, char_y + LCD9488_CurrentFont_PixVert);
 800487c:	4b2a      	ldr	r3, [pc, #168]	; (8004928 <LCD9488_GUI_Draw_Char+0x1fc>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	b298      	uxth	r0, r3
 8004882:	4b2c      	ldr	r3, [pc, #176]	; (8004934 <LCD9488_GUI_Draw_Char+0x208>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	b299      	uxth	r1, r3
 8004888:	4b26      	ldr	r3, [pc, #152]	; (8004924 <LCD9488_GUI_Draw_Char+0x1f8>)
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	b29a      	uxth	r2, r3
 800488e:	4b26      	ldr	r3, [pc, #152]	; (8004928 <LCD9488_GUI_Draw_Char+0x1fc>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	b29b      	uxth	r3, r3
 8004894:	4413      	add	r3, r2
 8004896:	b29b      	uxth	r3, r3
 8004898:	3b01      	subs	r3, #1
 800489a:	b29c      	uxth	r4, r3
 800489c:	4b24      	ldr	r3, [pc, #144]	; (8004930 <LCD9488_GUI_Draw_Char+0x204>)
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	b29a      	uxth	r2, r3
 80048a2:	4b24      	ldr	r3, [pc, #144]	; (8004934 <LCD9488_GUI_Draw_Char+0x208>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	4413      	add	r3, r2
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	4622      	mov	r2, r4
 80048ae:	f7ff fe21 	bl	80044f4 <LCD9488_GUI_SetWindows>

        for (uint8_t cur_y = 0; cur_y < LCD9488_CurrentFont_PixVert; cur_y++)			// перебор по вертикали
 80048b2:	2300      	movs	r3, #0
 80048b4:	76bb      	strb	r3, [r7, #26]
 80048b6:	e0a0      	b.n	80049fa <LCD9488_GUI_Draw_Char+0x2ce>
        {
           for (uint8_t cur_x = 0; cur_x < LCD9488_CurrentFont_PixHoriz; cur_x++)		// перебор по горизонтали
 80048b8:	2300      	movs	r3, #0
 80048ba:	767b      	strb	r3, [r7, #25]
 80048bc:	e094      	b.n	80049e8 <LCD9488_GUI_Draw_Char+0x2bc>
           {
               z =  CurCharBitmap[LCD9488_CurrentFont_BytesPerLine * cur_x + ((cur_y & 0xF8) >> 3)+1];
 80048be:	4b20      	ldr	r3, [pc, #128]	; (8004940 <LCD9488_GUI_Draw_Char+0x214>)
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	461a      	mov	r2, r3
 80048c4:	7e7b      	ldrb	r3, [r7, #25]
 80048c6:	fb03 f302 	mul.w	r3, r3, r2
 80048ca:	7eba      	ldrb	r2, [r7, #26]
 80048cc:	08d2      	lsrs	r2, r2, #3
 80048ce:	b2d2      	uxtb	r2, r2
 80048d0:	4413      	add	r3, r2
 80048d2:	3301      	adds	r3, #1
 80048d4:	697a      	ldr	r2, [r7, #20]
 80048d6:	4413      	add	r3, r2
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	74bb      	strb	r3, [r7, #18]
               b = 1 << (cur_y & 0x07);
 80048dc:	7ebb      	ldrb	r3, [r7, #26]
 80048de:	f003 0307 	and.w	r3, r3, #7
 80048e2:	2201      	movs	r2, #1
 80048e4:	fa02 f303 	lsl.w	r3, r2, r3
 80048e8:	60fb      	str	r3, [r7, #12]

               if (( z & b ) == 0x00) 													// фон, там где нет точки изображения символа
 80048ea:	7cba      	ldrb	r2, [r7, #18]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	4013      	ands	r3, r2
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d129      	bne.n	8004948 <LCD9488_GUI_Draw_Char+0x21c>
               {
            	   red		= (bc>>8)&0xF8;
 80048f4:	88bb      	ldrh	r3, [r7, #4]
 80048f6:	0a1b      	lsrs	r3, r3, #8
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	f023 0307 	bic.w	r3, r3, #7
 8004900:	777b      	strb	r3, [r7, #29]
            	   green 	= (bc>>3)&0xFC;
 8004902:	88bb      	ldrh	r3, [r7, #4]
 8004904:	08db      	lsrs	r3, r3, #3
 8004906:	b29b      	uxth	r3, r3
 8004908:	b2db      	uxtb	r3, r3
 800490a:	f023 0303 	bic.w	r3, r3, #3
 800490e:	773b      	strb	r3, [r7, #28]
            	   blue	= bc<<3;
 8004910:	88bb      	ldrh	r3, [r7, #4]
 8004912:	b2db      	uxtb	r3, r3
 8004914:	00db      	lsls	r3, r3, #3
 8004916:	76fb      	strb	r3, [r7, #27]
 8004918:	e028      	b.n	800496c <LCD9488_GUI_Draw_Char+0x240>
 800491a:	bf00      	nop
 800491c:	20008aa0 	.word	0x20008aa0
 8004920:	20008a04 	.word	0x20008a04
 8004924:	20008a15 	.word	0x20008a15
 8004928:	20008a10 	.word	0x20008a10
 800492c:	20009110 	.word	0x20009110
 8004930:	20008a14 	.word	0x20008a14
 8004934:	20008b38 	.word	0x20008b38
 8004938:	20008978 	.word	0x20008978
 800493c:	20008a16 	.word	0x20008a16
 8004940:	20008aa1 	.word	0x20008aa1
 8004944:	2000034c 	.word	0x2000034c
               }
               else																		// точка изображения символа
               {
                  	red		= (fc>>8)&0xF8;
 8004948:	88fb      	ldrh	r3, [r7, #6]
 800494a:	0a1b      	lsrs	r3, r3, #8
 800494c:	b29b      	uxth	r3, r3
 800494e:	b2db      	uxtb	r3, r3
 8004950:	f023 0307 	bic.w	r3, r3, #7
 8004954:	777b      	strb	r3, [r7, #29]
                  	green 	= (fc>>3)&0xFC;
 8004956:	88fb      	ldrh	r3, [r7, #6]
 8004958:	08db      	lsrs	r3, r3, #3
 800495a:	b29b      	uxth	r3, r3
 800495c:	b2db      	uxtb	r3, r3
 800495e:	f023 0303 	bic.w	r3, r3, #3
 8004962:	773b      	strb	r3, [r7, #28]
                  	blue	= fc<<3;
 8004964:	88fb      	ldrh	r3, [r7, #6]
 8004966:	b2db      	uxtb	r3, r3
 8004968:	00db      	lsls	r3, r3, #3
 800496a:	76fb      	strb	r3, [r7, #27]
               }
               // Пишет компонеты цветов для текущей точик в символе
               LCD9488_CS_CLR;
 800496c:	2200      	movs	r2, #0
 800496e:	2104      	movs	r1, #4
 8004970:	4838      	ldr	r0, [pc, #224]	; (8004a54 <LCD9488_GUI_Draw_Char+0x328>)
 8004972:	f003 fba2 	bl	80080ba <HAL_GPIO_WritePin>
               LCD9488_RS_SET;
 8004976:	2201      	movs	r2, #1
 8004978:	2101      	movs	r1, #1
 800497a:	4836      	ldr	r0, [pc, #216]	; (8004a54 <LCD9488_GUI_Draw_Char+0x328>)
 800497c:	f003 fb9d 	bl	80080ba <HAL_GPIO_WritePin>
               while ( !( LCD_SPI.Instance->SR & SPI_SR_TXE ) );
 8004980:	bf00      	nop
 8004982:	4b35      	ldr	r3, [pc, #212]	; (8004a58 <LCD9488_GUI_Draw_Char+0x32c>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	f003 0302 	and.w	r3, r3, #2
 800498c:	2b00      	cmp	r3, #0
 800498e:	d0f8      	beq.n	8004982 <LCD9488_GUI_Draw_Char+0x256>
               	   LCD_SPI.Instance->DR = red;
 8004990:	4b31      	ldr	r3, [pc, #196]	; (8004a58 <LCD9488_GUI_Draw_Char+0x32c>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	7f7a      	ldrb	r2, [r7, #29]
 8004996:	60da      	str	r2, [r3, #12]
               while ( !( LCD_SPI.Instance->SR & SPI_SR_TXE ) );
 8004998:	bf00      	nop
 800499a:	4b2f      	ldr	r3, [pc, #188]	; (8004a58 <LCD9488_GUI_Draw_Char+0x32c>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f003 0302 	and.w	r3, r3, #2
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d0f8      	beq.n	800499a <LCD9488_GUI_Draw_Char+0x26e>
               	   LCD_SPI.Instance->DR = green;
 80049a8:	4b2b      	ldr	r3, [pc, #172]	; (8004a58 <LCD9488_GUI_Draw_Char+0x32c>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	7f3a      	ldrb	r2, [r7, #28]
 80049ae:	60da      	str	r2, [r3, #12]
               while ( !( LCD_SPI.Instance->SR & SPI_SR_TXE ) );
 80049b0:	bf00      	nop
 80049b2:	4b29      	ldr	r3, [pc, #164]	; (8004a58 <LCD9488_GUI_Draw_Char+0x32c>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	f003 0302 	and.w	r3, r3, #2
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d0f8      	beq.n	80049b2 <LCD9488_GUI_Draw_Char+0x286>
               	   LCD_SPI.Instance->DR = blue;
 80049c0:	4b25      	ldr	r3, [pc, #148]	; (8004a58 <LCD9488_GUI_Draw_Char+0x32c>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	7efa      	ldrb	r2, [r7, #27]
 80049c6:	60da      	str	r2, [r3, #12]
               while ( !( LCD_SPI.Instance->SR & SPI_SR_TXE ) );
 80049c8:	bf00      	nop
 80049ca:	4b23      	ldr	r3, [pc, #140]	; (8004a58 <LCD9488_GUI_Draw_Char+0x32c>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f003 0302 	and.w	r3, r3, #2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d0f8      	beq.n	80049ca <LCD9488_GUI_Draw_Char+0x29e>

               LCD9488_CS_SET;
 80049d8:	2201      	movs	r2, #1
 80049da:	2104      	movs	r1, #4
 80049dc:	481d      	ldr	r0, [pc, #116]	; (8004a54 <LCD9488_GUI_Draw_Char+0x328>)
 80049de:	f003 fb6c 	bl	80080ba <HAL_GPIO_WritePin>
           for (uint8_t cur_x = 0; cur_x < LCD9488_CurrentFont_PixHoriz; cur_x++)		// перебор по горизонтали
 80049e2:	7e7b      	ldrb	r3, [r7, #25]
 80049e4:	3301      	adds	r3, #1
 80049e6:	767b      	strb	r3, [r7, #25]
 80049e8:	4b1c      	ldr	r3, [pc, #112]	; (8004a5c <LCD9488_GUI_Draw_Char+0x330>)
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	7e7a      	ldrb	r2, [r7, #25]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	f4ff af65 	bcc.w	80048be <LCD9488_GUI_Draw_Char+0x192>
        for (uint8_t cur_y = 0; cur_y < LCD9488_CurrentFont_PixVert; cur_y++)			// перебор по вертикали
 80049f4:	7ebb      	ldrb	r3, [r7, #26]
 80049f6:	3301      	adds	r3, #1
 80049f8:	76bb      	strb	r3, [r7, #26]
 80049fa:	4b19      	ldr	r3, [pc, #100]	; (8004a60 <LCD9488_GUI_Draw_Char+0x334>)
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	7eba      	ldrb	r2, [r7, #26]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	f4ff af59 	bcc.w	80048b8 <LCD9488_GUI_Draw_Char+0x18c>
           }
       }
       LCD9488_GUI_SetWindows(0,0,LCD9488_DEV.Width-1,LCD9488_DEV.Height-1);
 8004a06:	4b17      	ldr	r3, [pc, #92]	; (8004a64 <LCD9488_GUI_Draw_Char+0x338>)
 8004a08:	881b      	ldrh	r3, [r3, #0]
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	4b15      	ldr	r3, [pc, #84]	; (8004a64 <LCD9488_GUI_Draw_Char+0x338>)
 8004a10:	885b      	ldrh	r3, [r3, #2]
 8004a12:	3b01      	subs	r3, #1
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	2100      	movs	r1, #0
 8004a18:	2000      	movs	r0, #0
 8004a1a:	f7ff fd6b 	bl	80044f4 <LCD9488_GUI_SetWindows>
    }

    // Сдвигаем позицию (char_x, char_y) для печати следующего символа
    if ((cur_width + 2) < LCD9488_CurrentFont_PixHoriz)
 8004a1e:	7cfb      	ldrb	r3, [r7, #19]
 8004a20:	3302      	adds	r3, #2
 8004a22:	4a0e      	ldr	r2, [pc, #56]	; (8004a5c <LCD9488_GUI_Draw_Char+0x330>)
 8004a24:	7812      	ldrb	r2, [r2, #0]
 8004a26:	4293      	cmp	r3, r2
 8004a28:	da07      	bge.n	8004a3a <LCD9488_GUI_Draw_Char+0x30e>
    {
        char_x = char_x + cur_width + 2;
 8004a2a:	7cfa      	ldrb	r2, [r7, #19]
 8004a2c:	4b0e      	ldr	r3, [pc, #56]	; (8004a68 <LCD9488_GUI_Draw_Char+0x33c>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4413      	add	r3, r2
 8004a32:	3302      	adds	r3, #2
 8004a34:	4a0c      	ldr	r2, [pc, #48]	; (8004a68 <LCD9488_GUI_Draw_Char+0x33c>)
 8004a36:	6013      	str	r3, [r2, #0]
 8004a38:	e009      	b.n	8004a4e <LCD9488_GUI_Draw_Char+0x322>
    }
    else
    {
    	char_x = char_x + LCD9488_CurrentFont_PixHoriz;
 8004a3a:	4b08      	ldr	r3, [pc, #32]	; (8004a5c <LCD9488_GUI_Draw_Char+0x330>)
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	461a      	mov	r2, r3
 8004a40:	4b09      	ldr	r3, [pc, #36]	; (8004a68 <LCD9488_GUI_Draw_Char+0x33c>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4413      	add	r3, r2
 8004a46:	4a08      	ldr	r2, [pc, #32]	; (8004a68 <LCD9488_GUI_Draw_Char+0x33c>)
 8004a48:	6013      	str	r3, [r2, #0]
 8004a4a:	e000      	b.n	8004a4e <LCD9488_GUI_Draw_Char+0x322>
    	return;  																		// работаем только с символами, которые есть в шрифте
 8004a4c:	bf00      	nop
    }
}
 8004a4e:	3724      	adds	r7, #36	; 0x24
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd90      	pop	{r4, r7, pc}
 8004a54:	40020800 	.word	0x40020800
 8004a58:	20008d18 	.word	0x20008d18
 8004a5c:	20008a15 	.word	0x20008a15
 8004a60:	20008a14 	.word	0x20008a14
 8004a64:	20009110 	.word	0x20009110
 8004a68:	20008a10 	.word	0x20008a10

08004a6c <LCD9488_GUI_Draw_StringColor>:
        p++;
    }
}
//=======================================================================================
void LCD9488_GUI_Draw_StringColor(uint16_t x, uint16_t y, char* str, unsigned char* font, uint16_t fontcolor, uint16_t bgcolor, ADrawType Overlying)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b086      	sub	sp, #24
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60ba      	str	r2, [r7, #8]
 8004a74:	607b      	str	r3, [r7, #4]
 8004a76:	4603      	mov	r3, r0
 8004a78:	81fb      	strh	r3, [r7, #14]
 8004a7a:	460b      	mov	r3, r1
 8004a7c:	81bb      	strh	r3, [r7, #12]
	uint16_t x0 = x;
 8004a7e:	89fb      	ldrh	r3, [r7, #14]
 8004a80:	82fb      	strh	r3, [r7, #22]

  	LCD9488_GUI_SetFont(font, fontcolor, bgcolor);
 8004a82:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004a84:	8c3b      	ldrh	r3, [r7, #32]
 8004a86:	4619      	mov	r1, r3
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f7ff fdf1 	bl	8004670 <LCD9488_GUI_SetFont>
  	LCD9488_GUI_GotoXY(x, y);
 8004a8e:	89ba      	ldrh	r2, [r7, #12]
 8004a90:	89fb      	ldrh	r3, [r7, #14]
 8004a92:	4611      	mov	r1, r2
 8004a94:	4618      	mov	r0, r3
 8004a96:	f7ff fe31 	bl	80046fc <LCD9488_GUI_GotoXY>
    while(*str != 0)
 8004a9a:	e030      	b.n	8004afe <LCD9488_GUI_Draw_StringColor+0x92>
    {
		if( x > (LCD9488_DEV.Width - LCD9488_CurrentFont_PixHoriz/2) || y > (LCD9488_DEV.Height - LCD9488_CurrentFont_PixVert) )
 8004a9c:	89fa      	ldrh	r2, [r7, #14]
 8004a9e:	4b1c      	ldr	r3, [pc, #112]	; (8004b10 <LCD9488_GUI_Draw_StringColor+0xa4>)
 8004aa0:	881b      	ldrh	r3, [r3, #0]
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	4b1b      	ldr	r3, [pc, #108]	; (8004b14 <LCD9488_GUI_Draw_StringColor+0xa8>)
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	085b      	lsrs	r3, r3, #1
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	1acb      	subs	r3, r1, r3
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	dc2a      	bgt.n	8004b08 <LCD9488_GUI_Draw_StringColor+0x9c>
 8004ab2:	89ba      	ldrh	r2, [r7, #12]
 8004ab4:	4b16      	ldr	r3, [pc, #88]	; (8004b10 <LCD9488_GUI_Draw_StringColor+0xa4>)
 8004ab6:	885b      	ldrh	r3, [r3, #2]
 8004ab8:	4619      	mov	r1, r3
 8004aba:	4b17      	ldr	r3, [pc, #92]	; (8004b18 <LCD9488_GUI_Draw_StringColor+0xac>)
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	1acb      	subs	r3, r1, r3
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	dc21      	bgt.n	8004b08 <LCD9488_GUI_Draw_StringColor+0x9c>
			return;

		if(*str == 0x0D)															// конец строки, перевод на новую строку
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	2b0d      	cmp	r3, #13
 8004aca:	d10b      	bne.n	8004ae4 <LCD9488_GUI_Draw_StringColor+0x78>
        {
            y = y + LCD9488_CurrentFont_PixVert;
 8004acc:	4b12      	ldr	r3, [pc, #72]	; (8004b18 <LCD9488_GUI_Draw_StringColor+0xac>)
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	b29a      	uxth	r2, r3
 8004ad2:	89bb      	ldrh	r3, [r7, #12]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	81bb      	strh	r3, [r7, #12]
			x = x0;
 8004ad8:	8afb      	ldrh	r3, [r7, #22]
 8004ada:	81fb      	strh	r3, [r7, #14]
            str++;
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	3301      	adds	r3, #1
 8004ae0:	60bb      	str	r3, [r7, #8]
 8004ae2:	e009      	b.n	8004af8 <LCD9488_GUI_Draw_StringColor+0x8c>
        }
        else
		{
        	LCD9488_GUI_Draw_Char(LCD9488_Point_Color,LCD9488_Back_Color,*str, Overlying);
 8004ae4:	4b0d      	ldr	r3, [pc, #52]	; (8004b1c <LCD9488_GUI_Draw_StringColor+0xb0>)
 8004ae6:	8818      	ldrh	r0, [r3, #0]
 8004ae8:	4b0d      	ldr	r3, [pc, #52]	; (8004b20 <LCD9488_GUI_Draw_StringColor+0xb4>)
 8004aea:	8819      	ldrh	r1, [r3, #0]
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	781a      	ldrb	r2, [r3, #0]
 8004af0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004af4:	f7ff fe1a 	bl	800472c <LCD9488_GUI_Draw_Char>
		}
		str++;
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	3301      	adds	r3, #1
 8004afc:	60bb      	str	r3, [r7, #8]
    while(*str != 0)
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d1ca      	bne.n	8004a9c <LCD9488_GUI_Draw_StringColor+0x30>
 8004b06:	e000      	b.n	8004b0a <LCD9488_GUI_Draw_StringColor+0x9e>
			return;
 8004b08:	bf00      	nop
    }
}
 8004b0a:	3718      	adds	r7, #24
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	20009110 	.word	0x20009110
 8004b14:	20008a15 	.word	0x20008a15
 8004b18:	20008a14 	.word	0x20008a14
 8004b1c:	2000034c 	.word	0x2000034c
 8004b20:	20000004 	.word	0x20000004

08004b24 <hist_erase_older>:
#endif

//*****************************************************************************
// remove older message from ring buffer
static void hist_erase_older (ring_history_t * pThis)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b085      	sub	sp, #20
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
	int new_pos = pThis->begin + pThis->ring_buf [pThis->begin] + 1;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004b34:	6879      	ldr	r1, [r7, #4]
 8004b36:	5c8a      	ldrb	r2, [r1, r2]
 8004b38:	4413      	add	r3, r2
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	60fb      	str	r3, [r7, #12]
	if (new_pos >= _RING_HISTORY_LEN)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2b3f      	cmp	r3, #63	; 0x3f
 8004b42:	dd02      	ble.n	8004b4a <hist_erase_older+0x26>
		new_pos = new_pos - _RING_HISTORY_LEN;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	3b40      	subs	r3, #64	; 0x40
 8004b48:	60fb      	str	r3, [r7, #12]
	
	pThis->begin = new_pos;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	68fa      	ldr	r2, [r7, #12]
 8004b4e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004b50:	bf00      	nop
 8004b52:	3714      	adds	r7, #20
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bc80      	pop	{r7}
 8004b58:	4770      	bx	lr

08004b5a <hist_is_space_for_new>:

//*****************************************************************************
// check space for new line, remove older while not space
static int hist_is_space_for_new (ring_history_t * pThis, int len)
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	b083      	sub	sp, #12
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
 8004b62:	6039      	str	r1, [r7, #0]
	if (pThis->ring_buf [pThis->begin] == 0)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	5cd3      	ldrb	r3, [r2, r3]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d101      	bne.n	8004b74 <hist_is_space_for_new+0x1a>
		return true;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e01e      	b.n	8004bb2 <hist_is_space_for_new+0x58>
	if (pThis->end >= pThis->begin) {
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	db0c      	blt.n	8004b9a <hist_is_space_for_new+0x40>
		if (_RING_HISTORY_LEN - pThis->end + pThis->begin - 1 > len)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b84:	f1c3 0240 	rsb	r2, r3, #64	; 0x40
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8c:	4413      	add	r3, r2
 8004b8e:	3b01      	subs	r3, #1
 8004b90:	683a      	ldr	r2, [r7, #0]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	da0c      	bge.n	8004bb0 <hist_is_space_for_new+0x56>
			return true;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e00b      	b.n	8004bb2 <hist_is_space_for_new+0x58>
	}	else {
		if (pThis->begin - pThis->end - 1> len)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	3b01      	subs	r3, #1
 8004ba6:	683a      	ldr	r2, [r7, #0]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	da01      	bge.n	8004bb0 <hist_is_space_for_new+0x56>
			return true;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e000      	b.n	8004bb2 <hist_is_space_for_new+0x58>
	}
	return false;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	370c      	adds	r7, #12
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bc80      	pop	{r7}
 8004bba:	4770      	bx	lr

08004bbc <hist_save_line>:

//*****************************************************************************
// put line to ring buffer
static void hist_save_line (ring_history_t * pThis, char * line, int len)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b086      	sub	sp, #24
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	607a      	str	r2, [r7, #4]
	if (len > _RING_HISTORY_LEN - 2)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2b3e      	cmp	r3, #62	; 0x3e
 8004bcc:	dc61      	bgt.n	8004c92 <hist_save_line+0xd6>
		return;
	while (!hist_is_space_for_new (pThis, len)) {
 8004bce:	e002      	b.n	8004bd6 <hist_save_line+0x1a>
		hist_erase_older (pThis);
 8004bd0:	68f8      	ldr	r0, [r7, #12]
 8004bd2:	f7ff ffa7 	bl	8004b24 <hist_erase_older>
	while (!hist_is_space_for_new (pThis, len)) {
 8004bd6:	6879      	ldr	r1, [r7, #4]
 8004bd8:	68f8      	ldr	r0, [r7, #12]
 8004bda:	f7ff ffbe 	bl	8004b5a <hist_is_space_for_new>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d0f5      	beq.n	8004bd0 <hist_save_line+0x14>
	}
	// if it's first line
	if (pThis->ring_buf [pThis->begin] == 0) 
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be8:	68fa      	ldr	r2, [r7, #12]
 8004bea:	5cd3      	ldrb	r3, [r2, r3]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d105      	bne.n	8004bfc <hist_save_line+0x40>
		pThis->ring_buf [pThis->begin] = len;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	b2d1      	uxtb	r1, r2
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	54d1      	strb	r1, [r2, r3]
	
	// store line
	if (len < _RING_HISTORY_LEN-pThis->end-1)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c00:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	da0a      	bge.n	8004c20 <hist_save_line+0x64>
		memcpy (pThis->ring_buf + pThis->end + 1, line, len);
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c10:	3301      	adds	r3, #1
 8004c12:	4413      	add	r3, r2
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	68b9      	ldr	r1, [r7, #8]
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f010 f93f 	bl	8014e9c <memcpy>
 8004c1e:	e018      	b.n	8004c52 <hist_save_line+0x96>
	else {
		int part_len = _RING_HISTORY_LEN-pThis->end-1;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c24:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8004c28:	617b      	str	r3, [r7, #20]
		memcpy (pThis->ring_buf + pThis->end + 1, line, part_len);
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c30:	3301      	adds	r3, #1
 8004c32:	4413      	add	r3, r2
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	68b9      	ldr	r1, [r7, #8]
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f010 f92f 	bl	8014e9c <memcpy>
		memcpy (pThis->ring_buf, line + part_len, len - part_len);
 8004c3e:	68f8      	ldr	r0, [r7, #12]
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	68ba      	ldr	r2, [r7, #8]
 8004c44:	18d1      	adds	r1, r2, r3
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	f010 f925 	bl	8014e9c <memcpy>
	}
	pThis->ring_buf [pThis->end] = len;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	b2d1      	uxtb	r1, r2
 8004c5a:	68fa      	ldr	r2, [r7, #12]
 8004c5c:	54d1      	strb	r1, [r2, r3]
	pThis->end = pThis->end + len + 1;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4413      	add	r3, r2
 8004c66:	1c5a      	adds	r2, r3, #1
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	645a      	str	r2, [r3, #68]	; 0x44
	if (pThis->end >= _RING_HISTORY_LEN)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c70:	2b3f      	cmp	r3, #63	; 0x3f
 8004c72:	dd05      	ble.n	8004c80 <hist_save_line+0xc4>
		pThis->end -= _RING_HISTORY_LEN;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c78:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	645a      	str	r2, [r3, #68]	; 0x44
	pThis->ring_buf [pThis->end] = 0;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	2100      	movs	r1, #0
 8004c88:	54d1      	strb	r1, [r2, r3]
	pThis->cur = 0;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	649a      	str	r2, [r3, #72]	; 0x48
 8004c90:	e000      	b.n	8004c94 <hist_save_line+0xd8>
		return;
 8004c92:	bf00      	nop
#ifdef _HISTORY_DEBUG
	print_hist (pThis);
#endif
}
 8004c94:	3718      	adds	r7, #24
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}

08004c9a <hist_restore_line>:

//*****************************************************************************
// copy saved line to 'line' and return size of line
static int hist_restore_line (ring_history_t * pThis, char * line, int dir)
{
 8004c9a:	b580      	push	{r7, lr}
 8004c9c:	b08c      	sub	sp, #48	; 0x30
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	60f8      	str	r0, [r7, #12]
 8004ca2:	60b9      	str	r1, [r7, #8]
 8004ca4:	607a      	str	r2, [r7, #4]
	int cnt = 0;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
	// count history record	
	int header = pThis->begin;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cae:	62bb      	str	r3, [r7, #40]	; 0x28
	while (pThis->ring_buf [header] != 0) {
 8004cb0:	e010      	b.n	8004cd4 <hist_restore_line+0x3a>
		header += pThis->ring_buf [header] + 1;
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb6:	4413      	add	r3, r2
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	3301      	adds	r3, #1
 8004cbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cbe:	4413      	add	r3, r2
 8004cc0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (header >= _RING_HISTORY_LEN)
 8004cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc4:	2b3f      	cmp	r3, #63	; 0x3f
 8004cc6:	dd02      	ble.n	8004cce <hist_restore_line+0x34>
			header -= _RING_HISTORY_LEN; 
 8004cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cca:	3b40      	subs	r3, #64	; 0x40
 8004ccc:	62bb      	str	r3, [r7, #40]	; 0x28
		cnt++;
 8004cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (pThis->ring_buf [header] != 0) {
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd8:	4413      	add	r3, r2
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1e8      	bne.n	8004cb2 <hist_restore_line+0x18>
	}

	if (dir == _HIST_UP) {
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d176      	bne.n	8004dd4 <hist_restore_line+0x13a>
		if (cnt >= pThis->cur) {
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cec:	429a      	cmp	r2, r3
 8004cee:	f2c0 80d6 	blt.w	8004e9e <hist_restore_line+0x204>
			int header = pThis->begin;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf6:	627b      	str	r3, [r7, #36]	; 0x24
			int j = 0;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	623b      	str	r3, [r7, #32]
			// found record for 'pThis->cur' index
			while ((pThis->ring_buf [header] != 0) && (cnt - j -1 != pThis->cur)) {
 8004cfc:	e010      	b.n	8004d20 <hist_restore_line+0x86>
				header += pThis->ring_buf [header] + 1;
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d02:	4413      	add	r3, r2
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	3301      	adds	r3, #1
 8004d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d0a:	4413      	add	r3, r2
 8004d0c:	627b      	str	r3, [r7, #36]	; 0x24
				if (header >= _RING_HISTORY_LEN)
 8004d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d10:	2b3f      	cmp	r3, #63	; 0x3f
 8004d12:	dd02      	ble.n	8004d1a <hist_restore_line+0x80>
					header -= _RING_HISTORY_LEN;
 8004d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d16:	3b40      	subs	r3, #64	; 0x40
 8004d18:	627b      	str	r3, [r7, #36]	; 0x24
				j++;
 8004d1a:	6a3b      	ldr	r3, [r7, #32]
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	623b      	str	r3, [r7, #32]
			while ((pThis->ring_buf [header] != 0) && (cnt - j -1 != pThis->cur)) {
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d24:	4413      	add	r3, r2
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d007      	beq.n	8004d3c <hist_restore_line+0xa2>
 8004d2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d2e:	6a3b      	ldr	r3, [r7, #32]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	1e5a      	subs	r2, r3, #1
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d1e0      	bne.n	8004cfe <hist_restore_line+0x64>
			}
			if (pThis->ring_buf[header]) {
 8004d3c:	68fa      	ldr	r2, [r7, #12]
 8004d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d40:	4413      	add	r3, r2
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f000 80aa 	beq.w	8004e9e <hist_restore_line+0x204>
					pThis->cur++;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d4e:	1c5a      	adds	r2, r3, #1
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	649a      	str	r2, [r3, #72]	; 0x48
				// obtain saved line
				if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d58:	4413      	add	r3, r2
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d60:	4413      	add	r3, r2
 8004d62:	2b3f      	cmp	r3, #63	; 0x3f
 8004d64:	dc11      	bgt.n	8004d8a <hist_restore_line+0xf0>
					memset (line, 0, _COMMAND_LINE_LEN);
 8004d66:	2265      	movs	r2, #101	; 0x65
 8004d68:	2100      	movs	r1, #0
 8004d6a:	68b8      	ldr	r0, [r7, #8]
 8004d6c:	f010 f8ba 	bl	8014ee4 <memset>
					memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d74:	3301      	adds	r3, #1
 8004d76:	18d1      	adds	r1, r2, r3
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7c:	4413      	add	r3, r2
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	461a      	mov	r2, r3
 8004d82:	68b8      	ldr	r0, [r7, #8]
 8004d84:	f010 f88a 	bl	8014e9c <memcpy>
 8004d88:	e01f      	b.n	8004dca <hist_restore_line+0x130>
				} else {
					int part0 = _RING_HISTORY_LEN - header - 1;
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8c:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8004d90:	613b      	str	r3, [r7, #16]
					memset (line, 0, _COMMAND_LINE_LEN);
 8004d92:	2265      	movs	r2, #101	; 0x65
 8004d94:	2100      	movs	r1, #0
 8004d96:	68b8      	ldr	r0, [r7, #8]
 8004d98:	f010 f8a4 	bl	8014ee4 <memset>
					memcpy (line, pThis->ring_buf + header + 1, part0);
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da0:	3301      	adds	r3, #1
 8004da2:	4413      	add	r3, r2
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	4619      	mov	r1, r3
 8004da8:	68b8      	ldr	r0, [r7, #8]
 8004daa:	f010 f877 	bl	8014e9c <memcpy>
					memcpy (line + part0, pThis->ring_buf, pThis->ring_buf[header] - part0);
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	68ba      	ldr	r2, [r7, #8]
 8004db2:	18d0      	adds	r0, r2, r3
 8004db4:	68f9      	ldr	r1, [r7, #12]
 8004db6:	68fa      	ldr	r2, [r7, #12]
 8004db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dba:	4413      	add	r3, r2
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	f010 f869 	bl	8014e9c <memcpy>
				}
				return pThis->ring_buf[header];
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dce:	4413      	add	r3, r2
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	e066      	b.n	8004ea2 <hist_restore_line+0x208>
			}
		}
	} else {
		if (pThis->cur > 0) {
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	dd5e      	ble.n	8004e9a <hist_restore_line+0x200>
				pThis->cur--;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004de0:	1e5a      	subs	r2, r3, #1
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	649a      	str	r2, [r3, #72]	; 0x48
			int header = pThis->begin;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dea:	61fb      	str	r3, [r7, #28]
			int j = 0;
 8004dec:	2300      	movs	r3, #0
 8004dee:	61bb      	str	r3, [r7, #24]

			while ((pThis->ring_buf [header] != 0) && (cnt - j != pThis->cur)) {
 8004df0:	e010      	b.n	8004e14 <hist_restore_line+0x17a>
				header += pThis->ring_buf [header] + 1;
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	4413      	add	r3, r2
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	69fa      	ldr	r2, [r7, #28]
 8004dfe:	4413      	add	r3, r2
 8004e00:	61fb      	str	r3, [r7, #28]
				if (header >= _RING_HISTORY_LEN)
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	2b3f      	cmp	r3, #63	; 0x3f
 8004e06:	dd02      	ble.n	8004e0e <hist_restore_line+0x174>
					header -= _RING_HISTORY_LEN;
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	3b40      	subs	r3, #64	; 0x40
 8004e0c:	61fb      	str	r3, [r7, #28]
				j++;
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	3301      	adds	r3, #1
 8004e12:	61bb      	str	r3, [r7, #24]
			while ((pThis->ring_buf [header] != 0) && (cnt - j != pThis->cur)) {
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	4413      	add	r3, r2
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d006      	beq.n	8004e2e <hist_restore_line+0x194>
 8004e20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	1ad2      	subs	r2, r2, r3
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d1e1      	bne.n	8004df2 <hist_restore_line+0x158>
			}
			if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	4413      	add	r3, r2
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	461a      	mov	r2, r3
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	2b3f      	cmp	r3, #63	; 0x3f
 8004e3e:	dc0c      	bgt.n	8004e5a <hist_restore_line+0x1c0>
				memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	3301      	adds	r3, #1
 8004e46:	18d1      	adds	r1, r2, r3
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	461a      	mov	r2, r3
 8004e52:	68b8      	ldr	r0, [r7, #8]
 8004e54:	f010 f822 	bl	8014e9c <memcpy>
 8004e58:	e01a      	b.n	8004e90 <hist_restore_line+0x1f6>
			} else {
				int part0 = _RING_HISTORY_LEN - header - 1;
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8004e60:	617b      	str	r3, [r7, #20]
				memcpy (line, pThis->ring_buf + header + 1, part0);
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	3301      	adds	r3, #1
 8004e68:	4413      	add	r3, r2
 8004e6a:	697a      	ldr	r2, [r7, #20]
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	68b8      	ldr	r0, [r7, #8]
 8004e70:	f010 f814 	bl	8014e9c <memcpy>
				memcpy (line + part0, pThis->ring_buf, pThis->ring_buf[header] - part0);
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	68ba      	ldr	r2, [r7, #8]
 8004e78:	18d0      	adds	r0, r2, r3
 8004e7a:	68f9      	ldr	r1, [r7, #12]
 8004e7c:	68fa      	ldr	r2, [r7, #12]
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	4413      	add	r3, r2
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	461a      	mov	r2, r3
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	f010 f806 	bl	8014e9c <memcpy>
			}
			return pThis->ring_buf[header];
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	4413      	add	r3, r2
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	e003      	b.n	8004ea2 <hist_restore_line+0x208>
		} else {
			/* empty line */
			return 0;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	e001      	b.n	8004ea2 <hist_restore_line+0x208>
		}
	}
	return -1;
 8004e9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3730      	adds	r7, #48	; 0x30
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}

08004eaa <split>:


//*****************************************************************************
// split cmdline to tkn array and return nmb of token
static int split (microrl_t * pThis, int limit, char const ** tkn_arr)
{
 8004eaa:	b480      	push	{r7}
 8004eac:	b087      	sub	sp, #28
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	60f8      	str	r0, [r7, #12]
 8004eb2:	60b9      	str	r1, [r7, #8]
 8004eb4:	607a      	str	r2, [r7, #4]
	int i = 0;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	617b      	str	r3, [r7, #20]
	int ind = 0;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	613b      	str	r3, [r7, #16]
	while (1) {
		// go to the first whitespace (zerro for us)
		while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
 8004ebe:	e002      	b.n	8004ec6 <split+0x1c>
			ind++;
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	613b      	str	r3, [r7, #16]
		while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	4413      	add	r3, r2
 8004ecc:	3354      	adds	r3, #84	; 0x54
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d103      	bne.n	8004edc <split+0x32>
 8004ed4:	693a      	ldr	r2, [r7, #16]
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	dbf1      	blt.n	8004ec0 <split+0x16>
		}
		if (!(ind < limit)) return i;
 8004edc:	693a      	ldr	r2, [r7, #16]
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	db01      	blt.n	8004ee8 <split+0x3e>
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	e024      	b.n	8004f32 <split+0x88>
		tkn_arr[i++] = pThis->cmdline + ind;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8004eee:	693a      	ldr	r2, [r7, #16]
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	1c58      	adds	r0, r3, #1
 8004ef4:	6178      	str	r0, [r7, #20]
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	4403      	add	r3, r0
 8004efc:	440a      	add	r2, r1
 8004efe:	601a      	str	r2, [r3, #0]
		if (i >= _COMMAND_TOKEN_NMB) {
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	2b07      	cmp	r3, #7
 8004f04:	dd05      	ble.n	8004f12 <split+0x68>
			return -1;
 8004f06:	f04f 33ff 	mov.w	r3, #4294967295
 8004f0a:	e012      	b.n	8004f32 <split+0x88>
		}
		// go to the first NOT whitespace (not zerro for us)
		while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
			ind++;
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	3301      	adds	r3, #1
 8004f10:	613b      	str	r3, [r7, #16]
		while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	4413      	add	r3, r2
 8004f18:	3354      	adds	r3, #84	; 0x54
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d003      	beq.n	8004f28 <split+0x7e>
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	dbf1      	blt.n	8004f0c <split+0x62>
		}
		if (!(ind < limit)) return i;
 8004f28:	693a      	ldr	r2, [r7, #16]
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	dbca      	blt.n	8004ec6 <split+0x1c>
 8004f30:	697b      	ldr	r3, [r7, #20]
	}
	return i;
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	371c      	adds	r7, #28
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bc80      	pop	{r7}
 8004f3a:	4770      	bx	lr

08004f3c <print_prompt>:


//*****************************************************************************
inline static void print_prompt (microrl_t * pThis)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b082      	sub	sp, #8
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
	pThis->print (pThis->prompt_str);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004f4e:	4610      	mov	r0, r2
 8004f50:	4798      	blx	r3
}
 8004f52:	bf00      	nop
 8004f54:	3708      	adds	r7, #8
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
	...

08004f5c <terminal_backspace>:

//*****************************************************************************
inline static void terminal_backspace (microrl_t * pThis)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b082      	sub	sp, #8
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
	if (ExchangeStruct.TerminalFormat != TERMINALFORMAT_HUMAN)
 8004f64:	4b09      	ldr	r3, [pc, #36]	; (8004f8c <terminal_backspace+0x30>)
 8004f66:	7b5b      	ldrb	r3, [r3, #13]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d005      	beq.n	8004f78 <terminal_backspace+0x1c>
	{
		pThis->print (ENDL);    // new line
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8004f72:	4807      	ldr	r0, [pc, #28]	; (8004f90 <terminal_backspace+0x34>)
 8004f74:	4798      	blx	r3
	else
	{
		pThis->print ("\033[D \033[D");
	}

}
 8004f76:	e004      	b.n	8004f82 <terminal_backspace+0x26>
		pThis->print ("\033[D \033[D");
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8004f7e:	4805      	ldr	r0, [pc, #20]	; (8004f94 <terminal_backspace+0x38>)
 8004f80:	4798      	blx	r3
}
 8004f82:	bf00      	nop
 8004f84:	3708      	adds	r7, #8
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	20008c18 	.word	0x20008c18
 8004f90:	08019e08 	.word	0x08019e08
 8004f94:	08019e0c 	.word	0x08019e0c

08004f98 <terminal_newline>:

//*****************************************************************************
inline static void terminal_newline (microrl_t * pThis)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
	pThis->print (ENDL);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8004fa6:	4803      	ldr	r0, [pc, #12]	; (8004fb4 <terminal_newline+0x1c>)
 8004fa8:	4798      	blx	r3
}
 8004faa:	bf00      	nop
 8004fac:	3708      	adds	r7, #8
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	08019e08 	.word	0x08019e08

08004fb8 <u16bit_to_str>:
//*****************************************************************************
// convert 16 bit value to string
// 0 value not supported!!! just make empty string
// Returns pointer to a buffer tail
static char *u16bit_to_str (unsigned int nmb, char * buf)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b087      	sub	sp, #28
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
	char tmp_str [6] = {0,};
 8004fc2:	f107 0308 	add.w	r3, r7, #8
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	601a      	str	r2, [r3, #0]
 8004fca:	809a      	strh	r2, [r3, #4]
	int i = 0, j;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	617b      	str	r3, [r7, #20]
	if (nmb <= 0xFFFF) {
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fd6:	d235      	bcs.n	8005044 <u16bit_to_str+0x8c>
		while (nmb > 0) {
 8004fd8:	e01a      	b.n	8005010 <u16bit_to_str+0x58>
			tmp_str[i++] = (nmb % 10) + '0';
 8004fda:	6879      	ldr	r1, [r7, #4]
 8004fdc:	4b1e      	ldr	r3, [pc, #120]	; (8005058 <u16bit_to_str+0xa0>)
 8004fde:	fba3 2301 	umull	r2, r3, r3, r1
 8004fe2:	08da      	lsrs	r2, r3, #3
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	4413      	add	r3, r2
 8004fea:	005b      	lsls	r3, r3, #1
 8004fec:	1aca      	subs	r2, r1, r3
 8004fee:	b2d2      	uxtb	r2, r2
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	1c59      	adds	r1, r3, #1
 8004ff4:	6179      	str	r1, [r7, #20]
 8004ff6:	3230      	adds	r2, #48	; 0x30
 8004ff8:	b2d2      	uxtb	r2, r2
 8004ffa:	f107 0118 	add.w	r1, r7, #24
 8004ffe:	440b      	add	r3, r1
 8005000:	f803 2c10 	strb.w	r2, [r3, #-16]
			nmb /=10;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a14      	ldr	r2, [pc, #80]	; (8005058 <u16bit_to_str+0xa0>)
 8005008:	fba2 2303 	umull	r2, r3, r2, r3
 800500c:	08db      	lsrs	r3, r3, #3
 800500e:	607b      	str	r3, [r7, #4]
		while (nmb > 0) {
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1e1      	bne.n	8004fda <u16bit_to_str+0x22>
		}
		for (j = 0; j < i; ++j)
 8005016:	2300      	movs	r3, #0
 8005018:	613b      	str	r3, [r7, #16]
 800501a:	e00f      	b.n	800503c <u16bit_to_str+0x84>
			*(buf++) = tmp_str [i-j-1];
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	1e5a      	subs	r2, r3, #1
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	1c59      	adds	r1, r3, #1
 8005028:	6039      	str	r1, [r7, #0]
 800502a:	f107 0118 	add.w	r1, r7, #24
 800502e:	440a      	add	r2, r1
 8005030:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8005034:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < i; ++j)
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	3301      	adds	r3, #1
 800503a:	613b      	str	r3, [r7, #16]
 800503c:	693a      	ldr	r2, [r7, #16]
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	429a      	cmp	r2, r3
 8005042:	dbeb      	blt.n	800501c <u16bit_to_str+0x64>
	}
	*buf = '\0';
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	2200      	movs	r2, #0
 8005048:	701a      	strb	r2, [r3, #0]
	return buf;
 800504a:	683b      	ldr	r3, [r7, #0]
}
 800504c:	4618      	mov	r0, r3
 800504e:	371c      	adds	r7, #28
 8005050:	46bd      	mov	sp, r7
 8005052:	bc80      	pop	{r7}
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	cccccccd 	.word	0xcccccccd

0800505c <terminal_move_cursor>:
#endif

//*****************************************************************************
// set cursor at position from begin cmdline (after prompt) + offset
static void terminal_move_cursor (microrl_t * pThis, int offset)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b088      	sub	sp, #32
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
	if (ExchangeStruct.TerminalFormat != TERMINALFORMAT_HUMAN)
 8005066:	4b26      	ldr	r3, [pc, #152]	; (8005100 <terminal_move_cursor+0xa4>)
 8005068:	7b5b      	ldrb	r3, [r3, #13]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d005      	beq.n	800507a <terminal_move_cursor+0x1e>
	{
		pThis->print (ENDL);    // new line
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8005074:	4823      	ldr	r0, [pc, #140]	; (8005104 <terminal_move_cursor+0xa8>)
 8005076:	4798      	blx	r3
 8005078:	e03f      	b.n	80050fa <terminal_move_cursor+0x9e>
	}
	else
	{
		char str[16] = {0,};
 800507a:	f107 030c 	add.w	r3, r7, #12
 800507e:	2200      	movs	r2, #0
 8005080:	601a      	str	r2, [r3, #0]
 8005082:	605a      	str	r2, [r3, #4]
 8005084:	609a      	str	r2, [r3, #8]
 8005086:	60da      	str	r2, [r3, #12]
			} else if (offset < 0) {
				snprintf (str, 16, "\033[%dD", -(offset));
			}
		#else
			char *endstr;
			strcpy (str, "\033[");
 8005088:	f107 030c 	add.w	r3, r7, #12
 800508c:	4a1e      	ldr	r2, [pc, #120]	; (8005108 <terminal_move_cursor+0xac>)
 800508e:	6812      	ldr	r2, [r2, #0]
 8005090:	4611      	mov	r1, r2
 8005092:	8019      	strh	r1, [r3, #0]
 8005094:	3302      	adds	r3, #2
 8005096:	0c12      	lsrs	r2, r2, #16
 8005098:	701a      	strb	r2, [r3, #0]
			if (offset > 0) {
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	2b00      	cmp	r3, #0
 800509e:	dd0f      	ble.n	80050c0 <terminal_move_cursor+0x64>
				endstr = u16bit_to_str (offset, str+2);
 80050a0:	683a      	ldr	r2, [r7, #0]
 80050a2:	f107 030c 	add.w	r3, r7, #12
 80050a6:	3302      	adds	r3, #2
 80050a8:	4619      	mov	r1, r3
 80050aa:	4610      	mov	r0, r2
 80050ac:	f7ff ff84 	bl	8004fb8 <u16bit_to_str>
 80050b0:	61f8      	str	r0, [r7, #28]
				strcpy (endstr, "C");
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	4915      	ldr	r1, [pc, #84]	; (800510c <terminal_move_cursor+0xb0>)
 80050b6:	461a      	mov	r2, r3
 80050b8:	460b      	mov	r3, r1
 80050ba:	881b      	ldrh	r3, [r3, #0]
 80050bc:	8013      	strh	r3, [r2, #0]
 80050be:	e013      	b.n	80050e8 <terminal_move_cursor+0x8c>
			} else if (offset < 0) {
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	da18      	bge.n	80050f8 <terminal_move_cursor+0x9c>
				endstr = u16bit_to_str (-(offset), str+2);
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	425b      	negs	r3, r3
 80050ca:	461a      	mov	r2, r3
 80050cc:	f107 030c 	add.w	r3, r7, #12
 80050d0:	3302      	adds	r3, #2
 80050d2:	4619      	mov	r1, r3
 80050d4:	4610      	mov	r0, r2
 80050d6:	f7ff ff6f 	bl	8004fb8 <u16bit_to_str>
 80050da:	61f8      	str	r0, [r7, #28]
				strcpy (endstr, "D");
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	490c      	ldr	r1, [pc, #48]	; (8005110 <terminal_move_cursor+0xb4>)
 80050e0:	461a      	mov	r2, r3
 80050e2:	460b      	mov	r3, r1
 80050e4:	881b      	ldrh	r3, [r3, #0]
 80050e6:	8013      	strh	r3, [r2, #0]
			} else
				return;
		#endif
			pThis->print (str);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80050ee:	f107 020c 	add.w	r2, r7, #12
 80050f2:	4610      	mov	r0, r2
 80050f4:	4798      	blx	r3
 80050f6:	e000      	b.n	80050fa <terminal_move_cursor+0x9e>
				return;
 80050f8:	bf00      	nop
	}
}
 80050fa:	3720      	adds	r7, #32
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	20008c18 	.word	0x20008c18
 8005104:	08019e08 	.word	0x08019e08
 8005108:	08019e14 	.word	0x08019e14
 800510c:	08019e18 	.word	0x08019e18
 8005110:	08019e1c 	.word	0x08019e1c

08005114 <terminal_reset_cursor>:
//*****************************************************************************
static void terminal_reset_cursor (microrl_t * pThis)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b088      	sub	sp, #32
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
	char str[16];
	if (ExchangeStruct.TerminalFormat != TERMINALFORMAT_HUMAN)
 800511c:	4b1b      	ldr	r3, [pc, #108]	; (800518c <terminal_reset_cursor+0x78>)
 800511e:	7b5b      	ldrb	r3, [r3, #13]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d005      	beq.n	8005130 <terminal_reset_cursor+0x1c>
	{
		pThis->print (ENDL);    // new line
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800512a:	4819      	ldr	r0, [pc, #100]	; (8005190 <terminal_reset_cursor+0x7c>)
 800512c:	4798      	blx	r3
			endstr = u16bit_to_str (_PROMPT_LEN, endstr);
			strcpy (endstr, "C");
		#endif
			pThis->print (str);
	}
}
 800512e:	e029      	b.n	8005184 <terminal_reset_cursor+0x70>
			strcpy (str, "\033[");
 8005130:	f107 030c 	add.w	r3, r7, #12
 8005134:	4a17      	ldr	r2, [pc, #92]	; (8005194 <terminal_reset_cursor+0x80>)
 8005136:	6812      	ldr	r2, [r2, #0]
 8005138:	4611      	mov	r1, r2
 800513a:	8019      	strh	r1, [r3, #0]
 800513c:	3302      	adds	r3, #2
 800513e:	0c12      	lsrs	r2, r2, #16
 8005140:	701a      	strb	r2, [r3, #0]
			endstr = u16bit_to_str ( _COMMAND_LINE_LEN + _PROMPT_LEN + 2,str+2);
 8005142:	f107 030c 	add.w	r3, r7, #12
 8005146:	3302      	adds	r3, #2
 8005148:	4619      	mov	r1, r3
 800514a:	206c      	movs	r0, #108	; 0x6c
 800514c:	f7ff ff34 	bl	8004fb8 <u16bit_to_str>
 8005150:	61f8      	str	r0, [r7, #28]
			strcpy (endstr, "D\033["); endstr += 3;
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	4a10      	ldr	r2, [pc, #64]	; (8005198 <terminal_reset_cursor+0x84>)
 8005156:	6810      	ldr	r0, [r2, #0]
 8005158:	6018      	str	r0, [r3, #0]
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	3303      	adds	r3, #3
 800515e:	61fb      	str	r3, [r7, #28]
			endstr = u16bit_to_str (_PROMPT_LEN, endstr);
 8005160:	69f9      	ldr	r1, [r7, #28]
 8005162:	2005      	movs	r0, #5
 8005164:	f7ff ff28 	bl	8004fb8 <u16bit_to_str>
 8005168:	61f8      	str	r0, [r7, #28]
			strcpy (endstr, "C");
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	490b      	ldr	r1, [pc, #44]	; (800519c <terminal_reset_cursor+0x88>)
 800516e:	461a      	mov	r2, r3
 8005170:	460b      	mov	r3, r1
 8005172:	881b      	ldrh	r3, [r3, #0]
 8005174:	8013      	strh	r3, [r2, #0]
			pThis->print (str);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800517c:	f107 020c 	add.w	r2, r7, #12
 8005180:	4610      	mov	r0, r2
 8005182:	4798      	blx	r3
}
 8005184:	bf00      	nop
 8005186:	3720      	adds	r7, #32
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	20008c18 	.word	0x20008c18
 8005190:	08019e08 	.word	0x08019e08
 8005194:	08019e14 	.word	0x08019e14
 8005198:	08019e20 	.word	0x08019e20
 800519c:	08019e18 	.word	0x08019e18

080051a0 <terminal_print_line>:
//*****************************************************************************
// print cmdline to screen, replace '\0' to wihitespace 
static void terminal_print_line (microrl_t * pThis, int pos, int cursor)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b086      	sub	sp, #24
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]
	if (ExchangeStruct.TerminalFormat != TERMINALFORMAT_HUMAN)
 80051ac:	4b22      	ldr	r3, [pc, #136]	; (8005238 <terminal_print_line+0x98>)
 80051ae:	7b5b      	ldrb	r3, [r3, #13]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d005      	beq.n	80051c0 <terminal_print_line+0x20>
	{
		pThis->print (ENDL);    // new line
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80051ba:	4820      	ldr	r0, [pc, #128]	; (800523c <terminal_print_line+0x9c>)
 80051bc:	4798      	blx	r3
 80051be:	e004      	b.n	80051ca <terminal_print_line+0x2a>
	}
	else
	{
		pThis->print ("\033[K");    // delete all from cursor to end
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80051c6:	481e      	ldr	r0, [pc, #120]	; (8005240 <terminal_print_line+0xa0>)
 80051c8:	4798      	blx	r3
	}

	char nch [] = {0,0};
 80051ca:	2300      	movs	r3, #0
 80051cc:	743b      	strb	r3, [r7, #16]
 80051ce:	2300      	movs	r3, #0
 80051d0:	747b      	strb	r3, [r7, #17]
	int i;
	for (i = pos; i < pThis->cmdlen; i++) {
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	617b      	str	r3, [r7, #20]
 80051d6:	e014      	b.n	8005202 <terminal_print_line+0x62>
		nch [0] = pThis->cmdline [i];
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	4413      	add	r3, r2
 80051de:	3354      	adds	r3, #84	; 0x54
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	743b      	strb	r3, [r7, #16]
		if (nch[0] == '\0')
 80051e4:	7c3b      	ldrb	r3, [r7, #16]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d101      	bne.n	80051ee <terminal_print_line+0x4e>
			nch[0] = ' ';
 80051ea:	2320      	movs	r3, #32
 80051ec:	743b      	strb	r3, [r7, #16]
		pThis->print (nch);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80051f4:	f107 0210 	add.w	r2, r7, #16
 80051f8:	4610      	mov	r0, r2
 80051fa:	4798      	blx	r3
	for (i = pos; i < pThis->cmdlen; i++) {
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	3301      	adds	r3, #1
 8005200:	617b      	str	r3, [r7, #20]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005208:	697a      	ldr	r2, [r7, #20]
 800520a:	429a      	cmp	r2, r3
 800520c:	dbe4      	blt.n	80051d8 <terminal_print_line+0x38>
	}
	
	if (ExchangeStruct.TerminalFormat != TERMINALFORMAT_HUMAN)
 800520e:	4b0a      	ldr	r3, [pc, #40]	; (8005238 <terminal_print_line+0x98>)
 8005210:	7b5b      	ldrb	r3, [r3, #13]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d005      	beq.n	8005222 <terminal_print_line+0x82>
	{
		pThis->print (ENDL);    // new line
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800521c:	4807      	ldr	r0, [pc, #28]	; (800523c <terminal_print_line+0x9c>)
 800521e:	4798      	blx	r3
	else
	{
		terminal_reset_cursor (pThis);
		terminal_move_cursor (pThis, cursor);
	}
}
 8005220:	e006      	b.n	8005230 <terminal_print_line+0x90>
		terminal_reset_cursor (pThis);
 8005222:	68f8      	ldr	r0, [r7, #12]
 8005224:	f7ff ff76 	bl	8005114 <terminal_reset_cursor>
		terminal_move_cursor (pThis, cursor);
 8005228:	6879      	ldr	r1, [r7, #4]
 800522a:	68f8      	ldr	r0, [r7, #12]
 800522c:	f7ff ff16 	bl	800505c <terminal_move_cursor>
}
 8005230:	bf00      	nop
 8005232:	3718      	adds	r7, #24
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	20008c18 	.word	0x20008c18
 800523c:	08019e08 	.word	0x08019e08
 8005240:	08019e24 	.word	0x08019e24

08005244 <microrl_init>:
//	terminal_reset_cursor (pThis);
//	terminal_move_cursor (pThis, cursor);
//}

void microrl_init (microrl_t * pThis, void (*print) (const char *)) 
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
	memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	3354      	adds	r3, #84	; 0x54
 8005252:	2265      	movs	r2, #101	; 0x65
 8005254:	2100      	movs	r1, #0
 8005256:	4618      	mov	r0, r3
 8005258:	f00f fe44 	bl	8014ee4 <memset>
#ifdef _USE_HISTORY
	memset(pThis->ring_hist.ring_buf, 0, _RING_HISTORY_LEN);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	3304      	adds	r3, #4
 8005260:	2240      	movs	r2, #64	; 0x40
 8005262:	2100      	movs	r1, #0
 8005264:	4618      	mov	r0, r3
 8005266:	f00f fe3d 	bl	8014ee4 <memset>
	pThis->ring_hist.begin = 0;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	645a      	str	r2, [r3, #68]	; 0x44
	pThis->ring_hist.end = 0;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	649a      	str	r2, [r3, #72]	; 0x48
	pThis->ring_hist.cur = 0;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	pThis->cmdlen =0;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	pThis->cursor = 0;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	pThis->execute = NULL;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	pThis->get_completion = NULL;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
#ifdef _USE_CTLR_C
	pThis->sigint = NULL;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
#endif
	pThis->prompt_str = prompt_default;
 80052a4:	4b09      	ldr	r3, [pc, #36]	; (80052cc <microrl_init+0x88>)
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	651a      	str	r2, [r3, #80]	; 0x50
	pThis->print = print;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	683a      	ldr	r2, [r7, #0]
 80052b0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
#ifdef _ENABLE_INIT_PROMPT
	pThis->print(ENDL);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80052ba:	4805      	ldr	r0, [pc, #20]	; (80052d0 <microrl_init+0x8c>)
 80052bc:	4798      	blx	r3
	print_prompt (pThis);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f7ff fe3c 	bl	8004f3c <print_prompt>
#endif
}
 80052c4:	bf00      	nop
 80052c6:	3708      	adds	r7, #8
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	20000008 	.word	0x20000008
 80052d0:	08019e08 	.word	0x08019e08

080052d4 <microrl_set_complete_callback>:

//*****************************************************************************
void microrl_set_complete_callback (microrl_t * pThis, char ** (*get_completion)(int, const char* const*))
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
	pThis->get_completion = get_completion;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	683a      	ldr	r2, [r7, #0]
 80052e2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 80052e6:	bf00      	nop
 80052e8:	370c      	adds	r7, #12
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bc80      	pop	{r7}
 80052ee:	4770      	bx	lr

080052f0 <microrl_set_execute_callback>:

//*****************************************************************************
void microrl_set_execute_callback (microrl_t * pThis, int (*execute)(int, const char* const*))
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]
	pThis->execute = execute;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	683a      	ldr	r2, [r7, #0]
 80052fe:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
 8005302:	bf00      	nop
 8005304:	370c      	adds	r7, #12
 8005306:	46bd      	mov	sp, r7
 8005308:	bc80      	pop	{r7}
 800530a:	4770      	bx	lr

0800530c <microrl_set_sigint_callback>:
#ifdef _USE_CTLR_C
//*****************************************************************************
void microrl_set_sigint_callback (microrl_t * pThis, void (*sigintf)(void))
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]
	pThis->sigint = sigintf;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	683a      	ldr	r2, [r7, #0]
 800531a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
}
 800531e:	bf00      	nop
 8005320:	370c      	adds	r7, #12
 8005322:	46bd      	mov	sp, r7
 8005324:	bc80      	pop	{r7}
 8005326:	4770      	bx	lr

08005328 <hist_search>:
#endif

#ifdef _USE_ESC_SEQ
static void hist_search (microrl_t * pThis, int dir)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
	int len = hist_restore_line (&pThis->ring_hist, pThis->cmdline, dir);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	1d18      	adds	r0, r3, #4
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	3354      	adds	r3, #84	; 0x54
 800533a:	683a      	ldr	r2, [r7, #0]
 800533c:	4619      	mov	r1, r3
 800533e:	f7ff fcac 	bl	8004c9a <hist_restore_line>
 8005342:	60f8      	str	r0, [r7, #12]
	if (len >= 0) {
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2b00      	cmp	r3, #0
 8005348:	db14      	blt.n	8005374 <hist_search+0x4c>
		pThis->cursor = pThis->cmdlen = len;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		terminal_reset_cursor (pThis);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f7ff fed8 	bl	8005114 <terminal_reset_cursor>
		terminal_print_line (pThis, 0, pThis->cursor);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800536a:	461a      	mov	r2, r3
 800536c:	2100      	movs	r1, #0
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f7ff ff16 	bl	80051a0 <terminal_print_line>
	}
}
 8005374:	bf00      	nop
 8005376:	3710      	adds	r7, #16
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <escape_process>:

//*****************************************************************************
// handling escape sequences
static int escape_process (microrl_t * pThis, char ch)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b082      	sub	sp, #8
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	460b      	mov	r3, r1
 8005386:	70fb      	strb	r3, [r7, #3]
	if (ch == '[') {
 8005388:	78fb      	ldrb	r3, [r7, #3]
 800538a:	2b5b      	cmp	r3, #91	; 0x5b
 800538c:	d104      	bne.n	8005398 <escape_process+0x1c>
		pThis->escape_seq = _ESC_BRACKET;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2201      	movs	r2, #1
 8005392:	701a      	strb	r2, [r3, #0]
		return 0;
 8005394:	2300      	movs	r3, #0
 8005396:	e07b      	b.n	8005490 <escape_process+0x114>
	} else if (pThis->escape_seq == _ESC_BRACKET) {
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	2b01      	cmp	r3, #1
 800539e:	d14f      	bne.n	8005440 <escape_process+0xc4>
		if (ch == 'A') {
 80053a0:	78fb      	ldrb	r3, [r7, #3]
 80053a2:	2b41      	cmp	r3, #65	; 0x41
 80053a4:	d105      	bne.n	80053b2 <escape_process+0x36>
#ifdef _USE_HISTORY
			hist_search (pThis, _HIST_UP);
 80053a6:	2100      	movs	r1, #0
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f7ff ffbd 	bl	8005328 <hist_search>
#endif
			return 1;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e06e      	b.n	8005490 <escape_process+0x114>
		} else if (ch == 'B') {
 80053b2:	78fb      	ldrb	r3, [r7, #3]
 80053b4:	2b42      	cmp	r3, #66	; 0x42
 80053b6:	d105      	bne.n	80053c4 <escape_process+0x48>
#ifdef _USE_HISTORY
			hist_search (pThis, _HIST_DOWN);
 80053b8:	2101      	movs	r1, #1
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f7ff ffb4 	bl	8005328 <hist_search>
#endif
			return 1;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e065      	b.n	8005490 <escape_process+0x114>
		} else if (ch == 'C') {
 80053c4:	78fb      	ldrb	r3, [r7, #3]
 80053c6:	2b43      	cmp	r3, #67	; 0x43
 80053c8:	d114      	bne.n	80053f4 <escape_process+0x78>
			if (pThis->cursor < pThis->cmdlen) {
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80053d6:	429a      	cmp	r2, r3
 80053d8:	da0a      	bge.n	80053f0 <escape_process+0x74>
				terminal_move_cursor (pThis, 1);
 80053da:	2101      	movs	r1, #1
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f7ff fe3d 	bl	800505c <terminal_move_cursor>
				pThis->cursor++;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80053e8:	1c5a      	adds	r2, r3, #1
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			}
			return 1;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e04d      	b.n	8005490 <escape_process+0x114>
		} else if (ch == 'D') {
 80053f4:	78fb      	ldrb	r3, [r7, #3]
 80053f6:	2b44      	cmp	r3, #68	; 0x44
 80053f8:	d112      	bne.n	8005420 <escape_process+0xa4>
			if (pThis->cursor > 0) {
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005400:	2b00      	cmp	r3, #0
 8005402:	dd0b      	ble.n	800541c <escape_process+0xa0>
				terminal_move_cursor (pThis, -1);
 8005404:	f04f 31ff 	mov.w	r1, #4294967295
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f7ff fe27 	bl	800505c <terminal_move_cursor>
				pThis->cursor--;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005414:	1e5a      	subs	r2, r3, #1
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			}
			return 1;
 800541c:	2301      	movs	r3, #1
 800541e:	e037      	b.n	8005490 <escape_process+0x114>
		} else if (ch == '7') {
 8005420:	78fb      	ldrb	r3, [r7, #3]
 8005422:	2b37      	cmp	r3, #55	; 0x37
 8005424:	d104      	bne.n	8005430 <escape_process+0xb4>
			pThis->escape_seq = _ESC_HOME;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2202      	movs	r2, #2
 800542a:	701a      	strb	r2, [r3, #0]
			return 0;
 800542c:	2300      	movs	r3, #0
 800542e:	e02f      	b.n	8005490 <escape_process+0x114>
		} else if (ch == '8') {
 8005430:	78fb      	ldrb	r3, [r7, #3]
 8005432:	2b38      	cmp	r3, #56	; 0x38
 8005434:	d12b      	bne.n	800548e <escape_process+0x112>
			pThis->escape_seq = _ESC_END;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2203      	movs	r2, #3
 800543a:	701a      	strb	r2, [r3, #0]
			return 0;
 800543c:	2300      	movs	r3, #0
 800543e:	e027      	b.n	8005490 <escape_process+0x114>
		} 
	} else if (ch == '~') {
 8005440:	78fb      	ldrb	r3, [r7, #3]
 8005442:	2b7e      	cmp	r3, #126	; 0x7e
 8005444:	d123      	bne.n	800548e <escape_process+0x112>
		if (pThis->escape_seq == _ESC_HOME) {
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	2b02      	cmp	r3, #2
 800544c:	d108      	bne.n	8005460 <escape_process+0xe4>
			terminal_reset_cursor (pThis);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f7ff fe60 	bl	8005114 <terminal_reset_cursor>
			pThis->cursor = 0;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			return 1;
 800545c:	2301      	movs	r3, #1
 800545e:	e017      	b.n	8005490 <escape_process+0x114>
		} else if (pThis->escape_seq == _ESC_END) {
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	2b03      	cmp	r3, #3
 8005466:	d112      	bne.n	800548e <escape_process+0x112>
			terminal_move_cursor (pThis, pThis->cmdlen-pThis->cursor);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	4619      	mov	r1, r3
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f7ff fdef 	bl	800505c <terminal_move_cursor>
			pThis->cursor = pThis->cmdlen;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			return 1;
 800548a:	2301      	movs	r3, #1
 800548c:	e000      	b.n	8005490 <escape_process+0x114>
		}
	}

	/* unknown escape sequence, stop */
	return 1;
 800548e:	2301      	movs	r3, #1
}
 8005490:	4618      	mov	r0, r3
 8005492:	3708      	adds	r7, #8
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <microrl_insert_text>:
#endif

//*****************************************************************************
// insert len char of text at cursor position
static int microrl_insert_text (microrl_t * pThis, char * text, int len)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b086      	sub	sp, #24
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	607a      	str	r2, [r7, #4]
	int i;
	if (pThis->cmdlen + len < _COMMAND_LINE_LEN) {
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4413      	add	r3, r2
 80054ae:	2b64      	cmp	r3, #100	; 0x64
 80054b0:	dc60      	bgt.n	8005574 <microrl_insert_text+0xdc>
		memmove (pThis->cmdline + pThis->cursor + len,
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80054be:	4619      	mov	r1, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	440b      	add	r3, r1
 80054c4:	18d0      	adds	r0, r2, r3
						 pThis->cmdline + pThis->cursor,
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	3354      	adds	r3, #84	; 0x54
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
		memmove (pThis->cmdline + pThis->cursor + len,
 80054d0:	1899      	adds	r1, r3, r2
						 pThis->cmdlen - pThis->cursor);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80054de:	1ad3      	subs	r3, r2, r3
		memmove (pThis->cmdline + pThis->cursor + len,
 80054e0:	461a      	mov	r2, r3
 80054e2:	f00f fce6 	bl	8014eb2 <memmove>
		for (i = 0; i < len; i++) {
 80054e6:	2300      	movs	r3, #0
 80054e8:	617b      	str	r3, [r7, #20]
 80054ea:	e025      	b.n	8005538 <microrl_insert_text+0xa0>
			pThis->cmdline [pThis->cursor + i] = text [i];
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	68ba      	ldr	r2, [r7, #8]
 80054f0:	441a      	add	r2, r3
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	440b      	add	r3, r1
 80054fc:	7811      	ldrb	r1, [r2, #0]
 80054fe:	68fa      	ldr	r2, [r7, #12]
 8005500:	4413      	add	r3, r2
 8005502:	460a      	mov	r2, r1
 8005504:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			if (pThis->cmdline [pThis->cursor + i] == ' ') {
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	4413      	add	r3, r2
 8005512:	68fa      	ldr	r2, [r7, #12]
 8005514:	4413      	add	r3, r2
 8005516:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800551a:	2b20      	cmp	r3, #32
 800551c:	d109      	bne.n	8005532 <microrl_insert_text+0x9a>
				pThis->cmdline [pThis->cursor + i] = 0;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	4413      	add	r3, r2
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	4413      	add	r3, r2
 800552c:	2200      	movs	r2, #0
 800552e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		for (i = 0; i < len; i++) {
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	3301      	adds	r3, #1
 8005536:	617b      	str	r3, [r7, #20]
 8005538:	697a      	ldr	r2, [r7, #20]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	429a      	cmp	r2, r3
 800553e:	dbd5      	blt.n	80054ec <microrl_insert_text+0x54>
			}
		}
		pThis->cursor += len;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	441a      	add	r2, r3
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		pThis->cmdlen += len;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	441a      	add	r2, r3
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		pThis->cmdline [pThis->cmdlen] = '\0';
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	4413      	add	r3, r2
 800556a:	2200      	movs	r2, #0
 800556c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		return true;
 8005570:	2301      	movs	r3, #1
 8005572:	e000      	b.n	8005576 <microrl_insert_text+0xde>
	}
	return false;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3718      	adds	r7, #24
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}

0800557e <microrl_backspace>:

//*****************************************************************************
// remove one char at cursor
static void microrl_backspace (microrl_t * pThis)
{
 800557e:	b580      	push	{r7, lr}
 8005580:	b082      	sub	sp, #8
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
	if (pThis->cursor > 0) {
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800558c:	2b00      	cmp	r3, #0
 800558e:	dd31      	ble.n	80055f4 <microrl_backspace+0x76>
		terminal_backspace (pThis);
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f7ff fce3 	bl	8004f5c <terminal_backspace>
		memmove (pThis->cmdline + pThis->cursor-1,
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80055a2:	3b01      	subs	r3, #1
 80055a4:	18d0      	adds	r0, r2, r3
						 pThis->cmdline + pThis->cursor,
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	3354      	adds	r3, #84	; 0x54
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
		memmove (pThis->cmdline + pThis->cursor-1,
 80055b0:	1899      	adds	r1, r3, r2
						 pThis->cmdlen-pThis->cursor+1);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	3301      	adds	r3, #1
		memmove (pThis->cmdline + pThis->cursor-1,
 80055c2:	461a      	mov	r2, r3
 80055c4:	f00f fc75 	bl	8014eb2 <memmove>
		pThis->cursor--;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80055ce:	1e5a      	subs	r2, r3, #1
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		pThis->cmdline [pThis->cmdlen] = '\0';
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	4413      	add	r3, r2
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		pThis->cmdlen--;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80055ec:	1e5a      	subs	r2, r3, #1
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	}
}
 80055f4:	bf00      	nop
 80055f6:	3708      	adds	r7, #8
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <common_len>:

#ifdef _USE_COMPLETE

//*****************************************************************************
static int common_len (char ** arr)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b085      	sub	sp, #20
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
	int len = 0;
 8005604:	2300      	movs	r3, #0
 8005606:	60fb      	str	r3, [r7, #12]
	int i = 1;
 8005608:	2301      	movs	r3, #1
 800560a:	60bb      	str	r3, [r7, #8]
	while (1) {
		while (arr[i]!=NULL) {
 800560c:	e030      	b.n	8005670 <common_len+0x74>
			if ((arr[i][len] != arr[i-1][len]) || 
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	4413      	add	r3, r2
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	4413      	add	r3, r2
 800561c:	781a      	ldrb	r2, [r3, #0]
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005624:	3b01      	subs	r3, #1
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	6879      	ldr	r1, [r7, #4]
 800562a:	440b      	add	r3, r1
 800562c:	6819      	ldr	r1, [r3, #0]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	440b      	add	r3, r1
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	429a      	cmp	r2, r3
 8005636:	d116      	bne.n	8005666 <common_len+0x6a>
					(arr[i][len] == '\0') || 
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	4413      	add	r3, r2
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	4413      	add	r3, r2
 8005646:	781b      	ldrb	r3, [r3, #0]
			if ((arr[i][len] != arr[i-1][len]) || 
 8005648:	2b00      	cmp	r3, #0
 800564a:	d00c      	beq.n	8005666 <common_len+0x6a>
					(arr[i-1][len]=='\0')) 
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005652:	3b01      	subs	r3, #1
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	4413      	add	r3, r2
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	4413      	add	r3, r2
 8005660:	781b      	ldrb	r3, [r3, #0]
					(arr[i][len] == '\0') || 
 8005662:	2b00      	cmp	r3, #0
 8005664:	d101      	bne.n	800566a <common_len+0x6e>
				return len;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	e00d      	b.n	8005686 <common_len+0x8a>
			len++;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	3301      	adds	r3, #1
 800566e:	60fb      	str	r3, [r7, #12]
		while (arr[i]!=NULL) {
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	4413      	add	r3, r2
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d1c7      	bne.n	800560e <common_len+0x12>
		}
		i++;
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	3301      	adds	r3, #1
 8005682:	60bb      	str	r3, [r7, #8]
		while (arr[i]!=NULL) {
 8005684:	e7f4      	b.n	8005670 <common_len+0x74>
	}
	return 0;
}
 8005686:	4618      	mov	r0, r3
 8005688:	3714      	adds	r7, #20
 800568a:	46bd      	mov	sp, r7
 800568c:	bc80      	pop	{r7}
 800568e:	4770      	bx	lr

08005690 <microrl_get_complite>:

//*****************************************************************************
static void microrl_get_complite (microrl_t * pThis) 
{
 8005690:	b5b0      	push	{r4, r5, r7, lr}
 8005692:	b08e      	sub	sp, #56	; 0x38
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
	char const * tkn_arr[_COMMAND_TOKEN_NMB];
	char ** compl_token; 
	
	if (pThis->get_completion == NULL) // callback was not set
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f000 809c 	beq.w	80057dc <microrl_get_complite+0x14c>
		return;
	
	int status = split (pThis, pThis->cursor, tkn_arr);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80056aa:	f107 0208 	add.w	r2, r7, #8
 80056ae:	4619      	mov	r1, r3
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f7ff fbfa 	bl	8004eaa <split>
 80056b6:	6378      	str	r0, [r7, #52]	; 0x34
	if (pThis->cmdline[pThis->cursor-1] == '\0')
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80056be:	3b01      	subs	r3, #1
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	4413      	add	r3, r2
 80056c4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d109      	bne.n	80056e0 <microrl_get_complite+0x50>
		tkn_arr[status++] = "";
 80056cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ce:	1c5a      	adds	r2, r3, #1
 80056d0:	637a      	str	r2, [r7, #52]	; 0x34
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80056d8:	4413      	add	r3, r2
 80056da:	4a42      	ldr	r2, [pc, #264]	; (80057e4 <microrl_get_complite+0x154>)
 80056dc:	f843 2c30 	str.w	r2, [r3, #-48]
	compl_token = pThis->get_completion (status, tkn_arr);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80056e6:	f107 0208 	add.w	r2, r7, #8
 80056ea:	4611      	mov	r1, r2
 80056ec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80056ee:	4798      	blx	r3
 80056f0:	62b8      	str	r0, [r7, #40]	; 0x28
	if (compl_token[0] != NULL) {
 80056f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d071      	beq.n	80057de <microrl_get_complite+0x14e>
		int i = 0;
 80056fa:	2300      	movs	r3, #0
 80056fc:	633b      	str	r3, [r7, #48]	; 0x30
		int len;

		if (compl_token[1] == NULL) {
 80056fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005700:	3304      	adds	r3, #4
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d107      	bne.n	8005718 <microrl_get_complite+0x88>
			len = strlen (compl_token[0]);
 8005708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4618      	mov	r0, r3
 800570e:	f7fa fd41 	bl	8000194 <strlen>
 8005712:	4603      	mov	r3, r0
 8005714:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005716:	e026      	b.n	8005766 <microrl_get_complite+0xd6>
		} else {
			len = common_len (compl_token);
 8005718:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800571a:	f7ff ff6f 	bl	80055fc <common_len>
 800571e:	62f8      	str	r0, [r7, #44]	; 0x2c
			terminal_newline (pThis);
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f7ff fc39 	bl	8004f98 <terminal_newline>
			while (compl_token [i] != NULL) {
 8005726:	e011      	b.n	800574c <microrl_get_complite+0xbc>
				pThis->print (compl_token[i]);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800572e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005730:	0092      	lsls	r2, r2, #2
 8005732:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005734:	440a      	add	r2, r1
 8005736:	6812      	ldr	r2, [r2, #0]
 8005738:	4610      	mov	r0, r2
 800573a:	4798      	blx	r3
				pThis->print (" ");
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8005742:	4829      	ldr	r0, [pc, #164]	; (80057e8 <microrl_get_complite+0x158>)
 8005744:	4798      	blx	r3
				i++;
 8005746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005748:	3301      	adds	r3, #1
 800574a:	633b      	str	r3, [r7, #48]	; 0x30
			while (compl_token [i] != NULL) {
 800574c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005752:	4413      	add	r3, r2
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1e6      	bne.n	8005728 <microrl_get_complite+0x98>
			}
			terminal_newline (pThis);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f7ff fc1c 	bl	8004f98 <terminal_newline>
			print_prompt (pThis);
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f7ff fbeb 	bl	8004f3c <print_prompt>
		}
		
		if (len) {
 8005766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005768:	2b00      	cmp	r3, #0
 800576a:	d02b      	beq.n	80057c4 <microrl_get_complite+0x134>
			microrl_insert_text (pThis, compl_token[0] + strlen(tkn_arr[status-1]), 
 800576c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800576e:	681c      	ldr	r4, [r3, #0]
 8005770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005772:	3b01      	subs	r3, #1
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800577a:	4413      	add	r3, r2
 800577c:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8005780:	4618      	mov	r0, r3
 8005782:	f7fa fd07 	bl	8000194 <strlen>
 8005786:	4603      	mov	r3, r0
 8005788:	18e5      	adds	r5, r4, r3
																	len - strlen(tkn_arr[status-1]));
 800578a:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800578c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800578e:	3b01      	subs	r3, #1
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005796:	4413      	add	r3, r2
 8005798:	f853 3c30 	ldr.w	r3, [r3, #-48]
 800579c:	4618      	mov	r0, r3
 800579e:	f7fa fcf9 	bl	8000194 <strlen>
 80057a2:	4603      	mov	r3, r0
 80057a4:	1ae3      	subs	r3, r4, r3
			microrl_insert_text (pThis, compl_token[0] + strlen(tkn_arr[status-1]), 
 80057a6:	461a      	mov	r2, r3
 80057a8:	4629      	mov	r1, r5
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f7ff fe74 	bl	8005498 <microrl_insert_text>
			if (compl_token[1] == NULL) 
 80057b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b2:	3304      	adds	r3, #4
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d104      	bne.n	80057c4 <microrl_get_complite+0x134>
				microrl_insert_text (pThis, " ", 1);
 80057ba:	2201      	movs	r2, #1
 80057bc:	490a      	ldr	r1, [pc, #40]	; (80057e8 <microrl_get_complite+0x158>)
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f7ff fe6a 	bl	8005498 <microrl_insert_text>
		}
		terminal_reset_cursor (pThis);
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f7ff fca5 	bl	8005114 <terminal_reset_cursor>
		terminal_print_line (pThis, 0, pThis->cursor);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80057d0:	461a      	mov	r2, r3
 80057d2:	2100      	movs	r1, #0
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f7ff fce3 	bl	80051a0 <terminal_print_line>
 80057da:	e000      	b.n	80057de <microrl_get_complite+0x14e>
		return;
 80057dc:	bf00      	nop
	} 
}
 80057de:	3738      	adds	r7, #56	; 0x38
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bdb0      	pop	{r4, r5, r7, pc}
 80057e4:	08019e28 	.word	0x08019e28
 80057e8:	08019e2c 	.word	0x08019e2c

080057ec <new_line_handler>:
#endif

//*****************************************************************************
void new_line_handler(microrl_t * pThis){
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b08c      	sub	sp, #48	; 0x30
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
	char const * tkn_arr [_COMMAND_TOKEN_NMB];
	int status;

	terminal_newline (pThis);
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f7ff fbcf 	bl	8004f98 <terminal_newline>
#ifdef _USE_HISTORY
	if (pThis->cmdlen > 0)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005800:	2b00      	cmp	r3, #0
 8005802:	dd0a      	ble.n	800581a <new_line_handler+0x2e>
		hist_save_line (&pThis->ring_hist, pThis->cmdline, pThis->cmdlen);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	1d18      	adds	r0, r3, #4
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005814:	461a      	mov	r2, r3
 8005816:	f7ff f9d1 	bl	8004bbc <hist_save_line>
#endif
	status = split (pThis, pThis->cmdlen, tkn_arr);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005820:	f107 020c 	add.w	r2, r7, #12
 8005824:	4619      	mov	r1, r3
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f7ff fb3f 	bl	8004eaa <split>
 800582c:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (status == -1){
 800582e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005834:	d109      	bne.n	800584a <new_line_handler+0x5e>
		//          pThis->print ("ERROR: Max token amount exseed\n");
		pThis->print ("ERROR:too many tokens");
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800583c:	4817      	ldr	r0, [pc, #92]	; (800589c <new_line_handler+0xb0>)
 800583e:	4798      	blx	r3
		pThis->print (ENDL);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8005846:	4816      	ldr	r0, [pc, #88]	; (80058a0 <new_line_handler+0xb4>)
 8005848:	4798      	blx	r3
	}
	if ((status > 0) && (pThis->execute != NULL))
 800584a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800584c:	2b00      	cmp	r3, #0
 800584e:	dd0c      	ble.n	800586a <new_line_handler+0x7e>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005856:	2b00      	cmp	r3, #0
 8005858:	d007      	beq.n	800586a <new_line_handler+0x7e>
		pThis->execute (status, tkn_arr);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005860:	f107 020c 	add.w	r2, r7, #12
 8005864:	4611      	mov	r1, r2
 8005866:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005868:	4798      	blx	r3
	print_prompt (pThis);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f7ff fb66 	bl	8004f3c <print_prompt>
	pThis->cmdlen = 0;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	pThis->cursor = 0;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	3354      	adds	r3, #84	; 0x54
 8005884:	2265      	movs	r2, #101	; 0x65
 8005886:	2100      	movs	r1, #0
 8005888:	4618      	mov	r0, r3
 800588a:	f00f fb2b 	bl	8014ee4 <memset>
#ifdef _USE_HISTORY
	pThis->ring_hist.cur = 0;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
}
 8005894:	bf00      	nop
 8005896:	3730      	adds	r7, #48	; 0x30
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}
 800589c:	08019e30 	.word	0x08019e30
 80058a0:	08019e08 	.word	0x08019e08

080058a4 <microrl_insert_char>:

//*****************************************************************************

void microrl_insert_char (microrl_t * pThis, int ch)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b082      	sub	sp, #8
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
#ifdef _USE_ESC_SEQ
	if (pThis->escape) {
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	785b      	ldrb	r3, [r3, #1]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00d      	beq.n	80058d2 <microrl_insert_char+0x2e>
		if (escape_process(pThis, ch))
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	4619      	mov	r1, r3
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f7ff fd5d 	bl	800537c <escape_process>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	f000 81c1 	beq.w	8005c4c <microrl_insert_char+0x3a8>
			pThis->escape = 0;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	705a      	strb	r2, [r3, #1]
			break;
		}
#ifdef _USE_ESC_SEQ
	}
#endif
}
 80058d0:	e1bc      	b.n	8005c4c <microrl_insert_char+0x3a8>
		switch (ch) {
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	3b01      	subs	r3, #1
 80058d6:	2b7e      	cmp	r3, #126	; 0x7e
 80058d8:	f200 818d 	bhi.w	8005bf6 <microrl_insert_char+0x352>
 80058dc:	a201      	add	r2, pc, #4	; (adr r2, 80058e4 <microrl_insert_char+0x40>)
 80058de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e2:	bf00      	nop
 80058e4:	08005b57 	.word	0x08005b57
 80058e8:	08005b8f 	.word	0x08005b8f
 80058ec:	08005be3 	.word	0x08005be3
 80058f0:	08005bf7 	.word	0x08005bf7
 80058f4:	08005b33 	.word	0x08005b33
 80058f8:	08005b67 	.word	0x08005b67
 80058fc:	08005bf7 	.word	0x08005bf7
 8005900:	08005bc7 	.word	0x08005bc7
 8005904:	08005ae9 	.word	0x08005ae9
 8005908:	08005c37 	.word	0x08005c37
 800590c:	08005b1b 	.word	0x08005b1b
 8005910:	08005bf7 	.word	0x08005bf7
 8005914:	08005ae1 	.word	0x08005ae1
 8005918:	08005bbd 	.word	0x08005bbd
 800591c:	08005bf7 	.word	0x08005bf7
 8005920:	08005bb3 	.word	0x08005bb3
 8005924:	08005bf7 	.word	0x08005bf7
 8005928:	08005bf7 	.word	0x08005bf7
 800592c:	08005bf7 	.word	0x08005bf7
 8005930:	08005bf7 	.word	0x08005bf7
 8005934:	08005aff 	.word	0x08005aff
 8005938:	08005bf7 	.word	0x08005bf7
 800593c:	08005bf7 	.word	0x08005bf7
 8005940:	08005bf7 	.word	0x08005bf7
 8005944:	08005bf7 	.word	0x08005bf7
 8005948:	08005bf7 	.word	0x08005bf7
 800594c:	08005af1 	.word	0x08005af1
 8005950:	08005bf7 	.word	0x08005bf7
 8005954:	08005bf7 	.word	0x08005bf7
 8005958:	08005bf7 	.word	0x08005bf7
 800595c:	08005bf7 	.word	0x08005bf7
 8005960:	08005bf7 	.word	0x08005bf7
 8005964:	08005bf7 	.word	0x08005bf7
 8005968:	08005bf7 	.word	0x08005bf7
 800596c:	08005bf7 	.word	0x08005bf7
 8005970:	08005bf7 	.word	0x08005bf7
 8005974:	08005bf7 	.word	0x08005bf7
 8005978:	08005bf7 	.word	0x08005bf7
 800597c:	08005bf7 	.word	0x08005bf7
 8005980:	08005bf7 	.word	0x08005bf7
 8005984:	08005bf7 	.word	0x08005bf7
 8005988:	08005bf7 	.word	0x08005bf7
 800598c:	08005bf7 	.word	0x08005bf7
 8005990:	08005bf7 	.word	0x08005bf7
 8005994:	08005bf7 	.word	0x08005bf7
 8005998:	08005bf7 	.word	0x08005bf7
 800599c:	08005bf7 	.word	0x08005bf7
 80059a0:	08005bf7 	.word	0x08005bf7
 80059a4:	08005bf7 	.word	0x08005bf7
 80059a8:	08005bf7 	.word	0x08005bf7
 80059ac:	08005bf7 	.word	0x08005bf7
 80059b0:	08005bf7 	.word	0x08005bf7
 80059b4:	08005bf7 	.word	0x08005bf7
 80059b8:	08005bf7 	.word	0x08005bf7
 80059bc:	08005bf7 	.word	0x08005bf7
 80059c0:	08005bf7 	.word	0x08005bf7
 80059c4:	08005bf7 	.word	0x08005bf7
 80059c8:	08005bf7 	.word	0x08005bf7
 80059cc:	08005bf7 	.word	0x08005bf7
 80059d0:	08005bf7 	.word	0x08005bf7
 80059d4:	08005bf7 	.word	0x08005bf7
 80059d8:	08005bf7 	.word	0x08005bf7
 80059dc:	08005bf7 	.word	0x08005bf7
 80059e0:	08005bf7 	.word	0x08005bf7
 80059e4:	08005bf7 	.word	0x08005bf7
 80059e8:	08005bf7 	.word	0x08005bf7
 80059ec:	08005bf7 	.word	0x08005bf7
 80059f0:	08005bf7 	.word	0x08005bf7
 80059f4:	08005bf7 	.word	0x08005bf7
 80059f8:	08005bf7 	.word	0x08005bf7
 80059fc:	08005bf7 	.word	0x08005bf7
 8005a00:	08005bf7 	.word	0x08005bf7
 8005a04:	08005bf7 	.word	0x08005bf7
 8005a08:	08005bf7 	.word	0x08005bf7
 8005a0c:	08005bf7 	.word	0x08005bf7
 8005a10:	08005bf7 	.word	0x08005bf7
 8005a14:	08005bf7 	.word	0x08005bf7
 8005a18:	08005bf7 	.word	0x08005bf7
 8005a1c:	08005bf7 	.word	0x08005bf7
 8005a20:	08005bf7 	.word	0x08005bf7
 8005a24:	08005bf7 	.word	0x08005bf7
 8005a28:	08005bf7 	.word	0x08005bf7
 8005a2c:	08005bf7 	.word	0x08005bf7
 8005a30:	08005bf7 	.word	0x08005bf7
 8005a34:	08005bf7 	.word	0x08005bf7
 8005a38:	08005bf7 	.word	0x08005bf7
 8005a3c:	08005bf7 	.word	0x08005bf7
 8005a40:	08005bf7 	.word	0x08005bf7
 8005a44:	08005bf7 	.word	0x08005bf7
 8005a48:	08005bf7 	.word	0x08005bf7
 8005a4c:	08005bf7 	.word	0x08005bf7
 8005a50:	08005bf7 	.word	0x08005bf7
 8005a54:	08005bf7 	.word	0x08005bf7
 8005a58:	08005bf7 	.word	0x08005bf7
 8005a5c:	08005bf7 	.word	0x08005bf7
 8005a60:	08005bf7 	.word	0x08005bf7
 8005a64:	08005bf7 	.word	0x08005bf7
 8005a68:	08005bf7 	.word	0x08005bf7
 8005a6c:	08005bf7 	.word	0x08005bf7
 8005a70:	08005bf7 	.word	0x08005bf7
 8005a74:	08005bf7 	.word	0x08005bf7
 8005a78:	08005bf7 	.word	0x08005bf7
 8005a7c:	08005bf7 	.word	0x08005bf7
 8005a80:	08005bf7 	.word	0x08005bf7
 8005a84:	08005bf7 	.word	0x08005bf7
 8005a88:	08005bf7 	.word	0x08005bf7
 8005a8c:	08005bf7 	.word	0x08005bf7
 8005a90:	08005bf7 	.word	0x08005bf7
 8005a94:	08005bf7 	.word	0x08005bf7
 8005a98:	08005bf7 	.word	0x08005bf7
 8005a9c:	08005bf7 	.word	0x08005bf7
 8005aa0:	08005bf7 	.word	0x08005bf7
 8005aa4:	08005bf7 	.word	0x08005bf7
 8005aa8:	08005bf7 	.word	0x08005bf7
 8005aac:	08005bf7 	.word	0x08005bf7
 8005ab0:	08005bf7 	.word	0x08005bf7
 8005ab4:	08005bf7 	.word	0x08005bf7
 8005ab8:	08005bf7 	.word	0x08005bf7
 8005abc:	08005bf7 	.word	0x08005bf7
 8005ac0:	08005bf7 	.word	0x08005bf7
 8005ac4:	08005bf7 	.word	0x08005bf7
 8005ac8:	08005bf7 	.word	0x08005bf7
 8005acc:	08005bf7 	.word	0x08005bf7
 8005ad0:	08005bf7 	.word	0x08005bf7
 8005ad4:	08005bf7 	.word	0x08005bf7
 8005ad8:	08005bf7 	.word	0x08005bf7
 8005adc:	08005bc7 	.word	0x08005bc7
				new_line_handler(pThis);
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f7ff fe83 	bl	80057ec <new_line_handler>
			break;
 8005ae6:	e0b1      	b.n	8005c4c <microrl_insert_char+0x3a8>
				microrl_get_complite (pThis);
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f7ff fdd1 	bl	8005690 <microrl_get_complite>
			break;
 8005aee:	e0ad      	b.n	8005c4c <microrl_insert_char+0x3a8>
				pThis->escape = 1;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	705a      	strb	r2, [r3, #1]
			break;
 8005af6:	e0a9      	b.n	8005c4c <microrl_insert_char+0x3a8>
					microrl_backspace (pThis);
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f7ff fd40 	bl	800557e <microrl_backspace>
					while (pThis->cursor > 0) {
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	dcf7      	bgt.n	8005af8 <microrl_insert_char+0x254>
				terminal_print_line (pThis, 0, pThis->cursor);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005b0e:	461a      	mov	r2, r3
 8005b10:	2100      	movs	r1, #0
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f7ff fb44 	bl	80051a0 <terminal_print_line>
			break;
 8005b18:	e098      	b.n	8005c4c <microrl_insert_char+0x3a8>
				pThis->print ("\033[K");
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8005b20:	484c      	ldr	r0, [pc, #304]	; (8005c54 <microrl_insert_char+0x3b0>)
 8005b22:	4798      	blx	r3
				pThis->cmdlen = pThis->cursor;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
			break;
 8005b30:	e08c      	b.n	8005c4c <microrl_insert_char+0x3a8>
				terminal_move_cursor (pThis, pThis->cmdlen-pThis->cursor);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005b3e:	1ad3      	subs	r3, r2, r3
 8005b40:	4619      	mov	r1, r3
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f7ff fa8a 	bl	800505c <terminal_move_cursor>
				pThis->cursor = pThis->cmdlen;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			break;
 8005b54:	e07a      	b.n	8005c4c <microrl_insert_char+0x3a8>
				terminal_reset_cursor (pThis);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f7ff fadc 	bl	8005114 <terminal_reset_cursor>
				pThis->cursor = 0;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			break;
 8005b64:	e072      	b.n	8005c4c <microrl_insert_char+0x3a8>
			if (pThis->cursor < pThis->cmdlen) {
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005b72:	429a      	cmp	r2, r3
 8005b74:	da61      	bge.n	8005c3a <microrl_insert_char+0x396>
				terminal_move_cursor (pThis, 1);
 8005b76:	2101      	movs	r1, #1
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f7ff fa6f 	bl	800505c <terminal_move_cursor>
				pThis->cursor++;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005b84:	1c5a      	adds	r2, r3, #1
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			break;
 8005b8c:	e055      	b.n	8005c3a <microrl_insert_char+0x396>
			if (pThis->cursor) {
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d052      	beq.n	8005c3e <microrl_insert_char+0x39a>
				terminal_move_cursor (pThis, -1);
 8005b98:	f04f 31ff 	mov.w	r1, #4294967295
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f7ff fa5d 	bl	800505c <terminal_move_cursor>
				pThis->cursor--;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005ba8:	1e5a      	subs	r2, r3, #1
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			break;
 8005bb0:	e045      	b.n	8005c3e <microrl_insert_char+0x39a>
			hist_search (pThis, _HIST_UP);
 8005bb2:	2100      	movs	r1, #0
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f7ff fbb7 	bl	8005328 <hist_search>
			break;
 8005bba:	e047      	b.n	8005c4c <microrl_insert_char+0x3a8>
			hist_search (pThis, _HIST_DOWN);
 8005bbc:	2101      	movs	r1, #1
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f7ff fbb2 	bl	8005328 <hist_search>
			break;
 8005bc4:	e042      	b.n	8005c4c <microrl_insert_char+0x3a8>
				microrl_backspace (pThis);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f7ff fcd9 	bl	800557e <microrl_backspace>
				terminal_print_line (pThis, pThis->cursor, pThis->cursor);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005bd8:	461a      	mov	r2, r3
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f7ff fae0 	bl	80051a0 <terminal_print_line>
			break;
 8005be0:	e034      	b.n	8005c4c <microrl_insert_char+0x3a8>
			if (pThis->sigint != NULL)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d02a      	beq.n	8005c42 <microrl_insert_char+0x39e>
				pThis->sigint();
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8005bf2:	4798      	blx	r3
			break;
 8005bf4:	e025      	b.n	8005c42 <microrl_insert_char+0x39e>
			if (((ch == ' ') && (pThis->cmdlen == 0)) || IS_CONTROL_CHAR(ch))
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	2b20      	cmp	r3, #32
 8005bfa:	d104      	bne.n	8005c06 <microrl_insert_char+0x362>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d01f      	beq.n	8005c46 <microrl_insert_char+0x3a2>
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	2b1f      	cmp	r3, #31
 8005c0a:	dd1c      	ble.n	8005c46 <microrl_insert_char+0x3a2>
			if (microrl_insert_text (pThis, (char*)&ch, 1))
 8005c0c:	463b      	mov	r3, r7
 8005c0e:	2201      	movs	r2, #1
 8005c10:	4619      	mov	r1, r3
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f7ff fc40 	bl	8005498 <microrl_insert_text>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d015      	beq.n	8005c4a <microrl_insert_char+0x3a6>
				terminal_print_line (pThis, pThis->cursor-1, pThis->cursor);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005c24:	1e59      	subs	r1, r3, #1
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f7ff fab6 	bl	80051a0 <terminal_print_line>
			break;
 8005c34:	e009      	b.n	8005c4a <microrl_insert_char+0x3a6>
			break;
 8005c36:	bf00      	nop
 8005c38:	e008      	b.n	8005c4c <microrl_insert_char+0x3a8>
			break;
 8005c3a:	bf00      	nop
 8005c3c:	e006      	b.n	8005c4c <microrl_insert_char+0x3a8>
			break;
 8005c3e:	bf00      	nop
 8005c40:	e004      	b.n	8005c4c <microrl_insert_char+0x3a8>
			break;
 8005c42:	bf00      	nop
 8005c44:	e002      	b.n	8005c4c <microrl_insert_char+0x3a8>
	}
 8005c46:	bf00      	nop
 8005c48:	e000      	b.n	8005c4c <microrl_insert_char+0x3a8>
			break;
 8005c4a:	bf00      	nop
}
 8005c4c:	bf00      	nop
 8005c4e:	3708      	adds	r7, #8
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	08019e24 	.word	0x08019e24

08005c58 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005c5c:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005c60:	4b05      	ldr	r3, [pc, #20]	; (8005c78 <__NVIC_SystemReset+0x20>)
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005c68:	4903      	ldr	r1, [pc, #12]	; (8005c78 <__NVIC_SystemReset+0x20>)
 8005c6a:	4b04      	ldr	r3, [pc, #16]	; (8005c7c <__NVIC_SystemReset+0x24>)
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	60cb      	str	r3, [r1, #12]
 8005c70:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8005c74:	bf00      	nop
 8005c76:	e7fd      	b.n	8005c74 <__NVIC_SystemReset+0x1c>
 8005c78:	e000ed00 	.word	0xe000ed00
 8005c7c:	05fa0004 	.word	0x05fa0004

08005c80 <microrl_terminalInit>:
static char str[255];																			//  буфер sprintf для вывода сообщений в терминал
int terminalFuncArrayIndex = 0;

//=======================================================================================
void microrl_terminalInit()
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	af00      	add	r7, sp, #0
	prv_registerBasicTerminalFuncs();
 8005c84:	f000 f89a 	bl	8005dbc <prv_registerBasicTerminalFuncs>

	if (ExchangeStruct.TerminalFormat == TERMINALFORMAT_HUMAN)
 8005c88:	4b11      	ldr	r3, [pc, #68]	; (8005cd0 <microrl_terminalInit+0x50>)
 8005c8a:	7b5b      	ldrb	r3, [r3, #13]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d105      	bne.n	8005c9c <microrl_terminalInit+0x1c>
	{
		prv_TerminalFunc_about(0, NULL);												// вывести строку из "About..."
 8005c90:	2100      	movs	r1, #0
 8005c92:	2000      	movs	r0, #0
 8005c94:	f000 f9a2 	bl	8005fdc <prv_TerminalFunc_about>
		prv_printMainHelp();															// подсказку с помощью
 8005c98:	f000 fc18 	bl	80064cc <prv_printMainHelp>
	}

	microrl_init(prl, microrl_sendString);
 8005c9c:	4b0d      	ldr	r3, [pc, #52]	; (8005cd4 <microrl_terminalInit+0x54>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	490d      	ldr	r1, [pc, #52]	; (8005cd8 <microrl_terminalInit+0x58>)
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f7ff face 	bl	8005244 <microrl_init>
	microrl_set_execute_callback (prl, prv_execute);
 8005ca8:	4b0a      	ldr	r3, [pc, #40]	; (8005cd4 <microrl_terminalInit+0x54>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	490b      	ldr	r1, [pc, #44]	; (8005cdc <microrl_terminalInit+0x5c>)
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f7ff fb1e 	bl	80052f0 <microrl_set_execute_callback>

	#ifdef _USE_COMPLETE
		microrl_set_complete_callback (prl, prv_complet);
 8005cb4:	4b07      	ldr	r3, [pc, #28]	; (8005cd4 <microrl_terminalInit+0x54>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4909      	ldr	r1, [pc, #36]	; (8005ce0 <microrl_terminalInit+0x60>)
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f7ff fb0a 	bl	80052d4 <microrl_set_complete_callback>
	#endif

	#ifdef _USE_CTLR_C
		microrl_set_sigint_callback (prl, prv_sigint);
 8005cc0:	4b04      	ldr	r3, [pc, #16]	; (8005cd4 <microrl_terminalInit+0x54>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4907      	ldr	r1, [pc, #28]	; (8005ce4 <microrl_terminalInit+0x64>)
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f7ff fb20 	bl	800530c <microrl_set_sigint_callback>
	#endif
}
 8005ccc:	bf00      	nop
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	20008c18 	.word	0x20008c18
 8005cd4:	2000000c 	.word	0x2000000c
 8005cd8:	08006a31 	.word	0x08006a31
 8005cdc:	08005ec9 	.word	0x08005ec9
 8005ce0:	08005f29 	.word	0x08005f29
 8005ce4:	08005fd5 	.word	0x08005fd5

08005ce8 <microrl_terminalProcess>:
//=======================================================================================
void microrl_terminalProcess()
{
 8005ce8:	b598      	push	{r3, r4, r7, lr}
 8005cea:	af00      	add	r7, sp, #0
	microrl_insert_char(prl, microrl_getChar());
 8005cec:	4b05      	ldr	r3, [pc, #20]	; (8005d04 <microrl_terminalProcess+0x1c>)
 8005cee:	681c      	ldr	r4, [r3, #0]
 8005cf0:	f000 fefc 	bl	8006aec <MICRORL_UART_GetCharBlocking>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	4620      	mov	r0, r4
 8005cfa:	f7ff fdd3 	bl	80058a4 <microrl_insert_char>
}
 8005cfe:	bf00      	nop
 8005d00:	bd98      	pop	{r3, r4, r7, pc}
 8005d02:	bf00      	nop
 8005d04:	2000000c 	.word	0x2000000c

08005d08 <microrl_registerExecuteFunc>:
//=======================================================================================
void microrl_registerExecuteFunc(int (*func)(int, const char* const*), const char* name, const char* help)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b085      	sub	sp, #20
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	607a      	str	r2, [r7, #4]
	assert_param(terminalFuncArrayIndex < microrlNUM_OF_TERMINAL_FUNC);

	terminalFuncArray[terminalFuncArrayIndex].func = func;
 8005d14:	4b14      	ldr	r3, [pc, #80]	; (8005d68 <microrl_registerExecuteFunc+0x60>)
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	4914      	ldr	r1, [pc, #80]	; (8005d6c <microrl_registerExecuteFunc+0x64>)
 8005d1a:	4613      	mov	r3, r2
 8005d1c:	005b      	lsls	r3, r3, #1
 8005d1e:	4413      	add	r3, r2
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	440b      	add	r3, r1
 8005d24:	3308      	adds	r3, #8
 8005d26:	68fa      	ldr	r2, [r7, #12]
 8005d28:	601a      	str	r2, [r3, #0]
	terminalFuncArray[terminalFuncArrayIndex].name = name;
 8005d2a:	4b0f      	ldr	r3, [pc, #60]	; (8005d68 <microrl_registerExecuteFunc+0x60>)
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	490f      	ldr	r1, [pc, #60]	; (8005d6c <microrl_registerExecuteFunc+0x64>)
 8005d30:	4613      	mov	r3, r2
 8005d32:	005b      	lsls	r3, r3, #1
 8005d34:	4413      	add	r3, r2
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	440b      	add	r3, r1
 8005d3a:	68ba      	ldr	r2, [r7, #8]
 8005d3c:	601a      	str	r2, [r3, #0]
	terminalFuncArray[terminalFuncArrayIndex].help = help;
 8005d3e:	4b0a      	ldr	r3, [pc, #40]	; (8005d68 <microrl_registerExecuteFunc+0x60>)
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	490a      	ldr	r1, [pc, #40]	; (8005d6c <microrl_registerExecuteFunc+0x64>)
 8005d44:	4613      	mov	r3, r2
 8005d46:	005b      	lsls	r3, r3, #1
 8005d48:	4413      	add	r3, r2
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	440b      	add	r3, r1
 8005d4e:	3304      	adds	r3, #4
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	601a      	str	r2, [r3, #0]

	terminalFuncArrayIndex++;
 8005d54:	4b04      	ldr	r3, [pc, #16]	; (8005d68 <microrl_registerExecuteFunc+0x60>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	3301      	adds	r3, #1
 8005d5a:	4a03      	ldr	r2, [pc, #12]	; (8005d68 <microrl_registerExecuteFunc+0x60>)
 8005d5c:	6013      	str	r3, [r2, #0]
}
 8005d5e:	bf00      	nop
 8005d60:	3714      	adds	r7, #20
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bc80      	pop	{r7}
 8005d66:	4770      	bx	lr
 8005d68:	20000350 	.word	0x20000350
 8005d6c:	20008a28 	.word	0x20008a28

08005d70 <microrl_printString>:
//=======================================================================================
void microrl_printString(const char *str)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b082      	sub	sp, #8
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
	microrl_sendString(str);
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f000 fe59 	bl	8006a30 <MICRORL_UART_SendString>
}
 8005d7e:	bf00      	nop
 8005d80:	3708      	adds	r7, #8
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
	...

08005d88 <microrl_printStringWithEndl>:
//=======================================================================================
void microrl_printStringWithEndl(const char *str)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b082      	sub	sp, #8
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
	microrl_sendString(str);
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f000 fe4d 	bl	8006a30 <MICRORL_UART_SendString>
	microrl_sendString(ENDL);
 8005d96:	4803      	ldr	r0, [pc, #12]	; (8005da4 <microrl_printStringWithEndl+0x1c>)
 8005d98:	f000 fe4a 	bl	8006a30 <MICRORL_UART_SendString>
}
 8005d9c:	bf00      	nop
 8005d9e:	3708      	adds	r7, #8
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	08019e48 	.word	0x08019e48

08005da8 <microrl_printEndl>:
//=======================================================================================
void microrl_printEndl()
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	af00      	add	r7, sp, #0
	microrl_sendString(ENDL);
 8005dac:	4802      	ldr	r0, [pc, #8]	; (8005db8 <microrl_printEndl+0x10>)
 8005dae:	f000 fe3f 	bl	8006a30 <MICRORL_UART_SendString>
}
 8005db2:	bf00      	nop
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	bf00      	nop
 8005db8:	08019e48 	.word	0x08019e48

08005dbc <prv_registerBasicTerminalFuncs>:
//=======================================================================================
static void prv_registerBasicTerminalFuncs()
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	af00      	add	r7, sp, #0
	microrl_registerExecuteFunc(prv_TerminalFunc_about, 	"about", 		"Version Info");
 8005dc0:	4a14      	ldr	r2, [pc, #80]	; (8005e14 <prv_registerBasicTerminalFuncs+0x58>)
 8005dc2:	4915      	ldr	r1, [pc, #84]	; (8005e18 <prv_registerBasicTerminalFuncs+0x5c>)
 8005dc4:	4815      	ldr	r0, [pc, #84]	; (8005e1c <prv_registerBasicTerminalFuncs+0x60>)
 8005dc6:	f7ff ff9f 	bl	8005d08 <microrl_registerExecuteFunc>
	microrl_registerExecuteFunc(prv_TerminalFunc_help, 		"help", 		"View the available commands and their descriptions");
 8005dca:	4a15      	ldr	r2, [pc, #84]	; (8005e20 <prv_registerBasicTerminalFuncs+0x64>)
 8005dcc:	4915      	ldr	r1, [pc, #84]	; (8005e24 <prv_registerBasicTerminalFuncs+0x68>)
 8005dce:	4816      	ldr	r0, [pc, #88]	; (8005e28 <prv_registerBasicTerminalFuncs+0x6c>)
 8005dd0:	f7ff ff9a 	bl	8005d08 <microrl_registerExecuteFunc>
	microrl_registerExecuteFunc(prv_TerminalFunc_clear, 	"clear", 		"Clears the screen.");
 8005dd4:	4a15      	ldr	r2, [pc, #84]	; (8005e2c <prv_registerBasicTerminalFuncs+0x70>)
 8005dd6:	4916      	ldr	r1, [pc, #88]	; (8005e30 <prv_registerBasicTerminalFuncs+0x74>)
 8005dd8:	4816      	ldr	r0, [pc, #88]	; (8005e34 <prv_registerBasicTerminalFuncs+0x78>)
 8005dda:	f7ff ff95 	bl	8005d08 <microrl_registerExecuteFunc>
	microrl_registerExecuteFunc(prv_TerminalFunc_get, 		"get", 			"Type 'get' without parameters for help");
 8005dde:	4a16      	ldr	r2, [pc, #88]	; (8005e38 <prv_registerBasicTerminalFuncs+0x7c>)
 8005de0:	4916      	ldr	r1, [pc, #88]	; (8005e3c <prv_registerBasicTerminalFuncs+0x80>)
 8005de2:	4817      	ldr	r0, [pc, #92]	; (8005e40 <prv_registerBasicTerminalFuncs+0x84>)
 8005de4:	f7ff ff90 	bl	8005d08 <microrl_registerExecuteFunc>
	microrl_registerExecuteFunc(prv_TerminalFunc_set, 		"set", 			"Type 'set' without parameters for help");
 8005de8:	4a16      	ldr	r2, [pc, #88]	; (8005e44 <prv_registerBasicTerminalFuncs+0x88>)
 8005dea:	4917      	ldr	r1, [pc, #92]	; (8005e48 <prv_registerBasicTerminalFuncs+0x8c>)
 8005dec:	4817      	ldr	r0, [pc, #92]	; (8005e4c <prv_registerBasicTerminalFuncs+0x90>)
 8005dee:	f7ff ff8b 	bl	8005d08 <microrl_registerExecuteFunc>
	microrl_registerExecuteFunc(prv_TerminalFunc_reset,		"reset", 		"Type 'reset' without parameters for help");
 8005df2:	4a17      	ldr	r2, [pc, #92]	; (8005e50 <prv_registerBasicTerminalFuncs+0x94>)
 8005df4:	4917      	ldr	r1, [pc, #92]	; (8005e54 <prv_registerBasicTerminalFuncs+0x98>)
 8005df6:	4818      	ldr	r0, [pc, #96]	; (8005e58 <prv_registerBasicTerminalFuncs+0x9c>)
 8005df8:	f7ff ff86 	bl	8005d08 <microrl_registerExecuteFunc>
	microrl_registerExecuteFunc(prv_TerminalFunc_calibrate, "calibrate", 	"Calibrate compass");
 8005dfc:	4a17      	ldr	r2, [pc, #92]	; (8005e5c <prv_registerBasicTerminalFuncs+0xa0>)
 8005dfe:	4918      	ldr	r1, [pc, #96]	; (8005e60 <prv_registerBasicTerminalFuncs+0xa4>)
 8005e00:	4818      	ldr	r0, [pc, #96]	; (8005e64 <prv_registerBasicTerminalFuncs+0xa8>)
 8005e02:	f7ff ff81 	bl	8005d08 <microrl_registerExecuteFunc>
	microrl_registerExecuteFunc(prv_TerminalFunc_pwroff,    "pwroff", 		"Unlock main power switch to gracefull shutdown");
 8005e06:	4a18      	ldr	r2, [pc, #96]	; (8005e68 <prv_registerBasicTerminalFuncs+0xac>)
 8005e08:	4918      	ldr	r1, [pc, #96]	; (8005e6c <prv_registerBasicTerminalFuncs+0xb0>)
 8005e0a:	4819      	ldr	r0, [pc, #100]	; (8005e70 <prv_registerBasicTerminalFuncs+0xb4>)
 8005e0c:	f7ff ff7c 	bl	8005d08 <microrl_registerExecuteFunc>
}
 8005e10:	bf00      	nop
 8005e12:	bd80      	pop	{r7, pc}
 8005e14:	08019e4c 	.word	0x08019e4c
 8005e18:	08019e5c 	.word	0x08019e5c
 8005e1c:	08005fdd 	.word	0x08005fdd
 8005e20:	08019e64 	.word	0x08019e64
 8005e24:	08019e98 	.word	0x08019e98
 8005e28:	08006469 	.word	0x08006469
 8005e2c:	08019ea0 	.word	0x08019ea0
 8005e30:	08019eb4 	.word	0x08019eb4
 8005e34:	08006075 	.word	0x08006075
 8005e38:	08019ebc 	.word	0x08019ebc
 8005e3c:	08019ee4 	.word	0x08019ee4
 8005e40:	0800609d 	.word	0x0800609d
 8005e44:	08019ee8 	.word	0x08019ee8
 8005e48:	08019f10 	.word	0x08019f10
 8005e4c:	08006729 	.word	0x08006729
 8005e50:	08019f14 	.word	0x08019f14
 8005e54:	08019f40 	.word	0x08019f40
 8005e58:	08006619 	.word	0x08006619
 8005e5c:	08019f48 	.word	0x08019f48
 8005e60:	08019f5c 	.word	0x08019f5c
 8005e64:	0800605d 	.word	0x0800605d
 8005e68:	08019f68 	.word	0x08019f68
 8005e6c:	08019f98 	.word	0x08019f98
 8005e70:	080065d9 	.word	0x080065d9

08005e74 <prv_getFuncArrayIndex>:
//=======================================================================================
int prv_getFuncArrayIndex(const char * name)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
	int i;
	for (i = 0; i < terminalFuncArrayIndex; ++i) {
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	60fb      	str	r3, [r7, #12]
 8005e80:	e013      	b.n	8005eaa <prv_getFuncArrayIndex+0x36>
		if (strcmp(name, terminalFuncArray[i].name) == 0)	{
 8005e82:	490f      	ldr	r1, [pc, #60]	; (8005ec0 <prv_getFuncArrayIndex+0x4c>)
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	4613      	mov	r3, r2
 8005e88:	005b      	lsls	r3, r3, #1
 8005e8a:	4413      	add	r3, r2
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	440b      	add	r3, r1
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4619      	mov	r1, r3
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f7fa f973 	bl	8000180 <strcmp>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d101      	bne.n	8005ea4 <prv_getFuncArrayIndex+0x30>
			return i;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	e009      	b.n	8005eb8 <prv_getFuncArrayIndex+0x44>
	for (i = 0; i < terminalFuncArrayIndex; ++i) {
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	60fb      	str	r3, [r7, #12]
 8005eaa:	4b06      	ldr	r3, [pc, #24]	; (8005ec4 <prv_getFuncArrayIndex+0x50>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	dbe6      	blt.n	8005e82 <prv_getFuncArrayIndex+0xe>
		}
	}
	return (-1);
 8005eb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3710      	adds	r7, #16
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	20008a28 	.word	0x20008a28
 8005ec4:	20000350 	.word	0x20000350

08005ec8 <prv_execute>:
//=======================================================================================
static int prv_execute(int argc, const char * const * argv)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
	int funcIndex;

	funcIndex = prv_getFuncArrayIndex(argv[0]);
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f7ff ffcc 	bl	8005e74 <prv_getFuncArrayIndex>
 8005edc:	60f8      	str	r0, [r7, #12]
	if (funcIndex == (-1))	{
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ee4:	d105      	bne.n	8005ef2 <prv_execute+0x2a>
		microrl_printStringWithEndl("Unknown command. Type \"help\" to see available commands");
 8005ee6:	480e      	ldr	r0, [pc, #56]	; (8005f20 <prv_execute+0x58>)
 8005ee8:	f7ff ff4e 	bl	8005d88 <microrl_printStringWithEndl>
		return (-1);
 8005eec:	f04f 33ff 	mov.w	r3, #4294967295
 8005ef0:	e012      	b.n	8005f18 <prv_execute+0x50>
	}
	return terminalFuncArray[funcIndex].func(--argc, ++argv);
 8005ef2:	490c      	ldr	r1, [pc, #48]	; (8005f24 <prv_execute+0x5c>)
 8005ef4:	68fa      	ldr	r2, [r7, #12]
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	005b      	lsls	r3, r3, #1
 8005efa:	4413      	add	r3, r2
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	440b      	add	r3, r1
 8005f00:	3308      	adds	r3, #8
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	3a01      	subs	r2, #1
 8005f08:	607a      	str	r2, [r7, #4]
 8005f0a:	683a      	ldr	r2, [r7, #0]
 8005f0c:	3204      	adds	r2, #4
 8005f0e:	603a      	str	r2, [r7, #0]
 8005f10:	6839      	ldr	r1, [r7, #0]
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	4798      	blx	r3
 8005f16:	4603      	mov	r3, r0
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3710      	adds	r7, #16
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	08019fa0 	.word	0x08019fa0
 8005f24:	20008a28 	.word	0x20008a28

08005f28 <prv_complet>:
//=======================================================================================
#ifdef _USE_COMPLETE
//TODO simplify this. Quite difficult.
static char ** prv_complet (int argc, const char * const * argv)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b086      	sub	sp, #24
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
	static char * compl_world [microrlNUM_OF_TERMINAL_FUNC + 1];
	int j = 0, i;
 8005f32:	2300      	movs	r3, #0
 8005f34:	617b      	str	r3, [r7, #20]
	compl_world[0] = NULL;
 8005f36:	4b24      	ldr	r3, [pc, #144]	; (8005fc8 <prv_complet+0xa0>)
 8005f38:	2200      	movs	r2, #0
 8005f3a:	601a      	str	r2, [r3, #0]
	if (argc == 1)	{
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d137      	bne.n	8005fb2 <prv_complet+0x8a>
		char * bit = (char*)argv [argc-1];
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005f48:	3b01      	subs	r3, #1
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	683a      	ldr	r2, [r7, #0]
 8005f4e:	4413      	add	r3, r2
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	60fb      	str	r3, [r7, #12]
		for (i = 0; i < terminalFuncArrayIndex; i++) {
 8005f54:	2300      	movs	r3, #0
 8005f56:	613b      	str	r3, [r7, #16]
 8005f58:	e026      	b.n	8005fa8 <prv_complet+0x80>
			if (strstr(terminalFuncArray[i].name, bit) == terminalFuncArray[i].name) {
 8005f5a:	491c      	ldr	r1, [pc, #112]	; (8005fcc <prv_complet+0xa4>)
 8005f5c:	693a      	ldr	r2, [r7, #16]
 8005f5e:	4613      	mov	r3, r2
 8005f60:	005b      	lsls	r3, r3, #1
 8005f62:	4413      	add	r3, r2
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	440b      	add	r3, r1
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68f9      	ldr	r1, [r7, #12]
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f00f ff1a 	bl	8015da6 <strstr>
 8005f72:	4916      	ldr	r1, [pc, #88]	; (8005fcc <prv_complet+0xa4>)
 8005f74:	693a      	ldr	r2, [r7, #16]
 8005f76:	4613      	mov	r3, r2
 8005f78:	005b      	lsls	r3, r3, #1
 8005f7a:	4413      	add	r3, r2
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	440b      	add	r3, r1
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4298      	cmp	r0, r3
 8005f84:	d10d      	bne.n	8005fa2 <prv_complet+0x7a>
				compl_world [j++] = (char*)(terminalFuncArray[i].name);
 8005f86:	697a      	ldr	r2, [r7, #20]
 8005f88:	1c53      	adds	r3, r2, #1
 8005f8a:	617b      	str	r3, [r7, #20]
 8005f8c:	480f      	ldr	r0, [pc, #60]	; (8005fcc <prv_complet+0xa4>)
 8005f8e:	6939      	ldr	r1, [r7, #16]
 8005f90:	460b      	mov	r3, r1
 8005f92:	005b      	lsls	r3, r3, #1
 8005f94:	440b      	add	r3, r1
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	4403      	add	r3, r0
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	490a      	ldr	r1, [pc, #40]	; (8005fc8 <prv_complet+0xa0>)
 8005f9e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
		for (i = 0; i < terminalFuncArrayIndex; i++) {
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	613b      	str	r3, [r7, #16]
 8005fa8:	4b09      	ldr	r3, [pc, #36]	; (8005fd0 <prv_complet+0xa8>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	693a      	ldr	r2, [r7, #16]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	dbd3      	blt.n	8005f5a <prv_complet+0x32>
			}
		}
	}
	compl_world [j] = NULL;
 8005fb2:	4a05      	ldr	r2, [pc, #20]	; (8005fc8 <prv_complet+0xa0>)
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	2100      	movs	r1, #0
 8005fb8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	return compl_world;
 8005fbc:	4b02      	ldr	r3, [pc, #8]	; (8005fc8 <prv_complet+0xa0>)
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3718      	adds	r7, #24
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	20000354 	.word	0x20000354
 8005fcc:	20008a28 	.word	0x20008a28
 8005fd0:	20000350 	.word	0x20000350

08005fd4 <prv_sigint>:
#endif
//=======================================================================================
#ifdef _USE_CTLR_C
static void prv_sigint (void)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
 8005fd8:	f7ff fe3e 	bl	8005c58 <__NVIC_SystemReset>

08005fdc <prv_TerminalFunc_about>:
//	microrl_printStringWithEndl(MICRORL_LIB_VER);
//	return 0;
//}
//=======================================================================================
int prv_TerminalFunc_about(int argc, const char * const * argv)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b084      	sub	sp, #16
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
	UNUSED(argc);
	UNUSED(argv);
	osStatus status = osMutexWait(MircoRL_Tx_MutexHandle, portMAX_DELAY);								// ждем пока не освободиться порт терминала на передачу
 8005fe6:	4b15      	ldr	r3, [pc, #84]	; (800603c <prv_TerminalFunc_about+0x60>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f04f 31ff 	mov.w	r1, #4294967295
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f00b fa4a 	bl	8011488 <osMutexAcquire>
 8005ff4:	60f8      	str	r0, [r7, #12]

	if (status == osOK)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d119      	bne.n	8006030 <prv_TerminalFunc_about+0x54>
	{
		microrl_printString("Medogonka. Version: ");
 8005ffc:	4810      	ldr	r0, [pc, #64]	; (8006040 <prv_TerminalFunc_about+0x64>)
 8005ffe:	f7ff feb7 	bl	8005d70 <microrl_printString>
		microrl_printString(FIRMWARE_VER);
 8006002:	4810      	ldr	r0, [pc, #64]	; (8006044 <prv_TerminalFunc_about+0x68>)
 8006004:	f7ff feb4 	bl	8005d70 <microrl_printString>
		microrl_printString("  ( ");
 8006008:	480f      	ldr	r0, [pc, #60]	; (8006048 <prv_TerminalFunc_about+0x6c>)
 800600a:	f7ff feb1 	bl	8005d70 <microrl_printString>
		microrl_printString(__DATE__);
 800600e:	480f      	ldr	r0, [pc, #60]	; (800604c <prv_TerminalFunc_about+0x70>)
 8006010:	f7ff feae 	bl	8005d70 <microrl_printString>
		microrl_printString("  ");
 8006014:	480e      	ldr	r0, [pc, #56]	; (8006050 <prv_TerminalFunc_about+0x74>)
 8006016:	f7ff feab 	bl	8005d70 <microrl_printString>
		microrl_printString(__TIME__);
 800601a:	480e      	ldr	r0, [pc, #56]	; (8006054 <prv_TerminalFunc_about+0x78>)
 800601c:	f7ff fea8 	bl	8005d70 <microrl_printString>
		microrl_printStringWithEndl(" )");
 8006020:	480d      	ldr	r0, [pc, #52]	; (8006058 <prv_TerminalFunc_about+0x7c>)
 8006022:	f7ff feb1 	bl	8005d88 <microrl_printStringWithEndl>
		osMutexRelease(MircoRL_Tx_MutexHandle);
 8006026:	4b05      	ldr	r3, [pc, #20]	; (800603c <prv_TerminalFunc_about+0x60>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4618      	mov	r0, r3
 800602c:	f00b fa8a 	bl	8011544 <osMutexRelease>
	}

	return 0;
 8006030:	2300      	movs	r3, #0
}
 8006032:	4618      	mov	r0, r3
 8006034:	3710      	adds	r7, #16
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	20008a24 	.word	0x20008a24
 8006040:	0801a010 	.word	0x0801a010
 8006044:	0801a028 	.word	0x0801a028
 8006048:	0801a030 	.word	0x0801a030
 800604c:	0801a038 	.word	0x0801a038
 8006050:	0801a044 	.word	0x0801a044
 8006054:	0801a048 	.word	0x0801a048
 8006058:	0801a054 	.word	0x0801a054

0800605c <prv_TerminalFunc_calibrate>:
extern char str[255];

//=======================================================================================

int prv_TerminalFunc_calibrate(int argc, const char * const * argv)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
//			break;
//		}
//
//		osMutexRelease(MircoRL_Tx_MutexHandle);
//	}
	return 0;
 8006066:	2300      	movs	r3, #0
}
 8006068:	4618      	mov	r0, r3
 800606a:	370c      	adds	r7, #12
 800606c:	46bd      	mov	sp, r7
 800606e:	bc80      	pop	{r7}
 8006070:	4770      	bx	lr
	...

08006074 <prv_TerminalFunc_clear>:
//=======================================================================================
#define UNUSED(x) ((void)(x))

//=======================================================================================
int prv_TerminalFunc_clear(int argc, const char * const * argv)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b082      	sub	sp, #8
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
	UNUSED(argc);
	UNUSED(argv);

	microrl_printString ("\033[2J");    // ESC seq for clear entire screen
 800607e:	4805      	ldr	r0, [pc, #20]	; (8006094 <prv_TerminalFunc_clear+0x20>)
 8006080:	f7ff fe76 	bl	8005d70 <microrl_printString>
	microrl_printString ("\033[H");     // ESC seq for move cursor at left-top corner
 8006084:	4804      	ldr	r0, [pc, #16]	; (8006098 <prv_TerminalFunc_clear+0x24>)
 8006086:	f7ff fe73 	bl	8005d70 <microrl_printString>
	return 0;
 800608a:	2300      	movs	r3, #0
}
 800608c:	4618      	mov	r0, r3
 800608e:	3708      	adds	r7, #8
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}
 8006094:	0801a058 	.word	0x0801a058
 8006098:	0801a060 	.word	0x0801a060

0800609c <prv_TerminalFunc_get>:

extern char str[255];

//=======================================================================================
int prv_TerminalFunc_get(int argc, const char * const * argv)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
//	microrl_printString ("Get something...");
//	microrl_printEndl();
	osStatus status = osMutexWait(MircoRL_Tx_MutexHandle, portMAX_DELAY);					// ждем пока не освободиться порт терминала на передачу
 80060a6:	4b14      	ldr	r3, [pc, #80]	; (80060f8 <prv_TerminalFunc_get+0x5c>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f04f 31ff 	mov.w	r1, #4294967295
 80060ae:	4618      	mov	r0, r3
 80060b0:	f00b f9ea 	bl	8011488 <osMutexAcquire>
 80060b4:	60f8      	str	r0, [r7, #12]

	if (status == osOK)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d117      	bne.n	80060ec <prv_TerminalFunc_get+0x50>
	{
		switch (argc)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d002      	beq.n	80060c8 <prv_TerminalFunc_get+0x2c>
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d003      	beq.n	80060ce <prv_TerminalFunc_get+0x32>
 80060c6:	e008      	b.n	80060da <prv_TerminalFunc_get+0x3e>
		{
		case 0:																				// если вызвали get без параметра - показать help
			prv_printHelpGet();
 80060c8:	f000 f81a 	bl	8006100 <prv_printHelpGet>
			break;
 80060cc:	e009      	b.n	80060e2 <prv_TerminalFunc_get+0x46>
		case 1:
			prv_TerminalFuncGetParams(argv[0]);												// реакция на параметры в get
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4618      	mov	r0, r3
 80060d4:	f000 f866 	bl	80061a4 <prv_TerminalFuncGetParams>

			break;
 80060d8:	e003      	b.n	80060e2 <prv_TerminalFunc_get+0x46>
		default:																			// тройной уровень параметров не сделан (пока)
			microrl_printStringWithEndl("Get is available only for high-level commands, yet (Ex:  '>get gps'");
 80060da:	4808      	ldr	r0, [pc, #32]	; (80060fc <prv_TerminalFunc_get+0x60>)
 80060dc:	f7ff fe54 	bl	8005d88 <microrl_printStringWithEndl>
			break;
 80060e0:	bf00      	nop
		}

		osMutexRelease(MircoRL_Tx_MutexHandle);
 80060e2:	4b05      	ldr	r3, [pc, #20]	; (80060f8 <prv_TerminalFunc_get+0x5c>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4618      	mov	r0, r3
 80060e8:	f00b fa2c 	bl	8011544 <osMutexRelease>
	}


	return 0;
 80060ec:	2300      	movs	r3, #0

}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3710      	adds	r7, #16
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	20008a24 	.word	0x20008a24
 80060fc:	0801a064 	.word	0x0801a064

08006100 <prv_printHelpGet>:
//=======================================================================================
void prv_printHelpGet(void)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	af00      	add	r7, sp, #0
	// здесь нужно расписать какие есть параметры у get
	microrl_printStringWithEndl("get <parameter>");
 8006104:	4818      	ldr	r0, [pc, #96]	; (8006168 <prv_printHelpGet+0x68>)
 8006106:	f7ff fe3f 	bl	8005d88 <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  all		- All info");
 800610a:	4818      	ldr	r0, [pc, #96]	; (800616c <prv_printHelpGet+0x6c>)
 800610c:	f7ff fe3c 	bl	8005d88 <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  bat		- Battery level");
 8006110:	4817      	ldr	r0, [pc, #92]	; (8006170 <prv_printHelpGet+0x70>)
 8006112:	f7ff fe39 	bl	8005d88 <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  buzzer	- Buzzer state (on|off)");
 8006116:	4817      	ldr	r0, [pc, #92]	; (8006174 <prv_printHelpGet+0x74>)
 8006118:	f7ff fe36 	bl	8005d88 <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  calbat	- Battery calibration constants");
 800611c:	4816      	ldr	r0, [pc, #88]	; (8006178 <prv_printHelpGet+0x78>)
 800611e:	f7ff fe33 	bl	8005d88 <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  compass	- Compass (Heading, Roll, Pitch, Temperature)");
 8006122:	4816      	ldr	r0, [pc, #88]	; (800617c <prv_printHelpGet+0x7c>)
 8006124:	f7ff fe30 	bl	8005d88 <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  fire		- Measure the renge by LRF & get target info");
 8006128:	4815      	ldr	r0, [pc, #84]	; (8006180 <prv_printHelpGet+0x80>)
 800612a:	f7ff fe2d 	bl	8005d88 <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  gps		- GPS/GLONASS info");
 800612e:	4815      	ldr	r0, [pc, #84]	; (8006184 <prv_printHelpGet+0x84>)
 8006130:	f7ff fe2a 	bl	8005d88 <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  keys		- Keyboard & encoder state");
 8006134:	4814      	ldr	r0, [pc, #80]	; (8006188 <prv_printHelpGet+0x88>)
 8006136:	f7ff fe27 	bl	8005d88 <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  lrf		- Laser Range Finder state");
 800613a:	4814      	ldr	r0, [pc, #80]	; (800618c <prv_printHelpGet+0x8c>)
 800613c:	f7ff fe24 	bl	8005d88 <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  mode		- AUTO or by requests");
 8006140:	4813      	ldr	r0, [pc, #76]	; (8006190 <prv_printHelpGet+0x90>)
 8006142:	f7ff fe21 	bl	8005d88 <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  pwr		- Power status");
 8006146:	4813      	ldr	r0, [pc, #76]	; (8006194 <prv_printHelpGet+0x94>)
 8006148:	f7ff fe1e 	bl	8005d88 <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  serial	- Device Serial Number");
 800614c:	4812      	ldr	r0, [pc, #72]	; (8006198 <prv_printHelpGet+0x98>)
 800614e:	f7ff fe1b 	bl	8005d88 <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  target	- Target info (if GPS & LRF data available");
 8006152:	4812      	ldr	r0, [pc, #72]	; (800619c <prv_printHelpGet+0x9c>)
 8006154:	f7ff fe18 	bl	8005d88 <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  time		- Date/Time from GPS/GLONASS [UTC]");
 8006158:	4811      	ldr	r0, [pc, #68]	; (80061a0 <prv_printHelpGet+0xa0>)
 800615a:	f7ff fe15 	bl	8005d88 <microrl_printStringWithEndl>
	microrl_printEndl();
 800615e:	f7ff fe23 	bl	8005da8 <microrl_printEndl>
}
 8006162:	bf00      	nop
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	0801a0a8 	.word	0x0801a0a8
 800616c:	0801a0b8 	.word	0x0801a0b8
 8006170:	0801a0cc 	.word	0x0801a0cc
 8006174:	0801a0e4 	.word	0x0801a0e4
 8006178:	0801a108 	.word	0x0801a108
 800617c:	0801a134 	.word	0x0801a134
 8006180:	0801a16c 	.word	0x0801a16c
 8006184:	0801a1a4 	.word	0x0801a1a4
 8006188:	0801a1c0 	.word	0x0801a1c0
 800618c:	0801a1e4 	.word	0x0801a1e4
 8006190:	0801a208 	.word	0x0801a208
 8006194:	0801a228 	.word	0x0801a228
 8006198:	0801a240 	.word	0x0801a240
 800619c:	0801a260 	.word	0x0801a260
 80061a0:	0801a294 	.word	0x0801a294

080061a4 <prv_TerminalFuncGetParams>:
//=======================================================================================

void prv_TerminalFuncGetParams(const char *name)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b084      	sub	sp, #16
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
//	microrl_printString("Command: ");
//	microrl_printStringWithEndl(name);

	if (strncmp(name, "all", 3) == 0)
 80061ac:	2203      	movs	r2, #3
 80061ae:	495f      	ldr	r1, [pc, #380]	; (800632c <prv_TerminalFuncGetParams+0x188>)
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f00f fde6 	bl	8015d82 <strncmp>
 80061b6:	4603      	mov	r3, r0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d121      	bne.n	8006200 <prv_TerminalFuncGetParams+0x5c>
	{
		osStatus statusCMD = osMutexWait(MircoRL_TxCMD_MutexHandle, portMAX_DELAY);						// для защиты от вклинивкания в цельный блок "get all" сообщений от кнопок, энкодера и дальномера
 80061bc:	4b5c      	ldr	r3, [pc, #368]	; (8006330 <prv_TerminalFuncGetParams+0x18c>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f04f 31ff 	mov.w	r1, #4294967295
 80061c4:	4618      	mov	r0, r3
 80061c6:	f00b f95f 	bl	8011488 <osMutexAcquire>
 80061ca:	60f8      	str	r0, [r7, #12]

	    if (statusCMD == osOK)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	f040 80a8 	bne.w	8006324 <prv_TerminalFuncGetParams+0x180>
	    {
			TerminalPrintGet_GPS();
 80061d4:	f000 f8dc 	bl	8006390 <TerminalPrintGet_GPS>
	//		TerminalPrintGet_TIME();
			TerminalPrintGet_LRF();
 80061d8:	f000 f8e6 	bl	80063a8 <TerminalPrintGet_LRF>
			TerminalPrintGet_TARGET();
 80061dc:	f000 f8ea 	bl	80063b4 <TerminalPrintGet_TARGET>
			TerminalPrintGet_COMPASS();
 80061e0:	f000 f8ca 	bl	8006378 <TerminalPrintGet_COMPASS>
			TerminalPrintGet_KEYS();
 80061e4:	f000 f8ce 	bl	8006384 <TerminalPrintGet_KEYS>
			TerminalPrintGet_PWR();
 80061e8:	f000 f8c0 	bl	800636c <TerminalPrintGet_PWR>
			TerminalPrintGet_BAT();
 80061ec:	f000 f916 	bl	800641c <TerminalPrintGet_BAT>
			TerminalPrintGet_MODE();
 80061f0:	f000 f8ec 	bl	80063cc <TerminalPrintGet_MODE>

			osMutexRelease(MircoRL_TxCMD_MutexHandle);
 80061f4:	4b4e      	ldr	r3, [pc, #312]	; (8006330 <prv_TerminalFuncGetParams+0x18c>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4618      	mov	r0, r3
 80061fa:	f00b f9a3 	bl	8011544 <osMutexRelease>
//	}
//	else
//	{
//		microrl_printStringWithEndl("Help is not available for this command.");
//	}
}
 80061fe:	e091      	b.n	8006324 <prv_TerminalFuncGetParams+0x180>
	else if (strncmp(name, "pwr", 3) == 0)
 8006200:	2203      	movs	r2, #3
 8006202:	494c      	ldr	r1, [pc, #304]	; (8006334 <prv_TerminalFuncGetParams+0x190>)
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f00f fdbc 	bl	8015d82 <strncmp>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d102      	bne.n	8006216 <prv_TerminalFuncGetParams+0x72>
		TerminalPrintGet_PWR();
 8006210:	f000 f8ac 	bl	800636c <TerminalPrintGet_PWR>
}
 8006214:	e086      	b.n	8006324 <prv_TerminalFuncGetParams+0x180>
	else if (strncmp(name, "bat", 3) == 0)
 8006216:	2203      	movs	r2, #3
 8006218:	4947      	ldr	r1, [pc, #284]	; (8006338 <prv_TerminalFuncGetParams+0x194>)
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f00f fdb1 	bl	8015d82 <strncmp>
 8006220:	4603      	mov	r3, r0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d102      	bne.n	800622c <prv_TerminalFuncGetParams+0x88>
		TerminalPrintGet_BAT();
 8006226:	f000 f8f9 	bl	800641c <TerminalPrintGet_BAT>
}
 800622a:	e07b      	b.n	8006324 <prv_TerminalFuncGetParams+0x180>
	else if (strncmp(name, "calbat", 6) == 0)
 800622c:	2206      	movs	r2, #6
 800622e:	4943      	ldr	r1, [pc, #268]	; (800633c <prv_TerminalFuncGetParams+0x198>)
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f00f fda6 	bl	8015d82 <strncmp>
 8006236:	4603      	mov	r3, r0
 8006238:	2b00      	cmp	r3, #0
 800623a:	d102      	bne.n	8006242 <prv_TerminalFuncGetParams+0x9e>
		TerminalPrintGet_BATCatlibration();
 800623c:	f000 f8f4 	bl	8006428 <TerminalPrintGet_BATCatlibration>
}
 8006240:	e070      	b.n	8006324 <prv_TerminalFuncGetParams+0x180>
	else if (strncmp(name, "compass", 3) == 0)
 8006242:	2203      	movs	r2, #3
 8006244:	493e      	ldr	r1, [pc, #248]	; (8006340 <prv_TerminalFuncGetParams+0x19c>)
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f00f fd9b 	bl	8015d82 <strncmp>
 800624c:	4603      	mov	r3, r0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d102      	bne.n	8006258 <prv_TerminalFuncGetParams+0xb4>
		TerminalPrintGet_COMPASS();
 8006252:	f000 f891 	bl	8006378 <TerminalPrintGet_COMPASS>
}
 8006256:	e065      	b.n	8006324 <prv_TerminalFuncGetParams+0x180>
	else if (strncmp(name, "keys", 3) == 0)
 8006258:	2203      	movs	r2, #3
 800625a:	493a      	ldr	r1, [pc, #232]	; (8006344 <prv_TerminalFuncGetParams+0x1a0>)
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f00f fd90 	bl	8015d82 <strncmp>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d102      	bne.n	800626e <prv_TerminalFuncGetParams+0xca>
		TerminalPrintGet_KEYS();
 8006268:	f000 f88c 	bl	8006384 <TerminalPrintGet_KEYS>
}
 800626c:	e05a      	b.n	8006324 <prv_TerminalFuncGetParams+0x180>
	else if (strncmp(name, "gps", 3) == 0)
 800626e:	2203      	movs	r2, #3
 8006270:	4935      	ldr	r1, [pc, #212]	; (8006348 <prv_TerminalFuncGetParams+0x1a4>)
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f00f fd85 	bl	8015d82 <strncmp>
 8006278:	4603      	mov	r3, r0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d102      	bne.n	8006284 <prv_TerminalFuncGetParams+0xe0>
		TerminalPrintGet_GPS();
 800627e:	f000 f887 	bl	8006390 <TerminalPrintGet_GPS>
}
 8006282:	e04f      	b.n	8006324 <prv_TerminalFuncGetParams+0x180>
	else if (strncmp(name, "time", 3) == 0)
 8006284:	2203      	movs	r2, #3
 8006286:	4931      	ldr	r1, [pc, #196]	; (800634c <prv_TerminalFuncGetParams+0x1a8>)
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f00f fd7a 	bl	8015d82 <strncmp>
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d102      	bne.n	800629a <prv_TerminalFuncGetParams+0xf6>
		TerminalPrintGet_TIME();
 8006294:	f000 f882 	bl	800639c <TerminalPrintGet_TIME>
}
 8006298:	e044      	b.n	8006324 <prv_TerminalFuncGetParams+0x180>
	else if (strncmp(name, "lrf", 3) == 0)
 800629a:	2203      	movs	r2, #3
 800629c:	492c      	ldr	r1, [pc, #176]	; (8006350 <prv_TerminalFuncGetParams+0x1ac>)
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f00f fd6f 	bl	8015d82 <strncmp>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d102      	bne.n	80062b0 <prv_TerminalFuncGetParams+0x10c>
		TerminalPrintGet_LRF();
 80062aa:	f000 f87d 	bl	80063a8 <TerminalPrintGet_LRF>
}
 80062ae:	e039      	b.n	8006324 <prv_TerminalFuncGetParams+0x180>
	else if (strncmp(name, "fire", 3) == 0)
 80062b0:	2203      	movs	r2, #3
 80062b2:	4928      	ldr	r1, [pc, #160]	; (8006354 <prv_TerminalFuncGetParams+0x1b0>)
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f00f fd64 	bl	8015d82 <strncmp>
 80062ba:	4603      	mov	r3, r0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d102      	bne.n	80062c6 <prv_TerminalFuncGetParams+0x122>
		TerminalPrintGet_FIRE();
 80062c0:	f000 f87e 	bl	80063c0 <TerminalPrintGet_FIRE>
}
 80062c4:	e02e      	b.n	8006324 <prv_TerminalFuncGetParams+0x180>
	else if (strncmp(name, "target", 3) == 0)
 80062c6:	2203      	movs	r2, #3
 80062c8:	4923      	ldr	r1, [pc, #140]	; (8006358 <prv_TerminalFuncGetParams+0x1b4>)
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f00f fd59 	bl	8015d82 <strncmp>
 80062d0:	4603      	mov	r3, r0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d102      	bne.n	80062dc <prv_TerminalFuncGetParams+0x138>
		TerminalPrintGet_TARGET();
 80062d6:	f000 f86d 	bl	80063b4 <TerminalPrintGet_TARGET>
}
 80062da:	e023      	b.n	8006324 <prv_TerminalFuncGetParams+0x180>
	else if (strncmp(name, "mode", 3) == 0)
 80062dc:	2203      	movs	r2, #3
 80062de:	491f      	ldr	r1, [pc, #124]	; (800635c <prv_TerminalFuncGetParams+0x1b8>)
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f00f fd4e 	bl	8015d82 <strncmp>
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d102      	bne.n	80062f2 <prv_TerminalFuncGetParams+0x14e>
		TerminalPrintGet_MODE();
 80062ec:	f000 f86e 	bl	80063cc <TerminalPrintGet_MODE>
}
 80062f0:	e018      	b.n	8006324 <prv_TerminalFuncGetParams+0x180>
	else if (strncmp(name, "serial", 3) == 0)
 80062f2:	2203      	movs	r2, #3
 80062f4:	491a      	ldr	r1, [pc, #104]	; (8006360 <prv_TerminalFuncGetParams+0x1bc>)
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f00f fd43 	bl	8015d82 <strncmp>
 80062fc:	4603      	mov	r3, r0
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d102      	bne.n	8006308 <prv_TerminalFuncGetParams+0x164>
		TerminalPrintGet_SERIAL();
 8006302:	f000 f87d 	bl	8006400 <TerminalPrintGet_SERIAL>
}
 8006306:	e00d      	b.n	8006324 <prv_TerminalFuncGetParams+0x180>
	else if (strncmp(name, "buzzer", 3) == 0)
 8006308:	2203      	movs	r2, #3
 800630a:	4916      	ldr	r1, [pc, #88]	; (8006364 <prv_TerminalFuncGetParams+0x1c0>)
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f00f fd38 	bl	8015d82 <strncmp>
 8006312:	4603      	mov	r3, r0
 8006314:	2b00      	cmp	r3, #0
 8006316:	d102      	bne.n	800631e <prv_TerminalFuncGetParams+0x17a>
		TerminalPrintGet_BUZZER();
 8006318:	f000 f88c 	bl	8006434 <TerminalPrintGet_BUZZER>
}
 800631c:	e002      	b.n	8006324 <prv_TerminalFuncGetParams+0x180>
		microrl_printStringWithEndl("Unknown parameter for command 'GET'");
 800631e:	4812      	ldr	r0, [pc, #72]	; (8006368 <prv_TerminalFuncGetParams+0x1c4>)
 8006320:	f7ff fd32 	bl	8005d88 <microrl_printStringWithEndl>
}
 8006324:	bf00      	nop
 8006326:	3710      	adds	r7, #16
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}
 800632c:	0801a2c0 	.word	0x0801a2c0
 8006330:	20008ba4 	.word	0x20008ba4
 8006334:	0801a2c4 	.word	0x0801a2c4
 8006338:	0801a2c8 	.word	0x0801a2c8
 800633c:	0801a2cc 	.word	0x0801a2cc
 8006340:	0801a2d4 	.word	0x0801a2d4
 8006344:	0801a2dc 	.word	0x0801a2dc
 8006348:	0801a2e4 	.word	0x0801a2e4
 800634c:	0801a2e8 	.word	0x0801a2e8
 8006350:	0801a2f0 	.word	0x0801a2f0
 8006354:	0801a2f4 	.word	0x0801a2f4
 8006358:	0801a2fc 	.word	0x0801a2fc
 800635c:	0801a304 	.word	0x0801a304
 8006360:	0801a30c 	.word	0x0801a30c
 8006364:	0801a314 	.word	0x0801a314
 8006368:	0801a31c 	.word	0x0801a31c

0800636c <TerminalPrintGet_PWR>:
//=======================================================================================


//=======================================================================================
void TerminalPrintGet_PWR(void)
{
 800636c:	b480      	push	{r7}
 800636e:	af00      	add	r7, sp, #0
//	sprintf(str, "PWR_EOP=%s\n", 		((ExchangeStruct.Power_State->EN_EOP 	 == POWERSTATE_DISABLE)?("OFF"):("ON")) );	microrl_printString(str);
//	sprintf(str, "PWR_ENCODER=%s\n", 	((ExchangeStruct.Power_State->EN_ENCODER  == POWERSTATE_DISABLE)?("OFF"):("ON")) );	microrl_printString(str);
//	sprintf(str, "PWR_CPU=%s\n", 	 	((ExchangeStruct.Power_State->EN_MAIN_CPU == POWERSTATE_DISABLE)?("OFF"):("ON")) );	microrl_printString(str);
//	sprintf(str, "PWR_CPLD=%s\n",	 	((ExchangeStruct.Power_State->EN_CPLD     == POWERSTATE_DISABLE)?("OFF"):("ON")) );	microrl_printString(str);
//	TerminalPrintGet_PWRSource();
}
 8006370:	bf00      	nop
 8006372:	46bd      	mov	sp, r7
 8006374:	bc80      	pop	{r7}
 8006376:	4770      	bx	lr

08006378 <TerminalPrintGet_COMPASS>:
//	}
}
//=======================================================================================

void TerminalPrintGet_COMPASS(void)
{
 8006378:	b480      	push	{r7}
 800637a:	af00      	add	r7, sp, #0
//	sprintf(str, "COMPASS_HEADING=%+3.1f\n", 		ExchangeStruct.HMC6343_ResultAll->Heading );		microrl_printString(str);
//	sprintf(str, "COMPASS_ROLL=%+3.1f\n", 			ExchangeStruct.HMC6343_ResultAll->Roll );		microrl_printString(str);
//	sprintf(str, "COMPASS_PITCH=%+3.1f\n", 			ExchangeStruct.HMC6343_ResultAll->Pitch );		microrl_printString(str);
//	sprintf(str, "COMPASS_TEMPERATURE=%+3.1f\n", 	ExchangeStruct.HMC6343_ResultAll->Temperature );	microrl_printString(str);

}
 800637c:	bf00      	nop
 800637e:	46bd      	mov	sp, r7
 8006380:	bc80      	pop	{r7}
 8006382:	4770      	bx	lr

08006384 <TerminalPrintGet_KEYS>:
//=======================================================================================
void TerminalPrintGet_KEYS(void)
{
 8006384:	b480      	push	{r7}
 8006386:	af00      	add	r7, sp, #0
//	sprintf(str, "STATE=0x%04X\n", ExchangeStruct.Keys_State->Buttons);																microrl_printString(str);
//	//sprintf(str, "ENCODER_VAL=%d\n", 				(int8_t)(MP_ExchangeStruct.Encoder_State->MP_Encoder_Value - ENCODER_VAL_DEFAULT));	microrl_printString(str);
//	sprintf(str, "ENCODER_VAL=%u\n", 				(uint8_t)(ExchangeStruct.Encoder_State->MP_Encoder_Value));						microrl_printString(str);
//	sprintf(str, "ENCODER_DIR=%lu\n", 				ExchangeStruct.Encoder_State->MP_Encoder_Dir);									microrl_printString(str);
//	sprintf(str, "ENCODER_DELTA=%d\n", 				(int8_t)ExchangeStruct.Encoder_State->MP_Encoder_Delta);							microrl_printString(str);
}
 8006388:	bf00      	nop
 800638a:	46bd      	mov	sp, r7
 800638c:	bc80      	pop	{r7}
 800638e:	4770      	bx	lr

08006390 <TerminalPrintGet_GPS>:
//=======================================================================================
void TerminalPrintGet_GPS(void)
{
 8006390:	b480      	push	{r7}
 8006392:	af00      	add	r7, sp, #0
//	// Количество спутников [используемых/всего]
//	sprintf(str, "GPS_SATS_ALL_INUSE=%02d\n", ExchangeStruct.GPS_info->satinuse);microrl_printString(str); //GPS+GLONASS - будет показывать больше чем 12
//	sprintf(str, "GPS_SATS_ALL_INVIEW=%02d\n", ExchangeStruct.GPS_info->satinfo.inview);microrl_printString(str);
//	//sprintf(str, "GPS_SATS_ALL_INVIEW=%02d\n", 24);microrl_printString(str);
//
}
 8006394:	bf00      	nop
 8006396:	46bd      	mov	sp, r7
 8006398:	bc80      	pop	{r7}
 800639a:	4770      	bx	lr

0800639c <TerminalPrintGet_TIME>:
//=======================================================================================
void TerminalPrintGet_TIME(void)
{
 800639c:	b480      	push	{r7}
 800639e:	af00      	add	r7, sp, #0
//	microrl_printStringWithEndl("TIME by GPS/GLONASS:");
//	sprintf(str, "GPS_DATE = %04d-%02d-%02d\nGPS_TIME =   %02d:%02d:%02d\n", 1900 + ExchangeStruct.GPS_info->utc.year, GPS_info.utc.mon, ExchangeStruct.GPS_info->utc.day, ExchangeStruct.GPS_info->utc.hour + TIME_ZONE, ExchangeStruct.GPS_info->utc.min, ExchangeStruct.GPS_info->utc.sec);
//	microrl_printStringWithEndl(str);
}
 80063a0:	bf00      	nop
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bc80      	pop	{r7}
 80063a6:	4770      	bx	lr

080063a8 <TerminalPrintGet_LRF>:
//=======================================================================================
void TerminalPrintGet_LRF(void)
{
 80063a8:	b480      	push	{r7}
 80063aa:	af00      	add	r7, sp, #0
//	sprintf(str, "LRF_TARGET_DIST_LAST=%d\n", ExchangeStruct.LRF1502_State->Target1Last);			microrl_printString(str);
//	sprintf(str, "LRF_TARGET_NUM=%d\n", ExchangeStruct.LRF1502_State->TargetsNum);					microrl_printString(str);
//	sprintf(str, "LRF_TARGET_DIST=%d\n", ExchangeStruct.LRF1502_State->Target1);						microrl_printString(str);
//	sprintf(str, "LRF_NEW_DATA=%d\n", ExchangeStruct.LRF1502_State->NewDataAvailable);				microrl_printString(str);
//	sprintf(str, "LRF_SHOTS_COUNT=%lu\n", ExchangeStruct.LRF1502_Maintenance->ShotCount);			microrl_printString(str);
}
 80063ac:	bf00      	nop
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bc80      	pop	{r7}
 80063b2:	4770      	bx	lr

080063b4 <TerminalPrintGet_TARGET>:
//=======================================================================================
void TerminalPrintGet_TARGET(void)
{
 80063b4:	b480      	push	{r7}
 80063b6:	af00      	add	r7, sp, #0
//
////		sprintf(str, "POSN=%2.8fN %03.8fE\n", Degrees(pt1[0]), Degrees(pt1[1]));  						microrl_printString(str);		// Google, YandexMaps
////		sprintf(str, "TARG=%2.8fN %03.8fE\n", Degrees(pt2[0]), Degrees(pt2[1]));  						microrl_printString(str);		// Google, YandexMaps
//
//	}
}
 80063b8:	bf00      	nop
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bc80      	pop	{r7}
 80063be:	4770      	bx	lr

080063c0 <TerminalPrintGet_FIRE>:
//=======================================================================================
void TerminalPrintGet_FIRE(void)
{
 80063c0:	b480      	push	{r7}
 80063c2:	af00      	add	r7, sp, #0
//	osTimerStart(LRF_POWER_TimerHandle, TIMER_LRF_POWER_TIMEOUT);						// еще раз запускаем таймер обратного отсчета для времени работы основного источника, чтобы таймаут шел уже от измерения
//	osTimerStart(LRF_HVPS_TimerHandle,  TIMER_LRF_HVPS_TIMEOUT);						// еще раз запускаем таймер обратного отсчета для времени работы HVPS, чтобы таймаут шел уже от измерения
//
//
//	TerminalPrintGet_TARGET();
}
 80063c4:	bf00      	nop
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bc80      	pop	{r7}
 80063ca:	4770      	bx	lr

080063cc <TerminalPrintGet_MODE>:
//=======================================================================================
void TerminalPrintGet_MODE(void)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	af00      	add	r7, sp, #0
	microrl_printString("MODE=");
 80063d0:	4807      	ldr	r0, [pc, #28]	; (80063f0 <TerminalPrintGet_MODE+0x24>)
 80063d2:	f7ff fccd 	bl	8005d70 <microrl_printString>
	if (ExchangeStruct.TerminalMode)
 80063d6:	4b07      	ldr	r3, [pc, #28]	; (80063f4 <TerminalPrintGet_MODE+0x28>)
 80063d8:	7b9b      	ldrb	r3, [r3, #14]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d003      	beq.n	80063e6 <TerminalPrintGet_MODE+0x1a>
		microrl_printStringWithEndl("COMMAND");
 80063de:	4806      	ldr	r0, [pc, #24]	; (80063f8 <TerminalPrintGet_MODE+0x2c>)
 80063e0:	f7ff fcd2 	bl	8005d88 <microrl_printStringWithEndl>
	else
		microrl_printStringWithEndl("AUTO");
}
 80063e4:	e002      	b.n	80063ec <TerminalPrintGet_MODE+0x20>
		microrl_printStringWithEndl("AUTO");
 80063e6:	4805      	ldr	r0, [pc, #20]	; (80063fc <TerminalPrintGet_MODE+0x30>)
 80063e8:	f7ff fcce 	bl	8005d88 <microrl_printStringWithEndl>
}
 80063ec:	bf00      	nop
 80063ee:	bd80      	pop	{r7, pc}
 80063f0:	0801a340 	.word	0x0801a340
 80063f4:	20008c18 	.word	0x20008c18
 80063f8:	0801a348 	.word	0x0801a348
 80063fc:	0801a350 	.word	0x0801a350

08006400 <TerminalPrintGet_SERIAL>:
//=======================================================================================
void TerminalPrintGet_SERIAL(void)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	af00      	add	r7, sp, #0
	microrl_printString("SERIAL_NUMBER=");
 8006404:	4803      	ldr	r0, [pc, #12]	; (8006414 <TerminalPrintGet_SERIAL+0x14>)
 8006406:	f7ff fcb3 	bl	8005d70 <microrl_printString>
	microrl_printStringWithEndl(ExchangeStruct.DeviceSerialNumber);
 800640a:	4803      	ldr	r0, [pc, #12]	; (8006418 <TerminalPrintGet_SERIAL+0x18>)
 800640c:	f7ff fcbc 	bl	8005d88 <microrl_printStringWithEndl>
}
 8006410:	bf00      	nop
 8006412:	bd80      	pop	{r7, pc}
 8006414:	0801a358 	.word	0x0801a358
 8006418:	20008c1c 	.word	0x20008c1c

0800641c <TerminalPrintGet_BAT>:
//=======================================================================================
void TerminalPrintGet_BAT(void)
{
 800641c:	b480      	push	{r7}
 800641e:	af00      	add	r7, sp, #0
////		sprintf(str, "PWR_BAT_RAW=0\n"); 		microrl_printString(str);
////		sprintf(str, "PWR_BAT_VOLT=0\n"); 		microrl_printString(str);
////		sprintf(str, "PWR_BAT_CHG=0\n"); 		microrl_printString(str);
////
////	}
}
 8006420:	bf00      	nop
 8006422:	46bd      	mov	sp, r7
 8006424:	bc80      	pop	{r7}
 8006426:	4770      	bx	lr

08006428 <TerminalPrintGet_BATCatlibration>:
//=======================================================================================
void TerminalPrintGet_BATCatlibration(void)
{
 8006428:	b480      	push	{r7}
 800642a:	af00      	add	r7, sp, #0
//
//	sprintf(str, "Bat cal: 3V3 =  %02.4lf\n", ExchangeStruct.Battery_State->ADC_Ref_Voltage );		microrl_printString(str);
//	sprintf(str, "Bat cal: 12V = %02.4lf\n",  ExchangeStruct.Battery_State->ADC_12V_Voltage );		microrl_printString(str);
}
 800642c:	bf00      	nop
 800642e:	46bd      	mov	sp, r7
 8006430:	bc80      	pop	{r7}
 8006432:	4770      	bx	lr

08006434 <TerminalPrintGet_BUZZER>:
//=======================================================================================
void TerminalPrintGet_BUZZER(void)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	af00      	add	r7, sp, #0
	microrl_printString("BUZZER=");
 8006438:	4807      	ldr	r0, [pc, #28]	; (8006458 <TerminalPrintGet_BUZZER+0x24>)
 800643a:	f7ff fc99 	bl	8005d70 <microrl_printString>
	if (BUZZER_BuzzerState)
 800643e:	4b07      	ldr	r3, [pc, #28]	; (800645c <TerminalPrintGet_BUZZER+0x28>)
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d003      	beq.n	800644e <TerminalPrintGet_BUZZER+0x1a>
		microrl_printStringWithEndl("ON");
 8006446:	4806      	ldr	r0, [pc, #24]	; (8006460 <TerminalPrintGet_BUZZER+0x2c>)
 8006448:	f7ff fc9e 	bl	8005d88 <microrl_printStringWithEndl>
	else
		microrl_printStringWithEndl("OFF");

}
 800644c:	e002      	b.n	8006454 <TerminalPrintGet_BUZZER+0x20>
		microrl_printStringWithEndl("OFF");
 800644e:	4805      	ldr	r0, [pc, #20]	; (8006464 <TerminalPrintGet_BUZZER+0x30>)
 8006450:	f7ff fc9a 	bl	8005d88 <microrl_printStringWithEndl>
}
 8006454:	bf00      	nop
 8006456:	bd80      	pop	{r7, pc}
 8006458:	0801a368 	.word	0x0801a368
 800645c:	20008c00 	.word	0x20008c00
 8006460:	0801a370 	.word	0x0801a370
 8006464:	0801a374 	.word	0x0801a374

08006468 <prv_TerminalFunc_help>:
//=======================================================================================


//=======================================================================================
int prv_TerminalFunc_help(int argc, const char * const * argv)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
	osStatus status = osMutexWait(MircoRL_Tx_MutexHandle, portMAX_DELAY);				// ждем пока не освободиться порт терминала на передачу
 8006472:	4b14      	ldr	r3, [pc, #80]	; (80064c4 <prv_TerminalFunc_help+0x5c>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f04f 31ff 	mov.w	r1, #4294967295
 800647a:	4618      	mov	r0, r3
 800647c:	f00b f804 	bl	8011488 <osMutexAcquire>
 8006480:	60f8      	str	r0, [r7, #12]

	if (status == osOK)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d117      	bne.n	80064b8 <prv_TerminalFunc_help+0x50>
	{
		switch (argc)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d002      	beq.n	8006494 <prv_TerminalFunc_help+0x2c>
 800648e:	2b01      	cmp	r3, #1
 8006490:	d003      	beq.n	800649a <prv_TerminalFunc_help+0x32>
 8006492:	e008      	b.n	80064a6 <prv_TerminalFunc_help+0x3e>
		{
		case 0:
			prv_printMainHelp();
 8006494:	f000 f81a 	bl	80064cc <prv_printMainHelp>
			break;
 8006498:	e009      	b.n	80064ae <prv_TerminalFunc_help+0x46>
		case 1:
			prv_printTerminalFuncHelp(argv[0]);
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4618      	mov	r0, r3
 80064a0:	f000 f866 	bl	8006570 <prv_printTerminalFuncHelp>
			break;
 80064a4:	e003      	b.n	80064ae <prv_TerminalFunc_help+0x46>
		default:
			microrl_printStringWithEndl("Help is available only for high-level commands. It isn't available for subcommands.");
 80064a6:	4808      	ldr	r0, [pc, #32]	; (80064c8 <prv_TerminalFunc_help+0x60>)
 80064a8:	f7ff fc6e 	bl	8005d88 <microrl_printStringWithEndl>
			break;
 80064ac:	bf00      	nop
		}
		osMutexRelease(MircoRL_Tx_MutexHandle);
 80064ae:	4b05      	ldr	r3, [pc, #20]	; (80064c4 <prv_TerminalFunc_help+0x5c>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4618      	mov	r0, r3
 80064b4:	f00b f846 	bl	8011544 <osMutexRelease>
	}

	return 0;
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3710      	adds	r7, #16
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	bf00      	nop
 80064c4:	20008a24 	.word	0x20008a24
 80064c8:	0801a378 	.word	0x0801a378

080064cc <prv_printMainHelp>:
//=======================================================================================
void prv_printMainHelp()
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
	microrl_printStringWithEndl("Hint: Use <TAB> key for auto-completion");
 80064d2:	481f      	ldr	r0, [pc, #124]	; (8006550 <prv_printMainHelp+0x84>)
 80064d4:	f7ff fc58 	bl	8005d88 <microrl_printStringWithEndl>
	microrl_printStringWithEndl("Hint: Use <Ctrl+C> keys to system reset");
 80064d8:	481e      	ldr	r0, [pc, #120]	; (8006554 <prv_printMainHelp+0x88>)
 80064da:	f7ff fc55 	bl	8005d88 <microrl_printStringWithEndl>
	microrl_printStringWithEndl("Type \"help\" <command> for more details.");
 80064de:	481e      	ldr	r0, [pc, #120]	; (8006558 <prv_printMainHelp+0x8c>)
 80064e0:	f7ff fc52 	bl	8005d88 <microrl_printStringWithEndl>
	microrl_printEndl();
 80064e4:	f7ff fc60 	bl	8005da8 <microrl_printEndl>
	microrl_printStringWithEndl("Available commands:");
 80064e8:	481c      	ldr	r0, [pc, #112]	; (800655c <prv_printMainHelp+0x90>)
 80064ea:	f7ff fc4d 	bl	8005d88 <microrl_printStringWithEndl>
	int i;
	for (i = 0; i < terminalFuncArrayIndex; ++i) {
 80064ee:	2300      	movs	r3, #0
 80064f0:	607b      	str	r3, [r7, #4]
 80064f2:	e021      	b.n	8006538 <prv_printMainHelp+0x6c>
		microrl_printString("  ");
 80064f4:	481a      	ldr	r0, [pc, #104]	; (8006560 <prv_printMainHelp+0x94>)
 80064f6:	f7ff fc3b 	bl	8005d70 <microrl_printString>
		microrl_printString(terminalFuncArray[i].name);
 80064fa:	491a      	ldr	r1, [pc, #104]	; (8006564 <prv_printMainHelp+0x98>)
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	4613      	mov	r3, r2
 8006500:	005b      	lsls	r3, r3, #1
 8006502:	4413      	add	r3, r2
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	440b      	add	r3, r1
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4618      	mov	r0, r3
 800650c:	f7ff fc30 	bl	8005d70 <microrl_printString>
		microrl_printString("\033[20G");												//  подвинуть курсор в 20ю позицию текущей строки (https://www.opennet.ru/base/dev/console_ctl.txt.html)
 8006510:	4815      	ldr	r0, [pc, #84]	; (8006568 <prv_printMainHelp+0x9c>)
 8006512:	f7ff fc2d 	bl	8005d70 <microrl_printString>
		microrl_printString(terminalFuncArray[i].help);
 8006516:	4913      	ldr	r1, [pc, #76]	; (8006564 <prv_printMainHelp+0x98>)
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	4613      	mov	r3, r2
 800651c:	005b      	lsls	r3, r3, #1
 800651e:	4413      	add	r3, r2
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	440b      	add	r3, r1
 8006524:	3304      	adds	r3, #4
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4618      	mov	r0, r3
 800652a:	f7ff fc21 	bl	8005d70 <microrl_printString>
		microrl_printEndl();
 800652e:	f7ff fc3b 	bl	8005da8 <microrl_printEndl>
	for (i = 0; i < terminalFuncArrayIndex; ++i) {
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	3301      	adds	r3, #1
 8006536:	607b      	str	r3, [r7, #4]
 8006538:	4b0c      	ldr	r3, [pc, #48]	; (800656c <prv_printMainHelp+0xa0>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	429a      	cmp	r2, r3
 8006540:	dbd8      	blt.n	80064f4 <prv_printMainHelp+0x28>
		//microrl_printString(" ");
	}
	microrl_printEndl();
 8006542:	f7ff fc31 	bl	8005da8 <microrl_printEndl>
}
 8006546:	bf00      	nop
 8006548:	3708      	adds	r7, #8
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	0801a3cc 	.word	0x0801a3cc
 8006554:	0801a3f4 	.word	0x0801a3f4
 8006558:	0801a41c 	.word	0x0801a41c
 800655c:	0801a444 	.word	0x0801a444
 8006560:	0801a458 	.word	0x0801a458
 8006564:	20008a28 	.word	0x20008a28
 8006568:	0801a45c 	.word	0x0801a45c
 800656c:	20000350 	.word	0x20000350

08006570 <prv_printTerminalFuncHelp>:
//=======================================================================================
void prv_printTerminalFuncHelp(const char *name)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
	int funcIndex = prv_getFuncArrayIndex(name);
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f7ff fc7b 	bl	8005e74 <prv_getFuncArrayIndex>
 800657e:	60f8      	str	r0, [r7, #12]
	if (funcIndex == (-1))	{
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006586:	d103      	bne.n	8006590 <prv_printTerminalFuncHelp+0x20>
		microrl_printStringWithEndl("Command not found.");
 8006588:	4810      	ldr	r0, [pc, #64]	; (80065cc <prv_printTerminalFuncHelp+0x5c>)
 800658a:	f7ff fbfd 	bl	8005d88 <microrl_printStringWithEndl>
		return;
 800658e:	e01a      	b.n	80065c6 <prv_printTerminalFuncHelp+0x56>
	}
	if (terminalFuncArray[funcIndex].help != NULL)	{
 8006590:	490f      	ldr	r1, [pc, #60]	; (80065d0 <prv_printTerminalFuncHelp+0x60>)
 8006592:	68fa      	ldr	r2, [r7, #12]
 8006594:	4613      	mov	r3, r2
 8006596:	005b      	lsls	r3, r3, #1
 8006598:	4413      	add	r3, r2
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	440b      	add	r3, r1
 800659e:	3304      	adds	r3, #4
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00c      	beq.n	80065c0 <prv_printTerminalFuncHelp+0x50>
		microrl_printStringWithEndl(terminalFuncArray[funcIndex].help);
 80065a6:	490a      	ldr	r1, [pc, #40]	; (80065d0 <prv_printTerminalFuncHelp+0x60>)
 80065a8:	68fa      	ldr	r2, [r7, #12]
 80065aa:	4613      	mov	r3, r2
 80065ac:	005b      	lsls	r3, r3, #1
 80065ae:	4413      	add	r3, r2
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	440b      	add	r3, r1
 80065b4:	3304      	adds	r3, #4
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4618      	mov	r0, r3
 80065ba:	f7ff fbe5 	bl	8005d88 <microrl_printStringWithEndl>
 80065be:	e002      	b.n	80065c6 <prv_printTerminalFuncHelp+0x56>
	}
	else	{
		microrl_printStringWithEndl("Help is not available for this command.");
 80065c0:	4804      	ldr	r0, [pc, #16]	; (80065d4 <prv_printTerminalFuncHelp+0x64>)
 80065c2:	f7ff fbe1 	bl	8005d88 <microrl_printStringWithEndl>
	}
}
 80065c6:	3710      	adds	r7, #16
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	0801a464 	.word	0x0801a464
 80065d0:	20008a28 	.word	0x20008a28
 80065d4:	0801a478 	.word	0x0801a478

080065d8 <prv_TerminalFunc_pwroff>:
#include "FreeRTOSUser.h"
//#include "MP_Power.h"

//=======================================================================================
int prv_TerminalFunc_pwroff(int argc, const char * const * argv)
{
 80065d8:	b480      	push	{r7}
 80065da:	b083      	sub	sp, #12
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
//
//		osMutexRelease(MircoRL_Tx_MutexHandle);
//	}
//
//
	return 0;
 80065e2:	2300      	movs	r3, #0

}
 80065e4:	4618      	mov	r0, r3
 80065e6:	370c      	adds	r7, #12
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bc80      	pop	{r7}
 80065ec:	4770      	bx	lr
	...

080065f0 <__NVIC_SystemReset>:
{
 80065f0:	b480      	push	{r7}
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80065f8:	4b05      	ldr	r3, [pc, #20]	; (8006610 <__NVIC_SystemReset+0x20>)
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006600:	4903      	ldr	r1, [pc, #12]	; (8006610 <__NVIC_SystemReset+0x20>)
 8006602:	4b04      	ldr	r3, [pc, #16]	; (8006614 <__NVIC_SystemReset+0x24>)
 8006604:	4313      	orrs	r3, r2
 8006606:	60cb      	str	r3, [r1, #12]
 8006608:	f3bf 8f4f 	dsb	sy
    __NOP();
 800660c:	bf00      	nop
 800660e:	e7fd      	b.n	800660c <__NVIC_SystemReset+0x1c>
 8006610:	e000ed00 	.word	0xe000ed00
 8006614:	05fa0004 	.word	0x05fa0004

08006618 <prv_TerminalFunc_reset>:



//=======================================================================================
int prv_TerminalFunc_reset(int argc, const char * const * argv)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
//	microrl_printString ("Set something...");
//	microrl_printEndl();
	osStatus status = osMutexWait(MircoRL_Tx_MutexHandle, portMAX_DELAY);					// ждем пока не освободиться порт терминала на передачу
 8006622:	4b19      	ldr	r3, [pc, #100]	; (8006688 <prv_TerminalFunc_reset+0x70>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f04f 31ff 	mov.w	r1, #4294967295
 800662a:	4618      	mov	r0, r3
 800662c:	f00a ff2c 	bl	8011488 <osMutexAcquire>
 8006630:	60f8      	str	r0, [r7, #12]

	if (status == osOK)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d122      	bne.n	800667e <prv_TerminalFunc_reset+0x66>
	{
		switch (argc)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2b01      	cmp	r3, #1
 800663c:	d006      	beq.n	800664c <prv_TerminalFunc_reset+0x34>
 800663e:	2b02      	cmp	r3, #2
 8006640:	d00a      	beq.n	8006658 <prv_TerminalFunc_reset+0x40>
 8006642:	2b00      	cmp	r3, #0
 8006644:	d112      	bne.n	800666c <prv_TerminalFunc_reset+0x54>
		{
		case 0:																				// если вызвали reset без параметра - показать help
			prv_printHelpReset();
 8006646:	f000 f823 	bl	8006690 <prv_printHelpReset>
			break;
 800664a:	e013      	b.n	8006674 <prv_TerminalFunc_reset+0x5c>
		case 1:
			prv_TerminalFuncResetParams(argv[0]);											// реакция на параметры в reset
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4618      	mov	r0, r3
 8006652:	f000 f82d 	bl	80066b0 <prv_TerminalFuncResetParams>
			break;
 8006656:	e00d      	b.n	8006674 <prv_TerminalFunc_reset+0x5c>
		case 2:
			prv_TerminalFuncResetParamsArg(argv[0], argv[1]);								// реакция на параметры с 1 аргументом в set
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	3304      	adds	r3, #4
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4619      	mov	r1, r3
 8006664:	4610      	mov	r0, r2
 8006666:	f000 f855 	bl	8006714 <prv_TerminalFuncResetParamsArg>
			break;
 800666a:	e003      	b.n	8006674 <prv_TerminalFunc_reset+0x5c>
		default:																			// двойной уровень параметров не сделан
			microrl_printStringWithEndl("Reset is available only for 1-level commands, yet (Ex:  '>reset all', '>reset gps'");
 800666c:	4807      	ldr	r0, [pc, #28]	; (800668c <prv_TerminalFunc_reset+0x74>)
 800666e:	f7ff fb8b 	bl	8005d88 <microrl_printStringWithEndl>
			break;
 8006672:	bf00      	nop
		}

		osMutexRelease(MircoRL_Tx_MutexHandle);
 8006674:	4b04      	ldr	r3, [pc, #16]	; (8006688 <prv_TerminalFunc_reset+0x70>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4618      	mov	r0, r3
 800667a:	f00a ff63 	bl	8011544 <osMutexRelease>
	}


	return 0;
 800667e:	2300      	movs	r3, #0

}
 8006680:	4618      	mov	r0, r3
 8006682:	3710      	adds	r7, #16
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}
 8006688:	20008a24 	.word	0x20008a24
 800668c:	0801a4a0 	.word	0x0801a4a0

08006690 <prv_printHelpReset>:
//=======================================================================================
void prv_printHelpReset(void)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	af00      	add	r7, sp, #0
	// здесь нужно расписать какие есть параметры у set
	microrl_printStringWithEndl("reset <parameter>");
 8006694:	4804      	ldr	r0, [pc, #16]	; (80066a8 <prv_printHelpReset+0x18>)
 8006696:	f7ff fb77 	bl	8005d88 <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  all           - reset periferial cpu (STM)");
 800669a:	4804      	ldr	r0, [pc, #16]	; (80066ac <prv_printHelpReset+0x1c>)
 800669c:	f7ff fb74 	bl	8005d88 <microrl_printStringWithEndl>
//	microrl_printStringWithEndl("  cpu           - reset main CPU");
//	microrl_printStringWithEndl("  gps           - reset GPS receiver");
	microrl_printEndl();
 80066a0:	f7ff fb82 	bl	8005da8 <microrl_printEndl>
}
 80066a4:	bf00      	nop
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	0801a4f4 	.word	0x0801a4f4
 80066ac:	0801a508 	.word	0x0801a508

080066b0 <prv_TerminalFuncResetParams>:
//=======================================================================================
void prv_TerminalFuncResetParams(const char *name)									// set для 1 параметра
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b082      	sub	sp, #8
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
	UNUSED(name);
//	microrl_printString("Command: ");
//	microrl_printStringWithEndl(name);

	if (strncmp(name, "all", 3) == 0)
 80066b8:	2203      	movs	r2, #3
 80066ba:	4912      	ldr	r1, [pc, #72]	; (8006704 <prv_TerminalFuncResetParams+0x54>)
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f00f fb60 	bl	8015d82 <strncmp>
 80066c2:	4603      	mov	r3, r0
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d101      	bne.n	80066cc <prv_TerminalFuncResetParams+0x1c>
	{
		NVIC_SystemReset();
 80066c8:	f7ff ff92 	bl	80065f0 <__NVIC_SystemReset>
	}
	else if (strncmp(name, "gps", 3) == 0)
 80066cc:	2203      	movs	r2, #3
 80066ce:	490e      	ldr	r1, [pc, #56]	; (8006708 <prv_TerminalFuncResetParams+0x58>)
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f00f fb56 	bl	8015d82 <strncmp>
 80066d6:	4603      	mov	r3, r0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d103      	bne.n	80066e4 <prv_TerminalFuncResetParams+0x34>
	{
		microrl_printStringWithEndl("not realised yet");
 80066dc:	480b      	ldr	r0, [pc, #44]	; (800670c <prv_TerminalFuncResetParams+0x5c>)
 80066de:	f7ff fb53 	bl	8005d88 <microrl_printStringWithEndl>
//	else if (strncmp(name, "serial", 3) == 0)
//		TerminalPrintGet_SERIAL();
//	else
//		microrl_printStringWithEndl("Unknown parameter for command 'GET'");

}
 80066e2:	e00a      	b.n	80066fa <prv_TerminalFuncResetParams+0x4a>
	else if (strncmp(name, "cpu", 3) == 0)
 80066e4:	2203      	movs	r2, #3
 80066e6:	490a      	ldr	r1, [pc, #40]	; (8006710 <prv_TerminalFuncResetParams+0x60>)
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f00f fb4a 	bl	8015d82 <strncmp>
 80066ee:	4603      	mov	r3, r0
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d102      	bne.n	80066fa <prv_TerminalFuncResetParams+0x4a>
		microrl_printStringWithEndl("not realised yet");
 80066f4:	4805      	ldr	r0, [pc, #20]	; (800670c <prv_TerminalFuncResetParams+0x5c>)
 80066f6:	f7ff fb47 	bl	8005d88 <microrl_printStringWithEndl>
}
 80066fa:	bf00      	nop
 80066fc:	3708      	adds	r7, #8
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop
 8006704:	0801a538 	.word	0x0801a538
 8006708:	0801a53c 	.word	0x0801a53c
 800670c:	0801a540 	.word	0x0801a540
 8006710:	0801a554 	.word	0x0801a554

08006714 <prv_TerminalFuncResetParamsArg>:
//=======================================================================================

void prv_TerminalFuncResetParamsArg(const char *name, const char *param)			// set для 2 параметров
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]





}
 800671e:	bf00      	nop
 8006720:	370c      	adds	r7, #12
 8006722:	46bd      	mov	sp, r7
 8006724:	bc80      	pop	{r7}
 8006726:	4770      	bx	lr

08006728 <prv_TerminalFunc_set>:
static char str[255];


//=======================================================================================
int prv_TerminalFunc_set(int argc, const char * const * argv)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
//	microrl_printString ("Set something...");
//	microrl_printEndl();
	osStatus status = osMutexWait(MircoRL_Tx_MutexHandle, portMAX_DELAY);					// ждем пока не освободиться порт терминала на передачу
 8006732:	4b45      	ldr	r3, [pc, #276]	; (8006848 <prv_TerminalFunc_set+0x120>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f04f 31ff 	mov.w	r1, #4294967295
 800673a:	4618      	mov	r0, r3
 800673c:	f00a fea4 	bl	8011488 <osMutexAcquire>
 8006740:	60f8      	str	r0, [r7, #12]

	if (status == osOK)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d17a      	bne.n	800683e <prv_TerminalFunc_set+0x116>
	{
		switch (argc)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2b03      	cmp	r3, #3
 800674c:	d86d      	bhi.n	800682a <prv_TerminalFunc_set+0x102>
 800674e:	a201      	add	r2, pc, #4	; (adr r2, 8006754 <prv_TerminalFunc_set+0x2c>)
 8006750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006754:	08006765 	.word	0x08006765
 8006758:	0800676b 	.word	0x0800676b
 800675c:	08006777 	.word	0x08006777
 8006760:	0800678b 	.word	0x0800678b
		{
		case 0:																				// если вызвали get без параметра - показать help
			prv_printHelpSet();
 8006764:	f000 f888 	bl	8006878 <prv_printHelpSet>
			break;
 8006768:	e064      	b.n	8006834 <prv_TerminalFunc_set+0x10c>
		case 1:
			prv_TerminalFuncSetParams(argv[0]);												// реакция на параметры в set
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4618      	mov	r0, r3
 8006770:	f000 f8c0 	bl	80068f4 <prv_TerminalFuncSetParams>
//			EEPROM_OptionsSave();
			break;
 8006774:	e05e      	b.n	8006834 <prv_TerminalFunc_set+0x10c>
		case 2:
			prv_TerminalFuncSetParamsArg(argv[0], argv[1]);									// реакция на параметры с 1 аргументом в set
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	3304      	adds	r3, #4
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4619      	mov	r1, r3
 8006782:	4610      	mov	r0, r2
 8006784:	f000 f8c0 	bl	8006908 <prv_TerminalFuncSetParamsArg>
//			EEPROM_OptionsSave();
			break;
 8006788:	e054      	b.n	8006834 <prv_TerminalFunc_set+0x10c>
		case 3:																				// реакция на параметры с 2 аргументами в set
			if ( (strncmp(argv[0], "pwroff", 5) == 0) && (strncmp(argv[1], "5v", 2) == 0))	// отложенное выключение питания +5V, чтобы raspberry успел завершить работу
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	2205      	movs	r2, #5
 8006790:	492e      	ldr	r1, [pc, #184]	; (800684c <prv_TerminalFunc_set+0x124>)
 8006792:	4618      	mov	r0, r3
 8006794:	f00f faf5 	bl	8015d82 <strncmp>
 8006798:	4603      	mov	r3, r0
 800679a:	2b00      	cmp	r3, #0
 800679c:	d107      	bne.n	80067ae <prv_TerminalFunc_set+0x86>
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	3304      	adds	r3, #4
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	2202      	movs	r2, #2
 80067a6:	492a      	ldr	r1, [pc, #168]	; (8006850 <prv_TerminalFunc_set+0x128>)
 80067a8:	4618      	mov	r0, r3
 80067aa:	f00f faea 	bl	8015d82 <strncmp>
//				{
//					osDelay(Delay*1000);
//					MP_Power_Set_5V0(POWERSTATE_DISABLE);
//				}
			}
			if ( (strncmp(argv[0], "mode", 5) == 0) && (strncmp(argv[1], "auto", 2) == 0))	// время для интервала отсылки данных в автоматическом режиме (в миллисекундах)
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2205      	movs	r2, #5
 80067b4:	4927      	ldr	r1, [pc, #156]	; (8006854 <prv_TerminalFunc_set+0x12c>)
 80067b6:	4618      	mov	r0, r3
 80067b8:	f00f fae3 	bl	8015d82 <strncmp>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d137      	bne.n	8006832 <prv_TerminalFunc_set+0x10a>
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	3304      	adds	r3, #4
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	2202      	movs	r2, #2
 80067ca:	4923      	ldr	r1, [pc, #140]	; (8006858 <prv_TerminalFunc_set+0x130>)
 80067cc:	4618      	mov	r0, r3
 80067ce:	f00f fad8 	bl	8015d82 <strncmp>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d12c      	bne.n	8006832 <prv_TerminalFunc_set+0x10a>
			{
				uint32_t  Interval = 0;
 80067d8:	2300      	movs	r3, #0
 80067da:	60bb      	str	r3, [r7, #8]
				if ( (sscanf(argv[2], "%lu", &Interval) == EOF) || (Interval <100 ) || (Interval > 100000) )
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	3308      	adds	r3, #8
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f107 0208 	add.w	r2, r7, #8
 80067e6:	491d      	ldr	r1, [pc, #116]	; (800685c <prv_TerminalFunc_set+0x134>)
 80067e8:	4618      	mov	r0, r3
 80067ea:	f00f fa53 	bl	8015c94 <siscanf>
 80067ee:	4603      	mov	r3, r0
 80067f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067f4:	d006      	beq.n	8006804 <prv_TerminalFunc_set+0xdc>
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	2b63      	cmp	r3, #99	; 0x63
 80067fa:	d903      	bls.n	8006804 <prv_TerminalFunc_set+0xdc>
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	4a18      	ldr	r2, [pc, #96]	; (8006860 <prv_TerminalFunc_set+0x138>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d904      	bls.n	800680e <prv_TerminalFunc_set+0xe6>
				{
					microrl_printStringWithEndl("Incorrect value for automode interval (100..100000 msec)");
 8006804:	4817      	ldr	r0, [pc, #92]	; (8006864 <prv_TerminalFunc_set+0x13c>)
 8006806:	f7ff fabf 	bl	8005d88 <microrl_printStringWithEndl>
					return 1;
 800680a:	2301      	movs	r3, #1
 800680c:	e018      	b.n	8006840 <prv_TerminalFunc_set+0x118>
				}
				else
				{
					ExchangeStruct.TerminalModeAuto_interval = Interval;
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	4a15      	ldr	r2, [pc, #84]	; (8006868 <prv_TerminalFunc_set+0x140>)
 8006812:	6113      	str	r3, [r2, #16]
					sprintf(str, "Auto mode interval = %lu msec.\n",	 	ExchangeStruct.TerminalModeAuto_interval );				microrl_printString(str);
 8006814:	4b14      	ldr	r3, [pc, #80]	; (8006868 <prv_TerminalFunc_set+0x140>)
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	461a      	mov	r2, r3
 800681a:	4914      	ldr	r1, [pc, #80]	; (800686c <prv_TerminalFunc_set+0x144>)
 800681c:	4814      	ldr	r0, [pc, #80]	; (8006870 <prv_TerminalFunc_set+0x148>)
 800681e:	f00f fa19 	bl	8015c54 <siprintf>
 8006822:	4813      	ldr	r0, [pc, #76]	; (8006870 <prv_TerminalFunc_set+0x148>)
 8006824:	f7ff faa4 	bl	8005d70 <microrl_printString>
				}

			}
//			EEPROM_OptionsSave();
			break;
 8006828:	e003      	b.n	8006832 <prv_TerminalFunc_set+0x10a>
		default:																			// тройной уровень параметров не сделан (пока)
			microrl_printStringWithEndl("Set is available only for 1,2-level commands, yet (Ex:  '>set pwr', '>set pwr on'");
 800682a:	4812      	ldr	r0, [pc, #72]	; (8006874 <prv_TerminalFunc_set+0x14c>)
 800682c:	f7ff faac 	bl	8005d88 <microrl_printStringWithEndl>
			break;
 8006830:	e000      	b.n	8006834 <prv_TerminalFunc_set+0x10c>
			break;
 8006832:	bf00      	nop
		}

		osMutexRelease(MircoRL_Tx_MutexHandle);
 8006834:	4b04      	ldr	r3, [pc, #16]	; (8006848 <prv_TerminalFunc_set+0x120>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4618      	mov	r0, r3
 800683a:	f00a fe83 	bl	8011544 <osMutexRelease>
	}


	return 0;
 800683e:	2300      	movs	r3, #0

}
 8006840:	4618      	mov	r0, r3
 8006842:	3710      	adds	r7, #16
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}
 8006848:	20008a24 	.word	0x20008a24
 800684c:	0801a558 	.word	0x0801a558
 8006850:	0801a560 	.word	0x0801a560
 8006854:	0801a564 	.word	0x0801a564
 8006858:	0801a56c 	.word	0x0801a56c
 800685c:	0801a574 	.word	0x0801a574
 8006860:	000186a0 	.word	0x000186a0
 8006864:	0801a578 	.word	0x0801a578
 8006868:	20008c18 	.word	0x20008c18
 800686c:	0801a5b4 	.word	0x0801a5b4
 8006870:	20000380 	.word	0x20000380
 8006874:	0801a5d4 	.word	0x0801a5d4

08006878 <prv_printHelpSet>:
//=======================================================================================
void prv_printHelpSet(void)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	af00      	add	r7, sp, #0
	// здесь нужно расписать какие есть параметры у set
	microrl_printStringWithEndl("set <parameter>");
 800687c:	4812      	ldr	r0, [pc, #72]	; (80068c8 <prv_printHelpSet+0x50>)
 800687e:	f7ff fa83 	bl	8005d88 <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  buzzer X      - Set buzzer state (on|off)");
 8006882:	4812      	ldr	r0, [pc, #72]	; (80068cc <prv_printHelpSet+0x54>)
 8006884:	f7ff fa80 	bl	8005d88 <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  defaults      - Set factory default settings");
 8006888:	4811      	ldr	r0, [pc, #68]	; (80068d0 <prv_printHelpSet+0x58>)
 800688a:	f7ff fa7d 	bl	8005d88 <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  mode X        - AUTO or by requests (auto|cmd)");
 800688e:	4811      	ldr	r0, [pc, #68]	; (80068d4 <prv_printHelpSet+0x5c>)
 8006890:	f7ff fa7a 	bl	8005d88 <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  mode auto X   - AUTO mode interval (100..100 000 msec)");
 8006894:	4810      	ldr	r0, [pc, #64]	; (80068d8 <prv_printHelpSet+0x60>)
 8006896:	f7ff fa77 	bl	8005d88 <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  options       - Manage options in EEPROM (format|defaults|load|save)");
 800689a:	4810      	ldr	r0, [pc, #64]	; (80068dc <prv_printHelpSet+0x64>)
 800689c:	f7ff fa74 	bl	8005d88 <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  pwrcalref1 X  - Set ADC battery calibration: REF voltage  3.3V (0..10 volts)");
 80068a0:	480f      	ldr	r0, [pc, #60]	; (80068e0 <prv_printHelpSet+0x68>)
 80068a2:	f7ff fa71 	bl	8005d88 <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  pwrcalref2 X  - Set ADC battery calibration: REF voltage 12.0V (0..20 volts)");
 80068a6:	480f      	ldr	r0, [pc, #60]	; (80068e4 <prv_printHelpSet+0x6c>)
 80068a8:	f7ff fa6e 	bl	8005d88 <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  pwron X       - Set power state ON  (5v|10v|eop|encoder|hvps|cpu|cpld)");
 80068ac:	480e      	ldr	r0, [pc, #56]	; (80068e8 <prv_printHelpSet+0x70>)
 80068ae:	f7ff fa6b 	bl	8005d88 <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  pwroff X      - Set power state OFF (5v|10v|eop|encoder|hvps|cpu|cpld)");
 80068b2:	480e      	ldr	r0, [pc, #56]	; (80068ec <prv_printHelpSet+0x74>)
 80068b4:	f7ff fa68 	bl	8005d88 <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  pwroff 5v X   - Set power OFF with timeout (1..1000 sec)");
 80068b8:	480d      	ldr	r0, [pc, #52]	; (80068f0 <prv_printHelpSet+0x78>)
 80068ba:	f7ff fa65 	bl	8005d88 <microrl_printStringWithEndl>

	//microrl_printStringWithEndl("  gps			- Set gps mode - (GPS/GLONASS)");
	//microrl_printStringWithEndl("  bat			- Battery calibration constants");

	//microrl_printStringWithEndl("  serial	- set serial number");	//undocumented command
	microrl_printEndl();
 80068be:	f7ff fa73 	bl	8005da8 <microrl_printEndl>
}
 80068c2:	bf00      	nop
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	0801a628 	.word	0x0801a628
 80068cc:	0801a638 	.word	0x0801a638
 80068d0:	0801a664 	.word	0x0801a664
 80068d4:	0801a694 	.word	0x0801a694
 80068d8:	0801a6c8 	.word	0x0801a6c8
 80068dc:	0801a704 	.word	0x0801a704
 80068e0:	0801a74c 	.word	0x0801a74c
 80068e4:	0801a79c 	.word	0x0801a79c
 80068e8:	0801a7ec 	.word	0x0801a7ec
 80068ec:	0801a838 	.word	0x0801a838
 80068f0:	0801a884 	.word	0x0801a884

080068f4 <prv_TerminalFuncSetParams>:
//=======================================================================================
void prv_TerminalFuncSetParams(const char *name)									// set для 1 параметра
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
//	else if (strncmp(name, "serial", 3) == 0)
//		TerminalPrintGet_SERIAL();
//	else
//		microrl_printStringWithEndl("Unknown parameter for command 'GET'");

}
 80068fc:	bf00      	nop
 80068fe:	370c      	adds	r7, #12
 8006900:	46bd      	mov	sp, r7
 8006902:	bc80      	pop	{r7}
 8006904:	4770      	bx	lr
	...

08006908 <prv_TerminalFuncSetParamsArg>:
//=======================================================================================

void prv_TerminalFuncSetParamsArg(const char *name, const char *param)			// set для 2 параметров
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b082      	sub	sp, #8
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
//	microrl_printStringWithEndl(name);
//	microrl_printString("Param: ");
//	microrl_printStringWithEndl(param);


	if (strncmp(name, "mode", 3) == 0)
 8006912:	2203      	movs	r2, #3
 8006914:	4938      	ldr	r1, [pc, #224]	; (80069f8 <prv_TerminalFuncSetParamsArg+0xf0>)
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f00f fa33 	bl	8015d82 <strncmp>
 800691c:	4603      	mov	r3, r0
 800691e:	2b00      	cmp	r3, #0
 8006920:	d11e      	bne.n	8006960 <prv_TerminalFuncSetParamsArg+0x58>
	{
		if (strncmp(param, "auto", 3) == 0)
 8006922:	2203      	movs	r2, #3
 8006924:	4935      	ldr	r1, [pc, #212]	; (80069fc <prv_TerminalFuncSetParamsArg+0xf4>)
 8006926:	6838      	ldr	r0, [r7, #0]
 8006928:	f00f fa2b 	bl	8015d82 <strncmp>
 800692c:	4603      	mov	r3, r0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d105      	bne.n	800693e <prv_TerminalFuncSetParamsArg+0x36>
		{
			ExchangeStruct.TerminalMode = TERMINALMODE_AUTO;
 8006932:	4b33      	ldr	r3, [pc, #204]	; (8006a00 <prv_TerminalFuncSetParamsArg+0xf8>)
 8006934:	2200      	movs	r2, #0
 8006936:	739a      	strb	r2, [r3, #14]
			EEPROM_OptionsSave();
 8006938:	f7fb fb8c 	bl	8002054 <EEPROM_OptionsSave>
 800693c:	e010      	b.n	8006960 <prv_TerminalFuncSetParamsArg+0x58>
		}
		else if (strncmp(param, "cmd", 3) == 0)
 800693e:	2203      	movs	r2, #3
 8006940:	4930      	ldr	r1, [pc, #192]	; (8006a04 <prv_TerminalFuncSetParamsArg+0xfc>)
 8006942:	6838      	ldr	r0, [r7, #0]
 8006944:	f00f fa1d 	bl	8015d82 <strncmp>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d105      	bne.n	800695a <prv_TerminalFuncSetParamsArg+0x52>
		{
			ExchangeStruct.TerminalMode = TERMINALMODE_COMMAND;
 800694e:	4b2c      	ldr	r3, [pc, #176]	; (8006a00 <prv_TerminalFuncSetParamsArg+0xf8>)
 8006950:	2201      	movs	r2, #1
 8006952:	739a      	strb	r2, [r3, #14]
			EEPROM_OptionsSave();
 8006954:	f7fb fb7e 	bl	8002054 <EEPROM_OptionsSave>
 8006958:	e002      	b.n	8006960 <prv_TerminalFuncSetParamsArg+0x58>
		}
		else
			microrl_printStringWithEndl("Unknown argument for parameter: mode");
 800695a:	482b      	ldr	r0, [pc, #172]	; (8006a08 <prv_TerminalFuncSetParamsArg+0x100>)
 800695c:	f7ff fa14 	bl	8005d88 <microrl_printStringWithEndl>
	}
	if (strncmp(name, "buzzer", 3) == 0)
 8006960:	2203      	movs	r2, #3
 8006962:	492a      	ldr	r1, [pc, #168]	; (8006a0c <prv_TerminalFuncSetParamsArg+0x104>)
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f00f fa0c 	bl	8015d82 <strncmp>
 800696a:	4603      	mov	r3, r0
 800696c:	2b00      	cmp	r3, #0
 800696e:	d03f      	beq.n	80069f0 <prv_TerminalFuncSetParamsArg+0xe8>
//			EEPROM_OptionsSave();
//		}
//		else
//			microrl_printStringWithEndl("Unknown argument for parameter: mode");
	}
	else if (strncmp(name, "pwron", 5) == 0)
 8006970:	2205      	movs	r2, #5
 8006972:	4927      	ldr	r1, [pc, #156]	; (8006a10 <prv_TerminalFuncSetParamsArg+0x108>)
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f00f fa04 	bl	8015d82 <strncmp>
 800697a:	4603      	mov	r3, r0
 800697c:	2b00      	cmp	r3, #0
 800697e:	d037      	beq.n	80069f0 <prv_TerminalFuncSetParamsArg+0xe8>
//		else if (strncmp(param, "cpld", 4) == 0)
//			MP_Power_Set_CPLD(POWERSTATE_ENABLE);
//		else
//			microrl_printStringWithEndl("Unknown argument for parameter: pwron (5v|10V|eop|encoder|HVPS|cpu|cpld)");
	}
	else if (strncmp(name, "pwroff", 5) == 0)
 8006980:	2205      	movs	r2, #5
 8006982:	4924      	ldr	r1, [pc, #144]	; (8006a14 <prv_TerminalFuncSetParamsArg+0x10c>)
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f00f f9fc 	bl	8015d82 <strncmp>
 800698a:	4603      	mov	r3, r0
 800698c:	2b00      	cmp	r3, #0
 800698e:	d02f      	beq.n	80069f0 <prv_TerminalFuncSetParamsArg+0xe8>
//		else if (strncmp(param, "cpld", 4) == 0)
//			MP_Power_Set_CPLD(POWERSTATE_DISABLE);
//		else
//			microrl_printStringWithEndl("Unknown argument for parameter: pwroff (5v|10V|eop|encoder|HVPS|cpu|cpld)");
	}
	else if (strncmp(name, "serial", 3) == 0)
 8006990:	2203      	movs	r2, #3
 8006992:	4921      	ldr	r1, [pc, #132]	; (8006a18 <prv_TerminalFuncSetParamsArg+0x110>)
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f00f f9f4 	bl	8015d82 <strncmp>
 800699a:	4603      	mov	r3, r0
 800699c:	2b00      	cmp	r3, #0
 800699e:	d112      	bne.n	80069c6 <prv_TerminalFuncSetParamsArg+0xbe>
	{
		if (strlen(param) == 8)
 80069a0:	6838      	ldr	r0, [r7, #0]
 80069a2:	f7f9 fbf7 	bl	8000194 <strlen>
 80069a6:	4603      	mov	r3, r0
 80069a8:	2b08      	cmp	r3, #8
 80069aa:	d108      	bne.n	80069be <prv_TerminalFuncSetParamsArg+0xb6>
		{
			strcpy(ExchangeStruct.DeviceSerialNumber, param);
 80069ac:	6839      	ldr	r1, [r7, #0]
 80069ae:	481b      	ldr	r0, [pc, #108]	; (8006a1c <prv_TerminalFuncSetParamsArg+0x114>)
 80069b0:	f00f f9df 	bl	8015d72 <strcpy>
			TerminalPrintGet_SERIAL();
 80069b4:	f7ff fd24 	bl	8006400 <TerminalPrintGet_SERIAL>
			EEPROM_OptionsSave();
 80069b8:	f7fb fb4c 	bl	8002054 <EEPROM_OptionsSave>
//			microrl_printStringWithEndl("Unknown argument for 'set options'");
	}



}
 80069bc:	e018      	b.n	80069f0 <prv_TerminalFuncSetParamsArg+0xe8>
			microrl_printStringWithEndl("Illegal format for serial number. (8 chars/digits)");
 80069be:	4818      	ldr	r0, [pc, #96]	; (8006a20 <prv_TerminalFuncSetParamsArg+0x118>)
 80069c0:	f7ff f9e2 	bl	8005d88 <microrl_printStringWithEndl>
}
 80069c4:	e014      	b.n	80069f0 <prv_TerminalFuncSetParamsArg+0xe8>
	else if (strncmp(name, "pwrcalref1", 10) == 0)										// калибровка батареи - опорное напряжение АЦП 3.3V
 80069c6:	220a      	movs	r2, #10
 80069c8:	4916      	ldr	r1, [pc, #88]	; (8006a24 <prv_TerminalFuncSetParamsArg+0x11c>)
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f00f f9d9 	bl	8015d82 <strncmp>
 80069d0:	4603      	mov	r3, r0
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d00c      	beq.n	80069f0 <prv_TerminalFuncSetParamsArg+0xe8>
	else if (strncmp(name, "pwrcalref2", 10) == 0)										// калибровка батареи - напряжение 12V
 80069d6:	220a      	movs	r2, #10
 80069d8:	4913      	ldr	r1, [pc, #76]	; (8006a28 <prv_TerminalFuncSetParamsArg+0x120>)
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f00f f9d1 	bl	8015d82 <strncmp>
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d004      	beq.n	80069f0 <prv_TerminalFuncSetParamsArg+0xe8>
	else if (strncmp(name, "optinos", 3) == 0)										// калибровка батареи - напряжение 12V
 80069e6:	2203      	movs	r2, #3
 80069e8:	4910      	ldr	r1, [pc, #64]	; (8006a2c <prv_TerminalFuncSetParamsArg+0x124>)
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f00f f9c9 	bl	8015d82 <strncmp>
}
 80069f0:	bf00      	nop
 80069f2:	3708      	adds	r7, #8
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	0801a564 	.word	0x0801a564
 80069fc:	0801a56c 	.word	0x0801a56c
 8006a00:	20008c18 	.word	0x20008c18
 8006a04:	0801a8c0 	.word	0x0801a8c0
 8006a08:	0801a8c4 	.word	0x0801a8c4
 8006a0c:	0801a8ec 	.word	0x0801a8ec
 8006a10:	0801a8f4 	.word	0x0801a8f4
 8006a14:	0801a558 	.word	0x0801a558
 8006a18:	0801a8fc 	.word	0x0801a8fc
 8006a1c:	20008c1c 	.word	0x20008c1c
 8006a20:	0801a904 	.word	0x0801a904
 8006a24:	0801a938 	.word	0x0801a938
 8006a28:	0801a944 	.word	0x0801a944
 8006a2c:	0801a950 	.word	0x0801a950

08006a30 <MICRORL_UART_SendString>:

	xSemaphoreGive(MicroRL_xTxSemaphore);
}
//=======================================================================================
void MICRORL_UART_SendString(const char *str)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
	xSemaphoreTake(MicroRL_xTxSemaphore, portMAX_DELAY);
 8006a38:	4b15      	ldr	r3, [pc, #84]	; (8006a90 <MICRORL_UART_SendString+0x60>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f04f 31ff 	mov.w	r1, #4294967295
 8006a40:	4618      	mov	r0, r3
 8006a42:	f00b fc4b 	bl	80122dc <xQueueSemaphoreTake>
	int i = 0;
 8006a46:	2300      	movs	r3, #0
 8006a48:	60fb      	str	r3, [r7, #12]
	while (str[i] != 0)
 8006a4a:	e00f      	b.n	8006a6c <MICRORL_UART_SendString+0x3c>
	{
//		prv_SendChar(str[i]);
		while(!(MICRORL_USART->SR & USART_SR_TC)); 										//Ждем установки флага TC - завершения передачи
 8006a4c:	bf00      	nop
 8006a4e:	4b11      	ldr	r3, [pc, #68]	; (8006a94 <MICRORL_UART_SendString+0x64>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d0f9      	beq.n	8006a4e <MICRORL_UART_SendString+0x1e>
		MICRORL_USART->DR = str[i];
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	4413      	add	r3, r2
 8006a60:	781a      	ldrb	r2, [r3, #0]
 8006a62:	4b0c      	ldr	r3, [pc, #48]	; (8006a94 <MICRORL_UART_SendString+0x64>)
 8006a64:	605a      	str	r2, [r3, #4]
		i++;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	3301      	adds	r3, #1
 8006a6a:	60fb      	str	r3, [r7, #12]
	while (str[i] != 0)
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	4413      	add	r3, r2
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d1e9      	bne.n	8006a4c <MICRORL_UART_SendString+0x1c>
	}
	xSemaphoreGive(MicroRL_xTxSemaphore);
 8006a78:	4b05      	ldr	r3, [pc, #20]	; (8006a90 <MICRORL_UART_SendString+0x60>)
 8006a7a:	6818      	ldr	r0, [r3, #0]
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	2200      	movs	r2, #0
 8006a80:	2100      	movs	r1, #0
 8006a82:	f00b f937 	bl	8011cf4 <xQueueGenericSend>
}
 8006a86:	bf00      	nop
 8006a88:	3710      	adds	r7, #16
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	20008a08 	.word	0x20008a08
 8006a94:	40005000 	.word	0x40005000

08006a98 <MICRORL_UART_GetChar>:
//=======================================================================================
int MICRORL_UART_GetChar()
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
	uint8_t data;
	if (MircoRL_sRxRingBuf.wrIdx != MircoRL_sRxRingBuf.rdIdx)
 8006a9e:	4b12      	ldr	r3, [pc, #72]	; (8006ae8 <MICRORL_UART_GetChar+0x50>)
 8006aa0:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8006aa4:	4b10      	ldr	r3, [pc, #64]	; (8006ae8 <MICRORL_UART_GetChar+0x50>)
 8006aa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d014      	beq.n	8006ad8 <MICRORL_UART_GetChar+0x40>
	{
		data = MircoRL_sRxRingBuf.data[MircoRL_sRxRingBuf.rdIdx++];
 8006aae:	4b0e      	ldr	r3, [pc, #56]	; (8006ae8 <MICRORL_UART_GetChar+0x50>)
 8006ab0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ab4:	1c5a      	adds	r2, r3, #1
 8006ab6:	490c      	ldr	r1, [pc, #48]	; (8006ae8 <MICRORL_UART_GetChar+0x50>)
 8006ab8:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
 8006abc:	4a0a      	ldr	r2, [pc, #40]	; (8006ae8 <MICRORL_UART_GetChar+0x50>)
 8006abe:	5cd3      	ldrb	r3, [r2, r3]
 8006ac0:	71fb      	strb	r3, [r7, #7]
		if (MircoRL_sRxRingBuf.rdIdx >= MICRORL_uartSIZE_OF_RING_BUFFER)
 8006ac2:	4b09      	ldr	r3, [pc, #36]	; (8006ae8 <MICRORL_UART_GetChar+0x50>)
 8006ac4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ac8:	2b7f      	cmp	r3, #127	; 0x7f
 8006aca:	dd03      	ble.n	8006ad4 <MICRORL_UART_GetChar+0x3c>
		{
			MircoRL_sRxRingBuf.rdIdx = 0;
 8006acc:	4b06      	ldr	r3, [pc, #24]	; (8006ae8 <MICRORL_UART_GetChar+0x50>)
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		}
		return (int)data;
 8006ad4:	79fb      	ldrb	r3, [r7, #7]
 8006ad6:	e001      	b.n	8006adc <MICRORL_UART_GetChar+0x44>
	}
	else
	{
		return (MICRORL_UART_NO_DATA);
 8006ad8:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	370c      	adds	r7, #12
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bc80      	pop	{r7}
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop
 8006ae8:	2000897c 	.word	0x2000897c

08006aec <MICRORL_UART_GetCharBlocking>:
//=======================================================================================
int MICRORL_UART_GetCharBlocking()
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	af00      	add	r7, sp, #0
	xSemaphoreTake(MicroRL_xRxSemaphore, portMAX_DELAY);
 8006af0:	4b05      	ldr	r3, [pc, #20]	; (8006b08 <MICRORL_UART_GetCharBlocking+0x1c>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f04f 31ff 	mov.w	r1, #4294967295
 8006af8:	4618      	mov	r0, r3
 8006afa:	f00b fbef 	bl	80122dc <xQueueSemaphoreTake>
	return MICRORL_UART_GetChar();
 8006afe:	f7ff ffcb 	bl	8006a98 <MICRORL_UART_GetChar>
 8006b02:	4603      	mov	r3, r0
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	bd80      	pop	{r7, pc}
 8006b08:	20008958 	.word	0x20008958

08006b0c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8006b0c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8006b0e:	e003      	b.n	8006b18 <LoopCopyDataInit>

08006b10 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8006b10:	4b0b      	ldr	r3, [pc, #44]	; (8006b40 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8006b12:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8006b14:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8006b16:	3104      	adds	r1, #4

08006b18 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8006b18:	480a      	ldr	r0, [pc, #40]	; (8006b44 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8006b1a:	4b0b      	ldr	r3, [pc, #44]	; (8006b48 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8006b1c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8006b1e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8006b20:	d3f6      	bcc.n	8006b10 <CopyDataInit>
  ldr r2, =_sbss
 8006b22:	4a0a      	ldr	r2, [pc, #40]	; (8006b4c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8006b24:	e002      	b.n	8006b2c <LoopFillZerobss>

08006b26 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8006b26:	2300      	movs	r3, #0
  str r3, [r2], #4
 8006b28:	f842 3b04 	str.w	r3, [r2], #4

08006b2c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8006b2c:	4b08      	ldr	r3, [pc, #32]	; (8006b50 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8006b2e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8006b30:	d3f9      	bcc.n	8006b26 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006b32:	f7fd f9dd 	bl	8003ef0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006b36:	f00e f98d 	bl	8014e54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006b3a:	f7fc fe1b 	bl	8003774 <main>
  bx lr
 8006b3e:	4770      	bx	lr
  ldr r3, =_sidata
 8006b40:	0801e974 	.word	0x0801e974
  ldr r0, =_sdata
 8006b44:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8006b48:	20000318 	.word	0x20000318
  ldr r2, =_sbss
 8006b4c:	20000318 	.word	0x20000318
  ldr r3, = _ebss
 8006b50:	20009e30 	.word	0x20009e30

08006b54 <COMP_ACQ_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006b54:	e7fe      	b.n	8006b54 <COMP_ACQ_IRQHandler>

08006b56 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006b56:	b580      	push	{r7, lr}
 8006b58:	b082      	sub	sp, #8
 8006b5a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006b60:	2003      	movs	r0, #3
 8006b62:	f000 fe81 	bl	8007868 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006b66:	2000      	movs	r0, #0
 8006b68:	f7fd f872 	bl	8003c50 <HAL_InitTick>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d002      	beq.n	8006b78 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	71fb      	strb	r3, [r7, #7]
 8006b76:	e001      	b.n	8006b7c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006b78:	f7fd f83c 	bl	8003bf4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006b7c:	79fb      	ldrb	r3, [r7, #7]
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3708      	adds	r7, #8
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
	...

08006b88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006b8c:	4b05      	ldr	r3, [pc, #20]	; (8006ba4 <HAL_IncTick+0x1c>)
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	4b05      	ldr	r3, [pc, #20]	; (8006ba8 <HAL_IncTick+0x20>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4413      	add	r3, r2
 8006b96:	4a03      	ldr	r2, [pc, #12]	; (8006ba4 <HAL_IncTick+0x1c>)
 8006b98:	6013      	str	r3, [r2, #0]
}
 8006b9a:	bf00      	nop
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bc80      	pop	{r7}
 8006ba0:	4770      	bx	lr
 8006ba2:	bf00      	nop
 8006ba4:	200091f4 	.word	0x200091f4
 8006ba8:	20000014 	.word	0x20000014

08006bac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006bac:	b480      	push	{r7}
 8006bae:	af00      	add	r7, sp, #0
  return uwTick;
 8006bb0:	4b02      	ldr	r3, [pc, #8]	; (8006bbc <HAL_GetTick+0x10>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bc80      	pop	{r7}
 8006bba:	4770      	bx	lr
 8006bbc:	200091f4 	.word	0x200091f4

08006bc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b084      	sub	sp, #16
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006bc8:	f7ff fff0 	bl	8006bac <HAL_GetTick>
 8006bcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bd8:	d004      	beq.n	8006be4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8006bda:	4b09      	ldr	r3, [pc, #36]	; (8006c00 <HAL_Delay+0x40>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	68fa      	ldr	r2, [r7, #12]
 8006be0:	4413      	add	r3, r2
 8006be2:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006be4:	bf00      	nop
 8006be6:	f7ff ffe1 	bl	8006bac <HAL_GetTick>
 8006bea:	4602      	mov	r2, r0
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	1ad3      	subs	r3, r2, r3
 8006bf0:	68fa      	ldr	r2, [r7, #12]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d8f7      	bhi.n	8006be6 <HAL_Delay+0x26>
  {
  }
}
 8006bf6:	bf00      	nop
 8006bf8:	3710      	adds	r7, #16
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	20000014 	.word	0x20000014

08006c04 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b08e      	sub	sp, #56	; 0x38
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8006c12:	2300      	movs	r3, #0
 8006c14:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8006c16:	2300      	movs	r3, #0
 8006c18:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d101      	bne.n	8006c24 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	e127      	b.n	8006e74 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	691b      	ldr	r3, [r3, #16]
 8006c28:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d115      	bne.n	8006c5e <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c40:	4b8e      	ldr	r3, [pc, #568]	; (8006e7c <HAL_ADC_Init+0x278>)
 8006c42:	6a1b      	ldr	r3, [r3, #32]
 8006c44:	4a8d      	ldr	r2, [pc, #564]	; (8006e7c <HAL_ADC_Init+0x278>)
 8006c46:	f043 0301 	orr.w	r3, r3, #1
 8006c4a:	6213      	str	r3, [r2, #32]
 8006c4c:	4b8b      	ldr	r3, [pc, #556]	; (8006e7c <HAL_ADC_Init+0x278>)
 8006c4e:	6a1b      	ldr	r3, [r3, #32]
 8006c50:	f003 0301 	and.w	r3, r3, #1
 8006c54:	60bb      	str	r3, [r7, #8]
 8006c56:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f7fa f983 	bl	8000f64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c62:	f003 0310 	and.w	r3, r3, #16
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	f040 80ff 	bne.w	8006e6a <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c70:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006c74:	f023 0302 	bic.w	r3, r3, #2
 8006c78:	f043 0202 	orr.w	r2, r3, #2
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8006c80:	4b7f      	ldr	r3, [pc, #508]	; (8006e80 <HAL_ADC_Init+0x27c>)
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	497c      	ldr	r1, [pc, #496]	; (8006e80 <HAL_ADC_Init+0x27c>)
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8006c9a:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ca8:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006caa:	6a3b      	ldr	r3, [r7, #32]
 8006cac:	fa93 f3a3 	rbit	r3, r3
 8006cb0:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006cb2:	69fb      	ldr	r3, [r7, #28]
 8006cb4:	fab3 f383 	clz	r3, r3
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8006cbe:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8006cc4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006ccc:	4619      	mov	r1, r3
 8006cce:	2302      	movs	r3, #2
 8006cd0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd4:	fa93 f3a3 	rbit	r3, r3
 8006cd8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8006cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cdc:	fab3 f383 	clz	r3, r3
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8006ce6:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8006ce8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cea:	4313      	orrs	r3, r2
 8006cec:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cf2:	2b10      	cmp	r3, #16
 8006cf4:	d007      	beq.n	8006d06 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d02:	4313      	orrs	r3, r2
 8006d04:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d10:	2b40      	cmp	r3, #64	; 0x40
 8006d12:	d04f      	beq.n	8006db4 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	699b      	ldr	r3, [r3, #24]
 8006d18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8006d26:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8006d28:	687a      	ldr	r2, [r7, #4]
 8006d2a:	6912      	ldr	r2, [r2, #16]
 8006d2c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8006d30:	d003      	beq.n	8006d3a <HAL_ADC_Init+0x136>
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	6912      	ldr	r2, [r2, #16]
 8006d36:	2a01      	cmp	r2, #1
 8006d38:	d102      	bne.n	8006d40 <HAL_ADC_Init+0x13c>
 8006d3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006d3e:	e000      	b.n	8006d42 <HAL_ADC_Init+0x13e>
 8006d40:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8006d42:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8006d44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d46:	4313      	orrs	r3, r2
 8006d48:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d125      	bne.n	8006da0 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d114      	bne.n	8006d88 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d62:	3b01      	subs	r3, #1
 8006d64:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8006d68:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d6a:	69ba      	ldr	r2, [r7, #24]
 8006d6c:	fa92 f2a2 	rbit	r2, r2
 8006d70:	617a      	str	r2, [r7, #20]
  return result;
 8006d72:	697a      	ldr	r2, [r7, #20]
 8006d74:	fab2 f282 	clz	r2, r2
 8006d78:	b2d2      	uxtb	r2, r2
 8006d7a:	4093      	lsls	r3, r2
 8006d7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006d80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d82:	4313      	orrs	r3, r2
 8006d84:	633b      	str	r3, [r7, #48]	; 0x30
 8006d86:	e00b      	b.n	8006da0 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d8c:	f043 0220 	orr.w	r2, r3, #32
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d98:	f043 0201 	orr.w	r2, r3, #1
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	685a      	ldr	r2, [r3, #4]
 8006da6:	4b37      	ldr	r3, [pc, #220]	; (8006e84 <HAL_ADC_Init+0x280>)
 8006da8:	4013      	ands	r3, r2
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	6812      	ldr	r2, [r2, #0]
 8006dae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006db0:	430b      	orrs	r3, r1
 8006db2:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	689a      	ldr	r2, [r3, #8]
 8006dba:	4b33      	ldr	r3, [pc, #204]	; (8006e88 <HAL_ADC_Init+0x284>)
 8006dbc:	4013      	ands	r3, r2
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	6812      	ldr	r2, [r2, #0]
 8006dc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006dc4:	430b      	orrs	r3, r1
 8006dc6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	691b      	ldr	r3, [r3, #16]
 8006dcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dd0:	d003      	beq.n	8006dda <HAL_ADC_Init+0x1d6>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d119      	bne.n	8006e0e <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006de0:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de8:	3b01      	subs	r3, #1
 8006dea:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8006dee:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006df0:	693a      	ldr	r2, [r7, #16]
 8006df2:	fa92 f2a2 	rbit	r2, r2
 8006df6:	60fa      	str	r2, [r7, #12]
  return result;
 8006df8:	68fa      	ldr	r2, [r7, #12]
 8006dfa:	fab2 f282 	clz	r2, r2
 8006dfe:	b2d2      	uxtb	r2, r2
 8006e00:	fa03 f202 	lsl.w	r2, r3, r2
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	430a      	orrs	r2, r1
 8006e0a:	631a      	str	r2, [r3, #48]	; 0x30
 8006e0c:	e007      	b.n	8006e1e <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8006e1c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	689a      	ldr	r2, [r3, #8]
 8006e24:	4b19      	ldr	r3, [pc, #100]	; (8006e8c <HAL_ADC_Init+0x288>)
 8006e26:	4013      	ands	r3, r2
 8006e28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d10b      	bne.n	8006e46 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2200      	movs	r2, #0
 8006e32:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e38:	f023 0303 	bic.w	r3, r3, #3
 8006e3c:	f043 0201 	orr.w	r2, r3, #1
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	64da      	str	r2, [r3, #76]	; 0x4c
 8006e44:	e014      	b.n	8006e70 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e4a:	f023 0312 	bic.w	r3, r3, #18
 8006e4e:	f043 0210 	orr.w	r2, r3, #16
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e5a:	f043 0201 	orr.w	r2, r3, #1
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8006e62:	2301      	movs	r3, #1
 8006e64:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8006e68:	e002      	b.n	8006e70 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8006e70:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3738      	adds	r7, #56	; 0x38
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}
 8006e7c:	40023800 	.word	0x40023800
 8006e80:	40012700 	.word	0x40012700
 8006e84:	fcfc16ff 	.word	0xfcfc16ff
 8006e88:	c0fff189 	.word	0xc0fff189
 8006e8c:	bf80fffe 	.word	0xbf80fffe

08006e90 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d101      	bne.n	8006eaa <HAL_ADC_Start+0x1a>
 8006ea6:	2302      	movs	r3, #2
 8006ea8:	e04e      	b.n	8006f48 <HAL_ADC_Start+0xb8>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2201      	movs	r2, #1
 8006eae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 fb94 	bl	80075e0 <ADC_Enable>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8006ebc:	7bfb      	ldrb	r3, [r7, #15]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d141      	bne.n	8006f46 <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ec6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006eca:	f023 0301 	bic.w	r3, r3, #1
 8006ece:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d007      	beq.n	8006ef4 <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ee8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006eec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ef8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006efc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f00:	d106      	bne.n	8006f10 <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f06:	f023 0206 	bic.w	r2, r3, #6
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	651a      	str	r2, [r3, #80]	; 0x50
 8006f0e:	e002      	b.n	8006f16 <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006f26:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d107      	bne.n	8006f46 <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	689a      	ldr	r2, [r3, #8]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006f44:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 8006f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3710      	adds	r7, #16
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b084      	sub	sp, #16
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d101      	bne.n	8006f6a <HAL_ADC_Stop+0x1a>
 8006f66:	2302      	movs	r3, #2
 8006f68:	e01a      	b.n	8006fa0 <HAL_ADC_Stop+0x50>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 fb8a 	bl	800768c <ADC_ConversionStop_Disable>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8006f7c:	7bfb      	ldrb	r3, [r7, #15]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d109      	bne.n	8006f96 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f86:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006f8a:	f023 0301 	bic.w	r3, r3, #1
 8006f8e:	f043 0201 	orr.w	r2, r3, #1
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8006f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3710      	adds	r7, #16
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b084      	sub	sp, #16
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fc4:	d113      	bne.n	8006fee <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006fd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fd4:	d10b      	bne.n	8006fee <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fda:	f043 0220 	orr.w	r2, r3, #32
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    return HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	e061      	b.n	80070b2 <HAL_ADC_PollForConversion+0x10a>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8006fee:	f7ff fddd 	bl	8006bac <HAL_GetTick>
 8006ff2:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8006ff4:	e01a      	b.n	800702c <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ffc:	d016      	beq.n	800702c <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d007      	beq.n	8007014 <HAL_ADC_PollForConversion+0x6c>
 8007004:	f7ff fdd2 	bl	8006bac <HAL_GetTick>
 8007008:	4602      	mov	r2, r0
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	1ad3      	subs	r3, r2, r3
 800700e:	683a      	ldr	r2, [r7, #0]
 8007010:	429a      	cmp	r2, r3
 8007012:	d20b      	bcs.n	800702c <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007018:	f043 0204 	orr.w	r2, r3, #4
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	64da      	str	r2, [r3, #76]	; 0x4c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        
        return HAL_TIMEOUT;
 8007028:	2303      	movs	r3, #3
 800702a:	e042      	b.n	80070b2 <HAL_ADC_PollForConversion+0x10a>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f003 0302 	and.w	r3, r3, #2
 8007036:	2b00      	cmp	r3, #0
 8007038:	d0dd      	beq.n	8006ff6 <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	699b      	ldr	r3, [r3, #24]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d104      	bne.n	800704c <HAL_ADC_PollForConversion+0xa4>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f06f 0212 	mvn.w	r2, #18
 800704a:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007050:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	64da      	str	r2, [r3, #76]	; 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007062:	2b00      	cmp	r3, #0
 8007064:	d124      	bne.n	80070b0 <HAL_ADC_PollForConversion+0x108>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800706c:	2b00      	cmp	r3, #0
 800706e:	d11f      	bne.n	80070b0 <HAL_ADC_PollForConversion+0x108>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007076:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800707a:	2b00      	cmp	r3, #0
 800707c:	d006      	beq.n	800708c <HAL_ADC_PollForConversion+0xe4>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8007088:	2b00      	cmp	r3, #0
 800708a:	d111      	bne.n	80070b0 <HAL_ADC_PollForConversion+0x108>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007090:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	64da      	str	r2, [r3, #76]	; 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800709c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d105      	bne.n	80070b0 <HAL_ADC_PollForConversion+0x108>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070a8:	f043 0201 	orr.w	r2, r3, #1
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	64da      	str	r2, [r3, #76]	; 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3710      	adds	r7, #16
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}

080070ba <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80070ba:	b480      	push	{r7}
 80070bc:	b083      	sub	sp, #12
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	370c      	adds	r7, #12
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bc80      	pop	{r7}
 80070d0:	4770      	bx	lr

080070d2 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80070d2:	b580      	push	{r7, lr}
 80070d4:	b082      	sub	sp, #8
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	f003 0320 	and.w	r3, r3, #32
 80070e4:	2b20      	cmp	r3, #32
 80070e6:	d14e      	bne.n	8007186 <HAL_ADC_IRQHandler+0xb4>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f003 0302 	and.w	r3, r3, #2
 80070f2:	2b02      	cmp	r3, #2
 80070f4:	d147      	bne.n	8007186 <HAL_ADC_IRQHandler+0xb4>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070fa:	f003 0310 	and.w	r3, r3, #16
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d105      	bne.n	800710e <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007106:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	64da      	str	r2, [r3, #76]	; 0x4c
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32L1, there is no independent flag of end of sequence.   */
      /*       The test of scan sequence on going is done either with scan    */
      /*       sequence disabled or with end of conversion flag set to        */
      /*       of end of sequence.                                            */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007118:	2b00      	cmp	r3, #0
 800711a:	d12c      	bne.n	8007176 <HAL_ADC_IRQHandler+0xa4>
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007122:	2b00      	cmp	r3, #0
 8007124:	d127      	bne.n	8007176 <HAL_ADC_IRQHandler+0xa4>
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800712c:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007130:	2b00      	cmp	r3, #0
 8007132:	d006      	beq.n	8007142 <HAL_ADC_IRQHandler+0x70>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800713e:	2b00      	cmp	r3, #0
 8007140:	d119      	bne.n	8007176 <HAL_ADC_IRQHandler+0xa4>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	685a      	ldr	r2, [r3, #4]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f022 0220 	bic.w	r2, r2, #32
 8007150:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007156:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	64da      	str	r2, [r3, #76]	; 0x4c
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007162:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007166:	2b00      	cmp	r3, #0
 8007168:	d105      	bne.n	8007176 <HAL_ADC_IRQHandler+0xa4>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800716e:	f043 0201 	orr.w	r2, r3, #1
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	64da      	str	r2, [r3, #76]	; 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 f8ab 	bl	80072d2 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f06f 0212 	mvn.w	r2, #18
 8007184:	601a      	str	r2, [r3, #0]
    }
  }

  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007190:	2b80      	cmp	r3, #128	; 0x80
 8007192:	d15c      	bne.n	800724e <HAL_ADC_IRQHandler+0x17c>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f003 0304 	and.w	r3, r3, #4
 800719e:	2b04      	cmp	r3, #4
 80071a0:	d155      	bne.n	800724e <HAL_ADC_IRQHandler+0x17c>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071a6:	f003 0310 	and.w	r3, r3, #16
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d105      	bne.n	80071ba <HAL_ADC_IRQHandler+0xe8>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071b2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Determine whether any further conversion upcoming on group injected  */
      /* by external trigger, scan sequence on going or by automatic injected */
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d13a      	bne.n	800723e <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071ce:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d006      	beq.n	80071e4 <HAL_ADC_IRQHandler+0x112>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d12c      	bne.n	800723e <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d125      	bne.n	800723e <HAL_ADC_IRQHandler+0x16c>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d11e      	bne.n	800723e <HAL_ADC_IRQHandler+0x16c>
          (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8007206:	2b00      	cmp	r3, #0
 8007208:	d119      	bne.n	800723e <HAL_ADC_IRQHandler+0x16c>
      {
        /* Disable ADC end of single conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	685a      	ldr	r2, [r3, #4]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007218:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800721e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	64da      	str	r2, [r3, #76]	; 0x4c

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800722a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800722e:	2b00      	cmp	r3, #0
 8007230:	d105      	bne.n	800723e <HAL_ADC_IRQHandler+0x16c>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007236:	f043 0201 	orr.w	r2, r3, #1
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	64da      	str	r2, [r3, #76]	; 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 fa5e 	bl	8007700 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f06f 020c 	mvn.w	r2, #12
 800724c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007258:	2b40      	cmp	r3, #64	; 0x40
 800725a:	d114      	bne.n	8007286 <HAL_ADC_IRQHandler+0x1b4>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f003 0301 	and.w	r3, r3, #1
 8007266:	2b01      	cmp	r3, #1
 8007268:	d10d      	bne.n	8007286 <HAL_ADC_IRQHandler+0x1b4>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800726e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	64da      	str	r2, [r3, #76]	; 0x4c
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 f834 	bl	80072e4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f06f 0201 	mvn.w	r2, #1
 8007284:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007290:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007294:	d119      	bne.n	80072ca <HAL_ADC_IRQHandler+0x1f8>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR))
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f003 0320 	and.w	r3, r3, #32
 80072a0:	2b20      	cmp	r3, #32
 80072a2:	d112      	bne.n	80072ca <HAL_ADC_IRQHandler+0x1f8>
      /* Note: On STM32L1, ADC overrun can be set through other parameters    */
      /*       refer to description of parameter "EOCSelection" for more      */
      /*       details.                                                       */
      
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072a8:	f043 0202 	orr.w	r2, r3, #2
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f06f 0220 	mvn.w	r2, #32
 80072b8:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 f81b 	bl	80072f6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the Overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f06f 0220 	mvn.w	r2, #32
 80072c8:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80072ca:	bf00      	nop
 80072cc:	3708      	adds	r7, #8
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}

080072d2 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80072d2:	b480      	push	{r7}
 80072d4:	b083      	sub	sp, #12
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80072da:	bf00      	nop
 80072dc:	370c      	adds	r7, #12
 80072de:	46bd      	mov	sp, r7
 80072e0:	bc80      	pop	{r7}
 80072e2:	4770      	bx	lr

080072e4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b083      	sub	sp, #12
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80072ec:	bf00      	nop
 80072ee:	370c      	adds	r7, #12
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bc80      	pop	{r7}
 80072f4:	4770      	bx	lr

080072f6 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80072f6:	b480      	push	{r7}
 80072f8:	b083      	sub	sp, #12
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80072fe:	bf00      	nop
 8007300:	370c      	adds	r7, #12
 8007302:	46bd      	mov	sp, r7
 8007304:	bc80      	pop	{r7}
 8007306:	4770      	bx	lr

08007308 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007308:	b480      	push	{r7}
 800730a:	b085      	sub	sp, #20
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007312:	2300      	movs	r3, #0
 8007314:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8007316:	2300      	movs	r3, #0
 8007318:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8007320:	2b01      	cmp	r3, #1
 8007322:	d101      	bne.n	8007328 <HAL_ADC_ConfigChannel+0x20>
 8007324:	2302      	movs	r3, #2
 8007326:	e14f      	b.n	80075c8 <HAL_ADC_ConfigChannel+0x2c0>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2201      	movs	r2, #1
 800732c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	2b06      	cmp	r3, #6
 8007336:	d81c      	bhi.n	8007372 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	685a      	ldr	r2, [r3, #4]
 8007342:	4613      	mov	r3, r2
 8007344:	009b      	lsls	r3, r3, #2
 8007346:	4413      	add	r3, r2
 8007348:	3b05      	subs	r3, #5
 800734a:	221f      	movs	r2, #31
 800734c:	fa02 f303 	lsl.w	r3, r2, r3
 8007350:	43db      	mvns	r3, r3
 8007352:	4019      	ands	r1, r3
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	6818      	ldr	r0, [r3, #0]
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	685a      	ldr	r2, [r3, #4]
 800735c:	4613      	mov	r3, r2
 800735e:	009b      	lsls	r3, r3, #2
 8007360:	4413      	add	r3, r2
 8007362:	3b05      	subs	r3, #5
 8007364:	fa00 f203 	lsl.w	r2, r0, r3
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	430a      	orrs	r2, r1
 800736e:	641a      	str	r2, [r3, #64]	; 0x40
 8007370:	e07e      	b.n	8007470 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	2b0c      	cmp	r3, #12
 8007378:	d81c      	bhi.n	80073b4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	685a      	ldr	r2, [r3, #4]
 8007384:	4613      	mov	r3, r2
 8007386:	009b      	lsls	r3, r3, #2
 8007388:	4413      	add	r3, r2
 800738a:	3b23      	subs	r3, #35	; 0x23
 800738c:	221f      	movs	r2, #31
 800738e:	fa02 f303 	lsl.w	r3, r2, r3
 8007392:	43db      	mvns	r3, r3
 8007394:	4019      	ands	r1, r3
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	6818      	ldr	r0, [r3, #0]
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	685a      	ldr	r2, [r3, #4]
 800739e:	4613      	mov	r3, r2
 80073a0:	009b      	lsls	r3, r3, #2
 80073a2:	4413      	add	r3, r2
 80073a4:	3b23      	subs	r3, #35	; 0x23
 80073a6:	fa00 f203 	lsl.w	r2, r0, r3
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	430a      	orrs	r2, r1
 80073b0:	63da      	str	r2, [r3, #60]	; 0x3c
 80073b2:	e05d      	b.n	8007470 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	2b12      	cmp	r3, #18
 80073ba:	d81c      	bhi.n	80073f6 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	685a      	ldr	r2, [r3, #4]
 80073c6:	4613      	mov	r3, r2
 80073c8:	009b      	lsls	r3, r3, #2
 80073ca:	4413      	add	r3, r2
 80073cc:	3b41      	subs	r3, #65	; 0x41
 80073ce:	221f      	movs	r2, #31
 80073d0:	fa02 f303 	lsl.w	r3, r2, r3
 80073d4:	43db      	mvns	r3, r3
 80073d6:	4019      	ands	r1, r3
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	6818      	ldr	r0, [r3, #0]
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	685a      	ldr	r2, [r3, #4]
 80073e0:	4613      	mov	r3, r2
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	4413      	add	r3, r2
 80073e6:	3b41      	subs	r3, #65	; 0x41
 80073e8:	fa00 f203 	lsl.w	r2, r0, r3
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	430a      	orrs	r2, r1
 80073f2:	639a      	str	r2, [r3, #56]	; 0x38
 80073f4:	e03c      	b.n	8007470 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	2b18      	cmp	r3, #24
 80073fc:	d81c      	bhi.n	8007438 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	685a      	ldr	r2, [r3, #4]
 8007408:	4613      	mov	r3, r2
 800740a:	009b      	lsls	r3, r3, #2
 800740c:	4413      	add	r3, r2
 800740e:	3b5f      	subs	r3, #95	; 0x5f
 8007410:	221f      	movs	r2, #31
 8007412:	fa02 f303 	lsl.w	r3, r2, r3
 8007416:	43db      	mvns	r3, r3
 8007418:	4019      	ands	r1, r3
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	6818      	ldr	r0, [r3, #0]
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	685a      	ldr	r2, [r3, #4]
 8007422:	4613      	mov	r3, r2
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	4413      	add	r3, r2
 8007428:	3b5f      	subs	r3, #95	; 0x5f
 800742a:	fa00 f203 	lsl.w	r2, r0, r3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	430a      	orrs	r2, r1
 8007434:	635a      	str	r2, [r3, #52]	; 0x34
 8007436:	e01b      	b.n	8007470 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	685a      	ldr	r2, [r3, #4]
 8007442:	4613      	mov	r3, r2
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	4413      	add	r3, r2
 8007448:	3b7d      	subs	r3, #125	; 0x7d
 800744a:	221f      	movs	r2, #31
 800744c:	fa02 f303 	lsl.w	r3, r2, r3
 8007450:	43db      	mvns	r3, r3
 8007452:	4019      	ands	r1, r3
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	6818      	ldr	r0, [r3, #0]
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	685a      	ldr	r2, [r3, #4]
 800745c:	4613      	mov	r3, r2
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	4413      	add	r3, r2
 8007462:	3b7d      	subs	r3, #125	; 0x7d
 8007464:	fa00 f203 	lsl.w	r2, r0, r3
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	430a      	orrs	r2, r1
 800746e:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	2b09      	cmp	r3, #9
 8007476:	d81a      	bhi.n	80074ae <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	6959      	ldr	r1, [r3, #20]
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	4613      	mov	r3, r2
 8007484:	005b      	lsls	r3, r3, #1
 8007486:	4413      	add	r3, r2
 8007488:	2207      	movs	r2, #7
 800748a:	fa02 f303 	lsl.w	r3, r2, r3
 800748e:	43db      	mvns	r3, r3
 8007490:	4019      	ands	r1, r3
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	6898      	ldr	r0, [r3, #8]
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	4613      	mov	r3, r2
 800749c:	005b      	lsls	r3, r3, #1
 800749e:	4413      	add	r3, r2
 80074a0:	fa00 f203 	lsl.w	r2, r0, r3
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	430a      	orrs	r2, r1
 80074aa:	615a      	str	r2, [r3, #20]
 80074ac:	e05d      	b.n	800756a <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	2b13      	cmp	r3, #19
 80074b4:	d81c      	bhi.n	80074f0 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	6919      	ldr	r1, [r3, #16]
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	4613      	mov	r3, r2
 80074c2:	005b      	lsls	r3, r3, #1
 80074c4:	4413      	add	r3, r2
 80074c6:	3b1e      	subs	r3, #30
 80074c8:	2207      	movs	r2, #7
 80074ca:	fa02 f303 	lsl.w	r3, r2, r3
 80074ce:	43db      	mvns	r3, r3
 80074d0:	4019      	ands	r1, r3
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	6898      	ldr	r0, [r3, #8]
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	4613      	mov	r3, r2
 80074dc:	005b      	lsls	r3, r3, #1
 80074de:	4413      	add	r3, r2
 80074e0:	3b1e      	subs	r3, #30
 80074e2:	fa00 f203 	lsl.w	r2, r0, r3
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	430a      	orrs	r2, r1
 80074ec:	611a      	str	r2, [r3, #16]
 80074ee:	e03c      	b.n	800756a <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	2b1d      	cmp	r3, #29
 80074f6:	d81c      	bhi.n	8007532 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	68d9      	ldr	r1, [r3, #12]
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	4613      	mov	r3, r2
 8007504:	005b      	lsls	r3, r3, #1
 8007506:	4413      	add	r3, r2
 8007508:	3b3c      	subs	r3, #60	; 0x3c
 800750a:	2207      	movs	r2, #7
 800750c:	fa02 f303 	lsl.w	r3, r2, r3
 8007510:	43db      	mvns	r3, r3
 8007512:	4019      	ands	r1, r3
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	6898      	ldr	r0, [r3, #8]
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	4613      	mov	r3, r2
 800751e:	005b      	lsls	r3, r3, #1
 8007520:	4413      	add	r3, r2
 8007522:	3b3c      	subs	r3, #60	; 0x3c
 8007524:	fa00 f203 	lsl.w	r2, r0, r3
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	430a      	orrs	r2, r1
 800752e:	60da      	str	r2, [r3, #12]
 8007530:	e01b      	b.n	800756a <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	4613      	mov	r3, r2
 800753e:	005b      	lsls	r3, r3, #1
 8007540:	4413      	add	r3, r2
 8007542:	3b5a      	subs	r3, #90	; 0x5a
 8007544:	2207      	movs	r2, #7
 8007546:	fa02 f303 	lsl.w	r3, r2, r3
 800754a:	43db      	mvns	r3, r3
 800754c:	4019      	ands	r1, r3
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	6898      	ldr	r0, [r3, #8]
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	4613      	mov	r3, r2
 8007558:	005b      	lsls	r3, r3, #1
 800755a:	4413      	add	r3, r2
 800755c:	3b5a      	subs	r3, #90	; 0x5a
 800755e:	fa00 f203 	lsl.w	r2, r0, r3
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	430a      	orrs	r2, r1
 8007568:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	2b10      	cmp	r3, #16
 8007570:	d003      	beq.n	800757a <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8007576:	2b11      	cmp	r3, #17
 8007578:	d121      	bne.n	80075be <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 800757a:	4b16      	ldr	r3, [pc, #88]	; (80075d4 <HAL_ADC_ConfigChannel+0x2cc>)
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007582:	2b00      	cmp	r3, #0
 8007584:	d11b      	bne.n	80075be <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8007586:	4b13      	ldr	r3, [pc, #76]	; (80075d4 <HAL_ADC_ConfigChannel+0x2cc>)
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	4a12      	ldr	r2, [pc, #72]	; (80075d4 <HAL_ADC_ConfigChannel+0x2cc>)
 800758c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007590:	6053      	str	r3, [r2, #4]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	2b10      	cmp	r3, #16
 8007598:	d111      	bne.n	80075be <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800759a:	4b0f      	ldr	r3, [pc, #60]	; (80075d8 <HAL_ADC_ConfigChannel+0x2d0>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a0f      	ldr	r2, [pc, #60]	; (80075dc <HAL_ADC_ConfigChannel+0x2d4>)
 80075a0:	fba2 2303 	umull	r2, r3, r2, r3
 80075a4:	0c9a      	lsrs	r2, r3, #18
 80075a6:	4613      	mov	r3, r2
 80075a8:	009b      	lsls	r3, r3, #2
 80075aa:	4413      	add	r3, r2
 80075ac:	005b      	lsls	r3, r3, #1
 80075ae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80075b0:	e002      	b.n	80075b8 <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	3b01      	subs	r3, #1
 80075b6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d1f9      	bne.n	80075b2 <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2200      	movs	r2, #0
 80075c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 80075c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3714      	adds	r7, #20
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bc80      	pop	{r7}
 80075d0:	4770      	bx	lr
 80075d2:	bf00      	nop
 80075d4:	40012700 	.word	0x40012700
 80075d8:	20000000 	.word	0x20000000
 80075dc:	431bde83 	.word	0x431bde83

080075e0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80075e8:	2300      	movs	r3, #0
 80075ea:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 80075ec:	2300      	movs	r3, #0
 80075ee:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075fa:	2b40      	cmp	r3, #64	; 0x40
 80075fc:	d03c      	beq.n	8007678 <ADC_Enable+0x98>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	689a      	ldr	r2, [r3, #8]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f042 0201 	orr.w	r2, r2, #1
 800760c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800760e:	4b1d      	ldr	r3, [pc, #116]	; (8007684 <ADC_Enable+0xa4>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a1d      	ldr	r2, [pc, #116]	; (8007688 <ADC_Enable+0xa8>)
 8007614:	fba2 2303 	umull	r2, r3, r2, r3
 8007618:	0c9a      	lsrs	r2, r3, #18
 800761a:	4613      	mov	r3, r2
 800761c:	005b      	lsls	r3, r3, #1
 800761e:	4413      	add	r3, r2
 8007620:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8007622:	e002      	b.n	800762a <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	3b01      	subs	r3, #1
 8007628:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d1f9      	bne.n	8007624 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8007630:	f7ff fabc 	bl	8006bac <HAL_GetTick>
 8007634:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8007636:	e018      	b.n	800766a <ADC_Enable+0x8a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8007638:	f7ff fab8 	bl	8006bac <HAL_GetTick>
 800763c:	4602      	mov	r2, r0
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	1ad3      	subs	r3, r2, r3
 8007642:	2b02      	cmp	r3, #2
 8007644:	d911      	bls.n	800766a <ADC_Enable+0x8a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800764a:	f043 0210 	orr.w	r2, r3, #16
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	64da      	str	r2, [r3, #76]	; 0x4c
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007656:	f043 0201 	orr.w	r2, r3, #1
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	651a      	str	r2, [r3, #80]	; 0x50
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
      
        return HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	e007      	b.n	800767a <ADC_Enable+0x9a>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007674:	2b40      	cmp	r3, #64	; 0x40
 8007676:	d1df      	bne.n	8007638 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8007678:	2300      	movs	r3, #0
}
 800767a:	4618      	mov	r0, r3
 800767c:	3710      	adds	r7, #16
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}
 8007682:	bf00      	nop
 8007684:	20000000 	.word	0x20000000
 8007688:	431bde83 	.word	0x431bde83

0800768c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b084      	sub	sp, #16
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007694:	2300      	movs	r3, #0
 8007696:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076a2:	2b40      	cmp	r3, #64	; 0x40
 80076a4:	d127      	bne.n	80076f6 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	689a      	ldr	r2, [r3, #8]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f022 0201 	bic.w	r2, r2, #1
 80076b4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80076b6:	f7ff fa79 	bl	8006bac <HAL_GetTick>
 80076ba:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 80076bc:	e014      	b.n	80076e8 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 80076be:	f7ff fa75 	bl	8006bac <HAL_GetTick>
 80076c2:	4602      	mov	r2, r0
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	1ad3      	subs	r3, r2, r3
 80076c8:	2b02      	cmp	r3, #2
 80076ca:	d90d      	bls.n	80076e8 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076d0:	f043 0210 	orr.w	r2, r3, #16
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	64da      	str	r2, [r3, #76]	; 0x4c
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076dc:	f043 0201 	orr.w	r2, r3, #1
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	651a      	str	r2, [r3, #80]	; 0x50
        
        return HAL_ERROR;
 80076e4:	2301      	movs	r3, #1
 80076e6:	e007      	b.n	80076f8 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076f2:	2b40      	cmp	r3, #64	; 0x40
 80076f4:	d0e3      	beq.n	80076be <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80076f6:	2300      	movs	r3, #0
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3710      	adds	r7, #16
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007700:	b480      	push	{r7}
 8007702:	b083      	sub	sp, #12
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8007708:	bf00      	nop
 800770a:	370c      	adds	r7, #12
 800770c:	46bd      	mov	sp, r7
 800770e:	bc80      	pop	{r7}
 8007710:	4770      	bx	lr
	...

08007714 <__NVIC_SetPriorityGrouping>:
{
 8007714:	b480      	push	{r7}
 8007716:	b085      	sub	sp, #20
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f003 0307 	and.w	r3, r3, #7
 8007722:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007724:	4b0c      	ldr	r3, [pc, #48]	; (8007758 <__NVIC_SetPriorityGrouping+0x44>)
 8007726:	68db      	ldr	r3, [r3, #12]
 8007728:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800772a:	68ba      	ldr	r2, [r7, #8]
 800772c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007730:	4013      	ands	r3, r2
 8007732:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800773c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007744:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007746:	4a04      	ldr	r2, [pc, #16]	; (8007758 <__NVIC_SetPriorityGrouping+0x44>)
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	60d3      	str	r3, [r2, #12]
}
 800774c:	bf00      	nop
 800774e:	3714      	adds	r7, #20
 8007750:	46bd      	mov	sp, r7
 8007752:	bc80      	pop	{r7}
 8007754:	4770      	bx	lr
 8007756:	bf00      	nop
 8007758:	e000ed00 	.word	0xe000ed00

0800775c <__NVIC_GetPriorityGrouping>:
{
 800775c:	b480      	push	{r7}
 800775e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007760:	4b04      	ldr	r3, [pc, #16]	; (8007774 <__NVIC_GetPriorityGrouping+0x18>)
 8007762:	68db      	ldr	r3, [r3, #12]
 8007764:	0a1b      	lsrs	r3, r3, #8
 8007766:	f003 0307 	and.w	r3, r3, #7
}
 800776a:	4618      	mov	r0, r3
 800776c:	46bd      	mov	sp, r7
 800776e:	bc80      	pop	{r7}
 8007770:	4770      	bx	lr
 8007772:	bf00      	nop
 8007774:	e000ed00 	.word	0xe000ed00

08007778 <__NVIC_EnableIRQ>:
{
 8007778:	b480      	push	{r7}
 800777a:	b083      	sub	sp, #12
 800777c:	af00      	add	r7, sp, #0
 800777e:	4603      	mov	r3, r0
 8007780:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007786:	2b00      	cmp	r3, #0
 8007788:	db0b      	blt.n	80077a2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800778a:	79fb      	ldrb	r3, [r7, #7]
 800778c:	f003 021f 	and.w	r2, r3, #31
 8007790:	4906      	ldr	r1, [pc, #24]	; (80077ac <__NVIC_EnableIRQ+0x34>)
 8007792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007796:	095b      	lsrs	r3, r3, #5
 8007798:	2001      	movs	r0, #1
 800779a:	fa00 f202 	lsl.w	r2, r0, r2
 800779e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80077a2:	bf00      	nop
 80077a4:	370c      	adds	r7, #12
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bc80      	pop	{r7}
 80077aa:	4770      	bx	lr
 80077ac:	e000e100 	.word	0xe000e100

080077b0 <__NVIC_SetPriority>:
{
 80077b0:	b480      	push	{r7}
 80077b2:	b083      	sub	sp, #12
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	4603      	mov	r3, r0
 80077b8:	6039      	str	r1, [r7, #0]
 80077ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80077bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	db0a      	blt.n	80077da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	b2da      	uxtb	r2, r3
 80077c8:	490c      	ldr	r1, [pc, #48]	; (80077fc <__NVIC_SetPriority+0x4c>)
 80077ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077ce:	0112      	lsls	r2, r2, #4
 80077d0:	b2d2      	uxtb	r2, r2
 80077d2:	440b      	add	r3, r1
 80077d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80077d8:	e00a      	b.n	80077f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	b2da      	uxtb	r2, r3
 80077de:	4908      	ldr	r1, [pc, #32]	; (8007800 <__NVIC_SetPriority+0x50>)
 80077e0:	79fb      	ldrb	r3, [r7, #7]
 80077e2:	f003 030f 	and.w	r3, r3, #15
 80077e6:	3b04      	subs	r3, #4
 80077e8:	0112      	lsls	r2, r2, #4
 80077ea:	b2d2      	uxtb	r2, r2
 80077ec:	440b      	add	r3, r1
 80077ee:	761a      	strb	r2, [r3, #24]
}
 80077f0:	bf00      	nop
 80077f2:	370c      	adds	r7, #12
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bc80      	pop	{r7}
 80077f8:	4770      	bx	lr
 80077fa:	bf00      	nop
 80077fc:	e000e100 	.word	0xe000e100
 8007800:	e000ed00 	.word	0xe000ed00

08007804 <NVIC_EncodePriority>:
{
 8007804:	b480      	push	{r7}
 8007806:	b089      	sub	sp, #36	; 0x24
 8007808:	af00      	add	r7, sp, #0
 800780a:	60f8      	str	r0, [r7, #12]
 800780c:	60b9      	str	r1, [r7, #8]
 800780e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f003 0307 	and.w	r3, r3, #7
 8007816:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007818:	69fb      	ldr	r3, [r7, #28]
 800781a:	f1c3 0307 	rsb	r3, r3, #7
 800781e:	2b04      	cmp	r3, #4
 8007820:	bf28      	it	cs
 8007822:	2304      	movcs	r3, #4
 8007824:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007826:	69fb      	ldr	r3, [r7, #28]
 8007828:	3304      	adds	r3, #4
 800782a:	2b06      	cmp	r3, #6
 800782c:	d902      	bls.n	8007834 <NVIC_EncodePriority+0x30>
 800782e:	69fb      	ldr	r3, [r7, #28]
 8007830:	3b03      	subs	r3, #3
 8007832:	e000      	b.n	8007836 <NVIC_EncodePriority+0x32>
 8007834:	2300      	movs	r3, #0
 8007836:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007838:	f04f 32ff 	mov.w	r2, #4294967295
 800783c:	69bb      	ldr	r3, [r7, #24]
 800783e:	fa02 f303 	lsl.w	r3, r2, r3
 8007842:	43da      	mvns	r2, r3
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	401a      	ands	r2, r3
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800784c:	f04f 31ff 	mov.w	r1, #4294967295
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	fa01 f303 	lsl.w	r3, r1, r3
 8007856:	43d9      	mvns	r1, r3
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800785c:	4313      	orrs	r3, r2
}
 800785e:	4618      	mov	r0, r3
 8007860:	3724      	adds	r7, #36	; 0x24
 8007862:	46bd      	mov	sp, r7
 8007864:	bc80      	pop	{r7}
 8007866:	4770      	bx	lr

08007868 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b082      	sub	sp, #8
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f7ff ff4f 	bl	8007714 <__NVIC_SetPriorityGrouping>
}
 8007876:	bf00      	nop
 8007878:	3708      	adds	r7, #8
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}

0800787e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800787e:	b580      	push	{r7, lr}
 8007880:	b086      	sub	sp, #24
 8007882:	af00      	add	r7, sp, #0
 8007884:	4603      	mov	r3, r0
 8007886:	60b9      	str	r1, [r7, #8]
 8007888:	607a      	str	r2, [r7, #4]
 800788a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800788c:	2300      	movs	r3, #0
 800788e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007890:	f7ff ff64 	bl	800775c <__NVIC_GetPriorityGrouping>
 8007894:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007896:	687a      	ldr	r2, [r7, #4]
 8007898:	68b9      	ldr	r1, [r7, #8]
 800789a:	6978      	ldr	r0, [r7, #20]
 800789c:	f7ff ffb2 	bl	8007804 <NVIC_EncodePriority>
 80078a0:	4602      	mov	r2, r0
 80078a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078a6:	4611      	mov	r1, r2
 80078a8:	4618      	mov	r0, r3
 80078aa:	f7ff ff81 	bl	80077b0 <__NVIC_SetPriority>
}
 80078ae:	bf00      	nop
 80078b0:	3718      	adds	r7, #24
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}

080078b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80078b6:	b580      	push	{r7, lr}
 80078b8:	b082      	sub	sp, #8
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	4603      	mov	r3, r0
 80078be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80078c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078c4:	4618      	mov	r0, r3
 80078c6:	f7ff ff57 	bl	8007778 <__NVIC_EnableIRQ>
}
 80078ca:	bf00      	nop
 80078cc:	3708      	adds	r7, #8
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}

080078d2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80078d2:	b580      	push	{r7, lr}
 80078d4:	b082      	sub	sp, #8
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d101      	bne.n	80078e4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80078e0:	2301      	movs	r3, #1
 80078e2:	e014      	b.n	800790e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	791b      	ldrb	r3, [r3, #4]
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d105      	bne.n	80078fa <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2200      	movs	r2, #0
 80078f2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f7f9 fe81 	bl	80015fc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2202      	movs	r2, #2
 80078fe:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2200      	movs	r2, #0
 8007904:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2201      	movs	r2, #1
 800790a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800790c:	2300      	movs	r3, #0
}
 800790e:	4618      	mov	r0, r3
 8007910:	3708      	adds	r7, #8
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}

08007916 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8007916:	b480      	push	{r7}
 8007918:	b083      	sub	sp, #12
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
 800791e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	795b      	ldrb	r3, [r3, #5]
 8007924:	2b01      	cmp	r3, #1
 8007926:	d101      	bne.n	800792c <HAL_DAC_Start+0x16>
 8007928:	2302      	movs	r3, #2
 800792a:	e03e      	b.n	80079aa <HAL_DAC_Start+0x94>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2201      	movs	r2, #1
 8007930:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2202      	movs	r2, #2
 8007936:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	6819      	ldr	r1, [r3, #0]
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	f003 0310 	and.w	r3, r3, #16
 8007944:	2201      	movs	r2, #1
 8007946:	409a      	lsls	r2, r3
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	430a      	orrs	r2, r1
 800794e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d10f      	bne.n	8007976 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8007960:	2b3c      	cmp	r3, #60	; 0x3c
 8007962:	d11b      	bne.n	800799c <HAL_DAC_Start+0x86>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	685a      	ldr	r2, [r3, #4]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f042 0201 	orr.w	r2, r2, #1
 8007972:	605a      	str	r2, [r3, #4]
 8007974:	e012      	b.n	800799c <HAL_DAC_Start+0x86>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << Channel))
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007980:	213c      	movs	r1, #60	; 0x3c
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	fa01 f303 	lsl.w	r3, r1, r3
 8007988:	429a      	cmp	r2, r3
 800798a:	d107      	bne.n	800799c <HAL_DAC_Start+0x86>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	685a      	ldr	r2, [r3, #4]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f042 0202 	orr.w	r2, r2, #2
 800799a:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2201      	movs	r2, #1
 80079a0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80079a8:	2300      	movs	r3, #0
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	370c      	adds	r7, #12
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bc80      	pop	{r7}
 80079b2:	4770      	bx	lr

080079b4 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b087      	sub	sp, #28
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	60f8      	str	r0, [r7, #12]
 80079bc:	60b9      	str	r1, [r7, #8]
 80079be:	607a      	str	r2, [r7, #4]
 80079c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 80079c2:	2300      	movs	r3, #0
 80079c4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d105      	bne.n	80079de <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80079d2:	697a      	ldr	r2, [r7, #20]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	4413      	add	r3, r2
 80079d8:	3308      	adds	r3, #8
 80079da:	617b      	str	r3, [r7, #20]
 80079dc:	e004      	b.n	80079e8 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80079de:	697a      	ldr	r2, [r7, #20]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	4413      	add	r3, r2
 80079e4:	3314      	adds	r3, #20
 80079e6:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	461a      	mov	r2, r3
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80079f0:	2300      	movs	r3, #0
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	371c      	adds	r7, #28
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bc80      	pop	{r7}
 80079fa:	4770      	bx	lr

080079fc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b087      	sub	sp, #28
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	60f8      	str	r0, [r7, #12]
 8007a04:	60b9      	str	r1, [r7, #8]
 8007a06:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	795b      	ldrb	r3, [r3, #5]
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d101      	bne.n	8007a14 <HAL_DAC_ConfigChannel+0x18>
 8007a10:	2302      	movs	r3, #2
 8007a12:	e044      	b.n	8007a9e <HAL_DAC_ConfigChannel+0xa2>
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2201      	movs	r2, #1
 8007a18:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2202      	movs	r2, #2
 8007a1e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8007a28:	f640 72fe 	movw	r2, #4094	; 0xffe
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a32:	43db      	mvns	r3, r3
 8007a34:	697a      	ldr	r2, [r7, #20]
 8007a36:	4013      	ands	r3, r2
 8007a38:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	681a      	ldr	r2, [r3, #0]
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8007a46:	693a      	ldr	r2, [r7, #16]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a4e:	697a      	ldr	r2, [r7, #20]
 8007a50:	4313      	orrs	r3, r2
 8007a52:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	697a      	ldr	r2, [r7, #20]
 8007a5a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << Channel));
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	6819      	ldr	r1, [r3, #0]
 8007a62:	22c0      	movs	r2, #192	; 0xc0
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	fa02 f303 	lsl.w	r3, r2, r3
 8007a6a:	43da      	mvns	r2, r3
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	400a      	ands	r2, r1
 8007a72:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	6819      	ldr	r1, [r3, #0]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f003 0310 	and.w	r3, r3, #16
 8007a80:	22c0      	movs	r2, #192	; 0xc0
 8007a82:	fa02 f303 	lsl.w	r3, r2, r3
 8007a86:	43da      	mvns	r2, r3
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	400a      	ands	r2, r1
 8007a8e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2201      	movs	r2, #1
 8007a94:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007a9c:	2300      	movs	r3, #0
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	371c      	adds	r7, #28
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bc80      	pop	{r7}
 8007aa6:	4770      	bx	lr

08007aa8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b085      	sub	sp, #20
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d101      	bne.n	8007aba <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	e059      	b.n	8007b6e <HAL_DMA_Init+0xc6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	461a      	mov	r2, r3
 8007ac0:	4b2d      	ldr	r3, [pc, #180]	; (8007b78 <HAL_DMA_Init+0xd0>)
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d80f      	bhi.n	8007ae6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	461a      	mov	r2, r3
 8007acc:	4b2b      	ldr	r3, [pc, #172]	; (8007b7c <HAL_DMA_Init+0xd4>)
 8007ace:	4413      	add	r3, r2
 8007ad0:	4a2b      	ldr	r2, [pc, #172]	; (8007b80 <HAL_DMA_Init+0xd8>)
 8007ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ad6:	091b      	lsrs	r3, r3, #4
 8007ad8:	009a      	lsls	r2, r3, #2
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	4a28      	ldr	r2, [pc, #160]	; (8007b84 <HAL_DMA_Init+0xdc>)
 8007ae2:	63da      	str	r2, [r3, #60]	; 0x3c
 8007ae4:	e00e      	b.n	8007b04 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	461a      	mov	r2, r3
 8007aec:	4b26      	ldr	r3, [pc, #152]	; (8007b88 <HAL_DMA_Init+0xe0>)
 8007aee:	4413      	add	r3, r2
 8007af0:	4a23      	ldr	r2, [pc, #140]	; (8007b80 <HAL_DMA_Init+0xd8>)
 8007af2:	fba2 2303 	umull	r2, r3, r2, r3
 8007af6:	091b      	lsrs	r3, r3, #4
 8007af8:	009a      	lsls	r2, r3, #2
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	4a22      	ldr	r2, [pc, #136]	; (8007b8c <HAL_DMA_Init+0xe4>)
 8007b02:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2202      	movs	r2, #2
 8007b08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b1e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8007b28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	68db      	ldr	r3, [r3, #12]
 8007b2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	695b      	ldr	r3, [r3, #20]
 8007b3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	69db      	ldr	r3, [r3, #28]
 8007b46:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007b48:	68fa      	ldr	r2, [r7, #12]
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	68fa      	ldr	r2, [r7, #12]
 8007b54:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2200      	movs	r2, #0
 8007b68:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007b6c:	2300      	movs	r3, #0
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3714      	adds	r7, #20
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bc80      	pop	{r7}
 8007b76:	4770      	bx	lr
 8007b78:	40026407 	.word	0x40026407
 8007b7c:	bffd9ff8 	.word	0xbffd9ff8
 8007b80:	cccccccd 	.word	0xcccccccd
 8007b84:	40026000 	.word	0x40026000
 8007b88:	bffd9bf8 	.word	0xbffd9bf8
 8007b8c:	40026400 	.word	0x40026400

08007b90 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b084      	sub	sp, #16
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	2b02      	cmp	r3, #2
 8007ba6:	d005      	beq.n	8007bb4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2204      	movs	r2, #4
 8007bac:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	73fb      	strb	r3, [r7, #15]
 8007bb2:	e029      	b.n	8007c08 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f022 020e 	bic.w	r2, r2, #14
 8007bc2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f022 0201 	bic.w	r2, r2, #1
 8007bd2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd8:	f003 021c 	and.w	r2, r3, #28
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007be0:	2101      	movs	r1, #1
 8007be2:	fa01 f202 	lsl.w	r2, r1, r2
 8007be6:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2201      	movs	r2, #1
 8007bec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d003      	beq.n	8007c08 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	4798      	blx	r3
    }
  }
  return status;
 8007c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3710      	adds	r7, #16
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}

08007c12 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007c12:	b580      	push	{r7, lr}
 8007c14:	b084      	sub	sp, #16
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c2e:	f003 031c 	and.w	r3, r3, #28
 8007c32:	2204      	movs	r2, #4
 8007c34:	409a      	lsls	r2, r3
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	4013      	ands	r3, r2
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d026      	beq.n	8007c8c <HAL_DMA_IRQHandler+0x7a>
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	f003 0304 	and.w	r3, r3, #4
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d021      	beq.n	8007c8c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f003 0320 	and.w	r3, r3, #32
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d107      	bne.n	8007c66 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f022 0204 	bic.w	r2, r2, #4
 8007c64:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c6a:	f003 021c 	and.w	r2, r3, #28
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c72:	2104      	movs	r1, #4
 8007c74:	fa01 f202 	lsl.w	r2, r1, r2
 8007c78:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d071      	beq.n	8007d66 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8007c8a:	e06c      	b.n	8007d66 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c90:	f003 031c 	and.w	r3, r3, #28
 8007c94:	2202      	movs	r2, #2
 8007c96:	409a      	lsls	r2, r3
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	4013      	ands	r3, r2
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d02e      	beq.n	8007cfe <HAL_DMA_IRQHandler+0xec>
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	f003 0302 	and.w	r3, r3, #2
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d029      	beq.n	8007cfe <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f003 0320 	and.w	r3, r3, #32
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d10b      	bne.n	8007cd0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	681a      	ldr	r2, [r3, #0]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f022 020a 	bic.w	r2, r2, #10
 8007cc6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd4:	f003 021c 	and.w	r2, r3, #28
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cdc:	2102      	movs	r1, #2
 8007cde:	fa01 f202 	lsl.w	r2, r1, r2
 8007ce2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d038      	beq.n	8007d66 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8007cfc:	e033      	b.n	8007d66 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d02:	f003 031c 	and.w	r3, r3, #28
 8007d06:	2208      	movs	r2, #8
 8007d08:	409a      	lsls	r2, r3
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	4013      	ands	r3, r2
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d02a      	beq.n	8007d68 <HAL_DMA_IRQHandler+0x156>
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	f003 0308 	and.w	r3, r3, #8
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d025      	beq.n	8007d68 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f022 020e 	bic.w	r2, r2, #14
 8007d2a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d30:	f003 021c 	and.w	r2, r3, #28
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d38:	2101      	movs	r1, #1
 8007d3a:	fa01 f202 	lsl.w	r2, r1, r2
 8007d3e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2201      	movs	r2, #1
 8007d44:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2201      	movs	r2, #1
 8007d4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2200      	movs	r2, #0
 8007d52:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d004      	beq.n	8007d68 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007d66:	bf00      	nop
 8007d68:	bf00      	nop
}
 8007d6a:	3710      	adds	r7, #16
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b087      	sub	sp, #28
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8007d82:	2300      	movs	r3, #0
 8007d84:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8007d86:	e160      	b.n	800804a <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	681a      	ldr	r2, [r3, #0]
 8007d8c:	2101      	movs	r1, #1
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	fa01 f303 	lsl.w	r3, r1, r3
 8007d94:	4013      	ands	r3, r2
 8007d96:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	f000 8152 	beq.w	8008044 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d00b      	beq.n	8007dc0 <HAL_GPIO_Init+0x50>
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	2b02      	cmp	r3, #2
 8007dae:	d007      	beq.n	8007dc0 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007db4:	2b11      	cmp	r3, #17
 8007db6:	d003      	beq.n	8007dc0 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	2b12      	cmp	r3, #18
 8007dbe:	d130      	bne.n	8007e22 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	005b      	lsls	r3, r3, #1
 8007dca:	2203      	movs	r2, #3
 8007dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8007dd0:	43db      	mvns	r3, r3
 8007dd2:	693a      	ldr	r2, [r7, #16]
 8007dd4:	4013      	ands	r3, r2
 8007dd6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	68da      	ldr	r2, [r3, #12]
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	005b      	lsls	r3, r3, #1
 8007de0:	fa02 f303 	lsl.w	r3, r2, r3
 8007de4:	693a      	ldr	r2, [r7, #16]
 8007de6:	4313      	orrs	r3, r2
 8007de8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	693a      	ldr	r2, [r7, #16]
 8007dee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8007df6:	2201      	movs	r2, #1
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8007dfe:	43db      	mvns	r3, r3
 8007e00:	693a      	ldr	r2, [r7, #16]
 8007e02:	4013      	ands	r3, r2
 8007e04:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	091b      	lsrs	r3, r3, #4
 8007e0c:	f003 0201 	and.w	r2, r3, #1
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	fa02 f303 	lsl.w	r3, r2, r3
 8007e16:	693a      	ldr	r2, [r7, #16]
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	693a      	ldr	r2, [r7, #16]
 8007e20:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	68db      	ldr	r3, [r3, #12]
 8007e26:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	005b      	lsls	r3, r3, #1
 8007e2c:	2203      	movs	r2, #3
 8007e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e32:	43db      	mvns	r3, r3
 8007e34:	693a      	ldr	r2, [r7, #16]
 8007e36:	4013      	ands	r3, r2
 8007e38:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	689a      	ldr	r2, [r3, #8]
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	005b      	lsls	r3, r3, #1
 8007e42:	fa02 f303 	lsl.w	r3, r2, r3
 8007e46:	693a      	ldr	r2, [r7, #16]
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	693a      	ldr	r2, [r7, #16]
 8007e50:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	2b02      	cmp	r3, #2
 8007e58:	d003      	beq.n	8007e62 <HAL_GPIO_Init+0xf2>
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	2b12      	cmp	r3, #18
 8007e60:	d123      	bne.n	8007eaa <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	08da      	lsrs	r2, r3, #3
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	3208      	adds	r2, #8
 8007e6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e6e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	f003 0307 	and.w	r3, r3, #7
 8007e76:	009b      	lsls	r3, r3, #2
 8007e78:	220f      	movs	r2, #15
 8007e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e7e:	43db      	mvns	r3, r3
 8007e80:	693a      	ldr	r2, [r7, #16]
 8007e82:	4013      	ands	r3, r2
 8007e84:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	691a      	ldr	r2, [r3, #16]
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	f003 0307 	and.w	r3, r3, #7
 8007e90:	009b      	lsls	r3, r3, #2
 8007e92:	fa02 f303 	lsl.w	r3, r2, r3
 8007e96:	693a      	ldr	r2, [r7, #16]
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	08da      	lsrs	r2, r3, #3
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	3208      	adds	r2, #8
 8007ea4:	6939      	ldr	r1, [r7, #16]
 8007ea6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	005b      	lsls	r3, r3, #1
 8007eb4:	2203      	movs	r2, #3
 8007eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8007eba:	43db      	mvns	r3, r3
 8007ebc:	693a      	ldr	r2, [r7, #16]
 8007ebe:	4013      	ands	r3, r2
 8007ec0:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	f003 0203 	and.w	r2, r3, #3
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	005b      	lsls	r3, r3, #1
 8007ece:	fa02 f303 	lsl.w	r3, r2, r3
 8007ed2:	693a      	ldr	r2, [r7, #16]
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	693a      	ldr	r2, [r7, #16]
 8007edc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	f000 80ac 	beq.w	8008044 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007eec:	4b5d      	ldr	r3, [pc, #372]	; (8008064 <HAL_GPIO_Init+0x2f4>)
 8007eee:	6a1b      	ldr	r3, [r3, #32]
 8007ef0:	4a5c      	ldr	r2, [pc, #368]	; (8008064 <HAL_GPIO_Init+0x2f4>)
 8007ef2:	f043 0301 	orr.w	r3, r3, #1
 8007ef6:	6213      	str	r3, [r2, #32]
 8007ef8:	4b5a      	ldr	r3, [pc, #360]	; (8008064 <HAL_GPIO_Init+0x2f4>)
 8007efa:	6a1b      	ldr	r3, [r3, #32]
 8007efc:	f003 0301 	and.w	r3, r3, #1
 8007f00:	60bb      	str	r3, [r7, #8]
 8007f02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8007f04:	4a58      	ldr	r2, [pc, #352]	; (8008068 <HAL_GPIO_Init+0x2f8>)
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	089b      	lsrs	r3, r3, #2
 8007f0a:	3302      	adds	r3, #2
 8007f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f10:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	f003 0303 	and.w	r3, r3, #3
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	220f      	movs	r2, #15
 8007f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f20:	43db      	mvns	r3, r3
 8007f22:	693a      	ldr	r2, [r7, #16]
 8007f24:	4013      	ands	r3, r2
 8007f26:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	4a50      	ldr	r2, [pc, #320]	; (800806c <HAL_GPIO_Init+0x2fc>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d025      	beq.n	8007f7c <HAL_GPIO_Init+0x20c>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	4a4f      	ldr	r2, [pc, #316]	; (8008070 <HAL_GPIO_Init+0x300>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d01f      	beq.n	8007f78 <HAL_GPIO_Init+0x208>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	4a4e      	ldr	r2, [pc, #312]	; (8008074 <HAL_GPIO_Init+0x304>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d019      	beq.n	8007f74 <HAL_GPIO_Init+0x204>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	4a4d      	ldr	r2, [pc, #308]	; (8008078 <HAL_GPIO_Init+0x308>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d013      	beq.n	8007f70 <HAL_GPIO_Init+0x200>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	4a4c      	ldr	r2, [pc, #304]	; (800807c <HAL_GPIO_Init+0x30c>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d00d      	beq.n	8007f6c <HAL_GPIO_Init+0x1fc>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	4a4b      	ldr	r2, [pc, #300]	; (8008080 <HAL_GPIO_Init+0x310>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d007      	beq.n	8007f68 <HAL_GPIO_Init+0x1f8>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	4a4a      	ldr	r2, [pc, #296]	; (8008084 <HAL_GPIO_Init+0x314>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d101      	bne.n	8007f64 <HAL_GPIO_Init+0x1f4>
 8007f60:	2306      	movs	r3, #6
 8007f62:	e00c      	b.n	8007f7e <HAL_GPIO_Init+0x20e>
 8007f64:	2307      	movs	r3, #7
 8007f66:	e00a      	b.n	8007f7e <HAL_GPIO_Init+0x20e>
 8007f68:	2305      	movs	r3, #5
 8007f6a:	e008      	b.n	8007f7e <HAL_GPIO_Init+0x20e>
 8007f6c:	2304      	movs	r3, #4
 8007f6e:	e006      	b.n	8007f7e <HAL_GPIO_Init+0x20e>
 8007f70:	2303      	movs	r3, #3
 8007f72:	e004      	b.n	8007f7e <HAL_GPIO_Init+0x20e>
 8007f74:	2302      	movs	r3, #2
 8007f76:	e002      	b.n	8007f7e <HAL_GPIO_Init+0x20e>
 8007f78:	2301      	movs	r3, #1
 8007f7a:	e000      	b.n	8007f7e <HAL_GPIO_Init+0x20e>
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	697a      	ldr	r2, [r7, #20]
 8007f80:	f002 0203 	and.w	r2, r2, #3
 8007f84:	0092      	lsls	r2, r2, #2
 8007f86:	4093      	lsls	r3, r2
 8007f88:	693a      	ldr	r2, [r7, #16]
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8007f8e:	4936      	ldr	r1, [pc, #216]	; (8008068 <HAL_GPIO_Init+0x2f8>)
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	089b      	lsrs	r3, r3, #2
 8007f94:	3302      	adds	r3, #2
 8007f96:	693a      	ldr	r2, [r7, #16]
 8007f98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007f9c:	4b3a      	ldr	r3, [pc, #232]	; (8008088 <HAL_GPIO_Init+0x318>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	43db      	mvns	r3, r3
 8007fa6:	693a      	ldr	r2, [r7, #16]
 8007fa8:	4013      	ands	r3, r2
 8007faa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d003      	beq.n	8007fc0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8007fb8:	693a      	ldr	r2, [r7, #16]
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8007fc0:	4a31      	ldr	r2, [pc, #196]	; (8008088 <HAL_GPIO_Init+0x318>)
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007fc6:	4b30      	ldr	r3, [pc, #192]	; (8008088 <HAL_GPIO_Init+0x318>)
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	43db      	mvns	r3, r3
 8007fd0:	693a      	ldr	r2, [r7, #16]
 8007fd2:	4013      	ands	r3, r2
 8007fd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d003      	beq.n	8007fea <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8007fe2:	693a      	ldr	r2, [r7, #16]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8007fea:	4a27      	ldr	r2, [pc, #156]	; (8008088 <HAL_GPIO_Init+0x318>)
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007ff0:	4b25      	ldr	r3, [pc, #148]	; (8008088 <HAL_GPIO_Init+0x318>)
 8007ff2:	689b      	ldr	r3, [r3, #8]
 8007ff4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	43db      	mvns	r3, r3
 8007ffa:	693a      	ldr	r2, [r7, #16]
 8007ffc:	4013      	ands	r3, r2
 8007ffe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008008:	2b00      	cmp	r3, #0
 800800a:	d003      	beq.n	8008014 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 800800c:	693a      	ldr	r2, [r7, #16]
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	4313      	orrs	r3, r2
 8008012:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8008014:	4a1c      	ldr	r2, [pc, #112]	; (8008088 <HAL_GPIO_Init+0x318>)
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800801a:	4b1b      	ldr	r3, [pc, #108]	; (8008088 <HAL_GPIO_Init+0x318>)
 800801c:	68db      	ldr	r3, [r3, #12]
 800801e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	43db      	mvns	r3, r3
 8008024:	693a      	ldr	r2, [r7, #16]
 8008026:	4013      	ands	r3, r2
 8008028:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008032:	2b00      	cmp	r3, #0
 8008034:	d003      	beq.n	800803e <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8008036:	693a      	ldr	r2, [r7, #16]
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	4313      	orrs	r3, r2
 800803c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800803e:	4a12      	ldr	r2, [pc, #72]	; (8008088 <HAL_GPIO_Init+0x318>)
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	3301      	adds	r3, #1
 8008048:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	681a      	ldr	r2, [r3, #0]
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	fa22 f303 	lsr.w	r3, r2, r3
 8008054:	2b00      	cmp	r3, #0
 8008056:	f47f ae97 	bne.w	8007d88 <HAL_GPIO_Init+0x18>
  }
}
 800805a:	bf00      	nop
 800805c:	371c      	adds	r7, #28
 800805e:	46bd      	mov	sp, r7
 8008060:	bc80      	pop	{r7}
 8008062:	4770      	bx	lr
 8008064:	40023800 	.word	0x40023800
 8008068:	40010000 	.word	0x40010000
 800806c:	40020000 	.word	0x40020000
 8008070:	40020400 	.word	0x40020400
 8008074:	40020800 	.word	0x40020800
 8008078:	40020c00 	.word	0x40020c00
 800807c:	40021000 	.word	0x40021000
 8008080:	40021400 	.word	0x40021400
 8008084:	40021800 	.word	0x40021800
 8008088:	40010400 	.word	0x40010400

0800808c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800808c:	b480      	push	{r7}
 800808e:	b085      	sub	sp, #20
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	460b      	mov	r3, r1
 8008096:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	691a      	ldr	r2, [r3, #16]
 800809c:	887b      	ldrh	r3, [r7, #2]
 800809e:	4013      	ands	r3, r2
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d002      	beq.n	80080aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80080a4:	2301      	movs	r3, #1
 80080a6:	73fb      	strb	r3, [r7, #15]
 80080a8:	e001      	b.n	80080ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80080aa:	2300      	movs	r3, #0
 80080ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80080ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3714      	adds	r7, #20
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bc80      	pop	{r7}
 80080b8:	4770      	bx	lr

080080ba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80080ba:	b480      	push	{r7}
 80080bc:	b083      	sub	sp, #12
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6078      	str	r0, [r7, #4]
 80080c2:	460b      	mov	r3, r1
 80080c4:	807b      	strh	r3, [r7, #2]
 80080c6:	4613      	mov	r3, r2
 80080c8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80080ca:	787b      	ldrb	r3, [r7, #1]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d003      	beq.n	80080d8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80080d0:	887a      	ldrh	r2, [r7, #2]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80080d6:	e003      	b.n	80080e0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80080d8:	887b      	ldrh	r3, [r7, #2]
 80080da:	041a      	lsls	r2, r3, #16
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	619a      	str	r2, [r3, #24]
}
 80080e0:	bf00      	nop
 80080e2:	370c      	adds	r7, #12
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bc80      	pop	{r7}
 80080e8:	4770      	bx	lr

080080ea <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80080ea:	b480      	push	{r7}
 80080ec:	b085      	sub	sp, #20
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
 80080f2:	460b      	mov	r3, r1
 80080f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	695b      	ldr	r3, [r3, #20]
 80080fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80080fc:	887a      	ldrh	r2, [r7, #2]
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	4013      	ands	r3, r2
 8008102:	041a      	lsls	r2, r3, #16
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	43d9      	mvns	r1, r3
 8008108:	887b      	ldrh	r3, [r7, #2]
 800810a:	400b      	ands	r3, r1
 800810c:	431a      	orrs	r2, r3
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	619a      	str	r2, [r3, #24]
}
 8008112:	bf00      	nop
 8008114:	3714      	adds	r7, #20
 8008116:	46bd      	mov	sp, r7
 8008118:	bc80      	pop	{r7}
 800811a:	4770      	bx	lr

0800811c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b084      	sub	sp, #16
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d101      	bne.n	800812e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800812a:	2301      	movs	r3, #1
 800812c:	e11f      	b.n	800836e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008134:	b2db      	uxtb	r3, r3
 8008136:	2b00      	cmp	r3, #0
 8008138:	d106      	bne.n	8008148 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2200      	movs	r2, #0
 800813e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f7fa fbcc 	bl	80028e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2224      	movs	r2, #36	; 0x24
 800814c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	681a      	ldr	r2, [r3, #0]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f022 0201 	bic.w	r2, r2, #1
 800815e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	681a      	ldr	r2, [r3, #0]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800816e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	681a      	ldr	r2, [r3, #0]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800817e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008180:	f002 f982 	bl	800a488 <HAL_RCC_GetPCLK1Freq>
 8008184:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	4a7b      	ldr	r2, [pc, #492]	; (8008378 <HAL_I2C_Init+0x25c>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d807      	bhi.n	80081a0 <HAL_I2C_Init+0x84>
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	4a7a      	ldr	r2, [pc, #488]	; (800837c <HAL_I2C_Init+0x260>)
 8008194:	4293      	cmp	r3, r2
 8008196:	bf94      	ite	ls
 8008198:	2301      	movls	r3, #1
 800819a:	2300      	movhi	r3, #0
 800819c:	b2db      	uxtb	r3, r3
 800819e:	e006      	b.n	80081ae <HAL_I2C_Init+0x92>
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	4a77      	ldr	r2, [pc, #476]	; (8008380 <HAL_I2C_Init+0x264>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	bf94      	ite	ls
 80081a8:	2301      	movls	r3, #1
 80081aa:	2300      	movhi	r3, #0
 80081ac:	b2db      	uxtb	r3, r3
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d001      	beq.n	80081b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80081b2:	2301      	movs	r3, #1
 80081b4:	e0db      	b.n	800836e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	4a72      	ldr	r2, [pc, #456]	; (8008384 <HAL_I2C_Init+0x268>)
 80081ba:	fba2 2303 	umull	r2, r3, r2, r3
 80081be:	0c9b      	lsrs	r3, r3, #18
 80081c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	68ba      	ldr	r2, [r7, #8]
 80081d2:	430a      	orrs	r2, r1
 80081d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	6a1b      	ldr	r3, [r3, #32]
 80081dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	4a64      	ldr	r2, [pc, #400]	; (8008378 <HAL_I2C_Init+0x25c>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d802      	bhi.n	80081f0 <HAL_I2C_Init+0xd4>
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	3301      	adds	r3, #1
 80081ee:	e009      	b.n	8008204 <HAL_I2C_Init+0xe8>
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80081f6:	fb02 f303 	mul.w	r3, r2, r3
 80081fa:	4a63      	ldr	r2, [pc, #396]	; (8008388 <HAL_I2C_Init+0x26c>)
 80081fc:	fba2 2303 	umull	r2, r3, r2, r3
 8008200:	099b      	lsrs	r3, r3, #6
 8008202:	3301      	adds	r3, #1
 8008204:	687a      	ldr	r2, [r7, #4]
 8008206:	6812      	ldr	r2, [r2, #0]
 8008208:	430b      	orrs	r3, r1
 800820a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	69db      	ldr	r3, [r3, #28]
 8008212:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008216:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	4956      	ldr	r1, [pc, #344]	; (8008378 <HAL_I2C_Init+0x25c>)
 8008220:	428b      	cmp	r3, r1
 8008222:	d80d      	bhi.n	8008240 <HAL_I2C_Init+0x124>
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	1e59      	subs	r1, r3, #1
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	005b      	lsls	r3, r3, #1
 800822e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008232:	3301      	adds	r3, #1
 8008234:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008238:	2b04      	cmp	r3, #4
 800823a:	bf38      	it	cc
 800823c:	2304      	movcc	r3, #4
 800823e:	e04f      	b.n	80082e0 <HAL_I2C_Init+0x1c4>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d111      	bne.n	800826c <HAL_I2C_Init+0x150>
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	1e58      	subs	r0, r3, #1
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6859      	ldr	r1, [r3, #4]
 8008250:	460b      	mov	r3, r1
 8008252:	005b      	lsls	r3, r3, #1
 8008254:	440b      	add	r3, r1
 8008256:	fbb0 f3f3 	udiv	r3, r0, r3
 800825a:	3301      	adds	r3, #1
 800825c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008260:	2b00      	cmp	r3, #0
 8008262:	bf0c      	ite	eq
 8008264:	2301      	moveq	r3, #1
 8008266:	2300      	movne	r3, #0
 8008268:	b2db      	uxtb	r3, r3
 800826a:	e012      	b.n	8008292 <HAL_I2C_Init+0x176>
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	1e58      	subs	r0, r3, #1
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6859      	ldr	r1, [r3, #4]
 8008274:	460b      	mov	r3, r1
 8008276:	009b      	lsls	r3, r3, #2
 8008278:	440b      	add	r3, r1
 800827a:	0099      	lsls	r1, r3, #2
 800827c:	440b      	add	r3, r1
 800827e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008282:	3301      	adds	r3, #1
 8008284:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008288:	2b00      	cmp	r3, #0
 800828a:	bf0c      	ite	eq
 800828c:	2301      	moveq	r3, #1
 800828e:	2300      	movne	r3, #0
 8008290:	b2db      	uxtb	r3, r3
 8008292:	2b00      	cmp	r3, #0
 8008294:	d001      	beq.n	800829a <HAL_I2C_Init+0x17e>
 8008296:	2301      	movs	r3, #1
 8008298:	e022      	b.n	80082e0 <HAL_I2C_Init+0x1c4>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	689b      	ldr	r3, [r3, #8]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d10e      	bne.n	80082c0 <HAL_I2C_Init+0x1a4>
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	1e58      	subs	r0, r3, #1
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6859      	ldr	r1, [r3, #4]
 80082aa:	460b      	mov	r3, r1
 80082ac:	005b      	lsls	r3, r3, #1
 80082ae:	440b      	add	r3, r1
 80082b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80082b4:	3301      	adds	r3, #1
 80082b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082be:	e00f      	b.n	80082e0 <HAL_I2C_Init+0x1c4>
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	1e58      	subs	r0, r3, #1
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6859      	ldr	r1, [r3, #4]
 80082c8:	460b      	mov	r3, r1
 80082ca:	009b      	lsls	r3, r3, #2
 80082cc:	440b      	add	r3, r1
 80082ce:	0099      	lsls	r1, r3, #2
 80082d0:	440b      	add	r3, r1
 80082d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80082d6:	3301      	adds	r3, #1
 80082d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80082e0:	6879      	ldr	r1, [r7, #4]
 80082e2:	6809      	ldr	r1, [r1, #0]
 80082e4:	4313      	orrs	r3, r2
 80082e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	69da      	ldr	r2, [r3, #28]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6a1b      	ldr	r3, [r3, #32]
 80082fa:	431a      	orrs	r2, r3
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	430a      	orrs	r2, r1
 8008302:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800830e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008312:	687a      	ldr	r2, [r7, #4]
 8008314:	6911      	ldr	r1, [r2, #16]
 8008316:	687a      	ldr	r2, [r7, #4]
 8008318:	68d2      	ldr	r2, [r2, #12]
 800831a:	4311      	orrs	r1, r2
 800831c:	687a      	ldr	r2, [r7, #4]
 800831e:	6812      	ldr	r2, [r2, #0]
 8008320:	430b      	orrs	r3, r1
 8008322:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	68db      	ldr	r3, [r3, #12]
 800832a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	695a      	ldr	r2, [r3, #20]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	699b      	ldr	r3, [r3, #24]
 8008336:	431a      	orrs	r2, r3
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	430a      	orrs	r2, r1
 800833e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	681a      	ldr	r2, [r3, #0]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f042 0201 	orr.w	r2, r2, #1
 800834e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2200      	movs	r2, #0
 8008354:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2220      	movs	r2, #32
 800835a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2200      	movs	r2, #0
 8008362:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2200      	movs	r2, #0
 8008368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800836c:	2300      	movs	r3, #0
}
 800836e:	4618      	mov	r0, r3
 8008370:	3710      	adds	r7, #16
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
 8008376:	bf00      	nop
 8008378:	000186a0 	.word	0x000186a0
 800837c:	001e847f 	.word	0x001e847f
 8008380:	003d08ff 	.word	0x003d08ff
 8008384:	431bde83 	.word	0x431bde83
 8008388:	10624dd3 	.word	0x10624dd3

0800838c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800838c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800838e:	b08b      	sub	sp, #44	; 0x2c
 8008390:	af06      	add	r7, sp, #24
 8008392:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d101      	bne.n	800839e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800839a:	2301      	movs	r3, #1
 800839c:	e0d0      	b.n	8008540 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80083a4:	b2db      	uxtb	r3, r3
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d106      	bne.n	80083b8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2200      	movs	r2, #0
 80083ae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f00c fa98 	bl	80148e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2203      	movs	r2, #3
 80083bc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4618      	mov	r0, r3
 80083c6:	f004 fb21 	bl	800ca0c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80083ca:	2300      	movs	r3, #0
 80083cc:	73fb      	strb	r3, [r7, #15]
 80083ce:	e04c      	b.n	800846a <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80083d0:	7bfb      	ldrb	r3, [r7, #15]
 80083d2:	6879      	ldr	r1, [r7, #4]
 80083d4:	1c5a      	adds	r2, r3, #1
 80083d6:	4613      	mov	r3, r2
 80083d8:	009b      	lsls	r3, r3, #2
 80083da:	4413      	add	r3, r2
 80083dc:	00db      	lsls	r3, r3, #3
 80083de:	440b      	add	r3, r1
 80083e0:	3301      	adds	r3, #1
 80083e2:	2201      	movs	r2, #1
 80083e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80083e6:	7bfb      	ldrb	r3, [r7, #15]
 80083e8:	6879      	ldr	r1, [r7, #4]
 80083ea:	1c5a      	adds	r2, r3, #1
 80083ec:	4613      	mov	r3, r2
 80083ee:	009b      	lsls	r3, r3, #2
 80083f0:	4413      	add	r3, r2
 80083f2:	00db      	lsls	r3, r3, #3
 80083f4:	440b      	add	r3, r1
 80083f6:	7bfa      	ldrb	r2, [r7, #15]
 80083f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80083fa:	7bfa      	ldrb	r2, [r7, #15]
 80083fc:	7bfb      	ldrb	r3, [r7, #15]
 80083fe:	b298      	uxth	r0, r3
 8008400:	6879      	ldr	r1, [r7, #4]
 8008402:	4613      	mov	r3, r2
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	4413      	add	r3, r2
 8008408:	00db      	lsls	r3, r3, #3
 800840a:	440b      	add	r3, r1
 800840c:	3336      	adds	r3, #54	; 0x36
 800840e:	4602      	mov	r2, r0
 8008410:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008412:	7bfb      	ldrb	r3, [r7, #15]
 8008414:	6879      	ldr	r1, [r7, #4]
 8008416:	1c5a      	adds	r2, r3, #1
 8008418:	4613      	mov	r3, r2
 800841a:	009b      	lsls	r3, r3, #2
 800841c:	4413      	add	r3, r2
 800841e:	00db      	lsls	r3, r3, #3
 8008420:	440b      	add	r3, r1
 8008422:	3303      	adds	r3, #3
 8008424:	2200      	movs	r2, #0
 8008426:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008428:	7bfa      	ldrb	r2, [r7, #15]
 800842a:	6879      	ldr	r1, [r7, #4]
 800842c:	4613      	mov	r3, r2
 800842e:	009b      	lsls	r3, r3, #2
 8008430:	4413      	add	r3, r2
 8008432:	00db      	lsls	r3, r3, #3
 8008434:	440b      	add	r3, r1
 8008436:	3338      	adds	r3, #56	; 0x38
 8008438:	2200      	movs	r2, #0
 800843a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800843c:	7bfa      	ldrb	r2, [r7, #15]
 800843e:	6879      	ldr	r1, [r7, #4]
 8008440:	4613      	mov	r3, r2
 8008442:	009b      	lsls	r3, r3, #2
 8008444:	4413      	add	r3, r2
 8008446:	00db      	lsls	r3, r3, #3
 8008448:	440b      	add	r3, r1
 800844a:	333c      	adds	r3, #60	; 0x3c
 800844c:	2200      	movs	r2, #0
 800844e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008450:	7bfa      	ldrb	r2, [r7, #15]
 8008452:	6879      	ldr	r1, [r7, #4]
 8008454:	4613      	mov	r3, r2
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	4413      	add	r3, r2
 800845a:	00db      	lsls	r3, r3, #3
 800845c:	440b      	add	r3, r1
 800845e:	3340      	adds	r3, #64	; 0x40
 8008460:	2200      	movs	r2, #0
 8008462:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008464:	7bfb      	ldrb	r3, [r7, #15]
 8008466:	3301      	adds	r3, #1
 8008468:	73fb      	strb	r3, [r7, #15]
 800846a:	7bfa      	ldrb	r2, [r7, #15]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	429a      	cmp	r2, r3
 8008472:	d3ad      	bcc.n	80083d0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008474:	2300      	movs	r3, #0
 8008476:	73fb      	strb	r3, [r7, #15]
 8008478:	e044      	b.n	8008504 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800847a:	7bfa      	ldrb	r2, [r7, #15]
 800847c:	6879      	ldr	r1, [r7, #4]
 800847e:	4613      	mov	r3, r2
 8008480:	009b      	lsls	r3, r3, #2
 8008482:	4413      	add	r3, r2
 8008484:	00db      	lsls	r3, r3, #3
 8008486:	440b      	add	r3, r1
 8008488:	f203 1369 	addw	r3, r3, #361	; 0x169
 800848c:	2200      	movs	r2, #0
 800848e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008490:	7bfa      	ldrb	r2, [r7, #15]
 8008492:	6879      	ldr	r1, [r7, #4]
 8008494:	4613      	mov	r3, r2
 8008496:	009b      	lsls	r3, r3, #2
 8008498:	4413      	add	r3, r2
 800849a:	00db      	lsls	r3, r3, #3
 800849c:	440b      	add	r3, r1
 800849e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80084a2:	7bfa      	ldrb	r2, [r7, #15]
 80084a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80084a6:	7bfa      	ldrb	r2, [r7, #15]
 80084a8:	6879      	ldr	r1, [r7, #4]
 80084aa:	4613      	mov	r3, r2
 80084ac:	009b      	lsls	r3, r3, #2
 80084ae:	4413      	add	r3, r2
 80084b0:	00db      	lsls	r3, r3, #3
 80084b2:	440b      	add	r3, r1
 80084b4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80084b8:	2200      	movs	r2, #0
 80084ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80084bc:	7bfa      	ldrb	r2, [r7, #15]
 80084be:	6879      	ldr	r1, [r7, #4]
 80084c0:	4613      	mov	r3, r2
 80084c2:	009b      	lsls	r3, r3, #2
 80084c4:	4413      	add	r3, r2
 80084c6:	00db      	lsls	r3, r3, #3
 80084c8:	440b      	add	r3, r1
 80084ca:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80084ce:	2200      	movs	r2, #0
 80084d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80084d2:	7bfa      	ldrb	r2, [r7, #15]
 80084d4:	6879      	ldr	r1, [r7, #4]
 80084d6:	4613      	mov	r3, r2
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	4413      	add	r3, r2
 80084dc:	00db      	lsls	r3, r3, #3
 80084de:	440b      	add	r3, r1
 80084e0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80084e4:	2200      	movs	r2, #0
 80084e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80084e8:	7bfa      	ldrb	r2, [r7, #15]
 80084ea:	6879      	ldr	r1, [r7, #4]
 80084ec:	4613      	mov	r3, r2
 80084ee:	009b      	lsls	r3, r3, #2
 80084f0:	4413      	add	r3, r2
 80084f2:	00db      	lsls	r3, r3, #3
 80084f4:	440b      	add	r3, r1
 80084f6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80084fa:	2200      	movs	r2, #0
 80084fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80084fe:	7bfb      	ldrb	r3, [r7, #15]
 8008500:	3301      	adds	r3, #1
 8008502:	73fb      	strb	r3, [r7, #15]
 8008504:	7bfa      	ldrb	r2, [r7, #15]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	429a      	cmp	r2, r3
 800850c:	d3b5      	bcc.n	800847a <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	603b      	str	r3, [r7, #0]
 8008514:	687e      	ldr	r6, [r7, #4]
 8008516:	466d      	mov	r5, sp
 8008518:	f106 0410 	add.w	r4, r6, #16
 800851c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800851e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008520:	6823      	ldr	r3, [r4, #0]
 8008522:	602b      	str	r3, [r5, #0]
 8008524:	1d33      	adds	r3, r6, #4
 8008526:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008528:	6838      	ldr	r0, [r7, #0]
 800852a:	f004 fa89 	bl	800ca40 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2200      	movs	r2, #0
 8008532:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2201      	movs	r2, #1
 800853a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800853e:	2300      	movs	r3, #0
}
 8008540:	4618      	mov	r0, r3
 8008542:	3714      	adds	r7, #20
 8008544:	46bd      	mov	sp, r7
 8008546:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008548 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b082      	sub	sp, #8
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008556:	2b01      	cmp	r3, #1
 8008558:	d101      	bne.n	800855e <HAL_PCD_Start+0x16>
 800855a:	2302      	movs	r3, #2
 800855c:	e016      	b.n	800858c <HAL_PCD_Start+0x44>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2201      	movs	r2, #1
 8008562:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4618      	mov	r0, r3
 800856c:	f004 fa38 	bl	800c9e0 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8008570:	2101      	movs	r1, #1
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f001 fa0e 	bl	8009994 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4618      	mov	r0, r3
 800857e:	f006 fa14 	bl	800e9aa <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2200      	movs	r2, #0
 8008586:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800858a:	2300      	movs	r3, #0
}
 800858c:	4618      	mov	r0, r3
 800858e:	3708      	adds	r7, #8
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b082      	sub	sp, #8
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4618      	mov	r0, r3
 80085a2:	f006 fa0c 	bl	800e9be <USB_ReadInterrupts>
 80085a6:	4603      	mov	r3, r0
 80085a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80085ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085b0:	d102      	bne.n	80085b8 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 fb0f 	bl	8008bd6 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4618      	mov	r0, r3
 80085be:	f006 f9fe 	bl	800e9be <USB_ReadInterrupts>
 80085c2:	4603      	mov	r3, r0
 80085c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085cc:	d112      	bne.n	80085f4 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80085d6:	b29a      	uxth	r2, r3
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085e0:	b292      	uxth	r2, r2
 80085e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f00c f9f9 	bl	80149de <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80085ec:	2100      	movs	r1, #0
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f000 f8c7 	bl	8008782 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4618      	mov	r0, r3
 80085fa:	f006 f9e0 	bl	800e9be <USB_ReadInterrupts>
 80085fe:	4603      	mov	r3, r0
 8008600:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008604:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008608:	d10b      	bne.n	8008622 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008612:	b29a      	uxth	r2, r3
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800861c:	b292      	uxth	r2, r2
 800861e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4618      	mov	r0, r3
 8008628:	f006 f9c9 	bl	800e9be <USB_ReadInterrupts>
 800862c:	4603      	mov	r3, r0
 800862e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008632:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008636:	d10b      	bne.n	8008650 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008640:	b29a      	uxth	r2, r3
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800864a:	b292      	uxth	r2, r2
 800864c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4618      	mov	r0, r3
 8008656:	f006 f9b2 	bl	800e9be <USB_ReadInterrupts>
 800865a:	4603      	mov	r3, r0
 800865c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008664:	d126      	bne.n	80086b4 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800866e:	b29a      	uxth	r2, r3
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f022 0204 	bic.w	r2, r2, #4
 8008678:	b292      	uxth	r2, r2
 800867a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008686:	b29a      	uxth	r2, r3
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f022 0208 	bic.w	r2, r2, #8
 8008690:	b292      	uxth	r2, r2
 8008692:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f00c f9da 	bl	8014a50 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80086a4:	b29a      	uxth	r2, r3
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80086ae:	b292      	uxth	r2, r2
 80086b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4618      	mov	r0, r3
 80086ba:	f006 f980 	bl	800e9be <USB_ReadInterrupts>
 80086be:	4603      	mov	r3, r0
 80086c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086c8:	d126      	bne.n	8008718 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80086d2:	b29a      	uxth	r2, r3
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f042 0208 	orr.w	r2, r2, #8
 80086dc:	b292      	uxth	r2, r2
 80086de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80086ea:	b29a      	uxth	r2, r3
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80086f4:	b292      	uxth	r2, r2
 80086f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008702:	b29a      	uxth	r2, r3
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f042 0204 	orr.w	r2, r2, #4
 800870c:	b292      	uxth	r2, r2
 800870e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f00c f982 	bl	8014a1c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4618      	mov	r0, r3
 800871e:	f006 f94e 	bl	800e9be <USB_ReadInterrupts>
 8008722:	4603      	mov	r3, r0
 8008724:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008728:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800872c:	d10e      	bne.n	800874c <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008736:	b29a      	uxth	r2, r3
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008740:	b292      	uxth	r2, r2
 8008742:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f00c f93b 	bl	80149c2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4618      	mov	r0, r3
 8008752:	f006 f934 	bl	800e9be <USB_ReadInterrupts>
 8008756:	4603      	mov	r3, r0
 8008758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800875c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008760:	d10b      	bne.n	800877a <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800876a:	b29a      	uxth	r2, r3
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008774:	b292      	uxth	r2, r2
 8008776:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800877a:	bf00      	nop
 800877c:	3708      	adds	r7, #8
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}

08008782 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008782:	b580      	push	{r7, lr}
 8008784:	b082      	sub	sp, #8
 8008786:	af00      	add	r7, sp, #0
 8008788:	6078      	str	r0, [r7, #4]
 800878a:	460b      	mov	r3, r1
 800878c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008794:	2b01      	cmp	r3, #1
 8008796:	d101      	bne.n	800879c <HAL_PCD_SetAddress+0x1a>
 8008798:	2302      	movs	r3, #2
 800879a:	e013      	b.n	80087c4 <HAL_PCD_SetAddress+0x42>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2201      	movs	r2, #1
 80087a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	78fa      	ldrb	r2, [r7, #3]
 80087a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	78fa      	ldrb	r2, [r7, #3]
 80087b2:	4611      	mov	r1, r2
 80087b4:	4618      	mov	r0, r3
 80087b6:	f006 f8e5 	bl	800e984 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2200      	movs	r2, #0
 80087be:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80087c2:	2300      	movs	r3, #0
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3708      	adds	r7, #8
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b084      	sub	sp, #16
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
 80087d4:	4608      	mov	r0, r1
 80087d6:	4611      	mov	r1, r2
 80087d8:	461a      	mov	r2, r3
 80087da:	4603      	mov	r3, r0
 80087dc:	70fb      	strb	r3, [r7, #3]
 80087de:	460b      	mov	r3, r1
 80087e0:	803b      	strh	r3, [r7, #0]
 80087e2:	4613      	mov	r3, r2
 80087e4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80087e6:	2300      	movs	r3, #0
 80087e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80087ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	da0e      	bge.n	8008810 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80087f2:	78fb      	ldrb	r3, [r7, #3]
 80087f4:	f003 0307 	and.w	r3, r3, #7
 80087f8:	1c5a      	adds	r2, r3, #1
 80087fa:	4613      	mov	r3, r2
 80087fc:	009b      	lsls	r3, r3, #2
 80087fe:	4413      	add	r3, r2
 8008800:	00db      	lsls	r3, r3, #3
 8008802:	687a      	ldr	r2, [r7, #4]
 8008804:	4413      	add	r3, r2
 8008806:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2201      	movs	r2, #1
 800880c:	705a      	strb	r2, [r3, #1]
 800880e:	e00e      	b.n	800882e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008810:	78fb      	ldrb	r3, [r7, #3]
 8008812:	f003 0207 	and.w	r2, r3, #7
 8008816:	4613      	mov	r3, r2
 8008818:	009b      	lsls	r3, r3, #2
 800881a:	4413      	add	r3, r2
 800881c:	00db      	lsls	r3, r3, #3
 800881e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008822:	687a      	ldr	r2, [r7, #4]
 8008824:	4413      	add	r3, r2
 8008826:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2200      	movs	r2, #0
 800882c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800882e:	78fb      	ldrb	r3, [r7, #3]
 8008830:	f003 0307 	and.w	r3, r3, #7
 8008834:	b2da      	uxtb	r2, r3
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800883a:	883a      	ldrh	r2, [r7, #0]
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	78ba      	ldrb	r2, [r7, #2]
 8008844:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	785b      	ldrb	r3, [r3, #1]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d004      	beq.n	8008858 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	781b      	ldrb	r3, [r3, #0]
 8008852:	b29a      	uxth	r2, r3
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008858:	78bb      	ldrb	r3, [r7, #2]
 800885a:	2b02      	cmp	r3, #2
 800885c:	d102      	bne.n	8008864 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2200      	movs	r2, #0
 8008862:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800886a:	2b01      	cmp	r3, #1
 800886c:	d101      	bne.n	8008872 <HAL_PCD_EP_Open+0xa6>
 800886e:	2302      	movs	r3, #2
 8008870:	e00e      	b.n	8008890 <HAL_PCD_EP_Open+0xc4>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2201      	movs	r2, #1
 8008876:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	68f9      	ldr	r1, [r7, #12]
 8008880:	4618      	mov	r0, r3
 8008882:	f004 f8fd 	bl	800ca80 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2200      	movs	r2, #0
 800888a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800888e:	7afb      	ldrb	r3, [r7, #11]
}
 8008890:	4618      	mov	r0, r3
 8008892:	3710      	adds	r7, #16
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}

08008898 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b084      	sub	sp, #16
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	460b      	mov	r3, r1
 80088a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80088a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	da0e      	bge.n	80088ca <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80088ac:	78fb      	ldrb	r3, [r7, #3]
 80088ae:	f003 0307 	and.w	r3, r3, #7
 80088b2:	1c5a      	adds	r2, r3, #1
 80088b4:	4613      	mov	r3, r2
 80088b6:	009b      	lsls	r3, r3, #2
 80088b8:	4413      	add	r3, r2
 80088ba:	00db      	lsls	r3, r3, #3
 80088bc:	687a      	ldr	r2, [r7, #4]
 80088be:	4413      	add	r3, r2
 80088c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2201      	movs	r2, #1
 80088c6:	705a      	strb	r2, [r3, #1]
 80088c8:	e00e      	b.n	80088e8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80088ca:	78fb      	ldrb	r3, [r7, #3]
 80088cc:	f003 0207 	and.w	r2, r3, #7
 80088d0:	4613      	mov	r3, r2
 80088d2:	009b      	lsls	r3, r3, #2
 80088d4:	4413      	add	r3, r2
 80088d6:	00db      	lsls	r3, r3, #3
 80088d8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80088dc:	687a      	ldr	r2, [r7, #4]
 80088de:	4413      	add	r3, r2
 80088e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2200      	movs	r2, #0
 80088e6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80088e8:	78fb      	ldrb	r3, [r7, #3]
 80088ea:	f003 0307 	and.w	r3, r3, #7
 80088ee:	b2da      	uxtb	r2, r3
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80088fa:	2b01      	cmp	r3, #1
 80088fc:	d101      	bne.n	8008902 <HAL_PCD_EP_Close+0x6a>
 80088fe:	2302      	movs	r3, #2
 8008900:	e00e      	b.n	8008920 <HAL_PCD_EP_Close+0x88>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2201      	movs	r2, #1
 8008906:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	68f9      	ldr	r1, [r7, #12]
 8008910:	4618      	mov	r0, r3
 8008912:	f004 fc1f 	bl	800d154 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2200      	movs	r2, #0
 800891a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800891e:	2300      	movs	r3, #0
}
 8008920:	4618      	mov	r0, r3
 8008922:	3710      	adds	r7, #16
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}

08008928 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b086      	sub	sp, #24
 800892c:	af00      	add	r7, sp, #0
 800892e:	60f8      	str	r0, [r7, #12]
 8008930:	607a      	str	r2, [r7, #4]
 8008932:	603b      	str	r3, [r7, #0]
 8008934:	460b      	mov	r3, r1
 8008936:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008938:	7afb      	ldrb	r3, [r7, #11]
 800893a:	f003 0207 	and.w	r2, r3, #7
 800893e:	4613      	mov	r3, r2
 8008940:	009b      	lsls	r3, r3, #2
 8008942:	4413      	add	r3, r2
 8008944:	00db      	lsls	r3, r3, #3
 8008946:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800894a:	68fa      	ldr	r2, [r7, #12]
 800894c:	4413      	add	r3, r2
 800894e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	683a      	ldr	r2, [r7, #0]
 800895a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	2200      	movs	r2, #0
 8008960:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	2200      	movs	r2, #0
 8008966:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008968:	7afb      	ldrb	r3, [r7, #11]
 800896a:	f003 0307 	and.w	r3, r3, #7
 800896e:	b2da      	uxtb	r2, r3
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008974:	7afb      	ldrb	r3, [r7, #11]
 8008976:	f003 0307 	and.w	r3, r3, #7
 800897a:	2b00      	cmp	r3, #0
 800897c:	d106      	bne.n	800898c <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	6979      	ldr	r1, [r7, #20]
 8008984:	4618      	mov	r0, r3
 8008986:	f004 fdd1 	bl	800d52c <USB_EPStartXfer>
 800898a:	e005      	b.n	8008998 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	6979      	ldr	r1, [r7, #20]
 8008992:	4618      	mov	r0, r3
 8008994:	f004 fdca 	bl	800d52c <USB_EPStartXfer>
  }

  return HAL_OK;
 8008998:	2300      	movs	r3, #0
}
 800899a:	4618      	mov	r0, r3
 800899c:	3718      	adds	r7, #24
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}

080089a2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80089a2:	b480      	push	{r7}
 80089a4:	b083      	sub	sp, #12
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	6078      	str	r0, [r7, #4]
 80089aa:	460b      	mov	r3, r1
 80089ac:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80089ae:	78fb      	ldrb	r3, [r7, #3]
 80089b0:	f003 0207 	and.w	r2, r3, #7
 80089b4:	6879      	ldr	r1, [r7, #4]
 80089b6:	4613      	mov	r3, r2
 80089b8:	009b      	lsls	r3, r3, #2
 80089ba:	4413      	add	r3, r2
 80089bc:	00db      	lsls	r3, r3, #3
 80089be:	440b      	add	r3, r1
 80089c0:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80089c4:	681b      	ldr	r3, [r3, #0]
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	370c      	adds	r7, #12
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bc80      	pop	{r7}
 80089ce:	4770      	bx	lr

080089d0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b086      	sub	sp, #24
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	60f8      	str	r0, [r7, #12]
 80089d8:	607a      	str	r2, [r7, #4]
 80089da:	603b      	str	r3, [r7, #0]
 80089dc:	460b      	mov	r3, r1
 80089de:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80089e0:	7afb      	ldrb	r3, [r7, #11]
 80089e2:	f003 0307 	and.w	r3, r3, #7
 80089e6:	1c5a      	adds	r2, r3, #1
 80089e8:	4613      	mov	r3, r2
 80089ea:	009b      	lsls	r3, r3, #2
 80089ec:	4413      	add	r3, r2
 80089ee:	00db      	lsls	r3, r3, #3
 80089f0:	68fa      	ldr	r2, [r7, #12]
 80089f2:	4413      	add	r3, r2
 80089f4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	687a      	ldr	r2, [r7, #4]
 80089fa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	683a      	ldr	r2, [r7, #0]
 8008a00:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	2201      	movs	r2, #1
 8008a06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	683a      	ldr	r2, [r7, #0]
 8008a0e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	2200      	movs	r2, #0
 8008a14:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	2201      	movs	r2, #1
 8008a1a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008a1c:	7afb      	ldrb	r3, [r7, #11]
 8008a1e:	f003 0307 	and.w	r3, r3, #7
 8008a22:	b2da      	uxtb	r2, r3
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008a28:	7afb      	ldrb	r3, [r7, #11]
 8008a2a:	f003 0307 	and.w	r3, r3, #7
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d106      	bne.n	8008a40 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	6979      	ldr	r1, [r7, #20]
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f004 fd77 	bl	800d52c <USB_EPStartXfer>
 8008a3e:	e005      	b.n	8008a4c <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	6979      	ldr	r1, [r7, #20]
 8008a46:	4618      	mov	r0, r3
 8008a48:	f004 fd70 	bl	800d52c <USB_EPStartXfer>
  }

  return HAL_OK;
 8008a4c:	2300      	movs	r3, #0
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3718      	adds	r7, #24
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}

08008a56 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008a56:	b580      	push	{r7, lr}
 8008a58:	b084      	sub	sp, #16
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	6078      	str	r0, [r7, #4]
 8008a5e:	460b      	mov	r3, r1
 8008a60:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008a62:	78fb      	ldrb	r3, [r7, #3]
 8008a64:	f003 0207 	and.w	r2, r3, #7
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	d901      	bls.n	8008a74 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008a70:	2301      	movs	r3, #1
 8008a72:	e04c      	b.n	8008b0e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008a74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	da0e      	bge.n	8008a9a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008a7c:	78fb      	ldrb	r3, [r7, #3]
 8008a7e:	f003 0307 	and.w	r3, r3, #7
 8008a82:	1c5a      	adds	r2, r3, #1
 8008a84:	4613      	mov	r3, r2
 8008a86:	009b      	lsls	r3, r3, #2
 8008a88:	4413      	add	r3, r2
 8008a8a:	00db      	lsls	r3, r3, #3
 8008a8c:	687a      	ldr	r2, [r7, #4]
 8008a8e:	4413      	add	r3, r2
 8008a90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2201      	movs	r2, #1
 8008a96:	705a      	strb	r2, [r3, #1]
 8008a98:	e00c      	b.n	8008ab4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008a9a:	78fa      	ldrb	r2, [r7, #3]
 8008a9c:	4613      	mov	r3, r2
 8008a9e:	009b      	lsls	r3, r3, #2
 8008aa0:	4413      	add	r3, r2
 8008aa2:	00db      	lsls	r3, r3, #3
 8008aa4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008aa8:	687a      	ldr	r2, [r7, #4]
 8008aaa:	4413      	add	r3, r2
 8008aac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008aba:	78fb      	ldrb	r3, [r7, #3]
 8008abc:	f003 0307 	and.w	r3, r3, #7
 8008ac0:	b2da      	uxtb	r2, r3
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008acc:	2b01      	cmp	r3, #1
 8008ace:	d101      	bne.n	8008ad4 <HAL_PCD_EP_SetStall+0x7e>
 8008ad0:	2302      	movs	r3, #2
 8008ad2:	e01c      	b.n	8008b0e <HAL_PCD_EP_SetStall+0xb8>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	68f9      	ldr	r1, [r7, #12]
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f005 fe51 	bl	800e78a <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008ae8:	78fb      	ldrb	r3, [r7, #3]
 8008aea:	f003 0307 	and.w	r3, r3, #7
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d108      	bne.n	8008b04 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681a      	ldr	r2, [r3, #0]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008afc:	4619      	mov	r1, r3
 8008afe:	4610      	mov	r0, r2
 8008b00:	f005 ff6c 	bl	800e9dc <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2200      	movs	r2, #0
 8008b08:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8008b0c:	2300      	movs	r3, #0
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3710      	adds	r7, #16
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}

08008b16 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008b16:	b580      	push	{r7, lr}
 8008b18:	b084      	sub	sp, #16
 8008b1a:	af00      	add	r7, sp, #0
 8008b1c:	6078      	str	r0, [r7, #4]
 8008b1e:	460b      	mov	r3, r1
 8008b20:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008b22:	78fb      	ldrb	r3, [r7, #3]
 8008b24:	f003 020f 	and.w	r2, r3, #15
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	685b      	ldr	r3, [r3, #4]
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d901      	bls.n	8008b34 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008b30:	2301      	movs	r3, #1
 8008b32:	e040      	b.n	8008bb6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008b34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	da0e      	bge.n	8008b5a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008b3c:	78fb      	ldrb	r3, [r7, #3]
 8008b3e:	f003 0307 	and.w	r3, r3, #7
 8008b42:	1c5a      	adds	r2, r3, #1
 8008b44:	4613      	mov	r3, r2
 8008b46:	009b      	lsls	r3, r3, #2
 8008b48:	4413      	add	r3, r2
 8008b4a:	00db      	lsls	r3, r3, #3
 8008b4c:	687a      	ldr	r2, [r7, #4]
 8008b4e:	4413      	add	r3, r2
 8008b50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2201      	movs	r2, #1
 8008b56:	705a      	strb	r2, [r3, #1]
 8008b58:	e00e      	b.n	8008b78 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008b5a:	78fb      	ldrb	r3, [r7, #3]
 8008b5c:	f003 0207 	and.w	r2, r3, #7
 8008b60:	4613      	mov	r3, r2
 8008b62:	009b      	lsls	r3, r3, #2
 8008b64:	4413      	add	r3, r2
 8008b66:	00db      	lsls	r3, r3, #3
 8008b68:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008b6c:	687a      	ldr	r2, [r7, #4]
 8008b6e:	4413      	add	r3, r2
 8008b70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	2200      	movs	r2, #0
 8008b76:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008b7e:	78fb      	ldrb	r3, [r7, #3]
 8008b80:	f003 0307 	and.w	r3, r3, #7
 8008b84:	b2da      	uxtb	r2, r3
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008b90:	2b01      	cmp	r3, #1
 8008b92:	d101      	bne.n	8008b98 <HAL_PCD_EP_ClrStall+0x82>
 8008b94:	2302      	movs	r3, #2
 8008b96:	e00e      	b.n	8008bb6 <HAL_PCD_EP_ClrStall+0xa0>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	68f9      	ldr	r1, [r7, #12]
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f005 fe3f 	bl	800e82a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8008bb4:	2300      	movs	r3, #0
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3710      	adds	r7, #16
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}

08008bbe <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008bbe:	b480      	push	{r7}
 8008bc0:	b083      	sub	sp, #12
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	6078      	str	r0, [r7, #4]
 8008bc6:	460b      	mov	r3, r1
 8008bc8:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hpcd);
  UNUSED(ep_addr);

  return HAL_OK;
 8008bca:	2300      	movs	r3, #0
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	370c      	adds	r7, #12
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bc80      	pop	{r7}
 8008bd4:	4770      	bx	lr

08008bd6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8008bd6:	b580      	push	{r7, lr}
 8008bd8:	b08e      	sub	sp, #56	; 0x38
 8008bda:	af00      	add	r7, sp, #0
 8008bdc:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8008bde:	e2df      	b.n	80091a0 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008be8:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8008bea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008bec:	b2db      	uxtb	r3, r3
 8008bee:	f003 030f 	and.w	r3, r3, #15
 8008bf2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8008bf6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	f040 8158 	bne.w	8008eb0 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8008c00:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008c02:	f003 0310 	and.w	r3, r3, #16
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d152      	bne.n	8008cb0 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	881b      	ldrh	r3, [r3, #0]
 8008c10:	b29b      	uxth	r3, r3
 8008c12:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8008c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c1a:	81fb      	strh	r3, [r7, #14]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681a      	ldr	r2, [r3, #0]
 8008c20:	89fb      	ldrh	r3, [r7, #14]
 8008c22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	3328      	adds	r3, #40	; 0x28
 8008c32:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	461a      	mov	r2, r3
 8008c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c42:	781b      	ldrb	r3, [r3, #0]
 8008c44:	00db      	lsls	r3, r3, #3
 8008c46:	4413      	add	r3, r2
 8008c48:	3302      	adds	r3, #2
 8008c4a:	005b      	lsls	r3, r3, #1
 8008c4c:	687a      	ldr	r2, [r7, #4]
 8008c4e:	6812      	ldr	r2, [r2, #0]
 8008c50:	4413      	add	r3, r2
 8008c52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c56:	881b      	ldrh	r3, [r3, #0]
 8008c58:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8008c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c5e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8008c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c62:	695a      	ldr	r2, [r3, #20]
 8008c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c66:	69db      	ldr	r3, [r3, #28]
 8008c68:	441a      	add	r2, r3
 8008c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c6c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8008c6e:	2100      	movs	r1, #0
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f00b fe8c 	bl	801498e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008c7c:	b2db      	uxtb	r3, r3
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	f000 828e 	beq.w	80091a0 <PCD_EP_ISR_Handler+0x5ca>
 8008c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c86:	699b      	ldr	r3, [r3, #24]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	f040 8289 	bne.w	80091a0 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008c94:	b2db      	uxtb	r3, r3
 8008c96:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008c9a:	b2da      	uxtb	r2, r3
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	b292      	uxth	r2, r2
 8008ca2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8008cae:	e277      	b.n	80091a0 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008cb6:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	881b      	ldrh	r3, [r3, #0]
 8008cbe:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8008cc0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008cc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d034      	beq.n	8008d34 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008cd2:	b29b      	uxth	r3, r3
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd8:	781b      	ldrb	r3, [r3, #0]
 8008cda:	00db      	lsls	r3, r3, #3
 8008cdc:	4413      	add	r3, r2
 8008cde:	3306      	adds	r3, #6
 8008ce0:	005b      	lsls	r3, r3, #1
 8008ce2:	687a      	ldr	r2, [r7, #4]
 8008ce4:	6812      	ldr	r2, [r2, #0]
 8008ce6:	4413      	add	r3, r2
 8008ce8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008cec:	881b      	ldrh	r3, [r3, #0]
 8008cee:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8008cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6818      	ldr	r0, [r3, #0]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8008d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d02:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8008d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d06:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8008d08:	b29b      	uxth	r3, r3
 8008d0a:	f005 feb6 	bl	800ea7a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	881b      	ldrh	r3, [r3, #0]
 8008d14:	b29a      	uxth	r2, r3
 8008d16:	f640 738f 	movw	r3, #3983	; 0xf8f
 8008d1a:	4013      	ands	r3, r2
 8008d1c:	823b      	strh	r3, [r7, #16]
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	8a3a      	ldrh	r2, [r7, #16]
 8008d24:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008d28:	b292      	uxth	r2, r2
 8008d2a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f00b fe01 	bl	8014934 <HAL_PCD_SetupStageCallback>
 8008d32:	e235      	b.n	80091a0 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8008d34:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	f280 8231 	bge.w	80091a0 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	881b      	ldrh	r3, [r3, #0]
 8008d44:	b29a      	uxth	r2, r3
 8008d46:	f640 738f 	movw	r3, #3983	; 0xf8f
 8008d4a:	4013      	ands	r3, r2
 8008d4c:	83bb      	strh	r3, [r7, #28]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	8bba      	ldrh	r2, [r7, #28]
 8008d54:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008d58:	b292      	uxth	r2, r2
 8008d5a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d64:	b29b      	uxth	r3, r3
 8008d66:	461a      	mov	r2, r3
 8008d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	00db      	lsls	r3, r3, #3
 8008d6e:	4413      	add	r3, r2
 8008d70:	3306      	adds	r3, #6
 8008d72:	005b      	lsls	r3, r3, #1
 8008d74:	687a      	ldr	r2, [r7, #4]
 8008d76:	6812      	ldr	r2, [r2, #0]
 8008d78:	4413      	add	r3, r2
 8008d7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d7e:	881b      	ldrh	r3, [r3, #0]
 8008d80:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8008d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d86:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8008d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8a:	69db      	ldr	r3, [r3, #28]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d019      	beq.n	8008dc4 <PCD_EP_ISR_Handler+0x1ee>
 8008d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d92:	695b      	ldr	r3, [r3, #20]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d015      	beq.n	8008dc4 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6818      	ldr	r0, [r3, #0]
 8008d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9e:	6959      	ldr	r1, [r3, #20]
 8008da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8008da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8008da8:	b29b      	uxth	r3, r3
 8008daa:	f005 fe66 	bl	800ea7a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8008dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db0:	695a      	ldr	r2, [r3, #20]
 8008db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db4:	69db      	ldr	r3, [r3, #28]
 8008db6:	441a      	add	r2, r3
 8008db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dba:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8008dbc:	2100      	movs	r1, #0
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f00b fdca 	bl	8014958 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	61bb      	str	r3, [r7, #24]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008dd2:	b29b      	uxth	r3, r3
 8008dd4:	461a      	mov	r2, r3
 8008dd6:	69bb      	ldr	r3, [r7, #24]
 8008dd8:	4413      	add	r3, r2
 8008dda:	61bb      	str	r3, [r7, #24]
 8008ddc:	69bb      	ldr	r3, [r7, #24]
 8008dde:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008de2:	617b      	str	r3, [r7, #20]
 8008de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de6:	691b      	ldr	r3, [r3, #16]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d112      	bne.n	8008e12 <PCD_EP_ISR_Handler+0x23c>
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	881b      	ldrh	r3, [r3, #0]
 8008df0:	b29b      	uxth	r3, r3
 8008df2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008df6:	b29a      	uxth	r2, r3
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	801a      	strh	r2, [r3, #0]
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	881b      	ldrh	r3, [r3, #0]
 8008e00:	b29b      	uxth	r3, r3
 8008e02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e0a:	b29a      	uxth	r2, r3
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	801a      	strh	r2, [r3, #0]
 8008e10:	e02f      	b.n	8008e72 <PCD_EP_ISR_Handler+0x29c>
 8008e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e14:	691b      	ldr	r3, [r3, #16]
 8008e16:	2b3e      	cmp	r3, #62	; 0x3e
 8008e18:	d813      	bhi.n	8008e42 <PCD_EP_ISR_Handler+0x26c>
 8008e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1c:	691b      	ldr	r3, [r3, #16]
 8008e1e:	085b      	lsrs	r3, r3, #1
 8008e20:	633b      	str	r3, [r7, #48]	; 0x30
 8008e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e24:	691b      	ldr	r3, [r3, #16]
 8008e26:	f003 0301 	and.w	r3, r3, #1
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d002      	beq.n	8008e34 <PCD_EP_ISR_Handler+0x25e>
 8008e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e30:	3301      	adds	r3, #1
 8008e32:	633b      	str	r3, [r7, #48]	; 0x30
 8008e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e36:	b29b      	uxth	r3, r3
 8008e38:	029b      	lsls	r3, r3, #10
 8008e3a:	b29a      	uxth	r2, r3
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	801a      	strh	r2, [r3, #0]
 8008e40:	e017      	b.n	8008e72 <PCD_EP_ISR_Handler+0x29c>
 8008e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e44:	691b      	ldr	r3, [r3, #16]
 8008e46:	095b      	lsrs	r3, r3, #5
 8008e48:	633b      	str	r3, [r7, #48]	; 0x30
 8008e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e4c:	691b      	ldr	r3, [r3, #16]
 8008e4e:	f003 031f 	and.w	r3, r3, #31
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d102      	bne.n	8008e5c <PCD_EP_ISR_Handler+0x286>
 8008e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e58:	3b01      	subs	r3, #1
 8008e5a:	633b      	str	r3, [r7, #48]	; 0x30
 8008e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e5e:	b29b      	uxth	r3, r3
 8008e60:	029b      	lsls	r3, r3, #10
 8008e62:	b29b      	uxth	r3, r3
 8008e64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e6c:	b29a      	uxth	r2, r3
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	881b      	ldrh	r3, [r3, #0]
 8008e78:	b29b      	uxth	r3, r3
 8008e7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e82:	827b      	strh	r3, [r7, #18]
 8008e84:	8a7b      	ldrh	r3, [r7, #18]
 8008e86:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008e8a:	827b      	strh	r3, [r7, #18]
 8008e8c:	8a7b      	ldrh	r3, [r7, #18]
 8008e8e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008e92:	827b      	strh	r3, [r7, #18]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681a      	ldr	r2, [r3, #0]
 8008e98:	8a7b      	ldrh	r3, [r7, #18]
 8008e9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ea2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ea6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008eaa:	b29b      	uxth	r3, r3
 8008eac:	8013      	strh	r3, [r2, #0]
 8008eae:	e177      	b.n	80091a0 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	461a      	mov	r2, r3
 8008eb6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008eba:	009b      	lsls	r3, r3, #2
 8008ebc:	4413      	add	r3, r2
 8008ebe:	881b      	ldrh	r3, [r3, #0]
 8008ec0:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8008ec2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	f280 80ea 	bge.w	80090a0 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	461a      	mov	r2, r3
 8008ed2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008ed6:	009b      	lsls	r3, r3, #2
 8008ed8:	4413      	add	r3, r2
 8008eda:	881b      	ldrh	r3, [r3, #0]
 8008edc:	b29a      	uxth	r2, r3
 8008ede:	f640 738f 	movw	r3, #3983	; 0xf8f
 8008ee2:	4013      	ands	r3, r2
 8008ee4:	853b      	strh	r3, [r7, #40]	; 0x28
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	461a      	mov	r2, r3
 8008eec:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008ef0:	009b      	lsls	r3, r3, #2
 8008ef2:	4413      	add	r3, r2
 8008ef4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008ef6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008efa:	b292      	uxth	r2, r2
 8008efc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8008efe:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8008f02:	4613      	mov	r3, r2
 8008f04:	009b      	lsls	r3, r3, #2
 8008f06:	4413      	add	r3, r2
 8008f08:	00db      	lsls	r3, r3, #3
 8008f0a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008f0e:	687a      	ldr	r2, [r7, #4]
 8008f10:	4413      	add	r3, r2
 8008f12:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8008f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f16:	7b1b      	ldrb	r3, [r3, #12]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d122      	bne.n	8008f62 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f24:	b29b      	uxth	r3, r3
 8008f26:	461a      	mov	r2, r3
 8008f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	00db      	lsls	r3, r3, #3
 8008f2e:	4413      	add	r3, r2
 8008f30:	3306      	adds	r3, #6
 8008f32:	005b      	lsls	r3, r3, #1
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	6812      	ldr	r2, [r2, #0]
 8008f38:	4413      	add	r3, r2
 8008f3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f3e:	881b      	ldrh	r3, [r3, #0]
 8008f40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008f44:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8008f46:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	f000 8087 	beq.w	800905c <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6818      	ldr	r0, [r3, #0]
 8008f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f54:	6959      	ldr	r1, [r3, #20]
 8008f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f58:	88da      	ldrh	r2, [r3, #6]
 8008f5a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008f5c:	f005 fd8d 	bl	800ea7a <USB_ReadPMA>
 8008f60:	e07c      	b.n	800905c <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8008f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f64:	78db      	ldrb	r3, [r3, #3]
 8008f66:	2b02      	cmp	r3, #2
 8008f68:	d108      	bne.n	8008f7c <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8008f6a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008f6c:	461a      	mov	r2, r3
 8008f6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f000 f923 	bl	80091bc <HAL_PCD_EP_DB_Receive>
 8008f76:	4603      	mov	r3, r0
 8008f78:	86fb      	strh	r3, [r7, #54]	; 0x36
 8008f7a:	e06f      	b.n	800905c <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	461a      	mov	r2, r3
 8008f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f84:	781b      	ldrb	r3, [r3, #0]
 8008f86:	009b      	lsls	r3, r3, #2
 8008f88:	4413      	add	r3, r2
 8008f8a:	881b      	ldrh	r3, [r3, #0]
 8008f8c:	b29b      	uxth	r3, r3
 8008f8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f96:	847b      	strh	r3, [r7, #34]	; 0x22
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	461a      	mov	r2, r3
 8008f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa0:	781b      	ldrb	r3, [r3, #0]
 8008fa2:	009b      	lsls	r3, r3, #2
 8008fa4:	441a      	add	r2, r3
 8008fa6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008fa8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008fac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008fb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fb4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008fb8:	b29b      	uxth	r3, r3
 8008fba:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc4:	781b      	ldrb	r3, [r3, #0]
 8008fc6:	009b      	lsls	r3, r3, #2
 8008fc8:	4413      	add	r3, r2
 8008fca:	881b      	ldrh	r3, [r3, #0]
 8008fcc:	b29b      	uxth	r3, r3
 8008fce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d021      	beq.n	800901a <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008fde:	b29b      	uxth	r3, r3
 8008fe0:	461a      	mov	r2, r3
 8008fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe4:	781b      	ldrb	r3, [r3, #0]
 8008fe6:	00db      	lsls	r3, r3, #3
 8008fe8:	4413      	add	r3, r2
 8008fea:	3302      	adds	r3, #2
 8008fec:	005b      	lsls	r3, r3, #1
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	6812      	ldr	r2, [r2, #0]
 8008ff2:	4413      	add	r3, r2
 8008ff4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ff8:	881b      	ldrh	r3, [r3, #0]
 8008ffa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008ffe:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8009000:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009002:	2b00      	cmp	r3, #0
 8009004:	d02a      	beq.n	800905c <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6818      	ldr	r0, [r3, #0]
 800900a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800900c:	6959      	ldr	r1, [r3, #20]
 800900e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009010:	891a      	ldrh	r2, [r3, #8]
 8009012:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009014:	f005 fd31 	bl	800ea7a <USB_ReadPMA>
 8009018:	e020      	b.n	800905c <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009022:	b29b      	uxth	r3, r3
 8009024:	461a      	mov	r2, r3
 8009026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009028:	781b      	ldrb	r3, [r3, #0]
 800902a:	00db      	lsls	r3, r3, #3
 800902c:	4413      	add	r3, r2
 800902e:	3306      	adds	r3, #6
 8009030:	005b      	lsls	r3, r3, #1
 8009032:	687a      	ldr	r2, [r7, #4]
 8009034:	6812      	ldr	r2, [r2, #0]
 8009036:	4413      	add	r3, r2
 8009038:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800903c:	881b      	ldrh	r3, [r3, #0]
 800903e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009042:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8009044:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009046:	2b00      	cmp	r3, #0
 8009048:	d008      	beq.n	800905c <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6818      	ldr	r0, [r3, #0]
 800904e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009050:	6959      	ldr	r1, [r3, #20]
 8009052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009054:	895a      	ldrh	r2, [r3, #10]
 8009056:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009058:	f005 fd0f 	bl	800ea7a <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800905c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800905e:	69da      	ldr	r2, [r3, #28]
 8009060:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009062:	441a      	add	r2, r3
 8009064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009066:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8009068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800906a:	695a      	ldr	r2, [r3, #20]
 800906c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800906e:	441a      	add	r2, r3
 8009070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009072:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8009074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009076:	699b      	ldr	r3, [r3, #24]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d004      	beq.n	8009086 <PCD_EP_ISR_Handler+0x4b0>
 800907c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800907e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009080:	691b      	ldr	r3, [r3, #16]
 8009082:	429a      	cmp	r2, r3
 8009084:	d206      	bcs.n	8009094 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8009086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009088:	781b      	ldrb	r3, [r3, #0]
 800908a:	4619      	mov	r1, r3
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f00b fc63 	bl	8014958 <HAL_PCD_DataOutStageCallback>
 8009092:	e005      	b.n	80090a0 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800909a:	4618      	mov	r0, r3
 800909c:	f004 fa46 	bl	800d52c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80090a0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80090a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d07a      	beq.n	80091a0 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 80090aa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80090ae:	1c5a      	adds	r2, r3, #1
 80090b0:	4613      	mov	r3, r2
 80090b2:	009b      	lsls	r3, r3, #2
 80090b4:	4413      	add	r3, r2
 80090b6:	00db      	lsls	r3, r3, #3
 80090b8:	687a      	ldr	r2, [r7, #4]
 80090ba:	4413      	add	r3, r2
 80090bc:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	461a      	mov	r2, r3
 80090c4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80090c8:	009b      	lsls	r3, r3, #2
 80090ca:	4413      	add	r3, r2
 80090cc:	881b      	ldrh	r3, [r3, #0]
 80090ce:	b29b      	uxth	r3, r3
 80090d0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80090d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090d8:	843b      	strh	r3, [r7, #32]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	461a      	mov	r2, r3
 80090e0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80090e4:	009b      	lsls	r3, r3, #2
 80090e6:	441a      	add	r2, r3
 80090e8:	8c3b      	ldrh	r3, [r7, #32]
 80090ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090f2:	b29b      	uxth	r3, r3
 80090f4:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 80090f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f8:	78db      	ldrb	r3, [r3, #3]
 80090fa:	2b02      	cmp	r3, #2
 80090fc:	d108      	bne.n	8009110 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80090fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009100:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8009102:	2b02      	cmp	r3, #2
 8009104:	d146      	bne.n	8009194 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8009106:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800910c:	2b00      	cmp	r3, #0
 800910e:	d141      	bne.n	8009194 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009118:	b29b      	uxth	r3, r3
 800911a:	461a      	mov	r2, r3
 800911c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800911e:	781b      	ldrb	r3, [r3, #0]
 8009120:	00db      	lsls	r3, r3, #3
 8009122:	4413      	add	r3, r2
 8009124:	3302      	adds	r3, #2
 8009126:	005b      	lsls	r3, r3, #1
 8009128:	687a      	ldr	r2, [r7, #4]
 800912a:	6812      	ldr	r2, [r2, #0]
 800912c:	4413      	add	r3, r2
 800912e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009132:	881b      	ldrh	r3, [r3, #0]
 8009134:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009138:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800913a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800913c:	699a      	ldr	r2, [r3, #24]
 800913e:	8bfb      	ldrh	r3, [r7, #30]
 8009140:	429a      	cmp	r2, r3
 8009142:	d906      	bls.n	8009152 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8009144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009146:	699a      	ldr	r2, [r3, #24]
 8009148:	8bfb      	ldrh	r3, [r7, #30]
 800914a:	1ad2      	subs	r2, r2, r3
 800914c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800914e:	619a      	str	r2, [r3, #24]
 8009150:	e002      	b.n	8009158 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8009152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009154:	2200      	movs	r2, #0
 8009156:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8009158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800915a:	699b      	ldr	r3, [r3, #24]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d106      	bne.n	800916e <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009162:	781b      	ldrb	r3, [r3, #0]
 8009164:	4619      	mov	r1, r3
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f00b fc11 	bl	801498e <HAL_PCD_DataInStageCallback>
 800916c:	e018      	b.n	80091a0 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800916e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009170:	695a      	ldr	r2, [r3, #20]
 8009172:	8bfb      	ldrh	r3, [r7, #30]
 8009174:	441a      	add	r2, r3
 8009176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009178:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800917a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800917c:	69da      	ldr	r2, [r3, #28]
 800917e:	8bfb      	ldrh	r3, [r7, #30]
 8009180:	441a      	add	r2, r3
 8009182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009184:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800918c:	4618      	mov	r0, r3
 800918e:	f004 f9cd 	bl	800d52c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8009192:	e005      	b.n	80091a0 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8009194:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009196:	461a      	mov	r2, r3
 8009198:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f000 f91b 	bl	80093d6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80091a8:	b29b      	uxth	r3, r3
 80091aa:	b21b      	sxth	r3, r3
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	f6ff ad17 	blt.w	8008be0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80091b2:	2300      	movs	r3, #0
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	3738      	adds	r7, #56	; 0x38
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}

080091bc <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b088      	sub	sp, #32
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	60f8      	str	r0, [r7, #12]
 80091c4:	60b9      	str	r1, [r7, #8]
 80091c6:	4613      	mov	r3, r2
 80091c8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80091ca:	88fb      	ldrh	r3, [r7, #6]
 80091cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d07e      	beq.n	80092d2 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091dc:	b29b      	uxth	r3, r3
 80091de:	461a      	mov	r2, r3
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	781b      	ldrb	r3, [r3, #0]
 80091e4:	00db      	lsls	r3, r3, #3
 80091e6:	4413      	add	r3, r2
 80091e8:	3302      	adds	r3, #2
 80091ea:	005b      	lsls	r3, r3, #1
 80091ec:	68fa      	ldr	r2, [r7, #12]
 80091ee:	6812      	ldr	r2, [r2, #0]
 80091f0:	4413      	add	r3, r2
 80091f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80091f6:	881b      	ldrh	r3, [r3, #0]
 80091f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80091fc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	699a      	ldr	r2, [r3, #24]
 8009202:	8b7b      	ldrh	r3, [r7, #26]
 8009204:	429a      	cmp	r2, r3
 8009206:	d306      	bcc.n	8009216 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	699a      	ldr	r2, [r3, #24]
 800920c:	8b7b      	ldrh	r3, [r7, #26]
 800920e:	1ad2      	subs	r2, r2, r3
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	619a      	str	r2, [r3, #24]
 8009214:	e002      	b.n	800921c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	2200      	movs	r2, #0
 800921a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	699b      	ldr	r3, [r3, #24]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d123      	bne.n	800926c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	461a      	mov	r2, r3
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	781b      	ldrb	r3, [r3, #0]
 800922e:	009b      	lsls	r3, r3, #2
 8009230:	4413      	add	r3, r2
 8009232:	881b      	ldrh	r3, [r3, #0]
 8009234:	b29b      	uxth	r3, r3
 8009236:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800923a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800923e:	833b      	strh	r3, [r7, #24]
 8009240:	8b3b      	ldrh	r3, [r7, #24]
 8009242:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009246:	833b      	strh	r3, [r7, #24]
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	461a      	mov	r2, r3
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	781b      	ldrb	r3, [r3, #0]
 8009252:	009b      	lsls	r3, r3, #2
 8009254:	441a      	add	r2, r3
 8009256:	8b3b      	ldrh	r3, [r7, #24]
 8009258:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800925c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009260:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009268:	b29b      	uxth	r3, r3
 800926a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800926c:	88fb      	ldrh	r3, [r7, #6]
 800926e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009272:	2b00      	cmp	r3, #0
 8009274:	d01f      	beq.n	80092b6 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	461a      	mov	r2, r3
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	781b      	ldrb	r3, [r3, #0]
 8009280:	009b      	lsls	r3, r3, #2
 8009282:	4413      	add	r3, r2
 8009284:	881b      	ldrh	r3, [r3, #0]
 8009286:	b29b      	uxth	r3, r3
 8009288:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800928c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009290:	82fb      	strh	r3, [r7, #22]
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	461a      	mov	r2, r3
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	781b      	ldrb	r3, [r3, #0]
 800929c:	009b      	lsls	r3, r3, #2
 800929e:	441a      	add	r2, r3
 80092a0:	8afb      	ldrh	r3, [r7, #22]
 80092a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80092b6:	8b7b      	ldrh	r3, [r7, #26]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	f000 8087 	beq.w	80093cc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	6818      	ldr	r0, [r3, #0]
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	6959      	ldr	r1, [r3, #20]
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	891a      	ldrh	r2, [r3, #8]
 80092ca:	8b7b      	ldrh	r3, [r7, #26]
 80092cc:	f005 fbd5 	bl	800ea7a <USB_ReadPMA>
 80092d0:	e07c      	b.n	80093cc <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092da:	b29b      	uxth	r3, r3
 80092dc:	461a      	mov	r2, r3
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	781b      	ldrb	r3, [r3, #0]
 80092e2:	00db      	lsls	r3, r3, #3
 80092e4:	4413      	add	r3, r2
 80092e6:	3306      	adds	r3, #6
 80092e8:	005b      	lsls	r3, r3, #1
 80092ea:	68fa      	ldr	r2, [r7, #12]
 80092ec:	6812      	ldr	r2, [r2, #0]
 80092ee:	4413      	add	r3, r2
 80092f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80092f4:	881b      	ldrh	r3, [r3, #0]
 80092f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80092fa:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	699a      	ldr	r2, [r3, #24]
 8009300:	8b7b      	ldrh	r3, [r7, #26]
 8009302:	429a      	cmp	r2, r3
 8009304:	d306      	bcc.n	8009314 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	699a      	ldr	r2, [r3, #24]
 800930a:	8b7b      	ldrh	r3, [r7, #26]
 800930c:	1ad2      	subs	r2, r2, r3
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	619a      	str	r2, [r3, #24]
 8009312:	e002      	b.n	800931a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	2200      	movs	r2, #0
 8009318:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	699b      	ldr	r3, [r3, #24]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d123      	bne.n	800936a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	461a      	mov	r2, r3
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	781b      	ldrb	r3, [r3, #0]
 800932c:	009b      	lsls	r3, r3, #2
 800932e:	4413      	add	r3, r2
 8009330:	881b      	ldrh	r3, [r3, #0]
 8009332:	b29b      	uxth	r3, r3
 8009334:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009338:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800933c:	83fb      	strh	r3, [r7, #30]
 800933e:	8bfb      	ldrh	r3, [r7, #30]
 8009340:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009344:	83fb      	strh	r3, [r7, #30]
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	461a      	mov	r2, r3
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	781b      	ldrb	r3, [r3, #0]
 8009350:	009b      	lsls	r3, r3, #2
 8009352:	441a      	add	r2, r3
 8009354:	8bfb      	ldrh	r3, [r7, #30]
 8009356:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800935a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800935e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009362:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009366:	b29b      	uxth	r3, r3
 8009368:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800936a:	88fb      	ldrh	r3, [r7, #6]
 800936c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009370:	2b00      	cmp	r3, #0
 8009372:	d11f      	bne.n	80093b4 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	461a      	mov	r2, r3
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	781b      	ldrb	r3, [r3, #0]
 800937e:	009b      	lsls	r3, r3, #2
 8009380:	4413      	add	r3, r2
 8009382:	881b      	ldrh	r3, [r3, #0]
 8009384:	b29b      	uxth	r3, r3
 8009386:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800938a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800938e:	83bb      	strh	r3, [r7, #28]
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	461a      	mov	r2, r3
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	781b      	ldrb	r3, [r3, #0]
 800939a:	009b      	lsls	r3, r3, #2
 800939c:	441a      	add	r2, r3
 800939e:	8bbb      	ldrh	r3, [r7, #28]
 80093a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80093a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80093ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80093b0:	b29b      	uxth	r3, r3
 80093b2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80093b4:	8b7b      	ldrh	r3, [r7, #26]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d008      	beq.n	80093cc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	6818      	ldr	r0, [r3, #0]
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	6959      	ldr	r1, [r3, #20]
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	895a      	ldrh	r2, [r3, #10]
 80093c6:	8b7b      	ldrh	r3, [r7, #26]
 80093c8:	f005 fb57 	bl	800ea7a <USB_ReadPMA>
    }
  }

  return count;
 80093cc:	8b7b      	ldrh	r3, [r7, #26]
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3720      	adds	r7, #32
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}

080093d6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80093d6:	b580      	push	{r7, lr}
 80093d8:	b092      	sub	sp, #72	; 0x48
 80093da:	af00      	add	r7, sp, #0
 80093dc:	60f8      	str	r0, [r7, #12]
 80093de:	60b9      	str	r1, [r7, #8]
 80093e0:	4613      	mov	r3, r2
 80093e2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80093e4:	88fb      	ldrh	r3, [r7, #6]
 80093e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	f000 8132 	beq.w	8009654 <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093f8:	b29b      	uxth	r3, r3
 80093fa:	461a      	mov	r2, r3
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	781b      	ldrb	r3, [r3, #0]
 8009400:	00db      	lsls	r3, r3, #3
 8009402:	4413      	add	r3, r2
 8009404:	3302      	adds	r3, #2
 8009406:	005b      	lsls	r3, r3, #1
 8009408:	68fa      	ldr	r2, [r7, #12]
 800940a:	6812      	ldr	r2, [r2, #0]
 800940c:	4413      	add	r3, r2
 800940e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009412:	881b      	ldrh	r3, [r3, #0]
 8009414:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009418:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	699a      	ldr	r2, [r3, #24]
 800941e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009420:	429a      	cmp	r2, r3
 8009422:	d906      	bls.n	8009432 <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	699a      	ldr	r2, [r3, #24]
 8009428:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800942a:	1ad2      	subs	r2, r2, r3
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	619a      	str	r2, [r3, #24]
 8009430:	e002      	b.n	8009438 <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	2200      	movs	r2, #0
 8009436:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	699b      	ldr	r3, [r3, #24]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d12c      	bne.n	800949a <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	781b      	ldrb	r3, [r3, #0]
 8009444:	4619      	mov	r1, r3
 8009446:	68f8      	ldr	r0, [r7, #12]
 8009448:	f00b faa1 	bl	801498e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800944c:	88fb      	ldrh	r3, [r7, #6]
 800944e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009452:	2b00      	cmp	r3, #0
 8009454:	f000 822f 	beq.w	80098b6 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	461a      	mov	r2, r3
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	781b      	ldrb	r3, [r3, #0]
 8009462:	009b      	lsls	r3, r3, #2
 8009464:	4413      	add	r3, r2
 8009466:	881b      	ldrh	r3, [r3, #0]
 8009468:	b29b      	uxth	r3, r3
 800946a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800946e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009472:	827b      	strh	r3, [r7, #18]
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	461a      	mov	r2, r3
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	781b      	ldrb	r3, [r3, #0]
 800947e:	009b      	lsls	r3, r3, #2
 8009480:	441a      	add	r2, r3
 8009482:	8a7b      	ldrh	r3, [r7, #18]
 8009484:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009488:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800948c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009494:	b29b      	uxth	r3, r3
 8009496:	8013      	strh	r3, [r2, #0]
 8009498:	e20d      	b.n	80098b6 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800949a:	88fb      	ldrh	r3, [r7, #6]
 800949c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d01f      	beq.n	80094e4 <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	461a      	mov	r2, r3
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	781b      	ldrb	r3, [r3, #0]
 80094ae:	009b      	lsls	r3, r3, #2
 80094b0:	4413      	add	r3, r2
 80094b2:	881b      	ldrh	r3, [r3, #0]
 80094b4:	b29b      	uxth	r3, r3
 80094b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094be:	84bb      	strh	r3, [r7, #36]	; 0x24
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	461a      	mov	r2, r3
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	781b      	ldrb	r3, [r3, #0]
 80094ca:	009b      	lsls	r3, r3, #2
 80094cc:	441a      	add	r2, r3
 80094ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80094d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80094d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80094dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094e0:	b29b      	uxth	r3, r3
 80094e2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80094ea:	2b01      	cmp	r3, #1
 80094ec:	f040 81e3 	bne.w	80098b6 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	695a      	ldr	r2, [r3, #20]
 80094f4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80094f6:	441a      	add	r2, r3
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	69da      	ldr	r2, [r3, #28]
 8009500:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009502:	441a      	add	r2, r3
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	6a1a      	ldr	r2, [r3, #32]
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	691b      	ldr	r3, [r3, #16]
 8009510:	429a      	cmp	r2, r3
 8009512:	d309      	bcc.n	8009528 <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	691b      	ldr	r3, [r3, #16]
 8009518:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	6a1a      	ldr	r2, [r3, #32]
 800951e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009520:	1ad2      	subs	r2, r2, r3
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	621a      	str	r2, [r3, #32]
 8009526:	e014      	b.n	8009552 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	6a1b      	ldr	r3, [r3, #32]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d106      	bne.n	800953e <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 8009530:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009532:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	2200      	movs	r2, #0
 8009538:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800953c:	e009      	b.n	8009552 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	2200      	movs	r2, #0
 8009542:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	6a1b      	ldr	r3, [r3, #32]
 800954a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	2200      	movs	r2, #0
 8009550:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	785b      	ldrb	r3, [r3, #1]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d155      	bne.n	8009606 <HAL_PCD_EP_DB_Transmit+0x230>
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	61bb      	str	r3, [r7, #24]
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009568:	b29b      	uxth	r3, r3
 800956a:	461a      	mov	r2, r3
 800956c:	69bb      	ldr	r3, [r7, #24]
 800956e:	4413      	add	r3, r2
 8009570:	61bb      	str	r3, [r7, #24]
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	781b      	ldrb	r3, [r3, #0]
 8009576:	011a      	lsls	r2, r3, #4
 8009578:	69bb      	ldr	r3, [r7, #24]
 800957a:	4413      	add	r3, r2
 800957c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009580:	617b      	str	r3, [r7, #20]
 8009582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009584:	2b00      	cmp	r3, #0
 8009586:	d112      	bne.n	80095ae <HAL_PCD_EP_DB_Transmit+0x1d8>
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	881b      	ldrh	r3, [r3, #0]
 800958c:	b29b      	uxth	r3, r3
 800958e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009592:	b29a      	uxth	r2, r3
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	801a      	strh	r2, [r3, #0]
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	881b      	ldrh	r3, [r3, #0]
 800959c:	b29b      	uxth	r3, r3
 800959e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095a6:	b29a      	uxth	r2, r3
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	801a      	strh	r2, [r3, #0]
 80095ac:	e047      	b.n	800963e <HAL_PCD_EP_DB_Transmit+0x268>
 80095ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095b0:	2b3e      	cmp	r3, #62	; 0x3e
 80095b2:	d811      	bhi.n	80095d8 <HAL_PCD_EP_DB_Transmit+0x202>
 80095b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095b6:	085b      	lsrs	r3, r3, #1
 80095b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80095ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095bc:	f003 0301 	and.w	r3, r3, #1
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d002      	beq.n	80095ca <HAL_PCD_EP_DB_Transmit+0x1f4>
 80095c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095c6:	3301      	adds	r3, #1
 80095c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80095ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095cc:	b29b      	uxth	r3, r3
 80095ce:	029b      	lsls	r3, r3, #10
 80095d0:	b29a      	uxth	r2, r3
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	801a      	strh	r2, [r3, #0]
 80095d6:	e032      	b.n	800963e <HAL_PCD_EP_DB_Transmit+0x268>
 80095d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095da:	095b      	lsrs	r3, r3, #5
 80095dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80095de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095e0:	f003 031f 	and.w	r3, r3, #31
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d102      	bne.n	80095ee <HAL_PCD_EP_DB_Transmit+0x218>
 80095e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ea:	3b01      	subs	r3, #1
 80095ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80095ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f0:	b29b      	uxth	r3, r3
 80095f2:	029b      	lsls	r3, r3, #10
 80095f4:	b29b      	uxth	r3, r3
 80095f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095fe:	b29a      	uxth	r2, r3
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	801a      	strh	r2, [r3, #0]
 8009604:	e01b      	b.n	800963e <HAL_PCD_EP_DB_Transmit+0x268>
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	785b      	ldrb	r3, [r3, #1]
 800960a:	2b01      	cmp	r3, #1
 800960c:	d117      	bne.n	800963e <HAL_PCD_EP_DB_Transmit+0x268>
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	623b      	str	r3, [r7, #32]
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800961c:	b29b      	uxth	r3, r3
 800961e:	461a      	mov	r2, r3
 8009620:	6a3b      	ldr	r3, [r7, #32]
 8009622:	4413      	add	r3, r2
 8009624:	623b      	str	r3, [r7, #32]
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	781b      	ldrb	r3, [r3, #0]
 800962a:	011a      	lsls	r2, r3, #4
 800962c:	6a3b      	ldr	r3, [r7, #32]
 800962e:	4413      	add	r3, r2
 8009630:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009634:	61fb      	str	r3, [r7, #28]
 8009636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009638:	b29a      	uxth	r2, r3
 800963a:	69fb      	ldr	r3, [r7, #28]
 800963c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	6818      	ldr	r0, [r3, #0]
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	6959      	ldr	r1, [r3, #20]
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	891a      	ldrh	r2, [r3, #8]
 800964a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800964c:	b29b      	uxth	r3, r3
 800964e:	f005 f9d0 	bl	800e9f2 <USB_WritePMA>
 8009652:	e130      	b.n	80098b6 <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800965c:	b29b      	uxth	r3, r3
 800965e:	461a      	mov	r2, r3
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	781b      	ldrb	r3, [r3, #0]
 8009664:	00db      	lsls	r3, r3, #3
 8009666:	4413      	add	r3, r2
 8009668:	3306      	adds	r3, #6
 800966a:	005b      	lsls	r3, r3, #1
 800966c:	68fa      	ldr	r2, [r7, #12]
 800966e:	6812      	ldr	r2, [r2, #0]
 8009670:	4413      	add	r3, r2
 8009672:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009676:	881b      	ldrh	r3, [r3, #0]
 8009678:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800967c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	699a      	ldr	r2, [r3, #24]
 8009682:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009684:	429a      	cmp	r2, r3
 8009686:	d306      	bcc.n	8009696 <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	699a      	ldr	r2, [r3, #24]
 800968c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800968e:	1ad2      	subs	r2, r2, r3
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	619a      	str	r2, [r3, #24]
 8009694:	e002      	b.n	800969c <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	2200      	movs	r2, #0
 800969a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	699b      	ldr	r3, [r3, #24]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d12c      	bne.n	80096fe <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	781b      	ldrb	r3, [r3, #0]
 80096a8:	4619      	mov	r1, r3
 80096aa:	68f8      	ldr	r0, [r7, #12]
 80096ac:	f00b f96f 	bl	801498e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80096b0:	88fb      	ldrh	r3, [r7, #6]
 80096b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	f040 80fd 	bne.w	80098b6 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	461a      	mov	r2, r3
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	781b      	ldrb	r3, [r3, #0]
 80096c6:	009b      	lsls	r3, r3, #2
 80096c8:	4413      	add	r3, r2
 80096ca:	881b      	ldrh	r3, [r3, #0]
 80096cc:	b29b      	uxth	r3, r3
 80096ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096d6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	461a      	mov	r2, r3
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	781b      	ldrb	r3, [r3, #0]
 80096e2:	009b      	lsls	r3, r3, #2
 80096e4:	441a      	add	r2, r3
 80096e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80096e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80096f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096f8:	b29b      	uxth	r3, r3
 80096fa:	8013      	strh	r3, [r2, #0]
 80096fc:	e0db      	b.n	80098b6 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80096fe:	88fb      	ldrh	r3, [r7, #6]
 8009700:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009704:	2b00      	cmp	r3, #0
 8009706:	d11f      	bne.n	8009748 <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	461a      	mov	r2, r3
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	781b      	ldrb	r3, [r3, #0]
 8009712:	009b      	lsls	r3, r3, #2
 8009714:	4413      	add	r3, r2
 8009716:	881b      	ldrh	r3, [r3, #0]
 8009718:	b29b      	uxth	r3, r3
 800971a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800971e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009722:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	461a      	mov	r2, r3
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	781b      	ldrb	r3, [r3, #0]
 800972e:	009b      	lsls	r3, r3, #2
 8009730:	441a      	add	r2, r3
 8009732:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009734:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009738:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800973c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009744:	b29b      	uxth	r3, r3
 8009746:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800974e:	2b01      	cmp	r3, #1
 8009750:	f040 80b1 	bne.w	80098b6 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	695a      	ldr	r2, [r3, #20]
 8009758:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800975a:	441a      	add	r2, r3
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	69da      	ldr	r2, [r3, #28]
 8009764:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009766:	441a      	add	r2, r3
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	6a1a      	ldr	r2, [r3, #32]
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	691b      	ldr	r3, [r3, #16]
 8009774:	429a      	cmp	r2, r3
 8009776:	d309      	bcc.n	800978c <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	691b      	ldr	r3, [r3, #16]
 800977c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	6a1a      	ldr	r2, [r3, #32]
 8009782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009784:	1ad2      	subs	r2, r2, r3
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	621a      	str	r2, [r3, #32]
 800978a:	e014      	b.n	80097b6 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	6a1b      	ldr	r3, [r3, #32]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d106      	bne.n	80097a2 <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 8009794:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009796:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	2200      	movs	r2, #0
 800979c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80097a0:	e009      	b.n	80097b6 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	6a1b      	ldr	r3, [r3, #32]
 80097a6:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	2200      	movs	r2, #0
 80097ac:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	2200      	movs	r2, #0
 80097b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	637b      	str	r3, [r7, #52]	; 0x34
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	785b      	ldrb	r3, [r3, #1]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d155      	bne.n	8009870 <HAL_PCD_EP_DB_Transmit+0x49a>
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	647b      	str	r3, [r7, #68]	; 0x44
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097d2:	b29b      	uxth	r3, r3
 80097d4:	461a      	mov	r2, r3
 80097d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097d8:	4413      	add	r3, r2
 80097da:	647b      	str	r3, [r7, #68]	; 0x44
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	781b      	ldrb	r3, [r3, #0]
 80097e0:	011a      	lsls	r2, r3, #4
 80097e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097e4:	4413      	add	r3, r2
 80097e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80097ea:	643b      	str	r3, [r7, #64]	; 0x40
 80097ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d112      	bne.n	8009818 <HAL_PCD_EP_DB_Transmit+0x442>
 80097f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097f4:	881b      	ldrh	r3, [r3, #0]
 80097f6:	b29b      	uxth	r3, r3
 80097f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80097fc:	b29a      	uxth	r2, r3
 80097fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009800:	801a      	strh	r2, [r3, #0]
 8009802:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009804:	881b      	ldrh	r3, [r3, #0]
 8009806:	b29b      	uxth	r3, r3
 8009808:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800980c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009810:	b29a      	uxth	r2, r3
 8009812:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009814:	801a      	strh	r2, [r3, #0]
 8009816:	e044      	b.n	80098a2 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8009818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800981a:	2b3e      	cmp	r3, #62	; 0x3e
 800981c:	d811      	bhi.n	8009842 <HAL_PCD_EP_DB_Transmit+0x46c>
 800981e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009820:	085b      	lsrs	r3, r3, #1
 8009822:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009826:	f003 0301 	and.w	r3, r3, #1
 800982a:	2b00      	cmp	r3, #0
 800982c:	d002      	beq.n	8009834 <HAL_PCD_EP_DB_Transmit+0x45e>
 800982e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009830:	3301      	adds	r3, #1
 8009832:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009834:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009836:	b29b      	uxth	r3, r3
 8009838:	029b      	lsls	r3, r3, #10
 800983a:	b29a      	uxth	r2, r3
 800983c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800983e:	801a      	strh	r2, [r3, #0]
 8009840:	e02f      	b.n	80098a2 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8009842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009844:	095b      	lsrs	r3, r3, #5
 8009846:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800984a:	f003 031f 	and.w	r3, r3, #31
 800984e:	2b00      	cmp	r3, #0
 8009850:	d102      	bne.n	8009858 <HAL_PCD_EP_DB_Transmit+0x482>
 8009852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009854:	3b01      	subs	r3, #1
 8009856:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800985a:	b29b      	uxth	r3, r3
 800985c:	029b      	lsls	r3, r3, #10
 800985e:	b29b      	uxth	r3, r3
 8009860:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009864:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009868:	b29a      	uxth	r2, r3
 800986a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800986c:	801a      	strh	r2, [r3, #0]
 800986e:	e018      	b.n	80098a2 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	785b      	ldrb	r3, [r3, #1]
 8009874:	2b01      	cmp	r3, #1
 8009876:	d114      	bne.n	80098a2 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009880:	b29b      	uxth	r3, r3
 8009882:	461a      	mov	r2, r3
 8009884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009886:	4413      	add	r3, r2
 8009888:	637b      	str	r3, [r7, #52]	; 0x34
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	781b      	ldrb	r3, [r3, #0]
 800988e:	011a      	lsls	r2, r3, #4
 8009890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009892:	4413      	add	r3, r2
 8009894:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009898:	633b      	str	r3, [r7, #48]	; 0x30
 800989a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800989c:	b29a      	uxth	r2, r3
 800989e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098a0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	6818      	ldr	r0, [r3, #0]
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	6959      	ldr	r1, [r3, #20]
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	895a      	ldrh	r2, [r3, #10]
 80098ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098b0:	b29b      	uxth	r3, r3
 80098b2:	f005 f89e 	bl	800e9f2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	461a      	mov	r2, r3
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	781b      	ldrb	r3, [r3, #0]
 80098c0:	009b      	lsls	r3, r3, #2
 80098c2:	4413      	add	r3, r2
 80098c4:	881b      	ldrh	r3, [r3, #0]
 80098c6:	b29b      	uxth	r3, r3
 80098c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098d0:	823b      	strh	r3, [r7, #16]
 80098d2:	8a3b      	ldrh	r3, [r7, #16]
 80098d4:	f083 0310 	eor.w	r3, r3, #16
 80098d8:	823b      	strh	r3, [r7, #16]
 80098da:	8a3b      	ldrh	r3, [r7, #16]
 80098dc:	f083 0320 	eor.w	r3, r3, #32
 80098e0:	823b      	strh	r3, [r7, #16]
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	461a      	mov	r2, r3
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	781b      	ldrb	r3, [r3, #0]
 80098ec:	009b      	lsls	r3, r3, #2
 80098ee:	441a      	add	r2, r3
 80098f0:	8a3b      	ldrh	r3, [r7, #16]
 80098f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009902:	b29b      	uxth	r3, r3
 8009904:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8009906:	2300      	movs	r3, #0
}
 8009908:	4618      	mov	r0, r3
 800990a:	3748      	adds	r7, #72	; 0x48
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}

08009910 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8009910:	b480      	push	{r7}
 8009912:	b087      	sub	sp, #28
 8009914:	af00      	add	r7, sp, #0
 8009916:	60f8      	str	r0, [r7, #12]
 8009918:	607b      	str	r3, [r7, #4]
 800991a:	460b      	mov	r3, r1
 800991c:	817b      	strh	r3, [r7, #10]
 800991e:	4613      	mov	r3, r2
 8009920:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8009922:	897b      	ldrh	r3, [r7, #10]
 8009924:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009928:	b29b      	uxth	r3, r3
 800992a:	2b00      	cmp	r3, #0
 800992c:	d00b      	beq.n	8009946 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800992e:	897b      	ldrh	r3, [r7, #10]
 8009930:	f003 0307 	and.w	r3, r3, #7
 8009934:	1c5a      	adds	r2, r3, #1
 8009936:	4613      	mov	r3, r2
 8009938:	009b      	lsls	r3, r3, #2
 800993a:	4413      	add	r3, r2
 800993c:	00db      	lsls	r3, r3, #3
 800993e:	68fa      	ldr	r2, [r7, #12]
 8009940:	4413      	add	r3, r2
 8009942:	617b      	str	r3, [r7, #20]
 8009944:	e009      	b.n	800995a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009946:	897a      	ldrh	r2, [r7, #10]
 8009948:	4613      	mov	r3, r2
 800994a:	009b      	lsls	r3, r3, #2
 800994c:	4413      	add	r3, r2
 800994e:	00db      	lsls	r3, r3, #3
 8009950:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009954:	68fa      	ldr	r2, [r7, #12]
 8009956:	4413      	add	r3, r2
 8009958:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800995a:	893b      	ldrh	r3, [r7, #8]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d107      	bne.n	8009970 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8009960:	697b      	ldr	r3, [r7, #20]
 8009962:	2200      	movs	r2, #0
 8009964:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	b29a      	uxth	r2, r3
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	80da      	strh	r2, [r3, #6]
 800996e:	e00b      	b.n	8009988 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	2201      	movs	r2, #1
 8009974:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	b29a      	uxth	r2, r3
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	0c1b      	lsrs	r3, r3, #16
 8009982:	b29a      	uxth	r2, r3
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8009988:	2300      	movs	r3, #0
}
 800998a:	4618      	mov	r0, r3
 800998c:	371c      	adds	r7, #28
 800998e:	46bd      	mov	sp, r7
 8009990:	bc80      	pop	{r7}
 8009992:	4770      	bx	lr

08009994 <HAL_PCDEx_SetConnectionState>:
  * @param  hpcd: PCD handle
  * @param  state: connection state (0 : disconnected / 1: connected)
  * @retval None
  */
__weak void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 8009994:	b480      	push	{r7}
 8009996:	b083      	sub	sp, #12
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
 800999c:	460b      	mov	r3, r1
 800999e:	70fb      	strb	r3, [r7, #3]
  UNUSED(hpcd);
  UNUSED(state);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PCDEx_SetConnectionState could be implemented in the user file
   */
}
 80099a0:	bf00      	nop
 80099a2:	370c      	adds	r7, #12
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bc80      	pop	{r7}
 80099a8:	4770      	bx	lr
	...

080099ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b088      	sub	sp, #32
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d101      	bne.n	80099be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80099ba:	2301      	movs	r3, #1
 80099bc:	e31d      	b.n	8009ffa <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80099be:	4b94      	ldr	r3, [pc, #592]	; (8009c10 <HAL_RCC_OscConfig+0x264>)
 80099c0:	689b      	ldr	r3, [r3, #8]
 80099c2:	f003 030c 	and.w	r3, r3, #12
 80099c6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80099c8:	4b91      	ldr	r3, [pc, #580]	; (8009c10 <HAL_RCC_OscConfig+0x264>)
 80099ca:	689b      	ldr	r3, [r3, #8]
 80099cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80099d0:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f003 0301 	and.w	r3, r3, #1
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d07b      	beq.n	8009ad6 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80099de:	69bb      	ldr	r3, [r7, #24]
 80099e0:	2b08      	cmp	r3, #8
 80099e2:	d006      	beq.n	80099f2 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80099e4:	69bb      	ldr	r3, [r7, #24]
 80099e6:	2b0c      	cmp	r3, #12
 80099e8:	d10f      	bne.n	8009a0a <HAL_RCC_OscConfig+0x5e>
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099f0:	d10b      	bne.n	8009a0a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80099f2:	4b87      	ldr	r3, [pc, #540]	; (8009c10 <HAL_RCC_OscConfig+0x264>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d06a      	beq.n	8009ad4 <HAL_RCC_OscConfig+0x128>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	685b      	ldr	r3, [r3, #4]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d166      	bne.n	8009ad4 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8009a06:	2301      	movs	r3, #1
 8009a08:	e2f7      	b.n	8009ffa <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	685b      	ldr	r3, [r3, #4]
 8009a0e:	2b01      	cmp	r3, #1
 8009a10:	d106      	bne.n	8009a20 <HAL_RCC_OscConfig+0x74>
 8009a12:	4b7f      	ldr	r3, [pc, #508]	; (8009c10 <HAL_RCC_OscConfig+0x264>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4a7e      	ldr	r2, [pc, #504]	; (8009c10 <HAL_RCC_OscConfig+0x264>)
 8009a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a1c:	6013      	str	r3, [r2, #0]
 8009a1e:	e02d      	b.n	8009a7c <HAL_RCC_OscConfig+0xd0>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	685b      	ldr	r3, [r3, #4]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d10c      	bne.n	8009a42 <HAL_RCC_OscConfig+0x96>
 8009a28:	4b79      	ldr	r3, [pc, #484]	; (8009c10 <HAL_RCC_OscConfig+0x264>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	4a78      	ldr	r2, [pc, #480]	; (8009c10 <HAL_RCC_OscConfig+0x264>)
 8009a2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a32:	6013      	str	r3, [r2, #0]
 8009a34:	4b76      	ldr	r3, [pc, #472]	; (8009c10 <HAL_RCC_OscConfig+0x264>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	4a75      	ldr	r2, [pc, #468]	; (8009c10 <HAL_RCC_OscConfig+0x264>)
 8009a3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009a3e:	6013      	str	r3, [r2, #0]
 8009a40:	e01c      	b.n	8009a7c <HAL_RCC_OscConfig+0xd0>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	685b      	ldr	r3, [r3, #4]
 8009a46:	2b05      	cmp	r3, #5
 8009a48:	d10c      	bne.n	8009a64 <HAL_RCC_OscConfig+0xb8>
 8009a4a:	4b71      	ldr	r3, [pc, #452]	; (8009c10 <HAL_RCC_OscConfig+0x264>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	4a70      	ldr	r2, [pc, #448]	; (8009c10 <HAL_RCC_OscConfig+0x264>)
 8009a50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009a54:	6013      	str	r3, [r2, #0]
 8009a56:	4b6e      	ldr	r3, [pc, #440]	; (8009c10 <HAL_RCC_OscConfig+0x264>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	4a6d      	ldr	r2, [pc, #436]	; (8009c10 <HAL_RCC_OscConfig+0x264>)
 8009a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a60:	6013      	str	r3, [r2, #0]
 8009a62:	e00b      	b.n	8009a7c <HAL_RCC_OscConfig+0xd0>
 8009a64:	4b6a      	ldr	r3, [pc, #424]	; (8009c10 <HAL_RCC_OscConfig+0x264>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	4a69      	ldr	r2, [pc, #420]	; (8009c10 <HAL_RCC_OscConfig+0x264>)
 8009a6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a6e:	6013      	str	r3, [r2, #0]
 8009a70:	4b67      	ldr	r3, [pc, #412]	; (8009c10 <HAL_RCC_OscConfig+0x264>)
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	4a66      	ldr	r2, [pc, #408]	; (8009c10 <HAL_RCC_OscConfig+0x264>)
 8009a76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009a7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	685b      	ldr	r3, [r3, #4]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d013      	beq.n	8009aac <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009a84:	f7fd f892 	bl	8006bac <HAL_GetTick>
 8009a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009a8a:	e008      	b.n	8009a9e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009a8c:	f7fd f88e 	bl	8006bac <HAL_GetTick>
 8009a90:	4602      	mov	r2, r0
 8009a92:	693b      	ldr	r3, [r7, #16]
 8009a94:	1ad3      	subs	r3, r2, r3
 8009a96:	2b64      	cmp	r3, #100	; 0x64
 8009a98:	d901      	bls.n	8009a9e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8009a9a:	2303      	movs	r3, #3
 8009a9c:	e2ad      	b.n	8009ffa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009a9e:	4b5c      	ldr	r3, [pc, #368]	; (8009c10 <HAL_RCC_OscConfig+0x264>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d0f0      	beq.n	8009a8c <HAL_RCC_OscConfig+0xe0>
 8009aaa:	e014      	b.n	8009ad6 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009aac:	f7fd f87e 	bl	8006bac <HAL_GetTick>
 8009ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009ab2:	e008      	b.n	8009ac6 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009ab4:	f7fd f87a 	bl	8006bac <HAL_GetTick>
 8009ab8:	4602      	mov	r2, r0
 8009aba:	693b      	ldr	r3, [r7, #16]
 8009abc:	1ad3      	subs	r3, r2, r3
 8009abe:	2b64      	cmp	r3, #100	; 0x64
 8009ac0:	d901      	bls.n	8009ac6 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8009ac2:	2303      	movs	r3, #3
 8009ac4:	e299      	b.n	8009ffa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009ac6:	4b52      	ldr	r3, [pc, #328]	; (8009c10 <HAL_RCC_OscConfig+0x264>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d1f0      	bne.n	8009ab4 <HAL_RCC_OscConfig+0x108>
 8009ad2:	e000      	b.n	8009ad6 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ad4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f003 0302 	and.w	r3, r3, #2
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d05a      	beq.n	8009b98 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009ae2:	69bb      	ldr	r3, [r7, #24]
 8009ae4:	2b04      	cmp	r3, #4
 8009ae6:	d005      	beq.n	8009af4 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009ae8:	69bb      	ldr	r3, [r7, #24]
 8009aea:	2b0c      	cmp	r3, #12
 8009aec:	d119      	bne.n	8009b22 <HAL_RCC_OscConfig+0x176>
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d116      	bne.n	8009b22 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009af4:	4b46      	ldr	r3, [pc, #280]	; (8009c10 <HAL_RCC_OscConfig+0x264>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f003 0302 	and.w	r3, r3, #2
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d005      	beq.n	8009b0c <HAL_RCC_OscConfig+0x160>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	68db      	ldr	r3, [r3, #12]
 8009b04:	2b01      	cmp	r3, #1
 8009b06:	d001      	beq.n	8009b0c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8009b08:	2301      	movs	r3, #1
 8009b0a:	e276      	b.n	8009ffa <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b0c:	4b40      	ldr	r3, [pc, #256]	; (8009c10 <HAL_RCC_OscConfig+0x264>)
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	691b      	ldr	r3, [r3, #16]
 8009b18:	021b      	lsls	r3, r3, #8
 8009b1a:	493d      	ldr	r1, [pc, #244]	; (8009c10 <HAL_RCC_OscConfig+0x264>)
 8009b1c:	4313      	orrs	r3, r2
 8009b1e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009b20:	e03a      	b.n	8009b98 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	68db      	ldr	r3, [r3, #12]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d020      	beq.n	8009b6c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009b2a:	4b3a      	ldr	r3, [pc, #232]	; (8009c14 <HAL_RCC_OscConfig+0x268>)
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b30:	f7fd f83c 	bl	8006bac <HAL_GetTick>
 8009b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009b36:	e008      	b.n	8009b4a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009b38:	f7fd f838 	bl	8006bac <HAL_GetTick>
 8009b3c:	4602      	mov	r2, r0
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	1ad3      	subs	r3, r2, r3
 8009b42:	2b02      	cmp	r3, #2
 8009b44:	d901      	bls.n	8009b4a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8009b46:	2303      	movs	r3, #3
 8009b48:	e257      	b.n	8009ffa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009b4a:	4b31      	ldr	r3, [pc, #196]	; (8009c10 <HAL_RCC_OscConfig+0x264>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f003 0302 	and.w	r3, r3, #2
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d0f0      	beq.n	8009b38 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b56:	4b2e      	ldr	r3, [pc, #184]	; (8009c10 <HAL_RCC_OscConfig+0x264>)
 8009b58:	685b      	ldr	r3, [r3, #4]
 8009b5a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	691b      	ldr	r3, [r3, #16]
 8009b62:	021b      	lsls	r3, r3, #8
 8009b64:	492a      	ldr	r1, [pc, #168]	; (8009c10 <HAL_RCC_OscConfig+0x264>)
 8009b66:	4313      	orrs	r3, r2
 8009b68:	604b      	str	r3, [r1, #4]
 8009b6a:	e015      	b.n	8009b98 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009b6c:	4b29      	ldr	r3, [pc, #164]	; (8009c14 <HAL_RCC_OscConfig+0x268>)
 8009b6e:	2200      	movs	r2, #0
 8009b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b72:	f7fd f81b 	bl	8006bac <HAL_GetTick>
 8009b76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009b78:	e008      	b.n	8009b8c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009b7a:	f7fd f817 	bl	8006bac <HAL_GetTick>
 8009b7e:	4602      	mov	r2, r0
 8009b80:	693b      	ldr	r3, [r7, #16]
 8009b82:	1ad3      	subs	r3, r2, r3
 8009b84:	2b02      	cmp	r3, #2
 8009b86:	d901      	bls.n	8009b8c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8009b88:	2303      	movs	r3, #3
 8009b8a:	e236      	b.n	8009ffa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009b8c:	4b20      	ldr	r3, [pc, #128]	; (8009c10 <HAL_RCC_OscConfig+0x264>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f003 0302 	and.w	r3, r3, #2
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d1f0      	bne.n	8009b7a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f003 0310 	and.w	r3, r3, #16
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	f000 80b8 	beq.w	8009d16 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009ba6:	69bb      	ldr	r3, [r7, #24]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d170      	bne.n	8009c8e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009bac:	4b18      	ldr	r3, [pc, #96]	; (8009c10 <HAL_RCC_OscConfig+0x264>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d005      	beq.n	8009bc4 <HAL_RCC_OscConfig+0x218>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	699b      	ldr	r3, [r3, #24]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d101      	bne.n	8009bc4 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	e21a      	b.n	8009ffa <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6a1a      	ldr	r2, [r3, #32]
 8009bc8:	4b11      	ldr	r3, [pc, #68]	; (8009c10 <HAL_RCC_OscConfig+0x264>)
 8009bca:	685b      	ldr	r3, [r3, #4]
 8009bcc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d921      	bls.n	8009c18 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6a1b      	ldr	r3, [r3, #32]
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f000 fcad 	bl	800a538 <RCC_SetFlashLatencyFromMSIRange>
 8009bde:	4603      	mov	r3, r0
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d001      	beq.n	8009be8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8009be4:	2301      	movs	r3, #1
 8009be6:	e208      	b.n	8009ffa <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009be8:	4b09      	ldr	r3, [pc, #36]	; (8009c10 <HAL_RCC_OscConfig+0x264>)
 8009bea:	685b      	ldr	r3, [r3, #4]
 8009bec:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	6a1b      	ldr	r3, [r3, #32]
 8009bf4:	4906      	ldr	r1, [pc, #24]	; (8009c10 <HAL_RCC_OscConfig+0x264>)
 8009bf6:	4313      	orrs	r3, r2
 8009bf8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009bfa:	4b05      	ldr	r3, [pc, #20]	; (8009c10 <HAL_RCC_OscConfig+0x264>)
 8009bfc:	685b      	ldr	r3, [r3, #4]
 8009bfe:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	69db      	ldr	r3, [r3, #28]
 8009c06:	061b      	lsls	r3, r3, #24
 8009c08:	4901      	ldr	r1, [pc, #4]	; (8009c10 <HAL_RCC_OscConfig+0x264>)
 8009c0a:	4313      	orrs	r3, r2
 8009c0c:	604b      	str	r3, [r1, #4]
 8009c0e:	e020      	b.n	8009c52 <HAL_RCC_OscConfig+0x2a6>
 8009c10:	40023800 	.word	0x40023800
 8009c14:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009c18:	4ba4      	ldr	r3, [pc, #656]	; (8009eac <HAL_RCC_OscConfig+0x500>)
 8009c1a:	685b      	ldr	r3, [r3, #4]
 8009c1c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6a1b      	ldr	r3, [r3, #32]
 8009c24:	49a1      	ldr	r1, [pc, #644]	; (8009eac <HAL_RCC_OscConfig+0x500>)
 8009c26:	4313      	orrs	r3, r2
 8009c28:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009c2a:	4ba0      	ldr	r3, [pc, #640]	; (8009eac <HAL_RCC_OscConfig+0x500>)
 8009c2c:	685b      	ldr	r3, [r3, #4]
 8009c2e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	69db      	ldr	r3, [r3, #28]
 8009c36:	061b      	lsls	r3, r3, #24
 8009c38:	499c      	ldr	r1, [pc, #624]	; (8009eac <HAL_RCC_OscConfig+0x500>)
 8009c3a:	4313      	orrs	r3, r2
 8009c3c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6a1b      	ldr	r3, [r3, #32]
 8009c42:	4618      	mov	r0, r3
 8009c44:	f000 fc78 	bl	800a538 <RCC_SetFlashLatencyFromMSIRange>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d001      	beq.n	8009c52 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8009c4e:	2301      	movs	r3, #1
 8009c50:	e1d3      	b.n	8009ffa <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6a1b      	ldr	r3, [r3, #32]
 8009c56:	0b5b      	lsrs	r3, r3, #13
 8009c58:	3301      	adds	r3, #1
 8009c5a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8009c5e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8009c62:	4a92      	ldr	r2, [pc, #584]	; (8009eac <HAL_RCC_OscConfig+0x500>)
 8009c64:	6892      	ldr	r2, [r2, #8]
 8009c66:	0912      	lsrs	r2, r2, #4
 8009c68:	f002 020f 	and.w	r2, r2, #15
 8009c6c:	4990      	ldr	r1, [pc, #576]	; (8009eb0 <HAL_RCC_OscConfig+0x504>)
 8009c6e:	5c8a      	ldrb	r2, [r1, r2]
 8009c70:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8009c72:	4a90      	ldr	r2, [pc, #576]	; (8009eb4 <HAL_RCC_OscConfig+0x508>)
 8009c74:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8009c76:	4b90      	ldr	r3, [pc, #576]	; (8009eb8 <HAL_RCC_OscConfig+0x50c>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f7f9 ffe8 	bl	8003c50 <HAL_InitTick>
 8009c80:	4603      	mov	r3, r0
 8009c82:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8009c84:	7bfb      	ldrb	r3, [r7, #15]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d045      	beq.n	8009d16 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8009c8a:	7bfb      	ldrb	r3, [r7, #15]
 8009c8c:	e1b5      	b.n	8009ffa <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	699b      	ldr	r3, [r3, #24]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d029      	beq.n	8009cea <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8009c96:	4b89      	ldr	r3, [pc, #548]	; (8009ebc <HAL_RCC_OscConfig+0x510>)
 8009c98:	2201      	movs	r2, #1
 8009c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009c9c:	f7fc ff86 	bl	8006bac <HAL_GetTick>
 8009ca0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8009ca2:	e008      	b.n	8009cb6 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009ca4:	f7fc ff82 	bl	8006bac <HAL_GetTick>
 8009ca8:	4602      	mov	r2, r0
 8009caa:	693b      	ldr	r3, [r7, #16]
 8009cac:	1ad3      	subs	r3, r2, r3
 8009cae:	2b02      	cmp	r3, #2
 8009cb0:	d901      	bls.n	8009cb6 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8009cb2:	2303      	movs	r3, #3
 8009cb4:	e1a1      	b.n	8009ffa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8009cb6:	4b7d      	ldr	r3, [pc, #500]	; (8009eac <HAL_RCC_OscConfig+0x500>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d0f0      	beq.n	8009ca4 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009cc2:	4b7a      	ldr	r3, [pc, #488]	; (8009eac <HAL_RCC_OscConfig+0x500>)
 8009cc4:	685b      	ldr	r3, [r3, #4]
 8009cc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6a1b      	ldr	r3, [r3, #32]
 8009cce:	4977      	ldr	r1, [pc, #476]	; (8009eac <HAL_RCC_OscConfig+0x500>)
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009cd4:	4b75      	ldr	r3, [pc, #468]	; (8009eac <HAL_RCC_OscConfig+0x500>)
 8009cd6:	685b      	ldr	r3, [r3, #4]
 8009cd8:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	69db      	ldr	r3, [r3, #28]
 8009ce0:	061b      	lsls	r3, r3, #24
 8009ce2:	4972      	ldr	r1, [pc, #456]	; (8009eac <HAL_RCC_OscConfig+0x500>)
 8009ce4:	4313      	orrs	r3, r2
 8009ce6:	604b      	str	r3, [r1, #4]
 8009ce8:	e015      	b.n	8009d16 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8009cea:	4b74      	ldr	r3, [pc, #464]	; (8009ebc <HAL_RCC_OscConfig+0x510>)
 8009cec:	2200      	movs	r2, #0
 8009cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009cf0:	f7fc ff5c 	bl	8006bac <HAL_GetTick>
 8009cf4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8009cf6:	e008      	b.n	8009d0a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009cf8:	f7fc ff58 	bl	8006bac <HAL_GetTick>
 8009cfc:	4602      	mov	r2, r0
 8009cfe:	693b      	ldr	r3, [r7, #16]
 8009d00:	1ad3      	subs	r3, r2, r3
 8009d02:	2b02      	cmp	r3, #2
 8009d04:	d901      	bls.n	8009d0a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8009d06:	2303      	movs	r3, #3
 8009d08:	e177      	b.n	8009ffa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8009d0a:	4b68      	ldr	r3, [pc, #416]	; (8009eac <HAL_RCC_OscConfig+0x500>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d1f0      	bne.n	8009cf8 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f003 0308 	and.w	r3, r3, #8
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d030      	beq.n	8009d84 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	695b      	ldr	r3, [r3, #20]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d016      	beq.n	8009d58 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009d2a:	4b65      	ldr	r3, [pc, #404]	; (8009ec0 <HAL_RCC_OscConfig+0x514>)
 8009d2c:	2201      	movs	r2, #1
 8009d2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009d30:	f7fc ff3c 	bl	8006bac <HAL_GetTick>
 8009d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009d36:	e008      	b.n	8009d4a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009d38:	f7fc ff38 	bl	8006bac <HAL_GetTick>
 8009d3c:	4602      	mov	r2, r0
 8009d3e:	693b      	ldr	r3, [r7, #16]
 8009d40:	1ad3      	subs	r3, r2, r3
 8009d42:	2b02      	cmp	r3, #2
 8009d44:	d901      	bls.n	8009d4a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8009d46:	2303      	movs	r3, #3
 8009d48:	e157      	b.n	8009ffa <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009d4a:	4b58      	ldr	r3, [pc, #352]	; (8009eac <HAL_RCC_OscConfig+0x500>)
 8009d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d4e:	f003 0302 	and.w	r3, r3, #2
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d0f0      	beq.n	8009d38 <HAL_RCC_OscConfig+0x38c>
 8009d56:	e015      	b.n	8009d84 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009d58:	4b59      	ldr	r3, [pc, #356]	; (8009ec0 <HAL_RCC_OscConfig+0x514>)
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009d5e:	f7fc ff25 	bl	8006bac <HAL_GetTick>
 8009d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009d64:	e008      	b.n	8009d78 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009d66:	f7fc ff21 	bl	8006bac <HAL_GetTick>
 8009d6a:	4602      	mov	r2, r0
 8009d6c:	693b      	ldr	r3, [r7, #16]
 8009d6e:	1ad3      	subs	r3, r2, r3
 8009d70:	2b02      	cmp	r3, #2
 8009d72:	d901      	bls.n	8009d78 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8009d74:	2303      	movs	r3, #3
 8009d76:	e140      	b.n	8009ffa <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009d78:	4b4c      	ldr	r3, [pc, #304]	; (8009eac <HAL_RCC_OscConfig+0x500>)
 8009d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d7c:	f003 0302 	and.w	r3, r3, #2
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d1f0      	bne.n	8009d66 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f003 0304 	and.w	r3, r3, #4
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	f000 80b5 	beq.w	8009efc <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009d92:	2300      	movs	r3, #0
 8009d94:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009d96:	4b45      	ldr	r3, [pc, #276]	; (8009eac <HAL_RCC_OscConfig+0x500>)
 8009d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d10d      	bne.n	8009dbe <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009da2:	4b42      	ldr	r3, [pc, #264]	; (8009eac <HAL_RCC_OscConfig+0x500>)
 8009da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009da6:	4a41      	ldr	r2, [pc, #260]	; (8009eac <HAL_RCC_OscConfig+0x500>)
 8009da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009dac:	6253      	str	r3, [r2, #36]	; 0x24
 8009dae:	4b3f      	ldr	r3, [pc, #252]	; (8009eac <HAL_RCC_OscConfig+0x500>)
 8009db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009db6:	60bb      	str	r3, [r7, #8]
 8009db8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009dba:	2301      	movs	r3, #1
 8009dbc:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009dbe:	4b41      	ldr	r3, [pc, #260]	; (8009ec4 <HAL_RCC_OscConfig+0x518>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d118      	bne.n	8009dfc <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009dca:	4b3e      	ldr	r3, [pc, #248]	; (8009ec4 <HAL_RCC_OscConfig+0x518>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	4a3d      	ldr	r2, [pc, #244]	; (8009ec4 <HAL_RCC_OscConfig+0x518>)
 8009dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009dd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009dd6:	f7fc fee9 	bl	8006bac <HAL_GetTick>
 8009dda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009ddc:	e008      	b.n	8009df0 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009dde:	f7fc fee5 	bl	8006bac <HAL_GetTick>
 8009de2:	4602      	mov	r2, r0
 8009de4:	693b      	ldr	r3, [r7, #16]
 8009de6:	1ad3      	subs	r3, r2, r3
 8009de8:	2b64      	cmp	r3, #100	; 0x64
 8009dea:	d901      	bls.n	8009df0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8009dec:	2303      	movs	r3, #3
 8009dee:	e104      	b.n	8009ffa <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009df0:	4b34      	ldr	r3, [pc, #208]	; (8009ec4 <HAL_RCC_OscConfig+0x518>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d0f0      	beq.n	8009dde <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	689b      	ldr	r3, [r3, #8]
 8009e00:	2b01      	cmp	r3, #1
 8009e02:	d106      	bne.n	8009e12 <HAL_RCC_OscConfig+0x466>
 8009e04:	4b29      	ldr	r3, [pc, #164]	; (8009eac <HAL_RCC_OscConfig+0x500>)
 8009e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e08:	4a28      	ldr	r2, [pc, #160]	; (8009eac <HAL_RCC_OscConfig+0x500>)
 8009e0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e0e:	6353      	str	r3, [r2, #52]	; 0x34
 8009e10:	e02d      	b.n	8009e6e <HAL_RCC_OscConfig+0x4c2>
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	689b      	ldr	r3, [r3, #8]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d10c      	bne.n	8009e34 <HAL_RCC_OscConfig+0x488>
 8009e1a:	4b24      	ldr	r3, [pc, #144]	; (8009eac <HAL_RCC_OscConfig+0x500>)
 8009e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e1e:	4a23      	ldr	r2, [pc, #140]	; (8009eac <HAL_RCC_OscConfig+0x500>)
 8009e20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e24:	6353      	str	r3, [r2, #52]	; 0x34
 8009e26:	4b21      	ldr	r3, [pc, #132]	; (8009eac <HAL_RCC_OscConfig+0x500>)
 8009e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e2a:	4a20      	ldr	r2, [pc, #128]	; (8009eac <HAL_RCC_OscConfig+0x500>)
 8009e2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009e30:	6353      	str	r3, [r2, #52]	; 0x34
 8009e32:	e01c      	b.n	8009e6e <HAL_RCC_OscConfig+0x4c2>
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	689b      	ldr	r3, [r3, #8]
 8009e38:	2b05      	cmp	r3, #5
 8009e3a:	d10c      	bne.n	8009e56 <HAL_RCC_OscConfig+0x4aa>
 8009e3c:	4b1b      	ldr	r3, [pc, #108]	; (8009eac <HAL_RCC_OscConfig+0x500>)
 8009e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e40:	4a1a      	ldr	r2, [pc, #104]	; (8009eac <HAL_RCC_OscConfig+0x500>)
 8009e42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009e46:	6353      	str	r3, [r2, #52]	; 0x34
 8009e48:	4b18      	ldr	r3, [pc, #96]	; (8009eac <HAL_RCC_OscConfig+0x500>)
 8009e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e4c:	4a17      	ldr	r2, [pc, #92]	; (8009eac <HAL_RCC_OscConfig+0x500>)
 8009e4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e52:	6353      	str	r3, [r2, #52]	; 0x34
 8009e54:	e00b      	b.n	8009e6e <HAL_RCC_OscConfig+0x4c2>
 8009e56:	4b15      	ldr	r3, [pc, #84]	; (8009eac <HAL_RCC_OscConfig+0x500>)
 8009e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e5a:	4a14      	ldr	r2, [pc, #80]	; (8009eac <HAL_RCC_OscConfig+0x500>)
 8009e5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e60:	6353      	str	r3, [r2, #52]	; 0x34
 8009e62:	4b12      	ldr	r3, [pc, #72]	; (8009eac <HAL_RCC_OscConfig+0x500>)
 8009e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e66:	4a11      	ldr	r2, [pc, #68]	; (8009eac <HAL_RCC_OscConfig+0x500>)
 8009e68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009e6c:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	689b      	ldr	r3, [r3, #8]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d015      	beq.n	8009ea2 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009e76:	f7fc fe99 	bl	8006bac <HAL_GetTick>
 8009e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009e7c:	e00a      	b.n	8009e94 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009e7e:	f7fc fe95 	bl	8006bac <HAL_GetTick>
 8009e82:	4602      	mov	r2, r0
 8009e84:	693b      	ldr	r3, [r7, #16]
 8009e86:	1ad3      	subs	r3, r2, r3
 8009e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d901      	bls.n	8009e94 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8009e90:	2303      	movs	r3, #3
 8009e92:	e0b2      	b.n	8009ffa <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009e94:	4b05      	ldr	r3, [pc, #20]	; (8009eac <HAL_RCC_OscConfig+0x500>)
 8009e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d0ee      	beq.n	8009e7e <HAL_RCC_OscConfig+0x4d2>
 8009ea0:	e023      	b.n	8009eea <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009ea2:	f7fc fe83 	bl	8006bac <HAL_GetTick>
 8009ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009ea8:	e019      	b.n	8009ede <HAL_RCC_OscConfig+0x532>
 8009eaa:	bf00      	nop
 8009eac:	40023800 	.word	0x40023800
 8009eb0:	0801ab34 	.word	0x0801ab34
 8009eb4:	20000000 	.word	0x20000000
 8009eb8:	20000010 	.word	0x20000010
 8009ebc:	42470020 	.word	0x42470020
 8009ec0:	42470680 	.word	0x42470680
 8009ec4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009ec8:	f7fc fe70 	bl	8006bac <HAL_GetTick>
 8009ecc:	4602      	mov	r2, r0
 8009ece:	693b      	ldr	r3, [r7, #16]
 8009ed0:	1ad3      	subs	r3, r2, r3
 8009ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	d901      	bls.n	8009ede <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8009eda:	2303      	movs	r3, #3
 8009edc:	e08d      	b.n	8009ffa <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009ede:	4b49      	ldr	r3, [pc, #292]	; (800a004 <HAL_RCC_OscConfig+0x658>)
 8009ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ee2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d1ee      	bne.n	8009ec8 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8009eea:	7ffb      	ldrb	r3, [r7, #31]
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d105      	bne.n	8009efc <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009ef0:	4b44      	ldr	r3, [pc, #272]	; (800a004 <HAL_RCC_OscConfig+0x658>)
 8009ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ef4:	4a43      	ldr	r2, [pc, #268]	; (800a004 <HAL_RCC_OscConfig+0x658>)
 8009ef6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009efa:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d079      	beq.n	8009ff8 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009f04:	69bb      	ldr	r3, [r7, #24]
 8009f06:	2b0c      	cmp	r3, #12
 8009f08:	d056      	beq.n	8009fb8 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f0e:	2b02      	cmp	r3, #2
 8009f10:	d13b      	bne.n	8009f8a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009f12:	4b3d      	ldr	r3, [pc, #244]	; (800a008 <HAL_RCC_OscConfig+0x65c>)
 8009f14:	2200      	movs	r2, #0
 8009f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009f18:	f7fc fe48 	bl	8006bac <HAL_GetTick>
 8009f1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009f1e:	e008      	b.n	8009f32 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009f20:	f7fc fe44 	bl	8006bac <HAL_GetTick>
 8009f24:	4602      	mov	r2, r0
 8009f26:	693b      	ldr	r3, [r7, #16]
 8009f28:	1ad3      	subs	r3, r2, r3
 8009f2a:	2b02      	cmp	r3, #2
 8009f2c:	d901      	bls.n	8009f32 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8009f2e:	2303      	movs	r3, #3
 8009f30:	e063      	b.n	8009ffa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009f32:	4b34      	ldr	r3, [pc, #208]	; (800a004 <HAL_RCC_OscConfig+0x658>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d1f0      	bne.n	8009f20 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009f3e:	4b31      	ldr	r3, [pc, #196]	; (800a004 <HAL_RCC_OscConfig+0x658>)
 8009f40:	689b      	ldr	r3, [r3, #8]
 8009f42:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f4e:	4319      	orrs	r1, r3
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f54:	430b      	orrs	r3, r1
 8009f56:	492b      	ldr	r1, [pc, #172]	; (800a004 <HAL_RCC_OscConfig+0x658>)
 8009f58:	4313      	orrs	r3, r2
 8009f5a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009f5c:	4b2a      	ldr	r3, [pc, #168]	; (800a008 <HAL_RCC_OscConfig+0x65c>)
 8009f5e:	2201      	movs	r2, #1
 8009f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009f62:	f7fc fe23 	bl	8006bac <HAL_GetTick>
 8009f66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009f68:	e008      	b.n	8009f7c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009f6a:	f7fc fe1f 	bl	8006bac <HAL_GetTick>
 8009f6e:	4602      	mov	r2, r0
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	1ad3      	subs	r3, r2, r3
 8009f74:	2b02      	cmp	r3, #2
 8009f76:	d901      	bls.n	8009f7c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8009f78:	2303      	movs	r3, #3
 8009f7a:	e03e      	b.n	8009ffa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009f7c:	4b21      	ldr	r3, [pc, #132]	; (800a004 <HAL_RCC_OscConfig+0x658>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d0f0      	beq.n	8009f6a <HAL_RCC_OscConfig+0x5be>
 8009f88:	e036      	b.n	8009ff8 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009f8a:	4b1f      	ldr	r3, [pc, #124]	; (800a008 <HAL_RCC_OscConfig+0x65c>)
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009f90:	f7fc fe0c 	bl	8006bac <HAL_GetTick>
 8009f94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009f96:	e008      	b.n	8009faa <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009f98:	f7fc fe08 	bl	8006bac <HAL_GetTick>
 8009f9c:	4602      	mov	r2, r0
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	1ad3      	subs	r3, r2, r3
 8009fa2:	2b02      	cmp	r3, #2
 8009fa4:	d901      	bls.n	8009faa <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8009fa6:	2303      	movs	r3, #3
 8009fa8:	e027      	b.n	8009ffa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009faa:	4b16      	ldr	r3, [pc, #88]	; (800a004 <HAL_RCC_OscConfig+0x658>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d1f0      	bne.n	8009f98 <HAL_RCC_OscConfig+0x5ec>
 8009fb6:	e01f      	b.n	8009ff8 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fbc:	2b01      	cmp	r3, #1
 8009fbe:	d101      	bne.n	8009fc4 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	e01a      	b.n	8009ffa <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8009fc4:	4b0f      	ldr	r3, [pc, #60]	; (800a004 <HAL_RCC_OscConfig+0x658>)
 8009fc6:	689b      	ldr	r3, [r3, #8]
 8009fc8:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009fca:	697b      	ldr	r3, [r7, #20]
 8009fcc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	d10d      	bne.n	8009ff4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009fe2:	429a      	cmp	r2, r3
 8009fe4:	d106      	bne.n	8009ff4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8009fe6:	697b      	ldr	r3, [r7, #20]
 8009fe8:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8009ff0:	429a      	cmp	r2, r3
 8009ff2:	d001      	beq.n	8009ff8 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	e000      	b.n	8009ffa <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8009ff8:	2300      	movs	r3, #0
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3720      	adds	r7, #32
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}
 800a002:	bf00      	nop
 800a004:	40023800 	.word	0x40023800
 800a008:	42470060 	.word	0x42470060

0800a00c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b084      	sub	sp, #16
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d101      	bne.n	800a020 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a01c:	2301      	movs	r3, #1
 800a01e:	e11a      	b.n	800a256 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a020:	4b8f      	ldr	r3, [pc, #572]	; (800a260 <HAL_RCC_ClockConfig+0x254>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f003 0301 	and.w	r3, r3, #1
 800a028:	683a      	ldr	r2, [r7, #0]
 800a02a:	429a      	cmp	r2, r3
 800a02c:	d919      	bls.n	800a062 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	2b01      	cmp	r3, #1
 800a032:	d105      	bne.n	800a040 <HAL_RCC_ClockConfig+0x34>
 800a034:	4b8a      	ldr	r3, [pc, #552]	; (800a260 <HAL_RCC_ClockConfig+0x254>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	4a89      	ldr	r2, [pc, #548]	; (800a260 <HAL_RCC_ClockConfig+0x254>)
 800a03a:	f043 0304 	orr.w	r3, r3, #4
 800a03e:	6013      	str	r3, [r2, #0]
 800a040:	4b87      	ldr	r3, [pc, #540]	; (800a260 <HAL_RCC_ClockConfig+0x254>)
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f023 0201 	bic.w	r2, r3, #1
 800a048:	4985      	ldr	r1, [pc, #532]	; (800a260 <HAL_RCC_ClockConfig+0x254>)
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	4313      	orrs	r3, r2
 800a04e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a050:	4b83      	ldr	r3, [pc, #524]	; (800a260 <HAL_RCC_ClockConfig+0x254>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f003 0301 	and.w	r3, r3, #1
 800a058:	683a      	ldr	r2, [r7, #0]
 800a05a:	429a      	cmp	r2, r3
 800a05c:	d001      	beq.n	800a062 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800a05e:	2301      	movs	r3, #1
 800a060:	e0f9      	b.n	800a256 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f003 0302 	and.w	r3, r3, #2
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d008      	beq.n	800a080 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a06e:	4b7d      	ldr	r3, [pc, #500]	; (800a264 <HAL_RCC_ClockConfig+0x258>)
 800a070:	689b      	ldr	r3, [r3, #8]
 800a072:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	689b      	ldr	r3, [r3, #8]
 800a07a:	497a      	ldr	r1, [pc, #488]	; (800a264 <HAL_RCC_ClockConfig+0x258>)
 800a07c:	4313      	orrs	r3, r2
 800a07e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f003 0301 	and.w	r3, r3, #1
 800a088:	2b00      	cmp	r3, #0
 800a08a:	f000 808e 	beq.w	800a1aa <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	685b      	ldr	r3, [r3, #4]
 800a092:	2b02      	cmp	r3, #2
 800a094:	d107      	bne.n	800a0a6 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a096:	4b73      	ldr	r3, [pc, #460]	; (800a264 <HAL_RCC_ClockConfig+0x258>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d121      	bne.n	800a0e6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	e0d7      	b.n	800a256 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	685b      	ldr	r3, [r3, #4]
 800a0aa:	2b03      	cmp	r3, #3
 800a0ac:	d107      	bne.n	800a0be <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a0ae:	4b6d      	ldr	r3, [pc, #436]	; (800a264 <HAL_RCC_ClockConfig+0x258>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d115      	bne.n	800a0e6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	e0cb      	b.n	800a256 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	685b      	ldr	r3, [r3, #4]
 800a0c2:	2b01      	cmp	r3, #1
 800a0c4:	d107      	bne.n	800a0d6 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a0c6:	4b67      	ldr	r3, [pc, #412]	; (800a264 <HAL_RCC_ClockConfig+0x258>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f003 0302 	and.w	r3, r3, #2
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d109      	bne.n	800a0e6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	e0bf      	b.n	800a256 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800a0d6:	4b63      	ldr	r3, [pc, #396]	; (800a264 <HAL_RCC_ClockConfig+0x258>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d101      	bne.n	800a0e6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	e0b7      	b.n	800a256 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a0e6:	4b5f      	ldr	r3, [pc, #380]	; (800a264 <HAL_RCC_ClockConfig+0x258>)
 800a0e8:	689b      	ldr	r3, [r3, #8]
 800a0ea:	f023 0203 	bic.w	r2, r3, #3
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	685b      	ldr	r3, [r3, #4]
 800a0f2:	495c      	ldr	r1, [pc, #368]	; (800a264 <HAL_RCC_ClockConfig+0x258>)
 800a0f4:	4313      	orrs	r3, r2
 800a0f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a0f8:	f7fc fd58 	bl	8006bac <HAL_GetTick>
 800a0fc:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	685b      	ldr	r3, [r3, #4]
 800a102:	2b02      	cmp	r3, #2
 800a104:	d112      	bne.n	800a12c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800a106:	e00a      	b.n	800a11e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a108:	f7fc fd50 	bl	8006bac <HAL_GetTick>
 800a10c:	4602      	mov	r2, r0
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	1ad3      	subs	r3, r2, r3
 800a112:	f241 3288 	movw	r2, #5000	; 0x1388
 800a116:	4293      	cmp	r3, r2
 800a118:	d901      	bls.n	800a11e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800a11a:	2303      	movs	r3, #3
 800a11c:	e09b      	b.n	800a256 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800a11e:	4b51      	ldr	r3, [pc, #324]	; (800a264 <HAL_RCC_ClockConfig+0x258>)
 800a120:	689b      	ldr	r3, [r3, #8]
 800a122:	f003 030c 	and.w	r3, r3, #12
 800a126:	2b08      	cmp	r3, #8
 800a128:	d1ee      	bne.n	800a108 <HAL_RCC_ClockConfig+0xfc>
 800a12a:	e03e      	b.n	800a1aa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	685b      	ldr	r3, [r3, #4]
 800a130:	2b03      	cmp	r3, #3
 800a132:	d112      	bne.n	800a15a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a134:	e00a      	b.n	800a14c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a136:	f7fc fd39 	bl	8006bac <HAL_GetTick>
 800a13a:	4602      	mov	r2, r0
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	1ad3      	subs	r3, r2, r3
 800a140:	f241 3288 	movw	r2, #5000	; 0x1388
 800a144:	4293      	cmp	r3, r2
 800a146:	d901      	bls.n	800a14c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 800a148:	2303      	movs	r3, #3
 800a14a:	e084      	b.n	800a256 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a14c:	4b45      	ldr	r3, [pc, #276]	; (800a264 <HAL_RCC_ClockConfig+0x258>)
 800a14e:	689b      	ldr	r3, [r3, #8]
 800a150:	f003 030c 	and.w	r3, r3, #12
 800a154:	2b0c      	cmp	r3, #12
 800a156:	d1ee      	bne.n	800a136 <HAL_RCC_ClockConfig+0x12a>
 800a158:	e027      	b.n	800a1aa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	685b      	ldr	r3, [r3, #4]
 800a15e:	2b01      	cmp	r3, #1
 800a160:	d11d      	bne.n	800a19e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800a162:	e00a      	b.n	800a17a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a164:	f7fc fd22 	bl	8006bac <HAL_GetTick>
 800a168:	4602      	mov	r2, r0
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	1ad3      	subs	r3, r2, r3
 800a16e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a172:	4293      	cmp	r3, r2
 800a174:	d901      	bls.n	800a17a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800a176:	2303      	movs	r3, #3
 800a178:	e06d      	b.n	800a256 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800a17a:	4b3a      	ldr	r3, [pc, #232]	; (800a264 <HAL_RCC_ClockConfig+0x258>)
 800a17c:	689b      	ldr	r3, [r3, #8]
 800a17e:	f003 030c 	and.w	r3, r3, #12
 800a182:	2b04      	cmp	r3, #4
 800a184:	d1ee      	bne.n	800a164 <HAL_RCC_ClockConfig+0x158>
 800a186:	e010      	b.n	800a1aa <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a188:	f7fc fd10 	bl	8006bac <HAL_GetTick>
 800a18c:	4602      	mov	r2, r0
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	1ad3      	subs	r3, r2, r3
 800a192:	f241 3288 	movw	r2, #5000	; 0x1388
 800a196:	4293      	cmp	r3, r2
 800a198:	d901      	bls.n	800a19e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800a19a:	2303      	movs	r3, #3
 800a19c:	e05b      	b.n	800a256 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800a19e:	4b31      	ldr	r3, [pc, #196]	; (800a264 <HAL_RCC_ClockConfig+0x258>)
 800a1a0:	689b      	ldr	r3, [r3, #8]
 800a1a2:	f003 030c 	and.w	r3, r3, #12
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d1ee      	bne.n	800a188 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a1aa:	4b2d      	ldr	r3, [pc, #180]	; (800a260 <HAL_RCC_ClockConfig+0x254>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f003 0301 	and.w	r3, r3, #1
 800a1b2:	683a      	ldr	r2, [r7, #0]
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	d219      	bcs.n	800a1ec <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	2b01      	cmp	r3, #1
 800a1bc:	d105      	bne.n	800a1ca <HAL_RCC_ClockConfig+0x1be>
 800a1be:	4b28      	ldr	r3, [pc, #160]	; (800a260 <HAL_RCC_ClockConfig+0x254>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	4a27      	ldr	r2, [pc, #156]	; (800a260 <HAL_RCC_ClockConfig+0x254>)
 800a1c4:	f043 0304 	orr.w	r3, r3, #4
 800a1c8:	6013      	str	r3, [r2, #0]
 800a1ca:	4b25      	ldr	r3, [pc, #148]	; (800a260 <HAL_RCC_ClockConfig+0x254>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f023 0201 	bic.w	r2, r3, #1
 800a1d2:	4923      	ldr	r1, [pc, #140]	; (800a260 <HAL_RCC_ClockConfig+0x254>)
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	4313      	orrs	r3, r2
 800a1d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a1da:	4b21      	ldr	r3, [pc, #132]	; (800a260 <HAL_RCC_ClockConfig+0x254>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	f003 0301 	and.w	r3, r3, #1
 800a1e2:	683a      	ldr	r2, [r7, #0]
 800a1e4:	429a      	cmp	r2, r3
 800a1e6:	d001      	beq.n	800a1ec <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	e034      	b.n	800a256 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f003 0304 	and.w	r3, r3, #4
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d008      	beq.n	800a20a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a1f8:	4b1a      	ldr	r3, [pc, #104]	; (800a264 <HAL_RCC_ClockConfig+0x258>)
 800a1fa:	689b      	ldr	r3, [r3, #8]
 800a1fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	68db      	ldr	r3, [r3, #12]
 800a204:	4917      	ldr	r1, [pc, #92]	; (800a264 <HAL_RCC_ClockConfig+0x258>)
 800a206:	4313      	orrs	r3, r2
 800a208:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f003 0308 	and.w	r3, r3, #8
 800a212:	2b00      	cmp	r3, #0
 800a214:	d009      	beq.n	800a22a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a216:	4b13      	ldr	r3, [pc, #76]	; (800a264 <HAL_RCC_ClockConfig+0x258>)
 800a218:	689b      	ldr	r3, [r3, #8]
 800a21a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	691b      	ldr	r3, [r3, #16]
 800a222:	00db      	lsls	r3, r3, #3
 800a224:	490f      	ldr	r1, [pc, #60]	; (800a264 <HAL_RCC_ClockConfig+0x258>)
 800a226:	4313      	orrs	r3, r2
 800a228:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a22a:	f000 f859 	bl	800a2e0 <HAL_RCC_GetSysClockFreq>
 800a22e:	4601      	mov	r1, r0
 800a230:	4b0c      	ldr	r3, [pc, #48]	; (800a264 <HAL_RCC_ClockConfig+0x258>)
 800a232:	689b      	ldr	r3, [r3, #8]
 800a234:	091b      	lsrs	r3, r3, #4
 800a236:	f003 030f 	and.w	r3, r3, #15
 800a23a:	4a0b      	ldr	r2, [pc, #44]	; (800a268 <HAL_RCC_ClockConfig+0x25c>)
 800a23c:	5cd3      	ldrb	r3, [r2, r3]
 800a23e:	fa21 f303 	lsr.w	r3, r1, r3
 800a242:	4a0a      	ldr	r2, [pc, #40]	; (800a26c <HAL_RCC_ClockConfig+0x260>)
 800a244:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800a246:	4b0a      	ldr	r3, [pc, #40]	; (800a270 <HAL_RCC_ClockConfig+0x264>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	4618      	mov	r0, r3
 800a24c:	f7f9 fd00 	bl	8003c50 <HAL_InitTick>
 800a250:	4603      	mov	r3, r0
 800a252:	72fb      	strb	r3, [r7, #11]

  return status;
 800a254:	7afb      	ldrb	r3, [r7, #11]
}
 800a256:	4618      	mov	r0, r3
 800a258:	3710      	adds	r7, #16
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}
 800a25e:	bf00      	nop
 800a260:	40023c00 	.word	0x40023c00
 800a264:	40023800 	.word	0x40023800
 800a268:	0801ab34 	.word	0x0801ab34
 800a26c:	20000000 	.word	0x20000000
 800a270:	20000010 	.word	0x20000010

0800a274 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16 division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b08a      	sub	sp, #40	; 0x28
 800a278:	af00      	add	r7, sp, #0
 800a27a:	60f8      	str	r0, [r7, #12]
 800a27c:	60b9      	str	r1, [r7, #8]
 800a27e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 800a280:	2302      	movs	r3, #2
 800a282:	61bb      	str	r3, [r7, #24]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 800a284:	2302      	movs	r3, #2
 800a286:	623b      	str	r3, [r7, #32]
  gpio.Pull      = GPIO_NOPULL;
 800a288:	2300      	movs	r3, #0
 800a28a:	61fb      	str	r3, [r7, #28]
  gpio.Pin       = MCO1_PIN;
 800a28c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a290:	617b      	str	r3, [r7, #20]
  gpio.Alternate = GPIO_AF0_MCO;
 800a292:	2300      	movs	r3, #0
 800a294:	627b      	str	r3, [r7, #36]	; 0x24

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 800a296:	4b10      	ldr	r3, [pc, #64]	; (800a2d8 <HAL_RCC_MCOConfig+0x64>)
 800a298:	69db      	ldr	r3, [r3, #28]
 800a29a:	4a0f      	ldr	r2, [pc, #60]	; (800a2d8 <HAL_RCC_MCOConfig+0x64>)
 800a29c:	f043 0301 	orr.w	r3, r3, #1
 800a2a0:	61d3      	str	r3, [r2, #28]
 800a2a2:	4b0d      	ldr	r3, [pc, #52]	; (800a2d8 <HAL_RCC_MCOConfig+0x64>)
 800a2a4:	69db      	ldr	r3, [r3, #28]
 800a2a6:	f003 0301 	and.w	r3, r3, #1
 800a2aa:	613b      	str	r3, [r7, #16]
 800a2ac:	693b      	ldr	r3, [r7, #16]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 800a2ae:	f107 0314 	add.w	r3, r7, #20
 800a2b2:	4619      	mov	r1, r3
 800a2b4:	4809      	ldr	r0, [pc, #36]	; (800a2dc <HAL_RCC_MCOConfig+0x68>)
 800a2b6:	f7fd fd5b 	bl	8007d70 <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 800a2ba:	4b07      	ldr	r3, [pc, #28]	; (800a2d8 <HAL_RCC_MCOConfig+0x64>)
 800a2bc:	689b      	ldr	r3, [r3, #8]
 800a2be:	f023 42ee 	bic.w	r2, r3, #1996488704	; 0x77000000
 800a2c2:	68b9      	ldr	r1, [r7, #8]
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	430b      	orrs	r3, r1
 800a2c8:	4903      	ldr	r1, [pc, #12]	; (800a2d8 <HAL_RCC_MCOConfig+0x64>)
 800a2ca:	4313      	orrs	r3, r2
 800a2cc:	608b      	str	r3, [r1, #8]
}
 800a2ce:	bf00      	nop
 800a2d0:	3728      	adds	r7, #40	; 0x28
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}
 800a2d6:	bf00      	nop
 800a2d8:	40023800 	.word	0x40023800
 800a2dc:	40020000 	.word	0x40020000

0800a2e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a2e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2e2:	b087      	sub	sp, #28
 800a2e4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800a2e6:	4b5f      	ldr	r3, [pc, #380]	; (800a464 <HAL_RCC_GetSysClockFreq+0x184>)
 800a2e8:	689b      	ldr	r3, [r3, #8]
 800a2ea:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	f003 030c 	and.w	r3, r3, #12
 800a2f2:	2b08      	cmp	r3, #8
 800a2f4:	d007      	beq.n	800a306 <HAL_RCC_GetSysClockFreq+0x26>
 800a2f6:	2b0c      	cmp	r3, #12
 800a2f8:	d008      	beq.n	800a30c <HAL_RCC_GetSysClockFreq+0x2c>
 800a2fa:	2b04      	cmp	r3, #4
 800a2fc:	f040 809f 	bne.w	800a43e <HAL_RCC_GetSysClockFreq+0x15e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a300:	4b59      	ldr	r3, [pc, #356]	; (800a468 <HAL_RCC_GetSysClockFreq+0x188>)
 800a302:	613b      	str	r3, [r7, #16]
      break;
 800a304:	e0a9      	b.n	800a45a <HAL_RCC_GetSysClockFreq+0x17a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800a306:	4b59      	ldr	r3, [pc, #356]	; (800a46c <HAL_RCC_GetSysClockFreq+0x18c>)
 800a308:	613b      	str	r3, [r7, #16]
      break;
 800a30a:	e0a6      	b.n	800a45a <HAL_RCC_GetSysClockFreq+0x17a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	0c9b      	lsrs	r3, r3, #18
 800a310:	f003 030f 	and.w	r3, r3, #15
 800a314:	4a56      	ldr	r2, [pc, #344]	; (800a470 <HAL_RCC_GetSysClockFreq+0x190>)
 800a316:	5cd3      	ldrb	r3, [r2, r3]
 800a318:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	0d9b      	lsrs	r3, r3, #22
 800a31e:	f003 0303 	and.w	r3, r3, #3
 800a322:	3301      	adds	r3, #1
 800a324:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a326:	4b4f      	ldr	r3, [pc, #316]	; (800a464 <HAL_RCC_GetSysClockFreq+0x184>)
 800a328:	689b      	ldr	r3, [r3, #8]
 800a32a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d041      	beq.n	800a3b6 <HAL_RCC_GetSysClockFreq+0xd6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800a332:	68bb      	ldr	r3, [r7, #8]
 800a334:	461d      	mov	r5, r3
 800a336:	f04f 0600 	mov.w	r6, #0
 800a33a:	4629      	mov	r1, r5
 800a33c:	4632      	mov	r2, r6
 800a33e:	f04f 0300 	mov.w	r3, #0
 800a342:	f04f 0400 	mov.w	r4, #0
 800a346:	0154      	lsls	r4, r2, #5
 800a348:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800a34c:	014b      	lsls	r3, r1, #5
 800a34e:	4619      	mov	r1, r3
 800a350:	4622      	mov	r2, r4
 800a352:	1b49      	subs	r1, r1, r5
 800a354:	eb62 0206 	sbc.w	r2, r2, r6
 800a358:	f04f 0300 	mov.w	r3, #0
 800a35c:	f04f 0400 	mov.w	r4, #0
 800a360:	0194      	lsls	r4, r2, #6
 800a362:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a366:	018b      	lsls	r3, r1, #6
 800a368:	1a5b      	subs	r3, r3, r1
 800a36a:	eb64 0402 	sbc.w	r4, r4, r2
 800a36e:	f04f 0100 	mov.w	r1, #0
 800a372:	f04f 0200 	mov.w	r2, #0
 800a376:	00e2      	lsls	r2, r4, #3
 800a378:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800a37c:	00d9      	lsls	r1, r3, #3
 800a37e:	460b      	mov	r3, r1
 800a380:	4614      	mov	r4, r2
 800a382:	195b      	adds	r3, r3, r5
 800a384:	eb44 0406 	adc.w	r4, r4, r6
 800a388:	f04f 0100 	mov.w	r1, #0
 800a38c:	f04f 0200 	mov.w	r2, #0
 800a390:	0262      	lsls	r2, r4, #9
 800a392:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800a396:	0259      	lsls	r1, r3, #9
 800a398:	460b      	mov	r3, r1
 800a39a:	4614      	mov	r4, r2
 800a39c:	4618      	mov	r0, r3
 800a39e:	4621      	mov	r1, r4
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f04f 0400 	mov.w	r4, #0
 800a3a6:	461a      	mov	r2, r3
 800a3a8:	4623      	mov	r3, r4
 800a3aa:	f7f6 fbff 	bl	8000bac <__aeabi_uldivmod>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	460c      	mov	r4, r1
 800a3b2:	617b      	str	r3, [r7, #20]
 800a3b4:	e040      	b.n	800a438 <HAL_RCC_GetSysClockFreq+0x158>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	461d      	mov	r5, r3
 800a3ba:	f04f 0600 	mov.w	r6, #0
 800a3be:	4629      	mov	r1, r5
 800a3c0:	4632      	mov	r2, r6
 800a3c2:	f04f 0300 	mov.w	r3, #0
 800a3c6:	f04f 0400 	mov.w	r4, #0
 800a3ca:	0154      	lsls	r4, r2, #5
 800a3cc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800a3d0:	014b      	lsls	r3, r1, #5
 800a3d2:	4619      	mov	r1, r3
 800a3d4:	4622      	mov	r2, r4
 800a3d6:	1b49      	subs	r1, r1, r5
 800a3d8:	eb62 0206 	sbc.w	r2, r2, r6
 800a3dc:	f04f 0300 	mov.w	r3, #0
 800a3e0:	f04f 0400 	mov.w	r4, #0
 800a3e4:	0194      	lsls	r4, r2, #6
 800a3e6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a3ea:	018b      	lsls	r3, r1, #6
 800a3ec:	1a5b      	subs	r3, r3, r1
 800a3ee:	eb64 0402 	sbc.w	r4, r4, r2
 800a3f2:	f04f 0100 	mov.w	r1, #0
 800a3f6:	f04f 0200 	mov.w	r2, #0
 800a3fa:	00e2      	lsls	r2, r4, #3
 800a3fc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800a400:	00d9      	lsls	r1, r3, #3
 800a402:	460b      	mov	r3, r1
 800a404:	4614      	mov	r4, r2
 800a406:	195b      	adds	r3, r3, r5
 800a408:	eb44 0406 	adc.w	r4, r4, r6
 800a40c:	f04f 0100 	mov.w	r1, #0
 800a410:	f04f 0200 	mov.w	r2, #0
 800a414:	02a2      	lsls	r2, r4, #10
 800a416:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800a41a:	0299      	lsls	r1, r3, #10
 800a41c:	460b      	mov	r3, r1
 800a41e:	4614      	mov	r4, r2
 800a420:	4618      	mov	r0, r3
 800a422:	4621      	mov	r1, r4
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f04f 0400 	mov.w	r4, #0
 800a42a:	461a      	mov	r2, r3
 800a42c:	4623      	mov	r3, r4
 800a42e:	f7f6 fbbd 	bl	8000bac <__aeabi_uldivmod>
 800a432:	4603      	mov	r3, r0
 800a434:	460c      	mov	r4, r1
 800a436:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	613b      	str	r3, [r7, #16]
      break;
 800a43c:	e00d      	b.n	800a45a <HAL_RCC_GetSysClockFreq+0x17a>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800a43e:	4b09      	ldr	r3, [pc, #36]	; (800a464 <HAL_RCC_GetSysClockFreq+0x184>)
 800a440:	685b      	ldr	r3, [r3, #4]
 800a442:	0b5b      	lsrs	r3, r3, #13
 800a444:	f003 0307 	and.w	r3, r3, #7
 800a448:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	3301      	adds	r3, #1
 800a44e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800a452:	fa02 f303 	lsl.w	r3, r2, r3
 800a456:	613b      	str	r3, [r7, #16]
      break;
 800a458:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a45a:	693b      	ldr	r3, [r7, #16]
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	371c      	adds	r7, #28
 800a460:	46bd      	mov	sp, r7
 800a462:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a464:	40023800 	.word	0x40023800
 800a468:	00f42400 	.word	0x00f42400
 800a46c:	007a1200 	.word	0x007a1200
 800a470:	0801ab28 	.word	0x0801ab28

0800a474 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a474:	b480      	push	{r7}
 800a476:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a478:	4b02      	ldr	r3, [pc, #8]	; (800a484 <HAL_RCC_GetHCLKFreq+0x10>)
 800a47a:	681b      	ldr	r3, [r3, #0]
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	46bd      	mov	sp, r7
 800a480:	bc80      	pop	{r7}
 800a482:	4770      	bx	lr
 800a484:	20000000 	.word	0x20000000

0800a488 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a48c:	f7ff fff2 	bl	800a474 <HAL_RCC_GetHCLKFreq>
 800a490:	4601      	mov	r1, r0
 800a492:	4b05      	ldr	r3, [pc, #20]	; (800a4a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a494:	689b      	ldr	r3, [r3, #8]
 800a496:	0a1b      	lsrs	r3, r3, #8
 800a498:	f003 0307 	and.w	r3, r3, #7
 800a49c:	4a03      	ldr	r2, [pc, #12]	; (800a4ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800a49e:	5cd3      	ldrb	r3, [r2, r3]
 800a4a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	bd80      	pop	{r7, pc}
 800a4a8:	40023800 	.word	0x40023800
 800a4ac:	0801ab44 	.word	0x0801ab44

0800a4b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a4b4:	f7ff ffde 	bl	800a474 <HAL_RCC_GetHCLKFreq>
 800a4b8:	4601      	mov	r1, r0
 800a4ba:	4b05      	ldr	r3, [pc, #20]	; (800a4d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a4bc:	689b      	ldr	r3, [r3, #8]
 800a4be:	0adb      	lsrs	r3, r3, #11
 800a4c0:	f003 0307 	and.w	r3, r3, #7
 800a4c4:	4a03      	ldr	r2, [pc, #12]	; (800a4d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a4c6:	5cd3      	ldrb	r3, [r2, r3]
 800a4c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	bd80      	pop	{r7, pc}
 800a4d0:	40023800 	.word	0x40023800
 800a4d4:	0801ab44 	.word	0x0801ab44

0800a4d8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b083      	sub	sp, #12
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
 800a4e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	220f      	movs	r2, #15
 800a4e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a4e8:	4b11      	ldr	r3, [pc, #68]	; (800a530 <HAL_RCC_GetClockConfig+0x58>)
 800a4ea:	689b      	ldr	r3, [r3, #8]
 800a4ec:	f003 0203 	and.w	r2, r3, #3
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a4f4:	4b0e      	ldr	r3, [pc, #56]	; (800a530 <HAL_RCC_GetClockConfig+0x58>)
 800a4f6:	689b      	ldr	r3, [r3, #8]
 800a4f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a500:	4b0b      	ldr	r3, [pc, #44]	; (800a530 <HAL_RCC_GetClockConfig+0x58>)
 800a502:	689b      	ldr	r3, [r3, #8]
 800a504:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800a50c:	4b08      	ldr	r3, [pc, #32]	; (800a530 <HAL_RCC_GetClockConfig+0x58>)
 800a50e:	689b      	ldr	r3, [r3, #8]
 800a510:	08db      	lsrs	r3, r3, #3
 800a512:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800a51a:	4b06      	ldr	r3, [pc, #24]	; (800a534 <HAL_RCC_GetClockConfig+0x5c>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f003 0201 	and.w	r2, r3, #1
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	601a      	str	r2, [r3, #0]
}
 800a526:	bf00      	nop
 800a528:	370c      	adds	r7, #12
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bc80      	pop	{r7}
 800a52e:	4770      	bx	lr
 800a530:	40023800 	.word	0x40023800
 800a534:	40023c00 	.word	0x40023c00

0800a538 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 800a538:	b480      	push	{r7}
 800a53a:	b087      	sub	sp, #28
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800a540:	2300      	movs	r3, #0
 800a542:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800a544:	4b29      	ldr	r3, [pc, #164]	; (800a5ec <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800a546:	689b      	ldr	r3, [r3, #8]
 800a548:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d12c      	bne.n	800a5aa <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800a550:	4b26      	ldr	r3, [pc, #152]	; (800a5ec <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800a552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d005      	beq.n	800a568 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800a55c:	4b24      	ldr	r3, [pc, #144]	; (800a5f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800a564:	617b      	str	r3, [r7, #20]
 800a566:	e016      	b.n	800a596 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a568:	4b20      	ldr	r3, [pc, #128]	; (800a5ec <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800a56a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a56c:	4a1f      	ldr	r2, [pc, #124]	; (800a5ec <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800a56e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a572:	6253      	str	r3, [r2, #36]	; 0x24
 800a574:	4b1d      	ldr	r3, [pc, #116]	; (800a5ec <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800a576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a57c:	60fb      	str	r3, [r7, #12]
 800a57e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800a580:	4b1b      	ldr	r3, [pc, #108]	; (800a5f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800a588:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800a58a:	4b18      	ldr	r3, [pc, #96]	; (800a5ec <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800a58c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a58e:	4a17      	ldr	r2, [pc, #92]	; (800a5ec <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800a590:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a594:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800a59c:	d105      	bne.n	800a5aa <RCC_SetFlashLatencyFromMSIRange+0x72>
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a5a4:	d101      	bne.n	800a5aa <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800a5aa:	693b      	ldr	r3, [r7, #16]
 800a5ac:	2b01      	cmp	r3, #1
 800a5ae:	d105      	bne.n	800a5bc <RCC_SetFlashLatencyFromMSIRange+0x84>
 800a5b0:	4b10      	ldr	r3, [pc, #64]	; (800a5f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	4a0f      	ldr	r2, [pc, #60]	; (800a5f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a5b6:	f043 0304 	orr.w	r3, r3, #4
 800a5ba:	6013      	str	r3, [r2, #0]
 800a5bc:	4b0d      	ldr	r3, [pc, #52]	; (800a5f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f023 0201 	bic.w	r2, r3, #1
 800a5c4:	490b      	ldr	r1, [pc, #44]	; (800a5f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a5c6:	693b      	ldr	r3, [r7, #16]
 800a5c8:	4313      	orrs	r3, r2
 800a5ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800a5cc:	4b09      	ldr	r3, [pc, #36]	; (800a5f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f003 0301 	and.w	r3, r3, #1
 800a5d4:	693a      	ldr	r2, [r7, #16]
 800a5d6:	429a      	cmp	r2, r3
 800a5d8:	d001      	beq.n	800a5de <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800a5da:	2301      	movs	r3, #1
 800a5dc:	e000      	b.n	800a5e0 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800a5de:	2300      	movs	r3, #0
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	371c      	adds	r7, #28
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bc80      	pop	{r7}
 800a5e8:	4770      	bx	lr
 800a5ea:	bf00      	nop
 800a5ec:	40023800 	.word	0x40023800
 800a5f0:	40007000 	.word	0x40007000
 800a5f4:	40023c00 	.word	0x40023c00

0800a5f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b082      	sub	sp, #8
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d101      	bne.n	800a60a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a606:	2301      	movs	r3, #1
 800a608:	e07b      	b.n	800a702 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d108      	bne.n	800a624 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	685b      	ldr	r3, [r3, #4]
 800a616:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a61a:	d009      	beq.n	800a630 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2200      	movs	r2, #0
 800a620:	61da      	str	r2, [r3, #28]
 800a622:	e005      	b.n	800a630 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2200      	movs	r2, #0
 800a628:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2200      	movs	r2, #0
 800a62e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2200      	movs	r2, #0
 800a634:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a63c:	b2db      	uxtb	r3, r3
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d106      	bne.n	800a650 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2200      	movs	r2, #0
 800a646:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f7f8 fa9c 	bl	8002b88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2202      	movs	r2, #2
 800a654:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	681a      	ldr	r2, [r3, #0]
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a666:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	685b      	ldr	r3, [r3, #4]
 800a66c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	689b      	ldr	r3, [r3, #8]
 800a674:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a678:	431a      	orrs	r2, r3
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	68db      	ldr	r3, [r3, #12]
 800a67e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a682:	431a      	orrs	r2, r3
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	691b      	ldr	r3, [r3, #16]
 800a688:	f003 0302 	and.w	r3, r3, #2
 800a68c:	431a      	orrs	r2, r3
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	695b      	ldr	r3, [r3, #20]
 800a692:	f003 0301 	and.w	r3, r3, #1
 800a696:	431a      	orrs	r2, r3
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	699b      	ldr	r3, [r3, #24]
 800a69c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a6a0:	431a      	orrs	r2, r3
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	69db      	ldr	r3, [r3, #28]
 800a6a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a6aa:	431a      	orrs	r2, r3
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6a1b      	ldr	r3, [r3, #32]
 800a6b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6b4:	ea42 0103 	orr.w	r1, r2, r3
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6bc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	430a      	orrs	r2, r1
 800a6c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	699b      	ldr	r3, [r3, #24]
 800a6cc:	0c1b      	lsrs	r3, r3, #16
 800a6ce:	f003 0104 	and.w	r1, r3, #4
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6d6:	f003 0210 	and.w	r2, r3, #16
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	430a      	orrs	r2, r1
 800a6e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	69da      	ldr	r2, [r3, #28]
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a6f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a700:	2300      	movs	r3, #0
}
 800a702:	4618      	mov	r0, r3
 800a704:	3708      	adds	r7, #8
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}

0800a70a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a70a:	b580      	push	{r7, lr}
 800a70c:	b088      	sub	sp, #32
 800a70e:	af00      	add	r7, sp, #0
 800a710:	60f8      	str	r0, [r7, #12]
 800a712:	60b9      	str	r1, [r7, #8]
 800a714:	603b      	str	r3, [r7, #0]
 800a716:	4613      	mov	r3, r2
 800a718:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a71a:	2300      	movs	r3, #0
 800a71c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a724:	2b01      	cmp	r3, #1
 800a726:	d101      	bne.n	800a72c <HAL_SPI_Transmit+0x22>
 800a728:	2302      	movs	r3, #2
 800a72a:	e126      	b.n	800a97a <HAL_SPI_Transmit+0x270>
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	2201      	movs	r2, #1
 800a730:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a734:	f7fc fa3a 	bl	8006bac <HAL_GetTick>
 800a738:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a73a:	88fb      	ldrh	r3, [r7, #6]
 800a73c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a744:	b2db      	uxtb	r3, r3
 800a746:	2b01      	cmp	r3, #1
 800a748:	d002      	beq.n	800a750 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a74a:	2302      	movs	r3, #2
 800a74c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a74e:	e10b      	b.n	800a968 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d002      	beq.n	800a75c <HAL_SPI_Transmit+0x52>
 800a756:	88fb      	ldrh	r3, [r7, #6]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d102      	bne.n	800a762 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a75c:	2301      	movs	r3, #1
 800a75e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a760:	e102      	b.n	800a968 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	2203      	movs	r2, #3
 800a766:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	2200      	movs	r2, #0
 800a76e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	68ba      	ldr	r2, [r7, #8]
 800a774:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	88fa      	ldrh	r2, [r7, #6]
 800a77a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	88fa      	ldrh	r2, [r7, #6]
 800a780:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	2200      	movs	r2, #0
 800a786:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	2200      	movs	r2, #0
 800a78c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	2200      	movs	r2, #0
 800a792:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	2200      	movs	r2, #0
 800a798:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	2200      	movs	r2, #0
 800a79e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	689b      	ldr	r3, [r3, #8]
 800a7a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a7a8:	d10f      	bne.n	800a7ca <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	681a      	ldr	r2, [r3, #0]
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a7b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	681a      	ldr	r2, [r3, #0]
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a7c8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7d4:	2b40      	cmp	r3, #64	; 0x40
 800a7d6:	d007      	beq.n	800a7e8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	681a      	ldr	r2, [r3, #0]
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a7e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	68db      	ldr	r3, [r3, #12]
 800a7ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a7f0:	d14b      	bne.n	800a88a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	685b      	ldr	r3, [r3, #4]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d002      	beq.n	800a800 <HAL_SPI_Transmit+0xf6>
 800a7fa:	8afb      	ldrh	r3, [r7, #22]
 800a7fc:	2b01      	cmp	r3, #1
 800a7fe:	d13e      	bne.n	800a87e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a804:	881a      	ldrh	r2, [r3, #0]
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a810:	1c9a      	adds	r2, r3, #2
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a81a:	b29b      	uxth	r3, r3
 800a81c:	3b01      	subs	r3, #1
 800a81e:	b29a      	uxth	r2, r3
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a824:	e02b      	b.n	800a87e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	689b      	ldr	r3, [r3, #8]
 800a82c:	f003 0302 	and.w	r3, r3, #2
 800a830:	2b02      	cmp	r3, #2
 800a832:	d112      	bne.n	800a85a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a838:	881a      	ldrh	r2, [r3, #0]
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a844:	1c9a      	adds	r2, r3, #2
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a84e:	b29b      	uxth	r3, r3
 800a850:	3b01      	subs	r3, #1
 800a852:	b29a      	uxth	r2, r3
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	86da      	strh	r2, [r3, #54]	; 0x36
 800a858:	e011      	b.n	800a87e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a85a:	f7fc f9a7 	bl	8006bac <HAL_GetTick>
 800a85e:	4602      	mov	r2, r0
 800a860:	69bb      	ldr	r3, [r7, #24]
 800a862:	1ad3      	subs	r3, r2, r3
 800a864:	683a      	ldr	r2, [r7, #0]
 800a866:	429a      	cmp	r2, r3
 800a868:	d803      	bhi.n	800a872 <HAL_SPI_Transmit+0x168>
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a870:	d102      	bne.n	800a878 <HAL_SPI_Transmit+0x16e>
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d102      	bne.n	800a87e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800a878:	2303      	movs	r3, #3
 800a87a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a87c:	e074      	b.n	800a968 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a882:	b29b      	uxth	r3, r3
 800a884:	2b00      	cmp	r3, #0
 800a886:	d1ce      	bne.n	800a826 <HAL_SPI_Transmit+0x11c>
 800a888:	e04c      	b.n	800a924 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	685b      	ldr	r3, [r3, #4]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d002      	beq.n	800a898 <HAL_SPI_Transmit+0x18e>
 800a892:	8afb      	ldrh	r3, [r7, #22]
 800a894:	2b01      	cmp	r3, #1
 800a896:	d140      	bne.n	800a91a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	330c      	adds	r3, #12
 800a8a2:	7812      	ldrb	r2, [r2, #0]
 800a8a4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8aa:	1c5a      	adds	r2, r3, #1
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a8b4:	b29b      	uxth	r3, r3
 800a8b6:	3b01      	subs	r3, #1
 800a8b8:	b29a      	uxth	r2, r3
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a8be:	e02c      	b.n	800a91a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	689b      	ldr	r3, [r3, #8]
 800a8c6:	f003 0302 	and.w	r3, r3, #2
 800a8ca:	2b02      	cmp	r3, #2
 800a8cc:	d113      	bne.n	800a8f6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	330c      	adds	r3, #12
 800a8d8:	7812      	ldrb	r2, [r2, #0]
 800a8da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8e0:	1c5a      	adds	r2, r3, #1
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a8ea:	b29b      	uxth	r3, r3
 800a8ec:	3b01      	subs	r3, #1
 800a8ee:	b29a      	uxth	r2, r3
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	86da      	strh	r2, [r3, #54]	; 0x36
 800a8f4:	e011      	b.n	800a91a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a8f6:	f7fc f959 	bl	8006bac <HAL_GetTick>
 800a8fa:	4602      	mov	r2, r0
 800a8fc:	69bb      	ldr	r3, [r7, #24]
 800a8fe:	1ad3      	subs	r3, r2, r3
 800a900:	683a      	ldr	r2, [r7, #0]
 800a902:	429a      	cmp	r2, r3
 800a904:	d803      	bhi.n	800a90e <HAL_SPI_Transmit+0x204>
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a90c:	d102      	bne.n	800a914 <HAL_SPI_Transmit+0x20a>
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d102      	bne.n	800a91a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800a914:	2303      	movs	r3, #3
 800a916:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a918:	e026      	b.n	800a968 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a91e:	b29b      	uxth	r3, r3
 800a920:	2b00      	cmp	r3, #0
 800a922:	d1cd      	bne.n	800a8c0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a924:	69ba      	ldr	r2, [r7, #24]
 800a926:	6839      	ldr	r1, [r7, #0]
 800a928:	68f8      	ldr	r0, [r7, #12]
 800a92a:	f000 f8b3 	bl	800aa94 <SPI_EndRxTxTransaction>
 800a92e:	4603      	mov	r3, r0
 800a930:	2b00      	cmp	r3, #0
 800a932:	d002      	beq.n	800a93a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	2220      	movs	r2, #32
 800a938:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	689b      	ldr	r3, [r3, #8]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d10a      	bne.n	800a958 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a942:	2300      	movs	r3, #0
 800a944:	613b      	str	r3, [r7, #16]
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	68db      	ldr	r3, [r3, #12]
 800a94c:	613b      	str	r3, [r7, #16]
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	689b      	ldr	r3, [r3, #8]
 800a954:	613b      	str	r3, [r7, #16]
 800a956:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d002      	beq.n	800a966 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800a960:	2301      	movs	r3, #1
 800a962:	77fb      	strb	r3, [r7, #31]
 800a964:	e000      	b.n	800a968 <HAL_SPI_Transmit+0x25e>
  }

error:
 800a966:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	2201      	movs	r2, #1
 800a96c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	2200      	movs	r2, #0
 800a974:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a978:	7ffb      	ldrb	r3, [r7, #31]
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3720      	adds	r7, #32
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}
	...

0800a984 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b088      	sub	sp, #32
 800a988:	af00      	add	r7, sp, #0
 800a98a:	60f8      	str	r0, [r7, #12]
 800a98c:	60b9      	str	r1, [r7, #8]
 800a98e:	603b      	str	r3, [r7, #0]
 800a990:	4613      	mov	r3, r2
 800a992:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a994:	f7fc f90a 	bl	8006bac <HAL_GetTick>
 800a998:	4602      	mov	r2, r0
 800a99a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a99c:	1a9b      	subs	r3, r3, r2
 800a99e:	683a      	ldr	r2, [r7, #0]
 800a9a0:	4413      	add	r3, r2
 800a9a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a9a4:	f7fc f902 	bl	8006bac <HAL_GetTick>
 800a9a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a9aa:	4b39      	ldr	r3, [pc, #228]	; (800aa90 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	015b      	lsls	r3, r3, #5
 800a9b0:	0d1b      	lsrs	r3, r3, #20
 800a9b2:	69fa      	ldr	r2, [r7, #28]
 800a9b4:	fb02 f303 	mul.w	r3, r2, r3
 800a9b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a9ba:	e054      	b.n	800aa66 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9c2:	d050      	beq.n	800aa66 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a9c4:	f7fc f8f2 	bl	8006bac <HAL_GetTick>
 800a9c8:	4602      	mov	r2, r0
 800a9ca:	69bb      	ldr	r3, [r7, #24]
 800a9cc:	1ad3      	subs	r3, r2, r3
 800a9ce:	69fa      	ldr	r2, [r7, #28]
 800a9d0:	429a      	cmp	r2, r3
 800a9d2:	d902      	bls.n	800a9da <SPI_WaitFlagStateUntilTimeout+0x56>
 800a9d4:	69fb      	ldr	r3, [r7, #28]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d13d      	bne.n	800aa56 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	685a      	ldr	r2, [r3, #4]
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a9e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	685b      	ldr	r3, [r3, #4]
 800a9ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a9f2:	d111      	bne.n	800aa18 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	689b      	ldr	r3, [r3, #8]
 800a9f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a9fc:	d004      	beq.n	800aa08 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	689b      	ldr	r3, [r3, #8]
 800aa02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa06:	d107      	bne.n	800aa18 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	681a      	ldr	r2, [r3, #0]
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aa16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa20:	d10f      	bne.n	800aa42 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	681a      	ldr	r2, [r3, #0]
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800aa30:	601a      	str	r2, [r3, #0]
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	681a      	ldr	r2, [r3, #0]
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800aa40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	2201      	movs	r2, #1
 800aa46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800aa52:	2303      	movs	r3, #3
 800aa54:	e017      	b.n	800aa86 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800aa56:	697b      	ldr	r3, [r7, #20]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d101      	bne.n	800aa60 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800aa60:	697b      	ldr	r3, [r7, #20]
 800aa62:	3b01      	subs	r3, #1
 800aa64:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	689a      	ldr	r2, [r3, #8]
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	4013      	ands	r3, r2
 800aa70:	68ba      	ldr	r2, [r7, #8]
 800aa72:	429a      	cmp	r2, r3
 800aa74:	bf0c      	ite	eq
 800aa76:	2301      	moveq	r3, #1
 800aa78:	2300      	movne	r3, #0
 800aa7a:	b2db      	uxtb	r3, r3
 800aa7c:	461a      	mov	r2, r3
 800aa7e:	79fb      	ldrb	r3, [r7, #7]
 800aa80:	429a      	cmp	r2, r3
 800aa82:	d19b      	bne.n	800a9bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800aa84:	2300      	movs	r3, #0
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	3720      	adds	r7, #32
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}
 800aa8e:	bf00      	nop
 800aa90:	20000000 	.word	0x20000000

0800aa94 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b088      	sub	sp, #32
 800aa98:	af02      	add	r7, sp, #8
 800aa9a:	60f8      	str	r0, [r7, #12]
 800aa9c:	60b9      	str	r1, [r7, #8]
 800aa9e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800aaa0:	4b1b      	ldr	r3, [pc, #108]	; (800ab10 <SPI_EndRxTxTransaction+0x7c>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	4a1b      	ldr	r2, [pc, #108]	; (800ab14 <SPI_EndRxTxTransaction+0x80>)
 800aaa6:	fba2 2303 	umull	r2, r3, r2, r3
 800aaaa:	0d5b      	lsrs	r3, r3, #21
 800aaac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800aab0:	fb02 f303 	mul.w	r3, r2, r3
 800aab4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	685b      	ldr	r3, [r3, #4]
 800aaba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aabe:	d112      	bne.n	800aae6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	9300      	str	r3, [sp, #0]
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	2200      	movs	r2, #0
 800aac8:	2180      	movs	r1, #128	; 0x80
 800aaca:	68f8      	ldr	r0, [r7, #12]
 800aacc:	f7ff ff5a 	bl	800a984 <SPI_WaitFlagStateUntilTimeout>
 800aad0:	4603      	mov	r3, r0
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d016      	beq.n	800ab04 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aada:	f043 0220 	orr.w	r2, r3, #32
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800aae2:	2303      	movs	r3, #3
 800aae4:	e00f      	b.n	800ab06 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d00a      	beq.n	800ab02 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800aaec:	697b      	ldr	r3, [r7, #20]
 800aaee:	3b01      	subs	r3, #1
 800aaf0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	689b      	ldr	r3, [r3, #8]
 800aaf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aafc:	2b80      	cmp	r3, #128	; 0x80
 800aafe:	d0f2      	beq.n	800aae6 <SPI_EndRxTxTransaction+0x52>
 800ab00:	e000      	b.n	800ab04 <SPI_EndRxTxTransaction+0x70>
        break;
 800ab02:	bf00      	nop
  }

  return HAL_OK;
 800ab04:	2300      	movs	r3, #0
}
 800ab06:	4618      	mov	r0, r3
 800ab08:	3718      	adds	r7, #24
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bd80      	pop	{r7, pc}
 800ab0e:	bf00      	nop
 800ab10:	20000000 	.word	0x20000000
 800ab14:	165e9f81 	.word	0x165e9f81

0800ab18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b082      	sub	sp, #8
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d101      	bne.n	800ab2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ab26:	2301      	movs	r3, #1
 800ab28:	e031      	b.n	800ab8e <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ab30:	b2db      	uxtb	r3, r3
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d106      	bne.n	800ab44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2200      	movs	r2, #0
 800ab3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	f7f8 fabe 	bl	80030c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2202      	movs	r2, #2
 800ab48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681a      	ldr	r2, [r3, #0]
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	3304      	adds	r3, #4
 800ab54:	4619      	mov	r1, r3
 800ab56:	4610      	mov	r0, r2
 800ab58:	f000 ff16 	bl	800b988 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2201      	movs	r2, #1
 800ab60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2201      	movs	r2, #1
 800ab68:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2201      	movs	r2, #1
 800ab70:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2201      	movs	r2, #1
 800ab78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2201      	movs	r2, #1
 800ab80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2201      	movs	r2, #1
 800ab88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800ab8c:	2300      	movs	r3, #0
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	3708      	adds	r7, #8
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}
	...

0800ab98 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b085      	sub	sp, #20
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800aba6:	b2db      	uxtb	r3, r3
 800aba8:	2b01      	cmp	r3, #1
 800abaa:	d001      	beq.n	800abb0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800abac:	2301      	movs	r3, #1
 800abae:	e032      	b.n	800ac16 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2202      	movs	r2, #2
 800abb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abc0:	d00e      	beq.n	800abe0 <HAL_TIM_Base_Start+0x48>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	4a16      	ldr	r2, [pc, #88]	; (800ac20 <HAL_TIM_Base_Start+0x88>)
 800abc8:	4293      	cmp	r3, r2
 800abca:	d009      	beq.n	800abe0 <HAL_TIM_Base_Start+0x48>
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	4a14      	ldr	r2, [pc, #80]	; (800ac24 <HAL_TIM_Base_Start+0x8c>)
 800abd2:	4293      	cmp	r3, r2
 800abd4:	d004      	beq.n	800abe0 <HAL_TIM_Base_Start+0x48>
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	4a13      	ldr	r2, [pc, #76]	; (800ac28 <HAL_TIM_Base_Start+0x90>)
 800abdc:	4293      	cmp	r3, r2
 800abde:	d111      	bne.n	800ac04 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	689b      	ldr	r3, [r3, #8]
 800abe6:	f003 0307 	and.w	r3, r3, #7
 800abea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	2b06      	cmp	r3, #6
 800abf0:	d010      	beq.n	800ac14 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	681a      	ldr	r2, [r3, #0]
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f042 0201 	orr.w	r2, r2, #1
 800ac00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac02:	e007      	b.n	800ac14 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	681a      	ldr	r2, [r3, #0]
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	f042 0201 	orr.w	r2, r2, #1
 800ac12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ac14:	2300      	movs	r3, #0
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3714      	adds	r7, #20
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bc80      	pop	{r7}
 800ac1e:	4770      	bx	lr
 800ac20:	40000400 	.word	0x40000400
 800ac24:	40000800 	.word	0x40000800
 800ac28:	40010800 	.word	0x40010800

0800ac2c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800ac2c:	b480      	push	{r7}
 800ac2e:	b083      	sub	sp, #12
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	6a1a      	ldr	r2, [r3, #32]
 800ac3a:	f241 1311 	movw	r3, #4369	; 0x1111
 800ac3e:	4013      	ands	r3, r2
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d107      	bne.n	800ac54 <HAL_TIM_Base_Stop+0x28>
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	681a      	ldr	r2, [r3, #0]
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	f022 0201 	bic.w	r2, r2, #1
 800ac52:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2201      	movs	r2, #1
 800ac58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Return function status */
  return HAL_OK;
 800ac5c:	2300      	movs	r3, #0
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	370c      	adds	r7, #12
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bc80      	pop	{r7}
 800ac66:	4770      	bx	lr

0800ac68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b085      	sub	sp, #20
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ac76:	b2db      	uxtb	r3, r3
 800ac78:	2b01      	cmp	r3, #1
 800ac7a:	d001      	beq.n	800ac80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ac7c:	2301      	movs	r3, #1
 800ac7e:	e03a      	b.n	800acf6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2202      	movs	r2, #2
 800ac84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	68da      	ldr	r2, [r3, #12]
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f042 0201 	orr.w	r2, r2, #1
 800ac96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aca0:	d00e      	beq.n	800acc0 <HAL_TIM_Base_Start_IT+0x58>
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	4a16      	ldr	r2, [pc, #88]	; (800ad00 <HAL_TIM_Base_Start_IT+0x98>)
 800aca8:	4293      	cmp	r3, r2
 800acaa:	d009      	beq.n	800acc0 <HAL_TIM_Base_Start_IT+0x58>
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	4a14      	ldr	r2, [pc, #80]	; (800ad04 <HAL_TIM_Base_Start_IT+0x9c>)
 800acb2:	4293      	cmp	r3, r2
 800acb4:	d004      	beq.n	800acc0 <HAL_TIM_Base_Start_IT+0x58>
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	4a13      	ldr	r2, [pc, #76]	; (800ad08 <HAL_TIM_Base_Start_IT+0xa0>)
 800acbc:	4293      	cmp	r3, r2
 800acbe:	d111      	bne.n	800ace4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	689b      	ldr	r3, [r3, #8]
 800acc6:	f003 0307 	and.w	r3, r3, #7
 800acca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	2b06      	cmp	r3, #6
 800acd0:	d010      	beq.n	800acf4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	681a      	ldr	r2, [r3, #0]
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f042 0201 	orr.w	r2, r2, #1
 800ace0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ace2:	e007      	b.n	800acf4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	681a      	ldr	r2, [r3, #0]
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f042 0201 	orr.w	r2, r2, #1
 800acf2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800acf4:	2300      	movs	r3, #0
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	3714      	adds	r7, #20
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bc80      	pop	{r7}
 800acfe:	4770      	bx	lr
 800ad00:	40000400 	.word	0x40000400
 800ad04:	40000800 	.word	0x40000800
 800ad08:	40010800 	.word	0x40010800

0800ad0c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800ad0c:	b480      	push	{r7}
 800ad0e:	b083      	sub	sp, #12
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	68da      	ldr	r2, [r3, #12]
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	f022 0201 	bic.w	r2, r2, #1
 800ad22:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	6a1a      	ldr	r2, [r3, #32]
 800ad2a:	f241 1311 	movw	r3, #4369	; 0x1111
 800ad2e:	4013      	ands	r3, r2
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d107      	bne.n	800ad44 <HAL_TIM_Base_Stop_IT+0x38>
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	681a      	ldr	r2, [r3, #0]
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	f022 0201 	bic.w	r2, r2, #1
 800ad42:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2201      	movs	r2, #1
 800ad48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Return function status */
  return HAL_OK;
 800ad4c:	2300      	movs	r3, #0
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	370c      	adds	r7, #12
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bc80      	pop	{r7}
 800ad56:	4770      	bx	lr

0800ad58 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b082      	sub	sp, #8
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d101      	bne.n	800ad6a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ad66:	2301      	movs	r3, #1
 800ad68:	e031      	b.n	800adce <HAL_TIM_PWM_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ad70:	b2db      	uxtb	r3, r3
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d106      	bne.n	800ad84 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2200      	movs	r2, #0
 800ad7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	f000 f829 	bl	800add6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2202      	movs	r2, #2
 800ad88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681a      	ldr	r2, [r3, #0]
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	3304      	adds	r3, #4
 800ad94:	4619      	mov	r1, r3
 800ad96:	4610      	mov	r0, r2
 800ad98:	f000 fdf6 	bl	800b988 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2201      	movs	r2, #1
 800ada0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2201      	movs	r2, #1
 800ada8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2201      	movs	r2, #1
 800adb0:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2201      	movs	r2, #1
 800adb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2201      	movs	r2, #1
 800adc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2201      	movs	r2, #1
 800adc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800adcc:	2300      	movs	r3, #0
}
 800adce:	4618      	mov	r0, r3
 800add0:	3708      	adds	r7, #8
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}

0800add6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800add6:	b480      	push	{r7}
 800add8:	b083      	sub	sp, #12
 800adda:	af00      	add	r7, sp, #0
 800addc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800adde:	bf00      	nop
 800ade0:	370c      	adds	r7, #12
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bc80      	pop	{r7}
 800ade6:	4770      	bx	lr

0800ade8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b084      	sub	sp, #16
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
 800adf0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d109      	bne.n	800ae0c <HAL_TIM_PWM_Start+0x24>
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800adfe:	b2db      	uxtb	r3, r3
 800ae00:	2b01      	cmp	r3, #1
 800ae02:	bf14      	ite	ne
 800ae04:	2301      	movne	r3, #1
 800ae06:	2300      	moveq	r3, #0
 800ae08:	b2db      	uxtb	r3, r3
 800ae0a:	e022      	b.n	800ae52 <HAL_TIM_PWM_Start+0x6a>
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	2b04      	cmp	r3, #4
 800ae10:	d109      	bne.n	800ae26 <HAL_TIM_PWM_Start+0x3e>
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800ae18:	b2db      	uxtb	r3, r3
 800ae1a:	2b01      	cmp	r3, #1
 800ae1c:	bf14      	ite	ne
 800ae1e:	2301      	movne	r3, #1
 800ae20:	2300      	moveq	r3, #0
 800ae22:	b2db      	uxtb	r3, r3
 800ae24:	e015      	b.n	800ae52 <HAL_TIM_PWM_Start+0x6a>
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	2b08      	cmp	r3, #8
 800ae2a:	d109      	bne.n	800ae40 <HAL_TIM_PWM_Start+0x58>
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae32:	b2db      	uxtb	r3, r3
 800ae34:	2b01      	cmp	r3, #1
 800ae36:	bf14      	ite	ne
 800ae38:	2301      	movne	r3, #1
 800ae3a:	2300      	moveq	r3, #0
 800ae3c:	b2db      	uxtb	r3, r3
 800ae3e:	e008      	b.n	800ae52 <HAL_TIM_PWM_Start+0x6a>
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae46:	b2db      	uxtb	r3, r3
 800ae48:	2b01      	cmp	r3, #1
 800ae4a:	bf14      	ite	ne
 800ae4c:	2301      	movne	r3, #1
 800ae4e:	2300      	moveq	r3, #0
 800ae50:	b2db      	uxtb	r3, r3
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d001      	beq.n	800ae5a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800ae56:	2301      	movs	r3, #1
 800ae58:	e051      	b.n	800aefe <HAL_TIM_PWM_Start+0x116>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d104      	bne.n	800ae6a <HAL_TIM_PWM_Start+0x82>
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2202      	movs	r2, #2
 800ae64:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800ae68:	e013      	b.n	800ae92 <HAL_TIM_PWM_Start+0xaa>
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	2b04      	cmp	r3, #4
 800ae6e:	d104      	bne.n	800ae7a <HAL_TIM_PWM_Start+0x92>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2202      	movs	r2, #2
 800ae74:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 800ae78:	e00b      	b.n	800ae92 <HAL_TIM_PWM_Start+0xaa>
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	2b08      	cmp	r3, #8
 800ae7e:	d104      	bne.n	800ae8a <HAL_TIM_PWM_Start+0xa2>
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2202      	movs	r2, #2
 800ae84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800ae88:	e003      	b.n	800ae92 <HAL_TIM_PWM_Start+0xaa>
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2202      	movs	r2, #2
 800ae8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	2201      	movs	r2, #1
 800ae98:	6839      	ldr	r1, [r7, #0]
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	f001 f883 	bl	800bfa6 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aea8:	d00e      	beq.n	800aec8 <HAL_TIM_PWM_Start+0xe0>
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	4a16      	ldr	r2, [pc, #88]	; (800af08 <HAL_TIM_PWM_Start+0x120>)
 800aeb0:	4293      	cmp	r3, r2
 800aeb2:	d009      	beq.n	800aec8 <HAL_TIM_PWM_Start+0xe0>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	4a14      	ldr	r2, [pc, #80]	; (800af0c <HAL_TIM_PWM_Start+0x124>)
 800aeba:	4293      	cmp	r3, r2
 800aebc:	d004      	beq.n	800aec8 <HAL_TIM_PWM_Start+0xe0>
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	4a13      	ldr	r2, [pc, #76]	; (800af10 <HAL_TIM_PWM_Start+0x128>)
 800aec4:	4293      	cmp	r3, r2
 800aec6:	d111      	bne.n	800aeec <HAL_TIM_PWM_Start+0x104>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	689b      	ldr	r3, [r3, #8]
 800aece:	f003 0307 	and.w	r3, r3, #7
 800aed2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	2b06      	cmp	r3, #6
 800aed8:	d010      	beq.n	800aefc <HAL_TIM_PWM_Start+0x114>
    {
      __HAL_TIM_ENABLE(htim);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	681a      	ldr	r2, [r3, #0]
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f042 0201 	orr.w	r2, r2, #1
 800aee8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aeea:	e007      	b.n	800aefc <HAL_TIM_PWM_Start+0x114>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	681a      	ldr	r2, [r3, #0]
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	f042 0201 	orr.w	r2, r2, #1
 800aefa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800aefc:	2300      	movs	r3, #0
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3710      	adds	r7, #16
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}
 800af06:	bf00      	nop
 800af08:	40000400 	.word	0x40000400
 800af0c:	40000800 	.word	0x40000800
 800af10:	40010800 	.word	0x40010800

0800af14 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b082      	sub	sp, #8
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d101      	bne.n	800af26 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800af22:	2301      	movs	r3, #1
 800af24:	e031      	b.n	800af8a <HAL_TIM_IC_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800af2c:	b2db      	uxtb	r3, r3
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d106      	bne.n	800af40 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2200      	movs	r2, #0
 800af36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f000 f829 	bl	800af92 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2202      	movs	r2, #2
 800af44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681a      	ldr	r2, [r3, #0]
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	3304      	adds	r3, #4
 800af50:	4619      	mov	r1, r3
 800af52:	4610      	mov	r0, r2
 800af54:	f000 fd18 	bl	800b988 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2201      	movs	r2, #1
 800af5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2201      	movs	r2, #1
 800af64:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2201      	movs	r2, #1
 800af6c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2201      	movs	r2, #1
 800af74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2201      	movs	r2, #1
 800af7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2201      	movs	r2, #1
 800af84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800af88:	2300      	movs	r3, #0
}
 800af8a:	4618      	mov	r0, r3
 800af8c:	3708      	adds	r7, #8
 800af8e:	46bd      	mov	sp, r7
 800af90:	bd80      	pop	{r7, pc}

0800af92 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800af92:	b480      	push	{r7}
 800af94:	b083      	sub	sp, #12
 800af96:	af00      	add	r7, sp, #0
 800af98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800af9a:	bf00      	nop
 800af9c:	370c      	adds	r7, #12
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bc80      	pop	{r7}
 800afa2:	4770      	bx	lr

0800afa4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b084      	sub	sp, #16
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
 800afac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d104      	bne.n	800afbe <HAL_TIM_IC_Start_IT+0x1a>
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800afba:	b2db      	uxtb	r3, r3
 800afbc:	e013      	b.n	800afe6 <HAL_TIM_IC_Start_IT+0x42>
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	2b04      	cmp	r3, #4
 800afc2:	d104      	bne.n	800afce <HAL_TIM_IC_Start_IT+0x2a>
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800afca:	b2db      	uxtb	r3, r3
 800afcc:	e00b      	b.n	800afe6 <HAL_TIM_IC_Start_IT+0x42>
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	2b08      	cmp	r3, #8
 800afd2:	d104      	bne.n	800afde <HAL_TIM_IC_Start_IT+0x3a>
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800afda:	b2db      	uxtb	r3, r3
 800afdc:	e003      	b.n	800afe6 <HAL_TIM_IC_Start_IT+0x42>
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800afe4:	b2db      	uxtb	r3, r3
 800afe6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800afe8:	7bfb      	ldrb	r3, [r7, #15]
 800afea:	2b01      	cmp	r3, #1
 800afec:	d001      	beq.n	800aff2 <HAL_TIM_IC_Start_IT+0x4e>
  {
    return HAL_ERROR;
 800afee:	2301      	movs	r3, #1
 800aff0:	e097      	b.n	800b122 <HAL_TIM_IC_Start_IT+0x17e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d104      	bne.n	800b002 <HAL_TIM_IC_Start_IT+0x5e>
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2202      	movs	r2, #2
 800affc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800b000:	e013      	b.n	800b02a <HAL_TIM_IC_Start_IT+0x86>
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	2b04      	cmp	r3, #4
 800b006:	d104      	bne.n	800b012 <HAL_TIM_IC_Start_IT+0x6e>
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2202      	movs	r2, #2
 800b00c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 800b010:	e00b      	b.n	800b02a <HAL_TIM_IC_Start_IT+0x86>
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	2b08      	cmp	r3, #8
 800b016:	d104      	bne.n	800b022 <HAL_TIM_IC_Start_IT+0x7e>
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2202      	movs	r2, #2
 800b01c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800b020:	e003      	b.n	800b02a <HAL_TIM_IC_Start_IT+0x86>
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2202      	movs	r2, #2
 800b026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	2b0c      	cmp	r3, #12
 800b02e:	d841      	bhi.n	800b0b4 <HAL_TIM_IC_Start_IT+0x110>
 800b030:	a201      	add	r2, pc, #4	; (adr r2, 800b038 <HAL_TIM_IC_Start_IT+0x94>)
 800b032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b036:	bf00      	nop
 800b038:	0800b06d 	.word	0x0800b06d
 800b03c:	0800b0b5 	.word	0x0800b0b5
 800b040:	0800b0b5 	.word	0x0800b0b5
 800b044:	0800b0b5 	.word	0x0800b0b5
 800b048:	0800b07f 	.word	0x0800b07f
 800b04c:	0800b0b5 	.word	0x0800b0b5
 800b050:	0800b0b5 	.word	0x0800b0b5
 800b054:	0800b0b5 	.word	0x0800b0b5
 800b058:	0800b091 	.word	0x0800b091
 800b05c:	0800b0b5 	.word	0x0800b0b5
 800b060:	0800b0b5 	.word	0x0800b0b5
 800b064:	0800b0b5 	.word	0x0800b0b5
 800b068:	0800b0a3 	.word	0x0800b0a3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	68da      	ldr	r2, [r3, #12]
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f042 0202 	orr.w	r2, r2, #2
 800b07a:	60da      	str	r2, [r3, #12]
      break;
 800b07c:	e01b      	b.n	800b0b6 <HAL_TIM_IC_Start_IT+0x112>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	68da      	ldr	r2, [r3, #12]
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f042 0204 	orr.w	r2, r2, #4
 800b08c:	60da      	str	r2, [r3, #12]
      break;
 800b08e:	e012      	b.n	800b0b6 <HAL_TIM_IC_Start_IT+0x112>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	68da      	ldr	r2, [r3, #12]
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	f042 0208 	orr.w	r2, r2, #8
 800b09e:	60da      	str	r2, [r3, #12]
      break;
 800b0a0:	e009      	b.n	800b0b6 <HAL_TIM_IC_Start_IT+0x112>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	68da      	ldr	r2, [r3, #12]
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	f042 0210 	orr.w	r2, r2, #16
 800b0b0:	60da      	str	r2, [r3, #12]
      break;
 800b0b2:	e000      	b.n	800b0b6 <HAL_TIM_IC_Start_IT+0x112>
    }

    default:
      break;
 800b0b4:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	2201      	movs	r2, #1
 800b0bc:	6839      	ldr	r1, [r7, #0]
 800b0be:	4618      	mov	r0, r3
 800b0c0:	f000 ff71 	bl	800bfa6 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0cc:	d00e      	beq.n	800b0ec <HAL_TIM_IC_Start_IT+0x148>
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	4a16      	ldr	r2, [pc, #88]	; (800b12c <HAL_TIM_IC_Start_IT+0x188>)
 800b0d4:	4293      	cmp	r3, r2
 800b0d6:	d009      	beq.n	800b0ec <HAL_TIM_IC_Start_IT+0x148>
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	4a14      	ldr	r2, [pc, #80]	; (800b130 <HAL_TIM_IC_Start_IT+0x18c>)
 800b0de:	4293      	cmp	r3, r2
 800b0e0:	d004      	beq.n	800b0ec <HAL_TIM_IC_Start_IT+0x148>
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	4a13      	ldr	r2, [pc, #76]	; (800b134 <HAL_TIM_IC_Start_IT+0x190>)
 800b0e8:	4293      	cmp	r3, r2
 800b0ea:	d111      	bne.n	800b110 <HAL_TIM_IC_Start_IT+0x16c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	689b      	ldr	r3, [r3, #8]
 800b0f2:	f003 0307 	and.w	r3, r3, #7
 800b0f6:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0f8:	68bb      	ldr	r3, [r7, #8]
 800b0fa:	2b06      	cmp	r3, #6
 800b0fc:	d010      	beq.n	800b120 <HAL_TIM_IC_Start_IT+0x17c>
    {
      __HAL_TIM_ENABLE(htim);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	681a      	ldr	r2, [r3, #0]
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f042 0201 	orr.w	r2, r2, #1
 800b10c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b10e:	e007      	b.n	800b120 <HAL_TIM_IC_Start_IT+0x17c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	681a      	ldr	r2, [r3, #0]
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	f042 0201 	orr.w	r2, r2, #1
 800b11e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b120:	2300      	movs	r3, #0
}
 800b122:	4618      	mov	r0, r3
 800b124:	3710      	adds	r7, #16
 800b126:	46bd      	mov	sp, r7
 800b128:	bd80      	pop	{r7, pc}
 800b12a:	bf00      	nop
 800b12c:	40000400 	.word	0x40000400
 800b130:	40000800 	.word	0x40000800
 800b134:	40010800 	.word	0x40010800

0800b138 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b086      	sub	sp, #24
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
 800b140:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d101      	bne.n	800b14c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b148:	2301      	movs	r3, #1
 800b14a:	e08f      	b.n	800b26c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b152:	b2db      	uxtb	r3, r3
 800b154:	2b00      	cmp	r3, #0
 800b156:	d106      	bne.n	800b166 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2200      	movs	r2, #0
 800b15c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	f7f7 ff87 	bl	8003074 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2202      	movs	r2, #2
 800b16a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	689b      	ldr	r3, [r3, #8]
 800b174:	687a      	ldr	r2, [r7, #4]
 800b176:	6812      	ldr	r2, [r2, #0]
 800b178:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b17c:	f023 0307 	bic.w	r3, r3, #7
 800b180:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681a      	ldr	r2, [r3, #0]
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	3304      	adds	r3, #4
 800b18a:	4619      	mov	r1, r3
 800b18c:	4610      	mov	r0, r2
 800b18e:	f000 fbfb 	bl	800b988 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	689b      	ldr	r3, [r3, #8]
 800b198:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	699b      	ldr	r3, [r3, #24]
 800b1a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	6a1b      	ldr	r3, [r3, #32]
 800b1a8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	697a      	ldr	r2, [r7, #20]
 800b1b0:	4313      	orrs	r3, r2
 800b1b2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b1b4:	693b      	ldr	r3, [r7, #16]
 800b1b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b1ba:	f023 0303 	bic.w	r3, r3, #3
 800b1be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	689a      	ldr	r2, [r3, #8]
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	699b      	ldr	r3, [r3, #24]
 800b1c8:	021b      	lsls	r3, r3, #8
 800b1ca:	4313      	orrs	r3, r2
 800b1cc:	693a      	ldr	r2, [r7, #16]
 800b1ce:	4313      	orrs	r3, r2
 800b1d0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b1d2:	693b      	ldr	r3, [r7, #16]
 800b1d4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800b1d8:	f023 030c 	bic.w	r3, r3, #12
 800b1dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b1de:	693b      	ldr	r3, [r7, #16]
 800b1e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b1e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b1e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	68da      	ldr	r2, [r3, #12]
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	69db      	ldr	r3, [r3, #28]
 800b1f2:	021b      	lsls	r3, r3, #8
 800b1f4:	4313      	orrs	r3, r2
 800b1f6:	693a      	ldr	r2, [r7, #16]
 800b1f8:	4313      	orrs	r3, r2
 800b1fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	691b      	ldr	r3, [r3, #16]
 800b200:	011a      	lsls	r2, r3, #4
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	6a1b      	ldr	r3, [r3, #32]
 800b206:	031b      	lsls	r3, r3, #12
 800b208:	4313      	orrs	r3, r2
 800b20a:	693a      	ldr	r2, [r7, #16]
 800b20c:	4313      	orrs	r3, r2
 800b20e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800b216:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800b21e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	685a      	ldr	r2, [r3, #4]
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	695b      	ldr	r3, [r3, #20]
 800b228:	011b      	lsls	r3, r3, #4
 800b22a:	4313      	orrs	r3, r2
 800b22c:	68fa      	ldr	r2, [r7, #12]
 800b22e:	4313      	orrs	r3, r2
 800b230:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	697a      	ldr	r2, [r7, #20]
 800b238:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	693a      	ldr	r2, [r7, #16]
 800b240:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	68fa      	ldr	r2, [r7, #12]
 800b248:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2201      	movs	r2, #1
 800b24e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	2201      	movs	r2, #1
 800b256:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2201      	movs	r2, #1
 800b25e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2201      	movs	r2, #1
 800b266:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800b26a:	2300      	movs	r3, #0
}
 800b26c:	4618      	mov	r0, r3
 800b26e:	3718      	adds	r7, #24
 800b270:	46bd      	mov	sp, r7
 800b272:	bd80      	pop	{r7, pc}

0800b274 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b084      	sub	sp, #16
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
 800b27c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b284:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800b28c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d109      	bne.n	800b2a8 <HAL_TIM_Encoder_Start_IT+0x34>
  {
    if (channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b294:	7bfb      	ldrb	r3, [r7, #15]
 800b296:	2b01      	cmp	r3, #1
 800b298:	d001      	beq.n	800b29e <HAL_TIM_Encoder_Start_IT+0x2a>
    {
      return HAL_ERROR;
 800b29a:	2301      	movs	r3, #1
 800b29c:	e06f      	b.n	800b37e <HAL_TIM_Encoder_Start_IT+0x10a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	2202      	movs	r2, #2
 800b2a2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800b2a6:	e01c      	b.n	800b2e2 <HAL_TIM_Encoder_Start_IT+0x6e>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	2b04      	cmp	r3, #4
 800b2ac:	d109      	bne.n	800b2c2 <HAL_TIM_Encoder_Start_IT+0x4e>
  {
    if (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b2ae:	7bbb      	ldrb	r3, [r7, #14]
 800b2b0:	2b01      	cmp	r3, #1
 800b2b2:	d001      	beq.n	800b2b8 <HAL_TIM_Encoder_Start_IT+0x44>
    {
      return HAL_ERROR;
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	e062      	b.n	800b37e <HAL_TIM_Encoder_Start_IT+0x10a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2202      	movs	r2, #2
 800b2bc:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 800b2c0:	e00f      	b.n	800b2e2 <HAL_TIM_Encoder_Start_IT+0x6e>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b2c2:	7bfb      	ldrb	r3, [r7, #15]
 800b2c4:	2b01      	cmp	r3, #1
 800b2c6:	d102      	bne.n	800b2ce <HAL_TIM_Encoder_Start_IT+0x5a>
     || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b2c8:	7bbb      	ldrb	r3, [r7, #14]
 800b2ca:	2b01      	cmp	r3, #1
 800b2cc:	d001      	beq.n	800b2d2 <HAL_TIM_Encoder_Start_IT+0x5e>
    {
      return HAL_ERROR;
 800b2ce:	2301      	movs	r3, #1
 800b2d0:	e055      	b.n	800b37e <HAL_TIM_Encoder_Start_IT+0x10a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2202      	movs	r2, #2
 800b2d6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2202      	movs	r2, #2
 800b2de:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d002      	beq.n	800b2ee <HAL_TIM_Encoder_Start_IT+0x7a>
 800b2e8:	2b04      	cmp	r3, #4
 800b2ea:	d010      	beq.n	800b30e <HAL_TIM_Encoder_Start_IT+0x9a>
 800b2ec:	e01f      	b.n	800b32e <HAL_TIM_Encoder_Start_IT+0xba>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	2201      	movs	r2, #1
 800b2f4:	2100      	movs	r1, #0
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	f000 fe55 	bl	800bfa6 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	68da      	ldr	r2, [r3, #12]
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	f042 0202 	orr.w	r2, r2, #2
 800b30a:	60da      	str	r2, [r3, #12]
      break;
 800b30c:	e02e      	b.n	800b36c <HAL_TIM_Encoder_Start_IT+0xf8>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	2201      	movs	r2, #1
 800b314:	2104      	movs	r1, #4
 800b316:	4618      	mov	r0, r3
 800b318:	f000 fe45 	bl	800bfa6 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	68da      	ldr	r2, [r3, #12]
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	f042 0204 	orr.w	r2, r2, #4
 800b32a:	60da      	str	r2, [r3, #12]
      break;
 800b32c:	e01e      	b.n	800b36c <HAL_TIM_Encoder_Start_IT+0xf8>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	2201      	movs	r2, #1
 800b334:	2100      	movs	r1, #0
 800b336:	4618      	mov	r0, r3
 800b338:	f000 fe35 	bl	800bfa6 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	2201      	movs	r2, #1
 800b342:	2104      	movs	r1, #4
 800b344:	4618      	mov	r0, r3
 800b346:	f000 fe2e 	bl	800bfa6 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	68da      	ldr	r2, [r3, #12]
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	f042 0202 	orr.w	r2, r2, #2
 800b358:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	68da      	ldr	r2, [r3, #12]
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	f042 0204 	orr.w	r2, r2, #4
 800b368:	60da      	str	r2, [r3, #12]
      break;
 800b36a:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	681a      	ldr	r2, [r3, #0]
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	f042 0201 	orr.w	r2, r2, #1
 800b37a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b37c:	2300      	movs	r3, #0
}
 800b37e:	4618      	mov	r0, r3
 800b380:	3710      	adds	r7, #16
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}

0800b386 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b386:	b580      	push	{r7, lr}
 800b388:	b082      	sub	sp, #8
 800b38a:	af00      	add	r7, sp, #0
 800b38c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	691b      	ldr	r3, [r3, #16]
 800b394:	f003 0302 	and.w	r3, r3, #2
 800b398:	2b02      	cmp	r3, #2
 800b39a:	d122      	bne.n	800b3e2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	68db      	ldr	r3, [r3, #12]
 800b3a2:	f003 0302 	and.w	r3, r3, #2
 800b3a6:	2b02      	cmp	r3, #2
 800b3a8:	d11b      	bne.n	800b3e2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f06f 0202 	mvn.w	r2, #2
 800b3b2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2201      	movs	r2, #1
 800b3b8:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	699b      	ldr	r3, [r3, #24]
 800b3c0:	f003 0303 	and.w	r3, r3, #3
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d003      	beq.n	800b3d0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b3c8:	6878      	ldr	r0, [r7, #4]
 800b3ca:	f7f8 faf3 	bl	80039b4 <HAL_TIM_IC_CaptureCallback>
 800b3ce:	e005      	b.n	800b3dc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b3d0:	6878      	ldr	r0, [r7, #4]
 800b3d2:	f000 fabe 	bl	800b952 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	f000 fac4 	bl	800b964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2200      	movs	r2, #0
 800b3e0:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	691b      	ldr	r3, [r3, #16]
 800b3e8:	f003 0304 	and.w	r3, r3, #4
 800b3ec:	2b04      	cmp	r3, #4
 800b3ee:	d122      	bne.n	800b436 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	68db      	ldr	r3, [r3, #12]
 800b3f6:	f003 0304 	and.w	r3, r3, #4
 800b3fa:	2b04      	cmp	r3, #4
 800b3fc:	d11b      	bne.n	800b436 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	f06f 0204 	mvn.w	r2, #4
 800b406:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2202      	movs	r2, #2
 800b40c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	699b      	ldr	r3, [r3, #24]
 800b414:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d003      	beq.n	800b424 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f7f8 fac9 	bl	80039b4 <HAL_TIM_IC_CaptureCallback>
 800b422:	e005      	b.n	800b430 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f000 fa94 	bl	800b952 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b42a:	6878      	ldr	r0, [r7, #4]
 800b42c:	f000 fa9a 	bl	800b964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2200      	movs	r2, #0
 800b434:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	691b      	ldr	r3, [r3, #16]
 800b43c:	f003 0308 	and.w	r3, r3, #8
 800b440:	2b08      	cmp	r3, #8
 800b442:	d122      	bne.n	800b48a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	68db      	ldr	r3, [r3, #12]
 800b44a:	f003 0308 	and.w	r3, r3, #8
 800b44e:	2b08      	cmp	r3, #8
 800b450:	d11b      	bne.n	800b48a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	f06f 0208 	mvn.w	r2, #8
 800b45a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2204      	movs	r2, #4
 800b460:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	69db      	ldr	r3, [r3, #28]
 800b468:	f003 0303 	and.w	r3, r3, #3
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d003      	beq.n	800b478 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f7f8 fa9f 	bl	80039b4 <HAL_TIM_IC_CaptureCallback>
 800b476:	e005      	b.n	800b484 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	f000 fa6a 	bl	800b952 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	f000 fa70 	bl	800b964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2200      	movs	r2, #0
 800b488:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	691b      	ldr	r3, [r3, #16]
 800b490:	f003 0310 	and.w	r3, r3, #16
 800b494:	2b10      	cmp	r3, #16
 800b496:	d122      	bne.n	800b4de <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	68db      	ldr	r3, [r3, #12]
 800b49e:	f003 0310 	and.w	r3, r3, #16
 800b4a2:	2b10      	cmp	r3, #16
 800b4a4:	d11b      	bne.n	800b4de <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	f06f 0210 	mvn.w	r2, #16
 800b4ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2208      	movs	r2, #8
 800b4b4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	69db      	ldr	r3, [r3, #28]
 800b4bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d003      	beq.n	800b4cc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	f7f8 fa75 	bl	80039b4 <HAL_TIM_IC_CaptureCallback>
 800b4ca:	e005      	b.n	800b4d8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b4cc:	6878      	ldr	r0, [r7, #4]
 800b4ce:	f000 fa40 	bl	800b952 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b4d2:	6878      	ldr	r0, [r7, #4]
 800b4d4:	f000 fa46 	bl	800b964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2200      	movs	r2, #0
 800b4dc:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	691b      	ldr	r3, [r3, #16]
 800b4e4:	f003 0301 	and.w	r3, r3, #1
 800b4e8:	2b01      	cmp	r3, #1
 800b4ea:	d10e      	bne.n	800b50a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	68db      	ldr	r3, [r3, #12]
 800b4f2:	f003 0301 	and.w	r3, r3, #1
 800b4f6:	2b01      	cmp	r3, #1
 800b4f8:	d107      	bne.n	800b50a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	f06f 0201 	mvn.w	r2, #1
 800b502:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b504:	6878      	ldr	r0, [r7, #4]
 800b506:	f7f8 fa2b 	bl	8003960 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	691b      	ldr	r3, [r3, #16]
 800b510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b514:	2b40      	cmp	r3, #64	; 0x40
 800b516:	d10e      	bne.n	800b536 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	68db      	ldr	r3, [r3, #12]
 800b51e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b522:	2b40      	cmp	r3, #64	; 0x40
 800b524:	d107      	bne.n	800b536 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b52e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f000 fa20 	bl	800b976 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b536:	bf00      	nop
 800b538:	3708      	adds	r7, #8
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bd80      	pop	{r7, pc}

0800b53e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800b53e:	b580      	push	{r7, lr}
 800b540:	b084      	sub	sp, #16
 800b542:	af00      	add	r7, sp, #0
 800b544:	60f8      	str	r0, [r7, #12]
 800b546:	60b9      	str	r1, [r7, #8]
 800b548:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b550:	2b01      	cmp	r3, #1
 800b552:	d101      	bne.n	800b558 <HAL_TIM_IC_ConfigChannel+0x1a>
 800b554:	2302      	movs	r3, #2
 800b556:	e082      	b.n	800b65e <HAL_TIM_IC_ConfigChannel+0x120>
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	2201      	movs	r2, #1
 800b55c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if (Channel == TIM_CHANNEL_1)
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d11b      	bne.n	800b59e <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	6818      	ldr	r0, [r3, #0]
 800b56a:	68bb      	ldr	r3, [r7, #8]
 800b56c:	6819      	ldr	r1, [r3, #0]
 800b56e:	68bb      	ldr	r3, [r7, #8]
 800b570:	685a      	ldr	r2, [r3, #4]
 800b572:	68bb      	ldr	r3, [r7, #8]
 800b574:	68db      	ldr	r3, [r3, #12]
 800b576:	f000 fb6d 	bl	800bc54 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	699a      	ldr	r2, [r3, #24]
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	f022 020c 	bic.w	r2, r2, #12
 800b588:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	6999      	ldr	r1, [r3, #24]
 800b590:	68bb      	ldr	r3, [r7, #8]
 800b592:	689a      	ldr	r2, [r3, #8]
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	430a      	orrs	r2, r1
 800b59a:	619a      	str	r2, [r3, #24]
 800b59c:	e05a      	b.n	800b654 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2b04      	cmp	r3, #4
 800b5a2:	d11c      	bne.n	800b5de <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	6818      	ldr	r0, [r3, #0]
 800b5a8:	68bb      	ldr	r3, [r7, #8]
 800b5aa:	6819      	ldr	r1, [r3, #0]
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	685a      	ldr	r2, [r3, #4]
 800b5b0:	68bb      	ldr	r3, [r7, #8]
 800b5b2:	68db      	ldr	r3, [r3, #12]
 800b5b4:	f000 fbdc 	bl	800bd70 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	699a      	ldr	r2, [r3, #24]
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800b5c6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	6999      	ldr	r1, [r3, #24]
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	689b      	ldr	r3, [r3, #8]
 800b5d2:	021a      	lsls	r2, r3, #8
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	430a      	orrs	r2, r1
 800b5da:	619a      	str	r2, [r3, #24]
 800b5dc:	e03a      	b.n	800b654 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2b08      	cmp	r3, #8
 800b5e2:	d11b      	bne.n	800b61c <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	6818      	ldr	r0, [r3, #0]
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	6819      	ldr	r1, [r3, #0]
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	685a      	ldr	r2, [r3, #4]
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	68db      	ldr	r3, [r3, #12]
 800b5f4:	f000 fc27 	bl	800be46 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	69da      	ldr	r2, [r3, #28]
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	f022 020c 	bic.w	r2, r2, #12
 800b606:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	69d9      	ldr	r1, [r3, #28]
 800b60e:	68bb      	ldr	r3, [r7, #8]
 800b610:	689a      	ldr	r2, [r3, #8]
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	430a      	orrs	r2, r1
 800b618:	61da      	str	r2, [r3, #28]
 800b61a:	e01b      	b.n	800b654 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	6818      	ldr	r0, [r3, #0]
 800b620:	68bb      	ldr	r3, [r7, #8]
 800b622:	6819      	ldr	r1, [r3, #0]
 800b624:	68bb      	ldr	r3, [r7, #8]
 800b626:	685a      	ldr	r2, [r3, #4]
 800b628:	68bb      	ldr	r3, [r7, #8]
 800b62a:	68db      	ldr	r3, [r3, #12]
 800b62c:	f000 fc46 	bl	800bebc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	69da      	ldr	r2, [r3, #28]
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800b63e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	69d9      	ldr	r1, [r3, #28]
 800b646:	68bb      	ldr	r3, [r7, #8]
 800b648:	689b      	ldr	r3, [r3, #8]
 800b64a:	021a      	lsls	r2, r3, #8
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	430a      	orrs	r2, r1
 800b652:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	2200      	movs	r2, #0
 800b658:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800b65c:	2300      	movs	r3, #0
}
 800b65e:	4618      	mov	r0, r3
 800b660:	3710      	adds	r7, #16
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}
	...

0800b668 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b084      	sub	sp, #16
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	60f8      	str	r0, [r7, #12]
 800b670:	60b9      	str	r1, [r7, #8]
 800b672:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b67a:	2b01      	cmp	r3, #1
 800b67c:	d101      	bne.n	800b682 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800b67e:	2302      	movs	r3, #2
 800b680:	e0ac      	b.n	800b7dc <HAL_TIM_PWM_ConfigChannel+0x174>
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	2201      	movs	r2, #1
 800b686:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  switch (Channel)
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2b0c      	cmp	r3, #12
 800b68e:	f200 809f 	bhi.w	800b7d0 <HAL_TIM_PWM_ConfigChannel+0x168>
 800b692:	a201      	add	r2, pc, #4	; (adr r2, 800b698 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800b694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b698:	0800b6cd 	.word	0x0800b6cd
 800b69c:	0800b7d1 	.word	0x0800b7d1
 800b6a0:	0800b7d1 	.word	0x0800b7d1
 800b6a4:	0800b7d1 	.word	0x0800b7d1
 800b6a8:	0800b70d 	.word	0x0800b70d
 800b6ac:	0800b7d1 	.word	0x0800b7d1
 800b6b0:	0800b7d1 	.word	0x0800b7d1
 800b6b4:	0800b7d1 	.word	0x0800b7d1
 800b6b8:	0800b74f 	.word	0x0800b74f
 800b6bc:	0800b7d1 	.word	0x0800b7d1
 800b6c0:	0800b7d1 	.word	0x0800b7d1
 800b6c4:	0800b7d1 	.word	0x0800b7d1
 800b6c8:	0800b78f 	.word	0x0800b78f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	68b9      	ldr	r1, [r7, #8]
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f000 f9c8 	bl	800ba68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	699a      	ldr	r2, [r3, #24]
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	f042 0208 	orr.w	r2, r2, #8
 800b6e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	699a      	ldr	r2, [r3, #24]
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	f022 0204 	bic.w	r2, r2, #4
 800b6f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	6999      	ldr	r1, [r3, #24]
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	68da      	ldr	r2, [r3, #12]
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	430a      	orrs	r2, r1
 800b708:	619a      	str	r2, [r3, #24]
      break;
 800b70a:	e062      	b.n	800b7d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	68b9      	ldr	r1, [r7, #8]
 800b712:	4618      	mov	r0, r3
 800b714:	f000 f9e4 	bl	800bae0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	699a      	ldr	r2, [r3, #24]
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b726:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	699a      	ldr	r2, [r3, #24]
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b736:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	6999      	ldr	r1, [r3, #24]
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	68db      	ldr	r3, [r3, #12]
 800b742:	021a      	lsls	r2, r3, #8
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	430a      	orrs	r2, r1
 800b74a:	619a      	str	r2, [r3, #24]
      break;
 800b74c:	e041      	b.n	800b7d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	68b9      	ldr	r1, [r7, #8]
 800b754:	4618      	mov	r0, r3
 800b756:	f000 fa01 	bl	800bb5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	69da      	ldr	r2, [r3, #28]
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	f042 0208 	orr.w	r2, r2, #8
 800b768:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	69da      	ldr	r2, [r3, #28]
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	f022 0204 	bic.w	r2, r2, #4
 800b778:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	69d9      	ldr	r1, [r3, #28]
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	68da      	ldr	r2, [r3, #12]
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	430a      	orrs	r2, r1
 800b78a:	61da      	str	r2, [r3, #28]
      break;
 800b78c:	e021      	b.n	800b7d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	68b9      	ldr	r1, [r7, #8]
 800b794:	4618      	mov	r0, r3
 800b796:	f000 fa1e 	bl	800bbd6 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	69da      	ldr	r2, [r3, #28]
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b7a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	69da      	ldr	r2, [r3, #28]
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b7b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	69d9      	ldr	r1, [r3, #28]
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	68db      	ldr	r3, [r3, #12]
 800b7c4:	021a      	lsls	r2, r3, #8
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	430a      	orrs	r2, r1
 800b7cc:	61da      	str	r2, [r3, #28]
      break;
 800b7ce:	e000      	b.n	800b7d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800b7d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800b7da:	2300      	movs	r3, #0
}
 800b7dc:	4618      	mov	r0, r3
 800b7de:	3710      	adds	r7, #16
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bd80      	pop	{r7, pc}

0800b7e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b084      	sub	sp, #16
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
 800b7ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b7f4:	2b01      	cmp	r3, #1
 800b7f6:	d101      	bne.n	800b7fc <HAL_TIM_ConfigClockSource+0x18>
 800b7f8:	2302      	movs	r3, #2
 800b7fa:	e0a6      	b.n	800b94a <HAL_TIM_ConfigClockSource+0x166>
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2201      	movs	r2, #1
 800b800:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2202      	movs	r2, #2
 800b808:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	689b      	ldr	r3, [r3, #8]
 800b812:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b81a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b822:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	68fa      	ldr	r2, [r7, #12]
 800b82a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	2b40      	cmp	r3, #64	; 0x40
 800b832:	d067      	beq.n	800b904 <HAL_TIM_ConfigClockSource+0x120>
 800b834:	2b40      	cmp	r3, #64	; 0x40
 800b836:	d80b      	bhi.n	800b850 <HAL_TIM_ConfigClockSource+0x6c>
 800b838:	2b10      	cmp	r3, #16
 800b83a:	d073      	beq.n	800b924 <HAL_TIM_ConfigClockSource+0x140>
 800b83c:	2b10      	cmp	r3, #16
 800b83e:	d802      	bhi.n	800b846 <HAL_TIM_ConfigClockSource+0x62>
 800b840:	2b00      	cmp	r3, #0
 800b842:	d06f      	beq.n	800b924 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800b844:	e078      	b.n	800b938 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800b846:	2b20      	cmp	r3, #32
 800b848:	d06c      	beq.n	800b924 <HAL_TIM_ConfigClockSource+0x140>
 800b84a:	2b30      	cmp	r3, #48	; 0x30
 800b84c:	d06a      	beq.n	800b924 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800b84e:	e073      	b.n	800b938 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800b850:	2b70      	cmp	r3, #112	; 0x70
 800b852:	d00d      	beq.n	800b870 <HAL_TIM_ConfigClockSource+0x8c>
 800b854:	2b70      	cmp	r3, #112	; 0x70
 800b856:	d804      	bhi.n	800b862 <HAL_TIM_ConfigClockSource+0x7e>
 800b858:	2b50      	cmp	r3, #80	; 0x50
 800b85a:	d033      	beq.n	800b8c4 <HAL_TIM_ConfigClockSource+0xe0>
 800b85c:	2b60      	cmp	r3, #96	; 0x60
 800b85e:	d041      	beq.n	800b8e4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800b860:	e06a      	b.n	800b938 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800b862:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b866:	d066      	beq.n	800b936 <HAL_TIM_ConfigClockSource+0x152>
 800b868:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b86c:	d017      	beq.n	800b89e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800b86e:	e063      	b.n	800b938 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	6818      	ldr	r0, [r3, #0]
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	6899      	ldr	r1, [r3, #8]
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	685a      	ldr	r2, [r3, #4]
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	68db      	ldr	r3, [r3, #12]
 800b880:	f000 fb72 	bl	800bf68 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	689b      	ldr	r3, [r3, #8]
 800b88a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b892:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	68fa      	ldr	r2, [r7, #12]
 800b89a:	609a      	str	r2, [r3, #8]
      break;
 800b89c:	e04c      	b.n	800b938 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	6818      	ldr	r0, [r3, #0]
 800b8a2:	683b      	ldr	r3, [r7, #0]
 800b8a4:	6899      	ldr	r1, [r3, #8]
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	685a      	ldr	r2, [r3, #4]
 800b8aa:	683b      	ldr	r3, [r7, #0]
 800b8ac:	68db      	ldr	r3, [r3, #12]
 800b8ae:	f000 fb5b 	bl	800bf68 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	689a      	ldr	r2, [r3, #8]
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b8c0:	609a      	str	r2, [r3, #8]
      break;
 800b8c2:	e039      	b.n	800b938 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	6818      	ldr	r0, [r3, #0]
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	6859      	ldr	r1, [r3, #4]
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	68db      	ldr	r3, [r3, #12]
 800b8d0:	461a      	mov	r2, r3
 800b8d2:	f000 fa1f 	bl	800bd14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	2150      	movs	r1, #80	; 0x50
 800b8dc:	4618      	mov	r0, r3
 800b8de:	f000 fb29 	bl	800bf34 <TIM_ITRx_SetConfig>
      break;
 800b8e2:	e029      	b.n	800b938 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	6818      	ldr	r0, [r3, #0]
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	6859      	ldr	r1, [r3, #4]
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	68db      	ldr	r3, [r3, #12]
 800b8f0:	461a      	mov	r2, r3
 800b8f2:	f000 fa79 	bl	800bde8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	2160      	movs	r1, #96	; 0x60
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	f000 fb19 	bl	800bf34 <TIM_ITRx_SetConfig>
      break;
 800b902:	e019      	b.n	800b938 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	6818      	ldr	r0, [r3, #0]
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	6859      	ldr	r1, [r3, #4]
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	68db      	ldr	r3, [r3, #12]
 800b910:	461a      	mov	r2, r3
 800b912:	f000 f9ff 	bl	800bd14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	2140      	movs	r1, #64	; 0x40
 800b91c:	4618      	mov	r0, r3
 800b91e:	f000 fb09 	bl	800bf34 <TIM_ITRx_SetConfig>
      break;
 800b922:	e009      	b.n	800b938 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681a      	ldr	r2, [r3, #0]
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	4619      	mov	r1, r3
 800b92e:	4610      	mov	r0, r2
 800b930:	f000 fb00 	bl	800bf34 <TIM_ITRx_SetConfig>
        break;
 800b934:	e000      	b.n	800b938 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800b936:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2201      	movs	r2, #1
 800b93c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	2200      	movs	r2, #0
 800b944:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800b948:	2300      	movs	r3, #0
}
 800b94a:	4618      	mov	r0, r3
 800b94c:	3710      	adds	r7, #16
 800b94e:	46bd      	mov	sp, r7
 800b950:	bd80      	pop	{r7, pc}

0800b952 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b952:	b480      	push	{r7}
 800b954:	b083      	sub	sp, #12
 800b956:	af00      	add	r7, sp, #0
 800b958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b95a:	bf00      	nop
 800b95c:	370c      	adds	r7, #12
 800b95e:	46bd      	mov	sp, r7
 800b960:	bc80      	pop	{r7}
 800b962:	4770      	bx	lr

0800b964 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b964:	b480      	push	{r7}
 800b966:	b083      	sub	sp, #12
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b96c:	bf00      	nop
 800b96e:	370c      	adds	r7, #12
 800b970:	46bd      	mov	sp, r7
 800b972:	bc80      	pop	{r7}
 800b974:	4770      	bx	lr

0800b976 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b976:	b480      	push	{r7}
 800b978:	b083      	sub	sp, #12
 800b97a:	af00      	add	r7, sp, #0
 800b97c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b97e:	bf00      	nop
 800b980:	370c      	adds	r7, #12
 800b982:	46bd      	mov	sp, r7
 800b984:	bc80      	pop	{r7}
 800b986:	4770      	bx	lr

0800b988 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b988:	b480      	push	{r7}
 800b98a:	b085      	sub	sp, #20
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
 800b990:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b99e:	d00f      	beq.n	800b9c0 <TIM_Base_SetConfig+0x38>
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	4a2b      	ldr	r2, [pc, #172]	; (800ba50 <TIM_Base_SetConfig+0xc8>)
 800b9a4:	4293      	cmp	r3, r2
 800b9a6:	d00b      	beq.n	800b9c0 <TIM_Base_SetConfig+0x38>
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	4a2a      	ldr	r2, [pc, #168]	; (800ba54 <TIM_Base_SetConfig+0xcc>)
 800b9ac:	4293      	cmp	r3, r2
 800b9ae:	d007      	beq.n	800b9c0 <TIM_Base_SetConfig+0x38>
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	4a29      	ldr	r2, [pc, #164]	; (800ba58 <TIM_Base_SetConfig+0xd0>)
 800b9b4:	4293      	cmp	r3, r2
 800b9b6:	d003      	beq.n	800b9c0 <TIM_Base_SetConfig+0x38>
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	4a28      	ldr	r2, [pc, #160]	; (800ba5c <TIM_Base_SetConfig+0xd4>)
 800b9bc:	4293      	cmp	r3, r2
 800b9be:	d108      	bne.n	800b9d2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	685b      	ldr	r3, [r3, #4]
 800b9cc:	68fa      	ldr	r2, [r7, #12]
 800b9ce:	4313      	orrs	r3, r2
 800b9d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9d8:	d017      	beq.n	800ba0a <TIM_Base_SetConfig+0x82>
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	4a1c      	ldr	r2, [pc, #112]	; (800ba50 <TIM_Base_SetConfig+0xc8>)
 800b9de:	4293      	cmp	r3, r2
 800b9e0:	d013      	beq.n	800ba0a <TIM_Base_SetConfig+0x82>
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	4a1b      	ldr	r2, [pc, #108]	; (800ba54 <TIM_Base_SetConfig+0xcc>)
 800b9e6:	4293      	cmp	r3, r2
 800b9e8:	d00f      	beq.n	800ba0a <TIM_Base_SetConfig+0x82>
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	4a1a      	ldr	r2, [pc, #104]	; (800ba58 <TIM_Base_SetConfig+0xd0>)
 800b9ee:	4293      	cmp	r3, r2
 800b9f0:	d00b      	beq.n	800ba0a <TIM_Base_SetConfig+0x82>
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	4a19      	ldr	r2, [pc, #100]	; (800ba5c <TIM_Base_SetConfig+0xd4>)
 800b9f6:	4293      	cmp	r3, r2
 800b9f8:	d007      	beq.n	800ba0a <TIM_Base_SetConfig+0x82>
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	4a18      	ldr	r2, [pc, #96]	; (800ba60 <TIM_Base_SetConfig+0xd8>)
 800b9fe:	4293      	cmp	r3, r2
 800ba00:	d003      	beq.n	800ba0a <TIM_Base_SetConfig+0x82>
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	4a17      	ldr	r2, [pc, #92]	; (800ba64 <TIM_Base_SetConfig+0xdc>)
 800ba06:	4293      	cmp	r3, r2
 800ba08:	d108      	bne.n	800ba1c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	68db      	ldr	r3, [r3, #12]
 800ba16:	68fa      	ldr	r2, [r7, #12]
 800ba18:	4313      	orrs	r3, r2
 800ba1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	691b      	ldr	r3, [r3, #16]
 800ba26:	4313      	orrs	r3, r2
 800ba28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	68fa      	ldr	r2, [r7, #12]
 800ba2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ba30:	683b      	ldr	r3, [r7, #0]
 800ba32:	689a      	ldr	r2, [r3, #8]
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	681a      	ldr	r2, [r3, #0]
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2201      	movs	r2, #1
 800ba44:	615a      	str	r2, [r3, #20]
}
 800ba46:	bf00      	nop
 800ba48:	3714      	adds	r7, #20
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bc80      	pop	{r7}
 800ba4e:	4770      	bx	lr
 800ba50:	40000400 	.word	0x40000400
 800ba54:	40000800 	.word	0x40000800
 800ba58:	40000c00 	.word	0x40000c00
 800ba5c:	40010800 	.word	0x40010800
 800ba60:	40010c00 	.word	0x40010c00
 800ba64:	40011000 	.word	0x40011000

0800ba68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ba68:	b480      	push	{r7}
 800ba6a:	b087      	sub	sp, #28
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
 800ba70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	6a1b      	ldr	r3, [r3, #32]
 800ba76:	f023 0201 	bic.w	r2, r3, #1
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	6a1b      	ldr	r3, [r3, #32]
 800ba82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	685b      	ldr	r3, [r3, #4]
 800ba88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	699b      	ldr	r3, [r3, #24]
 800ba8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	f023 0303 	bic.w	r3, r3, #3
 800ba9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800baa0:	683b      	ldr	r3, [r7, #0]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	68fa      	ldr	r2, [r7, #12]
 800baa6:	4313      	orrs	r3, r2
 800baa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800baaa:	697b      	ldr	r3, [r7, #20]
 800baac:	f023 0302 	bic.w	r3, r3, #2
 800bab0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	689b      	ldr	r3, [r3, #8]
 800bab6:	697a      	ldr	r2, [r7, #20]
 800bab8:	4313      	orrs	r3, r2
 800baba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	693a      	ldr	r2, [r7, #16]
 800bac0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	68fa      	ldr	r2, [r7, #12]
 800bac6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bac8:	683b      	ldr	r3, [r7, #0]
 800baca:	685a      	ldr	r2, [r3, #4]
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	697a      	ldr	r2, [r7, #20]
 800bad4:	621a      	str	r2, [r3, #32]
}
 800bad6:	bf00      	nop
 800bad8:	371c      	adds	r7, #28
 800bada:	46bd      	mov	sp, r7
 800badc:	bc80      	pop	{r7}
 800bade:	4770      	bx	lr

0800bae0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bae0:	b480      	push	{r7}
 800bae2:	b087      	sub	sp, #28
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
 800bae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	6a1b      	ldr	r3, [r3, #32]
 800baee:	f023 0210 	bic.w	r2, r3, #16
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	6a1b      	ldr	r3, [r3, #32]
 800bafa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	685b      	ldr	r3, [r3, #4]
 800bb00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	699b      	ldr	r3, [r3, #24]
 800bb06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bb0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	021b      	lsls	r3, r3, #8
 800bb1e:	68fa      	ldr	r2, [r7, #12]
 800bb20:	4313      	orrs	r3, r2
 800bb22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bb24:	697b      	ldr	r3, [r7, #20]
 800bb26:	f023 0320 	bic.w	r3, r3, #32
 800bb2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bb2c:	683b      	ldr	r3, [r7, #0]
 800bb2e:	689b      	ldr	r3, [r3, #8]
 800bb30:	011b      	lsls	r3, r3, #4
 800bb32:	697a      	ldr	r2, [r7, #20]
 800bb34:	4313      	orrs	r3, r2
 800bb36:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	693a      	ldr	r2, [r7, #16]
 800bb3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	68fa      	ldr	r2, [r7, #12]
 800bb42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	685a      	ldr	r2, [r3, #4]
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	697a      	ldr	r2, [r7, #20]
 800bb50:	621a      	str	r2, [r3, #32]
}
 800bb52:	bf00      	nop
 800bb54:	371c      	adds	r7, #28
 800bb56:	46bd      	mov	sp, r7
 800bb58:	bc80      	pop	{r7}
 800bb5a:	4770      	bx	lr

0800bb5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bb5c:	b480      	push	{r7}
 800bb5e:	b087      	sub	sp, #28
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
 800bb64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	6a1b      	ldr	r3, [r3, #32]
 800bb6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	6a1b      	ldr	r3, [r3, #32]
 800bb76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	685b      	ldr	r3, [r3, #4]
 800bb7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	69db      	ldr	r3, [r3, #28]
 800bb82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	f023 0303 	bic.w	r3, r3, #3
 800bb92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	68fa      	ldr	r2, [r7, #12]
 800bb9a:	4313      	orrs	r3, r2
 800bb9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bb9e:	697b      	ldr	r3, [r7, #20]
 800bba0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bba4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bba6:	683b      	ldr	r3, [r7, #0]
 800bba8:	689b      	ldr	r3, [r3, #8]
 800bbaa:	021b      	lsls	r3, r3, #8
 800bbac:	697a      	ldr	r2, [r7, #20]
 800bbae:	4313      	orrs	r3, r2
 800bbb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	693a      	ldr	r2, [r7, #16]
 800bbb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	68fa      	ldr	r2, [r7, #12]
 800bbbc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	685a      	ldr	r2, [r3, #4]
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	697a      	ldr	r2, [r7, #20]
 800bbca:	621a      	str	r2, [r3, #32]
}
 800bbcc:	bf00      	nop
 800bbce:	371c      	adds	r7, #28
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bc80      	pop	{r7}
 800bbd4:	4770      	bx	lr

0800bbd6 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bbd6:	b480      	push	{r7}
 800bbd8:	b087      	sub	sp, #28
 800bbda:	af00      	add	r7, sp, #0
 800bbdc:	6078      	str	r0, [r7, #4]
 800bbde:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	6a1b      	ldr	r3, [r3, #32]
 800bbe4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	6a1b      	ldr	r3, [r3, #32]
 800bbf0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	685b      	ldr	r3, [r3, #4]
 800bbf6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	69db      	ldr	r3, [r3, #28]
 800bbfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bc04:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bc0c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	021b      	lsls	r3, r3, #8
 800bc14:	68fa      	ldr	r2, [r7, #12]
 800bc16:	4313      	orrs	r3, r2
 800bc18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bc1a:	697b      	ldr	r3, [r7, #20]
 800bc1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bc20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	689b      	ldr	r3, [r3, #8]
 800bc26:	031b      	lsls	r3, r3, #12
 800bc28:	697a      	ldr	r2, [r7, #20]
 800bc2a:	4313      	orrs	r3, r2
 800bc2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	693a      	ldr	r2, [r7, #16]
 800bc32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	68fa      	ldr	r2, [r7, #12]
 800bc38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	685a      	ldr	r2, [r3, #4]
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	697a      	ldr	r2, [r7, #20]
 800bc46:	621a      	str	r2, [r3, #32]
}
 800bc48:	bf00      	nop
 800bc4a:	371c      	adds	r7, #28
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bc80      	pop	{r7}
 800bc50:	4770      	bx	lr
	...

0800bc54 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800bc54:	b480      	push	{r7}
 800bc56:	b087      	sub	sp, #28
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	60f8      	str	r0, [r7, #12]
 800bc5c:	60b9      	str	r1, [r7, #8]
 800bc5e:	607a      	str	r2, [r7, #4]
 800bc60:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	6a1b      	ldr	r3, [r3, #32]
 800bc66:	f023 0201 	bic.w	r2, r3, #1
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	699b      	ldr	r3, [r3, #24]
 800bc72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	6a1b      	ldr	r3, [r3, #32]
 800bc78:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc80:	d00f      	beq.n	800bca2 <TIM_TI1_SetConfig+0x4e>
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	4a1f      	ldr	r2, [pc, #124]	; (800bd04 <TIM_TI1_SetConfig+0xb0>)
 800bc86:	4293      	cmp	r3, r2
 800bc88:	d00b      	beq.n	800bca2 <TIM_TI1_SetConfig+0x4e>
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	4a1e      	ldr	r2, [pc, #120]	; (800bd08 <TIM_TI1_SetConfig+0xb4>)
 800bc8e:	4293      	cmp	r3, r2
 800bc90:	d007      	beq.n	800bca2 <TIM_TI1_SetConfig+0x4e>
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	4a1d      	ldr	r2, [pc, #116]	; (800bd0c <TIM_TI1_SetConfig+0xb8>)
 800bc96:	4293      	cmp	r3, r2
 800bc98:	d003      	beq.n	800bca2 <TIM_TI1_SetConfig+0x4e>
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	4a1c      	ldr	r2, [pc, #112]	; (800bd10 <TIM_TI1_SetConfig+0xbc>)
 800bc9e:	4293      	cmp	r3, r2
 800bca0:	d101      	bne.n	800bca6 <TIM_TI1_SetConfig+0x52>
 800bca2:	2301      	movs	r3, #1
 800bca4:	e000      	b.n	800bca8 <TIM_TI1_SetConfig+0x54>
 800bca6:	2300      	movs	r3, #0
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d008      	beq.n	800bcbe <TIM_TI1_SetConfig+0x6a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800bcac:	697b      	ldr	r3, [r7, #20]
 800bcae:	f023 0303 	bic.w	r3, r3, #3
 800bcb2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800bcb4:	697a      	ldr	r2, [r7, #20]
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	4313      	orrs	r3, r2
 800bcba:	617b      	str	r3, [r7, #20]
 800bcbc:	e003      	b.n	800bcc6 <TIM_TI1_SetConfig+0x72>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800bcbe:	697b      	ldr	r3, [r7, #20]
 800bcc0:	f043 0301 	orr.w	r3, r3, #1
 800bcc4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bcc6:	697b      	ldr	r3, [r7, #20]
 800bcc8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bccc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	011b      	lsls	r3, r3, #4
 800bcd2:	b2db      	uxtb	r3, r3
 800bcd4:	697a      	ldr	r2, [r7, #20]
 800bcd6:	4313      	orrs	r3, r2
 800bcd8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bcda:	693b      	ldr	r3, [r7, #16]
 800bcdc:	f023 030a 	bic.w	r3, r3, #10
 800bce0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800bce2:	68bb      	ldr	r3, [r7, #8]
 800bce4:	f003 030a 	and.w	r3, r3, #10
 800bce8:	693a      	ldr	r2, [r7, #16]
 800bcea:	4313      	orrs	r3, r2
 800bcec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	697a      	ldr	r2, [r7, #20]
 800bcf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	693a      	ldr	r2, [r7, #16]
 800bcf8:	621a      	str	r2, [r3, #32]
}
 800bcfa:	bf00      	nop
 800bcfc:	371c      	adds	r7, #28
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bc80      	pop	{r7}
 800bd02:	4770      	bx	lr
 800bd04:	40000400 	.word	0x40000400
 800bd08:	40000800 	.word	0x40000800
 800bd0c:	40000c00 	.word	0x40000c00
 800bd10:	40010800 	.word	0x40010800

0800bd14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bd14:	b480      	push	{r7}
 800bd16:	b087      	sub	sp, #28
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	60f8      	str	r0, [r7, #12]
 800bd1c:	60b9      	str	r1, [r7, #8]
 800bd1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	6a1b      	ldr	r3, [r3, #32]
 800bd24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	6a1b      	ldr	r3, [r3, #32]
 800bd2a:	f023 0201 	bic.w	r2, r3, #1
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	699b      	ldr	r3, [r3, #24]
 800bd36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bd38:	693b      	ldr	r3, [r7, #16]
 800bd3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bd3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	011b      	lsls	r3, r3, #4
 800bd44:	693a      	ldr	r2, [r7, #16]
 800bd46:	4313      	orrs	r3, r2
 800bd48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bd4a:	697b      	ldr	r3, [r7, #20]
 800bd4c:	f023 030a 	bic.w	r3, r3, #10
 800bd50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bd52:	697a      	ldr	r2, [r7, #20]
 800bd54:	68bb      	ldr	r3, [r7, #8]
 800bd56:	4313      	orrs	r3, r2
 800bd58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	693a      	ldr	r2, [r7, #16]
 800bd5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	697a      	ldr	r2, [r7, #20]
 800bd64:	621a      	str	r2, [r3, #32]
}
 800bd66:	bf00      	nop
 800bd68:	371c      	adds	r7, #28
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bc80      	pop	{r7}
 800bd6e:	4770      	bx	lr

0800bd70 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800bd70:	b480      	push	{r7}
 800bd72:	b087      	sub	sp, #28
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	60f8      	str	r0, [r7, #12]
 800bd78:	60b9      	str	r1, [r7, #8]
 800bd7a:	607a      	str	r2, [r7, #4]
 800bd7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	6a1b      	ldr	r3, [r3, #32]
 800bd82:	f023 0210 	bic.w	r2, r3, #16
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	699b      	ldr	r3, [r3, #24]
 800bd8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	6a1b      	ldr	r3, [r3, #32]
 800bd94:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800bd96:	697b      	ldr	r3, [r7, #20]
 800bd98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bd9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	021b      	lsls	r3, r3, #8
 800bda2:	697a      	ldr	r2, [r7, #20]
 800bda4:	4313      	orrs	r3, r2
 800bda6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bda8:	697b      	ldr	r3, [r7, #20]
 800bdaa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bdae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	031b      	lsls	r3, r3, #12
 800bdb4:	b29b      	uxth	r3, r3
 800bdb6:	697a      	ldr	r2, [r7, #20]
 800bdb8:	4313      	orrs	r3, r2
 800bdba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bdbc:	693b      	ldr	r3, [r7, #16]
 800bdbe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bdc2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800bdc4:	68bb      	ldr	r3, [r7, #8]
 800bdc6:	011b      	lsls	r3, r3, #4
 800bdc8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800bdcc:	693a      	ldr	r2, [r7, #16]
 800bdce:	4313      	orrs	r3, r2
 800bdd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	697a      	ldr	r2, [r7, #20]
 800bdd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	693a      	ldr	r2, [r7, #16]
 800bddc:	621a      	str	r2, [r3, #32]
}
 800bdde:	bf00      	nop
 800bde0:	371c      	adds	r7, #28
 800bde2:	46bd      	mov	sp, r7
 800bde4:	bc80      	pop	{r7}
 800bde6:	4770      	bx	lr

0800bde8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bde8:	b480      	push	{r7}
 800bdea:	b087      	sub	sp, #28
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	60f8      	str	r0, [r7, #12]
 800bdf0:	60b9      	str	r1, [r7, #8]
 800bdf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	6a1b      	ldr	r3, [r3, #32]
 800bdf8:	f023 0210 	bic.w	r2, r3, #16
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	699b      	ldr	r3, [r3, #24]
 800be04:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	6a1b      	ldr	r3, [r3, #32]
 800be0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800be0c:	697b      	ldr	r3, [r7, #20]
 800be0e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800be12:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	031b      	lsls	r3, r3, #12
 800be18:	697a      	ldr	r2, [r7, #20]
 800be1a:	4313      	orrs	r3, r2
 800be1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800be1e:	693b      	ldr	r3, [r7, #16]
 800be20:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800be24:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800be26:	68bb      	ldr	r3, [r7, #8]
 800be28:	011b      	lsls	r3, r3, #4
 800be2a:	693a      	ldr	r2, [r7, #16]
 800be2c:	4313      	orrs	r3, r2
 800be2e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	697a      	ldr	r2, [r7, #20]
 800be34:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	693a      	ldr	r2, [r7, #16]
 800be3a:	621a      	str	r2, [r3, #32]
}
 800be3c:	bf00      	nop
 800be3e:	371c      	adds	r7, #28
 800be40:	46bd      	mov	sp, r7
 800be42:	bc80      	pop	{r7}
 800be44:	4770      	bx	lr

0800be46 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800be46:	b480      	push	{r7}
 800be48:	b087      	sub	sp, #28
 800be4a:	af00      	add	r7, sp, #0
 800be4c:	60f8      	str	r0, [r7, #12]
 800be4e:	60b9      	str	r1, [r7, #8]
 800be50:	607a      	str	r2, [r7, #4]
 800be52:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	6a1b      	ldr	r3, [r3, #32]
 800be58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	69db      	ldr	r3, [r3, #28]
 800be64:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	6a1b      	ldr	r3, [r3, #32]
 800be6a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800be6c:	697b      	ldr	r3, [r7, #20]
 800be6e:	f023 0303 	bic.w	r3, r3, #3
 800be72:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800be74:	697a      	ldr	r2, [r7, #20]
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	4313      	orrs	r3, r2
 800be7a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800be7c:	697b      	ldr	r3, [r7, #20]
 800be7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800be82:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	011b      	lsls	r3, r3, #4
 800be88:	b2db      	uxtb	r3, r3
 800be8a:	697a      	ldr	r2, [r7, #20]
 800be8c:	4313      	orrs	r3, r2
 800be8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800be90:	693b      	ldr	r3, [r7, #16]
 800be92:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800be96:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800be98:	68bb      	ldr	r3, [r7, #8]
 800be9a:	021b      	lsls	r3, r3, #8
 800be9c:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800bea0:	693a      	ldr	r2, [r7, #16]
 800bea2:	4313      	orrs	r3, r2
 800bea4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	697a      	ldr	r2, [r7, #20]
 800beaa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	693a      	ldr	r2, [r7, #16]
 800beb0:	621a      	str	r2, [r3, #32]
}
 800beb2:	bf00      	nop
 800beb4:	371c      	adds	r7, #28
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bc80      	pop	{r7}
 800beba:	4770      	bx	lr

0800bebc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800bebc:	b480      	push	{r7}
 800bebe:	b087      	sub	sp, #28
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	60f8      	str	r0, [r7, #12]
 800bec4:	60b9      	str	r1, [r7, #8]
 800bec6:	607a      	str	r2, [r7, #4]
 800bec8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	6a1b      	ldr	r3, [r3, #32]
 800bece:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	69db      	ldr	r3, [r3, #28]
 800beda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	6a1b      	ldr	r3, [r3, #32]
 800bee0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800bee2:	697b      	ldr	r3, [r7, #20]
 800bee4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bee8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	021b      	lsls	r3, r3, #8
 800beee:	697a      	ldr	r2, [r7, #20]
 800bef0:	4313      	orrs	r3, r2
 800bef2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800bef4:	697b      	ldr	r3, [r7, #20]
 800bef6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800befa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800befc:	683b      	ldr	r3, [r7, #0]
 800befe:	031b      	lsls	r3, r3, #12
 800bf00:	b29b      	uxth	r3, r3
 800bf02:	697a      	ldr	r2, [r7, #20]
 800bf04:	4313      	orrs	r3, r2
 800bf06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800bf08:	693b      	ldr	r3, [r7, #16]
 800bf0a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800bf0e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800bf10:	68bb      	ldr	r3, [r7, #8]
 800bf12:	031b      	lsls	r3, r3, #12
 800bf14:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800bf18:	693a      	ldr	r2, [r7, #16]
 800bf1a:	4313      	orrs	r3, r2
 800bf1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	697a      	ldr	r2, [r7, #20]
 800bf22:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	693a      	ldr	r2, [r7, #16]
 800bf28:	621a      	str	r2, [r3, #32]
}
 800bf2a:	bf00      	nop
 800bf2c:	371c      	adds	r7, #28
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bc80      	pop	{r7}
 800bf32:	4770      	bx	lr

0800bf34 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bf34:	b480      	push	{r7}
 800bf36:	b085      	sub	sp, #20
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
 800bf3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	689b      	ldr	r3, [r3, #8]
 800bf42:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf4a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bf4c:	683a      	ldr	r2, [r7, #0]
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	4313      	orrs	r3, r2
 800bf52:	f043 0307 	orr.w	r3, r3, #7
 800bf56:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	68fa      	ldr	r2, [r7, #12]
 800bf5c:	609a      	str	r2, [r3, #8]
}
 800bf5e:	bf00      	nop
 800bf60:	3714      	adds	r7, #20
 800bf62:	46bd      	mov	sp, r7
 800bf64:	bc80      	pop	{r7}
 800bf66:	4770      	bx	lr

0800bf68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bf68:	b480      	push	{r7}
 800bf6a:	b087      	sub	sp, #28
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	60f8      	str	r0, [r7, #12]
 800bf70:	60b9      	str	r1, [r7, #8]
 800bf72:	607a      	str	r2, [r7, #4]
 800bf74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	689b      	ldr	r3, [r3, #8]
 800bf7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bf7c:	697b      	ldr	r3, [r7, #20]
 800bf7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bf82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bf84:	683b      	ldr	r3, [r7, #0]
 800bf86:	021a      	lsls	r2, r3, #8
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	431a      	orrs	r2, r3
 800bf8c:	68bb      	ldr	r3, [r7, #8]
 800bf8e:	4313      	orrs	r3, r2
 800bf90:	697a      	ldr	r2, [r7, #20]
 800bf92:	4313      	orrs	r3, r2
 800bf94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	697a      	ldr	r2, [r7, #20]
 800bf9a:	609a      	str	r2, [r3, #8]
}
 800bf9c:	bf00      	nop
 800bf9e:	371c      	adds	r7, #28
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bc80      	pop	{r7}
 800bfa4:	4770      	bx	lr

0800bfa6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bfa6:	b480      	push	{r7}
 800bfa8:	b087      	sub	sp, #28
 800bfaa:	af00      	add	r7, sp, #0
 800bfac:	60f8      	str	r0, [r7, #12]
 800bfae:	60b9      	str	r1, [r7, #8]
 800bfb0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bfb2:	68bb      	ldr	r3, [r7, #8]
 800bfb4:	f003 031f 	and.w	r3, r3, #31
 800bfb8:	2201      	movs	r2, #1
 800bfba:	fa02 f303 	lsl.w	r3, r2, r3
 800bfbe:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	6a1a      	ldr	r2, [r3, #32]
 800bfc4:	697b      	ldr	r3, [r7, #20]
 800bfc6:	43db      	mvns	r3, r3
 800bfc8:	401a      	ands	r2, r3
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	6a1a      	ldr	r2, [r3, #32]
 800bfd2:	68bb      	ldr	r3, [r7, #8]
 800bfd4:	f003 031f 	and.w	r3, r3, #31
 800bfd8:	6879      	ldr	r1, [r7, #4]
 800bfda:	fa01 f303 	lsl.w	r3, r1, r3
 800bfde:	431a      	orrs	r2, r3
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	621a      	str	r2, [r3, #32]
}
 800bfe4:	bf00      	nop
 800bfe6:	371c      	adds	r7, #28
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bc80      	pop	{r7}
 800bfec:	4770      	bx	lr
	...

0800bff0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bff0:	b480      	push	{r7}
 800bff2:	b085      	sub	sp, #20
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
 800bff8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c000:	2b01      	cmp	r3, #1
 800c002:	d101      	bne.n	800c008 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c004:	2302      	movs	r3, #2
 800c006:	e046      	b.n	800c096 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2201      	movs	r2, #1
 800c00c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2202      	movs	r2, #2
 800c014:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	685b      	ldr	r3, [r3, #4]
 800c01e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	689b      	ldr	r3, [r3, #8]
 800c026:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c02e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	68fa      	ldr	r2, [r7, #12]
 800c036:	4313      	orrs	r3, r2
 800c038:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	68fa      	ldr	r2, [r7, #12]
 800c040:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c04a:	d00e      	beq.n	800c06a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	4a13      	ldr	r2, [pc, #76]	; (800c0a0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800c052:	4293      	cmp	r3, r2
 800c054:	d009      	beq.n	800c06a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	4a12      	ldr	r2, [pc, #72]	; (800c0a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800c05c:	4293      	cmp	r3, r2
 800c05e:	d004      	beq.n	800c06a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	4a10      	ldr	r2, [pc, #64]	; (800c0a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800c066:	4293      	cmp	r3, r2
 800c068:	d10c      	bne.n	800c084 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c06a:	68bb      	ldr	r3, [r7, #8]
 800c06c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c070:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	685b      	ldr	r3, [r3, #4]
 800c076:	68ba      	ldr	r2, [r7, #8]
 800c078:	4313      	orrs	r3, r2
 800c07a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	68ba      	ldr	r2, [r7, #8]
 800c082:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2201      	movs	r2, #1
 800c088:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	2200      	movs	r2, #0
 800c090:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800c094:	2300      	movs	r3, #0
}
 800c096:	4618      	mov	r0, r3
 800c098:	3714      	adds	r7, #20
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bc80      	pop	{r7}
 800c09e:	4770      	bx	lr
 800c0a0:	40000400 	.word	0x40000400
 800c0a4:	40000800 	.word	0x40000800
 800c0a8:	40010800 	.word	0x40010800

0800c0ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b082      	sub	sp, #8
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d101      	bne.n	800c0be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c0ba:	2301      	movs	r3, #1
 800c0bc:	e03f      	b.n	800c13e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c0c4:	b2db      	uxtb	r3, r3
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d106      	bne.n	800c0d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c0d2:	6878      	ldr	r0, [r7, #4]
 800c0d4:	f7f7 f9f4 	bl	80034c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2224      	movs	r2, #36	; 0x24
 800c0dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	68da      	ldr	r2, [r3, #12]
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c0ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c0f0:	6878      	ldr	r0, [r7, #4]
 800c0f2:	f000 fb91 	bl	800c818 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	691a      	ldr	r2, [r3, #16]
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c104:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	695a      	ldr	r2, [r3, #20]
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c114:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	68da      	ldr	r2, [r3, #12]
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c124:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	2200      	movs	r2, #0
 800c12a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2220      	movs	r2, #32
 800c130:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2220      	movs	r2, #32
 800c138:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800c13c:	2300      	movs	r3, #0
}
 800c13e:	4618      	mov	r0, r3
 800c140:	3708      	adds	r7, #8
 800c142:	46bd      	mov	sp, r7
 800c144:	bd80      	pop	{r7, pc}

0800c146 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c146:	b580      	push	{r7, lr}
 800c148:	b088      	sub	sp, #32
 800c14a:	af02      	add	r7, sp, #8
 800c14c:	60f8      	str	r0, [r7, #12]
 800c14e:	60b9      	str	r1, [r7, #8]
 800c150:	603b      	str	r3, [r7, #0]
 800c152:	4613      	mov	r3, r2
 800c154:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800c156:	2300      	movs	r3, #0
 800c158:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c160:	b2db      	uxtb	r3, r3
 800c162:	2b20      	cmp	r3, #32
 800c164:	f040 8083 	bne.w	800c26e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800c168:	68bb      	ldr	r3, [r7, #8]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d002      	beq.n	800c174 <HAL_UART_Transmit+0x2e>
 800c16e:	88fb      	ldrh	r3, [r7, #6]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d101      	bne.n	800c178 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800c174:	2301      	movs	r3, #1
 800c176:	e07b      	b.n	800c270 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c17e:	2b01      	cmp	r3, #1
 800c180:	d101      	bne.n	800c186 <HAL_UART_Transmit+0x40>
 800c182:	2302      	movs	r3, #2
 800c184:	e074      	b.n	800c270 <HAL_UART_Transmit+0x12a>
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	2201      	movs	r2, #1
 800c18a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	2200      	movs	r2, #0
 800c192:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	2221      	movs	r2, #33	; 0x21
 800c198:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800c19c:	f7fa fd06 	bl	8006bac <HAL_GetTick>
 800c1a0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	88fa      	ldrh	r2, [r7, #6]
 800c1a6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	88fa      	ldrh	r2, [r7, #6]
 800c1ac:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800c1b6:	e042      	b.n	800c23e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c1bc:	b29b      	uxth	r3, r3
 800c1be:	3b01      	subs	r3, #1
 800c1c0:	b29a      	uxth	r2, r3
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	689b      	ldr	r3, [r3, #8]
 800c1ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c1ce:	d122      	bne.n	800c216 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	9300      	str	r3, [sp, #0]
 800c1d4:	697b      	ldr	r3, [r7, #20]
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	2180      	movs	r1, #128	; 0x80
 800c1da:	68f8      	ldr	r0, [r7, #12]
 800c1dc:	f000 f9b2 	bl	800c544 <UART_WaitOnFlagUntilTimeout>
 800c1e0:	4603      	mov	r3, r0
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d001      	beq.n	800c1ea <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800c1e6:	2303      	movs	r3, #3
 800c1e8:	e042      	b.n	800c270 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800c1ea:	68bb      	ldr	r3, [r7, #8]
 800c1ec:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800c1ee:	693b      	ldr	r3, [r7, #16]
 800c1f0:	881b      	ldrh	r3, [r3, #0]
 800c1f2:	461a      	mov	r2, r3
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c1fc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	691b      	ldr	r3, [r3, #16]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d103      	bne.n	800c20e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800c206:	68bb      	ldr	r3, [r7, #8]
 800c208:	3302      	adds	r3, #2
 800c20a:	60bb      	str	r3, [r7, #8]
 800c20c:	e017      	b.n	800c23e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800c20e:	68bb      	ldr	r3, [r7, #8]
 800c210:	3301      	adds	r3, #1
 800c212:	60bb      	str	r3, [r7, #8]
 800c214:	e013      	b.n	800c23e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	9300      	str	r3, [sp, #0]
 800c21a:	697b      	ldr	r3, [r7, #20]
 800c21c:	2200      	movs	r2, #0
 800c21e:	2180      	movs	r1, #128	; 0x80
 800c220:	68f8      	ldr	r0, [r7, #12]
 800c222:	f000 f98f 	bl	800c544 <UART_WaitOnFlagUntilTimeout>
 800c226:	4603      	mov	r3, r0
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d001      	beq.n	800c230 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800c22c:	2303      	movs	r3, #3
 800c22e:	e01f      	b.n	800c270 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	1c5a      	adds	r2, r3, #1
 800c234:	60ba      	str	r2, [r7, #8]
 800c236:	781a      	ldrb	r2, [r3, #0]
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c242:	b29b      	uxth	r3, r3
 800c244:	2b00      	cmp	r3, #0
 800c246:	d1b7      	bne.n	800c1b8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c248:	683b      	ldr	r3, [r7, #0]
 800c24a:	9300      	str	r3, [sp, #0]
 800c24c:	697b      	ldr	r3, [r7, #20]
 800c24e:	2200      	movs	r2, #0
 800c250:	2140      	movs	r1, #64	; 0x40
 800c252:	68f8      	ldr	r0, [r7, #12]
 800c254:	f000 f976 	bl	800c544 <UART_WaitOnFlagUntilTimeout>
 800c258:	4603      	mov	r3, r0
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d001      	beq.n	800c262 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800c25e:	2303      	movs	r3, #3
 800c260:	e006      	b.n	800c270 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	2220      	movs	r2, #32
 800c266:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800c26a:	2300      	movs	r3, #0
 800c26c:	e000      	b.n	800c270 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800c26e:	2302      	movs	r3, #2
  }
}
 800c270:	4618      	mov	r0, r3
 800c272:	3718      	adds	r7, #24
 800c274:	46bd      	mov	sp, r7
 800c276:	bd80      	pop	{r7, pc}

0800c278 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c278:	b480      	push	{r7}
 800c27a:	b085      	sub	sp, #20
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	60f8      	str	r0, [r7, #12]
 800c280:	60b9      	str	r1, [r7, #8]
 800c282:	4613      	mov	r3, r2
 800c284:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c28c:	b2db      	uxtb	r3, r3
 800c28e:	2b20      	cmp	r3, #32
 800c290:	d140      	bne.n	800c314 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d002      	beq.n	800c29e <HAL_UART_Receive_IT+0x26>
 800c298:	88fb      	ldrh	r3, [r7, #6]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d101      	bne.n	800c2a2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800c29e:	2301      	movs	r3, #1
 800c2a0:	e039      	b.n	800c316 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c2a8:	2b01      	cmp	r3, #1
 800c2aa:	d101      	bne.n	800c2b0 <HAL_UART_Receive_IT+0x38>
 800c2ac:	2302      	movs	r3, #2
 800c2ae:	e032      	b.n	800c316 <HAL_UART_Receive_IT+0x9e>
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	2201      	movs	r2, #1
 800c2b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	68ba      	ldr	r2, [r7, #8]
 800c2bc:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	88fa      	ldrh	r2, [r7, #6]
 800c2c2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	88fa      	ldrh	r2, [r7, #6]
 800c2c8:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	2222      	movs	r2, #34	; 0x22
 800c2d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	2200      	movs	r2, #0
 800c2dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	68da      	ldr	r2, [r3, #12]
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c2ee:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	695a      	ldr	r2, [r3, #20]
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	f042 0201 	orr.w	r2, r2, #1
 800c2fe:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	68da      	ldr	r2, [r3, #12]
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	f042 0220 	orr.w	r2, r2, #32
 800c30e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800c310:	2300      	movs	r3, #0
 800c312:	e000      	b.n	800c316 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800c314:	2302      	movs	r3, #2
  }
}
 800c316:	4618      	mov	r0, r3
 800c318:	3714      	adds	r7, #20
 800c31a:	46bd      	mov	sp, r7
 800c31c:	bc80      	pop	{r7}
 800c31e:	4770      	bx	lr

0800c320 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b088      	sub	sp, #32
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	68db      	ldr	r3, [r3, #12]
 800c336:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	695b      	ldr	r3, [r3, #20]
 800c33e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800c340:	2300      	movs	r3, #0
 800c342:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800c344:	2300      	movs	r3, #0
 800c346:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c348:	69fb      	ldr	r3, [r7, #28]
 800c34a:	f003 030f 	and.w	r3, r3, #15
 800c34e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800c350:	693b      	ldr	r3, [r7, #16]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d10d      	bne.n	800c372 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c356:	69fb      	ldr	r3, [r7, #28]
 800c358:	f003 0320 	and.w	r3, r3, #32
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d008      	beq.n	800c372 <HAL_UART_IRQHandler+0x52>
 800c360:	69bb      	ldr	r3, [r7, #24]
 800c362:	f003 0320 	and.w	r3, r3, #32
 800c366:	2b00      	cmp	r3, #0
 800c368:	d003      	beq.n	800c372 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800c36a:	6878      	ldr	r0, [r7, #4]
 800c36c:	f000 f9d2 	bl	800c714 <UART_Receive_IT>
      return;
 800c370:	e0d1      	b.n	800c516 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c372:	693b      	ldr	r3, [r7, #16]
 800c374:	2b00      	cmp	r3, #0
 800c376:	f000 80b0 	beq.w	800c4da <HAL_UART_IRQHandler+0x1ba>
 800c37a:	697b      	ldr	r3, [r7, #20]
 800c37c:	f003 0301 	and.w	r3, r3, #1
 800c380:	2b00      	cmp	r3, #0
 800c382:	d105      	bne.n	800c390 <HAL_UART_IRQHandler+0x70>
 800c384:	69bb      	ldr	r3, [r7, #24]
 800c386:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	f000 80a5 	beq.w	800c4da <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c390:	69fb      	ldr	r3, [r7, #28]
 800c392:	f003 0301 	and.w	r3, r3, #1
 800c396:	2b00      	cmp	r3, #0
 800c398:	d00a      	beq.n	800c3b0 <HAL_UART_IRQHandler+0x90>
 800c39a:	69bb      	ldr	r3, [r7, #24]
 800c39c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d005      	beq.n	800c3b0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3a8:	f043 0201 	orr.w	r2, r3, #1
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c3b0:	69fb      	ldr	r3, [r7, #28]
 800c3b2:	f003 0304 	and.w	r3, r3, #4
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d00a      	beq.n	800c3d0 <HAL_UART_IRQHandler+0xb0>
 800c3ba:	697b      	ldr	r3, [r7, #20]
 800c3bc:	f003 0301 	and.w	r3, r3, #1
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d005      	beq.n	800c3d0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3c8:	f043 0202 	orr.w	r2, r3, #2
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c3d0:	69fb      	ldr	r3, [r7, #28]
 800c3d2:	f003 0302 	and.w	r3, r3, #2
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d00a      	beq.n	800c3f0 <HAL_UART_IRQHandler+0xd0>
 800c3da:	697b      	ldr	r3, [r7, #20]
 800c3dc:	f003 0301 	and.w	r3, r3, #1
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d005      	beq.n	800c3f0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3e8:	f043 0204 	orr.w	r2, r3, #4
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800c3f0:	69fb      	ldr	r3, [r7, #28]
 800c3f2:	f003 0308 	and.w	r3, r3, #8
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d00f      	beq.n	800c41a <HAL_UART_IRQHandler+0xfa>
 800c3fa:	69bb      	ldr	r3, [r7, #24]
 800c3fc:	f003 0320 	and.w	r3, r3, #32
 800c400:	2b00      	cmp	r3, #0
 800c402:	d104      	bne.n	800c40e <HAL_UART_IRQHandler+0xee>
 800c404:	697b      	ldr	r3, [r7, #20]
 800c406:	f003 0301 	and.w	r3, r3, #1
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d005      	beq.n	800c41a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c412:	f043 0208 	orr.w	r2, r3, #8
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d078      	beq.n	800c514 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c422:	69fb      	ldr	r3, [r7, #28]
 800c424:	f003 0320 	and.w	r3, r3, #32
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d007      	beq.n	800c43c <HAL_UART_IRQHandler+0x11c>
 800c42c:	69bb      	ldr	r3, [r7, #24]
 800c42e:	f003 0320 	and.w	r3, r3, #32
 800c432:	2b00      	cmp	r3, #0
 800c434:	d002      	beq.n	800c43c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800c436:	6878      	ldr	r0, [r7, #4]
 800c438:	f000 f96c 	bl	800c714 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	695b      	ldr	r3, [r3, #20]
 800c442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c446:	2b40      	cmp	r3, #64	; 0x40
 800c448:	bf0c      	ite	eq
 800c44a:	2301      	moveq	r3, #1
 800c44c:	2300      	movne	r3, #0
 800c44e:	b2db      	uxtb	r3, r3
 800c450:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c456:	f003 0308 	and.w	r3, r3, #8
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d102      	bne.n	800c464 <HAL_UART_IRQHandler+0x144>
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d031      	beq.n	800c4c8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c464:	6878      	ldr	r0, [r7, #4]
 800c466:	f000 f8b7 	bl	800c5d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	695b      	ldr	r3, [r3, #20]
 800c470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c474:	2b40      	cmp	r3, #64	; 0x40
 800c476:	d123      	bne.n	800c4c0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	695a      	ldr	r2, [r3, #20]
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c486:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d013      	beq.n	800c4b8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c494:	4a21      	ldr	r2, [pc, #132]	; (800c51c <HAL_UART_IRQHandler+0x1fc>)
 800c496:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c49c:	4618      	mov	r0, r3
 800c49e:	f7fb fb77 	bl	8007b90 <HAL_DMA_Abort_IT>
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d016      	beq.n	800c4d6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4ae:	687a      	ldr	r2, [r7, #4]
 800c4b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800c4b2:	4610      	mov	r0, r2
 800c4b4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4b6:	e00e      	b.n	800c4d6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c4b8:	6878      	ldr	r0, [r7, #4]
 800c4ba:	f000 f83a 	bl	800c532 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4be:	e00a      	b.n	800c4d6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c4c0:	6878      	ldr	r0, [r7, #4]
 800c4c2:	f000 f836 	bl	800c532 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4c6:	e006      	b.n	800c4d6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c4c8:	6878      	ldr	r0, [r7, #4]
 800c4ca:	f000 f832 	bl	800c532 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800c4d4:	e01e      	b.n	800c514 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4d6:	bf00      	nop
    return;
 800c4d8:	e01c      	b.n	800c514 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c4da:	69fb      	ldr	r3, [r7, #28]
 800c4dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d008      	beq.n	800c4f6 <HAL_UART_IRQHandler+0x1d6>
 800c4e4:	69bb      	ldr	r3, [r7, #24]
 800c4e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d003      	beq.n	800c4f6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800c4ee:	6878      	ldr	r0, [r7, #4]
 800c4f0:	f000 f8a3 	bl	800c63a <UART_Transmit_IT>
    return;
 800c4f4:	e00f      	b.n	800c516 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c4f6:	69fb      	ldr	r3, [r7, #28]
 800c4f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d00a      	beq.n	800c516 <HAL_UART_IRQHandler+0x1f6>
 800c500:	69bb      	ldr	r3, [r7, #24]
 800c502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c506:	2b00      	cmp	r3, #0
 800c508:	d005      	beq.n	800c516 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800c50a:	6878      	ldr	r0, [r7, #4]
 800c50c:	f000 f8ea 	bl	800c6e4 <UART_EndTransmit_IT>
    return;
 800c510:	bf00      	nop
 800c512:	e000      	b.n	800c516 <HAL_UART_IRQHandler+0x1f6>
    return;
 800c514:	bf00      	nop
  }
}
 800c516:	3720      	adds	r7, #32
 800c518:	46bd      	mov	sp, r7
 800c51a:	bd80      	pop	{r7, pc}
 800c51c:	0800c613 	.word	0x0800c613

0800c520 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c520:	b480      	push	{r7}
 800c522:	b083      	sub	sp, #12
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c528:	bf00      	nop
 800c52a:	370c      	adds	r7, #12
 800c52c:	46bd      	mov	sp, r7
 800c52e:	bc80      	pop	{r7}
 800c530:	4770      	bx	lr

0800c532 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c532:	b480      	push	{r7}
 800c534:	b083      	sub	sp, #12
 800c536:	af00      	add	r7, sp, #0
 800c538:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c53a:	bf00      	nop
 800c53c:	370c      	adds	r7, #12
 800c53e:	46bd      	mov	sp, r7
 800c540:	bc80      	pop	{r7}
 800c542:	4770      	bx	lr

0800c544 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b084      	sub	sp, #16
 800c548:	af00      	add	r7, sp, #0
 800c54a:	60f8      	str	r0, [r7, #12]
 800c54c:	60b9      	str	r1, [r7, #8]
 800c54e:	603b      	str	r3, [r7, #0]
 800c550:	4613      	mov	r3, r2
 800c552:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c554:	e02c      	b.n	800c5b0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c556:	69bb      	ldr	r3, [r7, #24]
 800c558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c55c:	d028      	beq.n	800c5b0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c55e:	69bb      	ldr	r3, [r7, #24]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d007      	beq.n	800c574 <UART_WaitOnFlagUntilTimeout+0x30>
 800c564:	f7fa fb22 	bl	8006bac <HAL_GetTick>
 800c568:	4602      	mov	r2, r0
 800c56a:	683b      	ldr	r3, [r7, #0]
 800c56c:	1ad3      	subs	r3, r2, r3
 800c56e:	69ba      	ldr	r2, [r7, #24]
 800c570:	429a      	cmp	r2, r3
 800c572:	d21d      	bcs.n	800c5b0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	68da      	ldr	r2, [r3, #12]
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c582:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	695a      	ldr	r2, [r3, #20]
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	f022 0201 	bic.w	r2, r2, #1
 800c592:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	2220      	movs	r2, #32
 800c598:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	2220      	movs	r2, #32
 800c5a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800c5ac:	2303      	movs	r3, #3
 800c5ae:	e00f      	b.n	800c5d0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	681a      	ldr	r2, [r3, #0]
 800c5b6:	68bb      	ldr	r3, [r7, #8]
 800c5b8:	4013      	ands	r3, r2
 800c5ba:	68ba      	ldr	r2, [r7, #8]
 800c5bc:	429a      	cmp	r2, r3
 800c5be:	bf0c      	ite	eq
 800c5c0:	2301      	moveq	r3, #1
 800c5c2:	2300      	movne	r3, #0
 800c5c4:	b2db      	uxtb	r3, r3
 800c5c6:	461a      	mov	r2, r3
 800c5c8:	79fb      	ldrb	r3, [r7, #7]
 800c5ca:	429a      	cmp	r2, r3
 800c5cc:	d0c3      	beq.n	800c556 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c5ce:	2300      	movs	r3, #0
}
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	3710      	adds	r7, #16
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	bd80      	pop	{r7, pc}

0800c5d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c5d8:	b480      	push	{r7}
 800c5da:	b083      	sub	sp, #12
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	68da      	ldr	r2, [r3, #12]
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c5ee:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	695a      	ldr	r2, [r3, #20]
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	f022 0201 	bic.w	r2, r2, #1
 800c5fe:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	2220      	movs	r2, #32
 800c604:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800c608:	bf00      	nop
 800c60a:	370c      	adds	r7, #12
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bc80      	pop	{r7}
 800c610:	4770      	bx	lr

0800c612 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c612:	b580      	push	{r7, lr}
 800c614:	b084      	sub	sp, #16
 800c616:	af00      	add	r7, sp, #0
 800c618:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c61e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	2200      	movs	r2, #0
 800c624:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	2200      	movs	r2, #0
 800c62a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c62c:	68f8      	ldr	r0, [r7, #12]
 800c62e:	f7ff ff80 	bl	800c532 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c632:	bf00      	nop
 800c634:	3710      	adds	r7, #16
 800c636:	46bd      	mov	sp, r7
 800c638:	bd80      	pop	{r7, pc}

0800c63a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c63a:	b480      	push	{r7}
 800c63c:	b085      	sub	sp, #20
 800c63e:	af00      	add	r7, sp, #0
 800c640:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c648:	b2db      	uxtb	r3, r3
 800c64a:	2b21      	cmp	r3, #33	; 0x21
 800c64c:	d144      	bne.n	800c6d8 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	689b      	ldr	r3, [r3, #8]
 800c652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c656:	d11a      	bne.n	800c68e <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	6a1b      	ldr	r3, [r3, #32]
 800c65c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	881b      	ldrh	r3, [r3, #0]
 800c662:	461a      	mov	r2, r3
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c66c:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	691b      	ldr	r3, [r3, #16]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d105      	bne.n	800c682 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	6a1b      	ldr	r3, [r3, #32]
 800c67a:	1c9a      	adds	r2, r3, #2
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	621a      	str	r2, [r3, #32]
 800c680:	e00e      	b.n	800c6a0 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	6a1b      	ldr	r3, [r3, #32]
 800c686:	1c5a      	adds	r2, r3, #1
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	621a      	str	r2, [r3, #32]
 800c68c:	e008      	b.n	800c6a0 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	6a1b      	ldr	r3, [r3, #32]
 800c692:	1c59      	adds	r1, r3, #1
 800c694:	687a      	ldr	r2, [r7, #4]
 800c696:	6211      	str	r1, [r2, #32]
 800c698:	781a      	ldrb	r2, [r3, #0]
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c6a4:	b29b      	uxth	r3, r3
 800c6a6:	3b01      	subs	r3, #1
 800c6a8:	b29b      	uxth	r3, r3
 800c6aa:	687a      	ldr	r2, [r7, #4]
 800c6ac:	4619      	mov	r1, r3
 800c6ae:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d10f      	bne.n	800c6d4 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	68da      	ldr	r2, [r3, #12]
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c6c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	68da      	ldr	r2, [r3, #12]
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c6d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	e000      	b.n	800c6da <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800c6d8:	2302      	movs	r3, #2
  }
}
 800c6da:	4618      	mov	r0, r3
 800c6dc:	3714      	adds	r7, #20
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	bc80      	pop	{r7}
 800c6e2:	4770      	bx	lr

0800c6e4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b082      	sub	sp, #8
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	68da      	ldr	r2, [r3, #12]
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c6fa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2220      	movs	r2, #32
 800c700:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c704:	6878      	ldr	r0, [r7, #4]
 800c706:	f7ff ff0b 	bl	800c520 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c70a:	2300      	movs	r3, #0
}
 800c70c:	4618      	mov	r0, r3
 800c70e:	3708      	adds	r7, #8
 800c710:	46bd      	mov	sp, r7
 800c712:	bd80      	pop	{r7, pc}

0800c714 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b084      	sub	sp, #16
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c722:	b2db      	uxtb	r3, r3
 800c724:	2b22      	cmp	r3, #34	; 0x22
 800c726:	d171      	bne.n	800c80c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	689b      	ldr	r3, [r3, #8]
 800c72c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c730:	d123      	bne.n	800c77a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c736:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	691b      	ldr	r3, [r3, #16]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d10e      	bne.n	800c75e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	685b      	ldr	r3, [r3, #4]
 800c746:	b29b      	uxth	r3, r3
 800c748:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c74c:	b29a      	uxth	r2, r3
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c756:	1c9a      	adds	r2, r3, #2
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	629a      	str	r2, [r3, #40]	; 0x28
 800c75c:	e029      	b.n	800c7b2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	685b      	ldr	r3, [r3, #4]
 800c764:	b29b      	uxth	r3, r3
 800c766:	b2db      	uxtb	r3, r3
 800c768:	b29a      	uxth	r2, r3
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c772:	1c5a      	adds	r2, r3, #1
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	629a      	str	r2, [r3, #40]	; 0x28
 800c778:	e01b      	b.n	800c7b2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	691b      	ldr	r3, [r3, #16]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d10a      	bne.n	800c798 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	6858      	ldr	r0, [r3, #4]
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c78c:	1c59      	adds	r1, r3, #1
 800c78e:	687a      	ldr	r2, [r7, #4]
 800c790:	6291      	str	r1, [r2, #40]	; 0x28
 800c792:	b2c2      	uxtb	r2, r0
 800c794:	701a      	strb	r2, [r3, #0]
 800c796:	e00c      	b.n	800c7b2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	685b      	ldr	r3, [r3, #4]
 800c79e:	b2da      	uxtb	r2, r3
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7a4:	1c58      	adds	r0, r3, #1
 800c7a6:	6879      	ldr	r1, [r7, #4]
 800c7a8:	6288      	str	r0, [r1, #40]	; 0x28
 800c7aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c7ae:	b2d2      	uxtb	r2, r2
 800c7b0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c7b6:	b29b      	uxth	r3, r3
 800c7b8:	3b01      	subs	r3, #1
 800c7ba:	b29b      	uxth	r3, r3
 800c7bc:	687a      	ldr	r2, [r7, #4]
 800c7be:	4619      	mov	r1, r3
 800c7c0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d120      	bne.n	800c808 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	68da      	ldr	r2, [r3, #12]
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	f022 0220 	bic.w	r2, r2, #32
 800c7d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	68da      	ldr	r2, [r3, #12]
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c7e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	695a      	ldr	r2, [r3, #20]
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	f022 0201 	bic.w	r2, r2, #1
 800c7f4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	2220      	movs	r2, #32
 800c7fa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800c7fe:	6878      	ldr	r0, [r7, #4]
 800c800:	f7f5 ff38 	bl	8002674 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800c804:	2300      	movs	r3, #0
 800c806:	e002      	b.n	800c80e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800c808:	2300      	movs	r3, #0
 800c80a:	e000      	b.n	800c80e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800c80c:	2302      	movs	r3, #2
  }
}
 800c80e:	4618      	mov	r0, r3
 800c810:	3710      	adds	r7, #16
 800c812:	46bd      	mov	sp, r7
 800c814:	bd80      	pop	{r7, pc}
	...

0800c818 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b084      	sub	sp, #16
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	691b      	ldr	r3, [r3, #16]
 800c826:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	68da      	ldr	r2, [r3, #12]
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	430a      	orrs	r2, r1
 800c834:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	689a      	ldr	r2, [r3, #8]
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	691b      	ldr	r3, [r3, #16]
 800c83e:	431a      	orrs	r2, r3
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	695b      	ldr	r3, [r3, #20]
 800c844:	431a      	orrs	r2, r3
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	69db      	ldr	r3, [r3, #28]
 800c84a:	4313      	orrs	r3, r2
 800c84c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	68db      	ldr	r3, [r3, #12]
 800c854:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800c858:	f023 030c 	bic.w	r3, r3, #12
 800c85c:	687a      	ldr	r2, [r7, #4]
 800c85e:	6812      	ldr	r2, [r2, #0]
 800c860:	68b9      	ldr	r1, [r7, #8]
 800c862:	430b      	orrs	r3, r1
 800c864:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	695b      	ldr	r3, [r3, #20]
 800c86c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	699a      	ldr	r2, [r3, #24]
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	430a      	orrs	r2, r1
 800c87a:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	4a55      	ldr	r2, [pc, #340]	; (800c9d8 <UART_SetConfig+0x1c0>)
 800c882:	4293      	cmp	r3, r2
 800c884:	d103      	bne.n	800c88e <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c886:	f7fd fe13 	bl	800a4b0 <HAL_RCC_GetPCLK2Freq>
 800c88a:	60f8      	str	r0, [r7, #12]
 800c88c:	e002      	b.n	800c894 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c88e:	f7fd fdfb 	bl	800a488 <HAL_RCC_GetPCLK1Freq>
 800c892:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	69db      	ldr	r3, [r3, #28]
 800c898:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c89c:	d14c      	bne.n	800c938 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c89e:	68fa      	ldr	r2, [r7, #12]
 800c8a0:	4613      	mov	r3, r2
 800c8a2:	009b      	lsls	r3, r3, #2
 800c8a4:	4413      	add	r3, r2
 800c8a6:	009a      	lsls	r2, r3, #2
 800c8a8:	441a      	add	r2, r3
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	685b      	ldr	r3, [r3, #4]
 800c8ae:	005b      	lsls	r3, r3, #1
 800c8b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c8b4:	4a49      	ldr	r2, [pc, #292]	; (800c9dc <UART_SetConfig+0x1c4>)
 800c8b6:	fba2 2303 	umull	r2, r3, r2, r3
 800c8ba:	095b      	lsrs	r3, r3, #5
 800c8bc:	0119      	lsls	r1, r3, #4
 800c8be:	68fa      	ldr	r2, [r7, #12]
 800c8c0:	4613      	mov	r3, r2
 800c8c2:	009b      	lsls	r3, r3, #2
 800c8c4:	4413      	add	r3, r2
 800c8c6:	009a      	lsls	r2, r3, #2
 800c8c8:	441a      	add	r2, r3
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	685b      	ldr	r3, [r3, #4]
 800c8ce:	005b      	lsls	r3, r3, #1
 800c8d0:	fbb2 f2f3 	udiv	r2, r2, r3
 800c8d4:	4b41      	ldr	r3, [pc, #260]	; (800c9dc <UART_SetConfig+0x1c4>)
 800c8d6:	fba3 0302 	umull	r0, r3, r3, r2
 800c8da:	095b      	lsrs	r3, r3, #5
 800c8dc:	2064      	movs	r0, #100	; 0x64
 800c8de:	fb00 f303 	mul.w	r3, r0, r3
 800c8e2:	1ad3      	subs	r3, r2, r3
 800c8e4:	00db      	lsls	r3, r3, #3
 800c8e6:	3332      	adds	r3, #50	; 0x32
 800c8e8:	4a3c      	ldr	r2, [pc, #240]	; (800c9dc <UART_SetConfig+0x1c4>)
 800c8ea:	fba2 2303 	umull	r2, r3, r2, r3
 800c8ee:	095b      	lsrs	r3, r3, #5
 800c8f0:	005b      	lsls	r3, r3, #1
 800c8f2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c8f6:	4419      	add	r1, r3
 800c8f8:	68fa      	ldr	r2, [r7, #12]
 800c8fa:	4613      	mov	r3, r2
 800c8fc:	009b      	lsls	r3, r3, #2
 800c8fe:	4413      	add	r3, r2
 800c900:	009a      	lsls	r2, r3, #2
 800c902:	441a      	add	r2, r3
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	685b      	ldr	r3, [r3, #4]
 800c908:	005b      	lsls	r3, r3, #1
 800c90a:	fbb2 f2f3 	udiv	r2, r2, r3
 800c90e:	4b33      	ldr	r3, [pc, #204]	; (800c9dc <UART_SetConfig+0x1c4>)
 800c910:	fba3 0302 	umull	r0, r3, r3, r2
 800c914:	095b      	lsrs	r3, r3, #5
 800c916:	2064      	movs	r0, #100	; 0x64
 800c918:	fb00 f303 	mul.w	r3, r0, r3
 800c91c:	1ad3      	subs	r3, r2, r3
 800c91e:	00db      	lsls	r3, r3, #3
 800c920:	3332      	adds	r3, #50	; 0x32
 800c922:	4a2e      	ldr	r2, [pc, #184]	; (800c9dc <UART_SetConfig+0x1c4>)
 800c924:	fba2 2303 	umull	r2, r3, r2, r3
 800c928:	095b      	lsrs	r3, r3, #5
 800c92a:	f003 0207 	and.w	r2, r3, #7
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	440a      	add	r2, r1
 800c934:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c936:	e04a      	b.n	800c9ce <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c938:	68fa      	ldr	r2, [r7, #12]
 800c93a:	4613      	mov	r3, r2
 800c93c:	009b      	lsls	r3, r3, #2
 800c93e:	4413      	add	r3, r2
 800c940:	009a      	lsls	r2, r3, #2
 800c942:	441a      	add	r2, r3
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	685b      	ldr	r3, [r3, #4]
 800c948:	009b      	lsls	r3, r3, #2
 800c94a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c94e:	4a23      	ldr	r2, [pc, #140]	; (800c9dc <UART_SetConfig+0x1c4>)
 800c950:	fba2 2303 	umull	r2, r3, r2, r3
 800c954:	095b      	lsrs	r3, r3, #5
 800c956:	0119      	lsls	r1, r3, #4
 800c958:	68fa      	ldr	r2, [r7, #12]
 800c95a:	4613      	mov	r3, r2
 800c95c:	009b      	lsls	r3, r3, #2
 800c95e:	4413      	add	r3, r2
 800c960:	009a      	lsls	r2, r3, #2
 800c962:	441a      	add	r2, r3
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	685b      	ldr	r3, [r3, #4]
 800c968:	009b      	lsls	r3, r3, #2
 800c96a:	fbb2 f2f3 	udiv	r2, r2, r3
 800c96e:	4b1b      	ldr	r3, [pc, #108]	; (800c9dc <UART_SetConfig+0x1c4>)
 800c970:	fba3 0302 	umull	r0, r3, r3, r2
 800c974:	095b      	lsrs	r3, r3, #5
 800c976:	2064      	movs	r0, #100	; 0x64
 800c978:	fb00 f303 	mul.w	r3, r0, r3
 800c97c:	1ad3      	subs	r3, r2, r3
 800c97e:	011b      	lsls	r3, r3, #4
 800c980:	3332      	adds	r3, #50	; 0x32
 800c982:	4a16      	ldr	r2, [pc, #88]	; (800c9dc <UART_SetConfig+0x1c4>)
 800c984:	fba2 2303 	umull	r2, r3, r2, r3
 800c988:	095b      	lsrs	r3, r3, #5
 800c98a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c98e:	4419      	add	r1, r3
 800c990:	68fa      	ldr	r2, [r7, #12]
 800c992:	4613      	mov	r3, r2
 800c994:	009b      	lsls	r3, r3, #2
 800c996:	4413      	add	r3, r2
 800c998:	009a      	lsls	r2, r3, #2
 800c99a:	441a      	add	r2, r3
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	685b      	ldr	r3, [r3, #4]
 800c9a0:	009b      	lsls	r3, r3, #2
 800c9a2:	fbb2 f2f3 	udiv	r2, r2, r3
 800c9a6:	4b0d      	ldr	r3, [pc, #52]	; (800c9dc <UART_SetConfig+0x1c4>)
 800c9a8:	fba3 0302 	umull	r0, r3, r3, r2
 800c9ac:	095b      	lsrs	r3, r3, #5
 800c9ae:	2064      	movs	r0, #100	; 0x64
 800c9b0:	fb00 f303 	mul.w	r3, r0, r3
 800c9b4:	1ad3      	subs	r3, r2, r3
 800c9b6:	011b      	lsls	r3, r3, #4
 800c9b8:	3332      	adds	r3, #50	; 0x32
 800c9ba:	4a08      	ldr	r2, [pc, #32]	; (800c9dc <UART_SetConfig+0x1c4>)
 800c9bc:	fba2 2303 	umull	r2, r3, r2, r3
 800c9c0:	095b      	lsrs	r3, r3, #5
 800c9c2:	f003 020f 	and.w	r2, r3, #15
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	440a      	add	r2, r1
 800c9cc:	609a      	str	r2, [r3, #8]
}
 800c9ce:	bf00      	nop
 800c9d0:	3710      	adds	r7, #16
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	bd80      	pop	{r7, pc}
 800c9d6:	bf00      	nop
 800c9d8:	40013800 	.word	0x40013800
 800c9dc:	51eb851f 	.word	0x51eb851f

0800c9e0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800c9e0:	b480      	push	{r7}
 800c9e2:	b085      	sub	sp, #20
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c9f0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800c9f4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	b29a      	uxth	r2, r3
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800ca00:	2300      	movs	r3, #0
}
 800ca02:	4618      	mov	r0, r3
 800ca04:	3714      	adds	r7, #20
 800ca06:	46bd      	mov	sp, r7
 800ca08:	bc80      	pop	{r7}
 800ca0a:	4770      	bx	lr

0800ca0c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800ca0c:	b480      	push	{r7}
 800ca0e:	b085      	sub	sp, #20
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800ca14:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800ca18:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800ca20:	b29a      	uxth	r2, r3
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	b29b      	uxth	r3, r3
 800ca26:	43db      	mvns	r3, r3
 800ca28:	b29b      	uxth	r3, r3
 800ca2a:	4013      	ands	r3, r2
 800ca2c:	b29a      	uxth	r2, r3
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800ca34:	2300      	movs	r3, #0
}
 800ca36:	4618      	mov	r0, r3
 800ca38:	3714      	adds	r7, #20
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	bc80      	pop	{r7}
 800ca3e:	4770      	bx	lr

0800ca40 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800ca40:	b084      	sub	sp, #16
 800ca42:	b480      	push	{r7}
 800ca44:	b083      	sub	sp, #12
 800ca46:	af00      	add	r7, sp, #0
 800ca48:	6078      	str	r0, [r7, #4]
 800ca4a:	f107 0014 	add.w	r0, r7, #20
 800ca4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2201      	movs	r2, #1
 800ca56:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	2200      	movs	r2, #0
 800ca66:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800ca72:	2300      	movs	r3, #0
}
 800ca74:	4618      	mov	r0, r3
 800ca76:	370c      	adds	r7, #12
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bc80      	pop	{r7}
 800ca7c:	b004      	add	sp, #16
 800ca7e:	4770      	bx	lr

0800ca80 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ca80:	b480      	push	{r7}
 800ca82:	b09b      	sub	sp, #108	; 0x6c
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
 800ca88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800ca90:	687a      	ldr	r2, [r7, #4]
 800ca92:	683b      	ldr	r3, [r7, #0]
 800ca94:	781b      	ldrb	r3, [r3, #0]
 800ca96:	009b      	lsls	r3, r3, #2
 800ca98:	4413      	add	r3, r2
 800ca9a:	881b      	ldrh	r3, [r3, #0]
 800ca9c:	b29b      	uxth	r3, r3
 800ca9e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800caa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800caa6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	78db      	ldrb	r3, [r3, #3]
 800caae:	2b03      	cmp	r3, #3
 800cab0:	d81f      	bhi.n	800caf2 <USB_ActivateEndpoint+0x72>
 800cab2:	a201      	add	r2, pc, #4	; (adr r2, 800cab8 <USB_ActivateEndpoint+0x38>)
 800cab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cab8:	0800cac9 	.word	0x0800cac9
 800cabc:	0800cae5 	.word	0x0800cae5
 800cac0:	0800cafb 	.word	0x0800cafb
 800cac4:	0800cad7 	.word	0x0800cad7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800cac8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800cacc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cad0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800cad4:	e012      	b.n	800cafc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800cad6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800cada:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800cade:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800cae2:	e00b      	b.n	800cafc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800cae4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800cae8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800caec:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800caf0:	e004      	b.n	800cafc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800caf2:	2301      	movs	r3, #1
 800caf4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 800caf8:	e000      	b.n	800cafc <USB_ActivateEndpoint+0x7c>
      break;
 800cafa:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800cafc:	687a      	ldr	r2, [r7, #4]
 800cafe:	683b      	ldr	r3, [r7, #0]
 800cb00:	781b      	ldrb	r3, [r3, #0]
 800cb02:	009b      	lsls	r3, r3, #2
 800cb04:	441a      	add	r2, r3
 800cb06:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800cb0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cb0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cb12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cb16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb1a:	b29b      	uxth	r3, r3
 800cb1c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800cb1e:	687a      	ldr	r2, [r7, #4]
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	781b      	ldrb	r3, [r3, #0]
 800cb24:	009b      	lsls	r3, r3, #2
 800cb26:	4413      	add	r3, r2
 800cb28:	881b      	ldrh	r3, [r3, #0]
 800cb2a:	b29b      	uxth	r3, r3
 800cb2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cb30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb34:	b29a      	uxth	r2, r3
 800cb36:	683b      	ldr	r3, [r7, #0]
 800cb38:	781b      	ldrb	r3, [r3, #0]
 800cb3a:	b29b      	uxth	r3, r3
 800cb3c:	4313      	orrs	r3, r2
 800cb3e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800cb42:	687a      	ldr	r2, [r7, #4]
 800cb44:	683b      	ldr	r3, [r7, #0]
 800cb46:	781b      	ldrb	r3, [r3, #0]
 800cb48:	009b      	lsls	r3, r3, #2
 800cb4a:	441a      	add	r2, r3
 800cb4c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800cb50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cb54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cb58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cb5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb60:	b29b      	uxth	r3, r3
 800cb62:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800cb64:	683b      	ldr	r3, [r7, #0]
 800cb66:	7b1b      	ldrb	r3, [r3, #12]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	f040 8149 	bne.w	800ce00 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	785b      	ldrb	r3, [r3, #1]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	f000 8084 	beq.w	800cc80 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	617b      	str	r3, [r7, #20]
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cb82:	b29b      	uxth	r3, r3
 800cb84:	461a      	mov	r2, r3
 800cb86:	697b      	ldr	r3, [r7, #20]
 800cb88:	4413      	add	r3, r2
 800cb8a:	617b      	str	r3, [r7, #20]
 800cb8c:	683b      	ldr	r3, [r7, #0]
 800cb8e:	781b      	ldrb	r3, [r3, #0]
 800cb90:	011a      	lsls	r2, r3, #4
 800cb92:	697b      	ldr	r3, [r7, #20]
 800cb94:	4413      	add	r3, r2
 800cb96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cb9a:	613b      	str	r3, [r7, #16]
 800cb9c:	683b      	ldr	r3, [r7, #0]
 800cb9e:	88db      	ldrh	r3, [r3, #6]
 800cba0:	085b      	lsrs	r3, r3, #1
 800cba2:	b29b      	uxth	r3, r3
 800cba4:	005b      	lsls	r3, r3, #1
 800cba6:	b29a      	uxth	r2, r3
 800cba8:	693b      	ldr	r3, [r7, #16]
 800cbaa:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cbac:	687a      	ldr	r2, [r7, #4]
 800cbae:	683b      	ldr	r3, [r7, #0]
 800cbb0:	781b      	ldrb	r3, [r3, #0]
 800cbb2:	009b      	lsls	r3, r3, #2
 800cbb4:	4413      	add	r3, r2
 800cbb6:	881b      	ldrh	r3, [r3, #0]
 800cbb8:	81fb      	strh	r3, [r7, #14]
 800cbba:	89fb      	ldrh	r3, [r7, #14]
 800cbbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d01b      	beq.n	800cbfc <USB_ActivateEndpoint+0x17c>
 800cbc4:	687a      	ldr	r2, [r7, #4]
 800cbc6:	683b      	ldr	r3, [r7, #0]
 800cbc8:	781b      	ldrb	r3, [r3, #0]
 800cbca:	009b      	lsls	r3, r3, #2
 800cbcc:	4413      	add	r3, r2
 800cbce:	881b      	ldrh	r3, [r3, #0]
 800cbd0:	b29b      	uxth	r3, r3
 800cbd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cbd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cbda:	81bb      	strh	r3, [r7, #12]
 800cbdc:	687a      	ldr	r2, [r7, #4]
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	781b      	ldrb	r3, [r3, #0]
 800cbe2:	009b      	lsls	r3, r3, #2
 800cbe4:	441a      	add	r2, r3
 800cbe6:	89bb      	ldrh	r3, [r7, #12]
 800cbe8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cbec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cbf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cbf4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800cbf8:	b29b      	uxth	r3, r3
 800cbfa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800cbfc:	683b      	ldr	r3, [r7, #0]
 800cbfe:	78db      	ldrb	r3, [r3, #3]
 800cc00:	2b01      	cmp	r3, #1
 800cc02:	d020      	beq.n	800cc46 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800cc04:	687a      	ldr	r2, [r7, #4]
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	781b      	ldrb	r3, [r3, #0]
 800cc0a:	009b      	lsls	r3, r3, #2
 800cc0c:	4413      	add	r3, r2
 800cc0e:	881b      	ldrh	r3, [r3, #0]
 800cc10:	b29b      	uxth	r3, r3
 800cc12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cc16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc1a:	813b      	strh	r3, [r7, #8]
 800cc1c:	893b      	ldrh	r3, [r7, #8]
 800cc1e:	f083 0320 	eor.w	r3, r3, #32
 800cc22:	813b      	strh	r3, [r7, #8]
 800cc24:	687a      	ldr	r2, [r7, #4]
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	781b      	ldrb	r3, [r3, #0]
 800cc2a:	009b      	lsls	r3, r3, #2
 800cc2c:	441a      	add	r2, r3
 800cc2e:	893b      	ldrh	r3, [r7, #8]
 800cc30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cc34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cc38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cc3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc40:	b29b      	uxth	r3, r3
 800cc42:	8013      	strh	r3, [r2, #0]
 800cc44:	e27f      	b.n	800d146 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cc46:	687a      	ldr	r2, [r7, #4]
 800cc48:	683b      	ldr	r3, [r7, #0]
 800cc4a:	781b      	ldrb	r3, [r3, #0]
 800cc4c:	009b      	lsls	r3, r3, #2
 800cc4e:	4413      	add	r3, r2
 800cc50:	881b      	ldrh	r3, [r3, #0]
 800cc52:	b29b      	uxth	r3, r3
 800cc54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cc58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc5c:	817b      	strh	r3, [r7, #10]
 800cc5e:	687a      	ldr	r2, [r7, #4]
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	781b      	ldrb	r3, [r3, #0]
 800cc64:	009b      	lsls	r3, r3, #2
 800cc66:	441a      	add	r2, r3
 800cc68:	897b      	ldrh	r3, [r7, #10]
 800cc6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cc6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cc72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cc76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc7a:	b29b      	uxth	r3, r3
 800cc7c:	8013      	strh	r3, [r2, #0]
 800cc7e:	e262      	b.n	800d146 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cc8a:	b29b      	uxth	r3, r3
 800cc8c:	461a      	mov	r2, r3
 800cc8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc90:	4413      	add	r3, r2
 800cc92:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc94:	683b      	ldr	r3, [r7, #0]
 800cc96:	781b      	ldrb	r3, [r3, #0]
 800cc98:	011a      	lsls	r2, r3, #4
 800cc9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc9c:	4413      	add	r3, r2
 800cc9e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800cca2:	62bb      	str	r3, [r7, #40]	; 0x28
 800cca4:	683b      	ldr	r3, [r7, #0]
 800cca6:	88db      	ldrh	r3, [r3, #6]
 800cca8:	085b      	lsrs	r3, r3, #1
 800ccaa:	b29b      	uxth	r3, r3
 800ccac:	005b      	lsls	r3, r3, #1
 800ccae:	b29a      	uxth	r2, r3
 800ccb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccb2:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	627b      	str	r3, [r7, #36]	; 0x24
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ccbe:	b29b      	uxth	r3, r3
 800ccc0:	461a      	mov	r2, r3
 800ccc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccc4:	4413      	add	r3, r2
 800ccc6:	627b      	str	r3, [r7, #36]	; 0x24
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	781b      	ldrb	r3, [r3, #0]
 800cccc:	011a      	lsls	r2, r3, #4
 800ccce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccd0:	4413      	add	r3, r2
 800ccd2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ccd6:	623b      	str	r3, [r7, #32]
 800ccd8:	683b      	ldr	r3, [r7, #0]
 800ccda:	691b      	ldr	r3, [r3, #16]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d112      	bne.n	800cd06 <USB_ActivateEndpoint+0x286>
 800cce0:	6a3b      	ldr	r3, [r7, #32]
 800cce2:	881b      	ldrh	r3, [r3, #0]
 800cce4:	b29b      	uxth	r3, r3
 800cce6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ccea:	b29a      	uxth	r2, r3
 800ccec:	6a3b      	ldr	r3, [r7, #32]
 800ccee:	801a      	strh	r2, [r3, #0]
 800ccf0:	6a3b      	ldr	r3, [r7, #32]
 800ccf2:	881b      	ldrh	r3, [r3, #0]
 800ccf4:	b29b      	uxth	r3, r3
 800ccf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ccfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ccfe:	b29a      	uxth	r2, r3
 800cd00:	6a3b      	ldr	r3, [r7, #32]
 800cd02:	801a      	strh	r2, [r3, #0]
 800cd04:	e02f      	b.n	800cd66 <USB_ActivateEndpoint+0x2e6>
 800cd06:	683b      	ldr	r3, [r7, #0]
 800cd08:	691b      	ldr	r3, [r3, #16]
 800cd0a:	2b3e      	cmp	r3, #62	; 0x3e
 800cd0c:	d813      	bhi.n	800cd36 <USB_ActivateEndpoint+0x2b6>
 800cd0e:	683b      	ldr	r3, [r7, #0]
 800cd10:	691b      	ldr	r3, [r3, #16]
 800cd12:	085b      	lsrs	r3, r3, #1
 800cd14:	663b      	str	r3, [r7, #96]	; 0x60
 800cd16:	683b      	ldr	r3, [r7, #0]
 800cd18:	691b      	ldr	r3, [r3, #16]
 800cd1a:	f003 0301 	and.w	r3, r3, #1
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d002      	beq.n	800cd28 <USB_ActivateEndpoint+0x2a8>
 800cd22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cd24:	3301      	adds	r3, #1
 800cd26:	663b      	str	r3, [r7, #96]	; 0x60
 800cd28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cd2a:	b29b      	uxth	r3, r3
 800cd2c:	029b      	lsls	r3, r3, #10
 800cd2e:	b29a      	uxth	r2, r3
 800cd30:	6a3b      	ldr	r3, [r7, #32]
 800cd32:	801a      	strh	r2, [r3, #0]
 800cd34:	e017      	b.n	800cd66 <USB_ActivateEndpoint+0x2e6>
 800cd36:	683b      	ldr	r3, [r7, #0]
 800cd38:	691b      	ldr	r3, [r3, #16]
 800cd3a:	095b      	lsrs	r3, r3, #5
 800cd3c:	663b      	str	r3, [r7, #96]	; 0x60
 800cd3e:	683b      	ldr	r3, [r7, #0]
 800cd40:	691b      	ldr	r3, [r3, #16]
 800cd42:	f003 031f 	and.w	r3, r3, #31
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d102      	bne.n	800cd50 <USB_ActivateEndpoint+0x2d0>
 800cd4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cd4c:	3b01      	subs	r3, #1
 800cd4e:	663b      	str	r3, [r7, #96]	; 0x60
 800cd50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cd52:	b29b      	uxth	r3, r3
 800cd54:	029b      	lsls	r3, r3, #10
 800cd56:	b29b      	uxth	r3, r3
 800cd58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cd5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cd60:	b29a      	uxth	r2, r3
 800cd62:	6a3b      	ldr	r3, [r7, #32]
 800cd64:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cd66:	687a      	ldr	r2, [r7, #4]
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	781b      	ldrb	r3, [r3, #0]
 800cd6c:	009b      	lsls	r3, r3, #2
 800cd6e:	4413      	add	r3, r2
 800cd70:	881b      	ldrh	r3, [r3, #0]
 800cd72:	83fb      	strh	r3, [r7, #30]
 800cd74:	8bfb      	ldrh	r3, [r7, #30]
 800cd76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d01b      	beq.n	800cdb6 <USB_ActivateEndpoint+0x336>
 800cd7e:	687a      	ldr	r2, [r7, #4]
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	781b      	ldrb	r3, [r3, #0]
 800cd84:	009b      	lsls	r3, r3, #2
 800cd86:	4413      	add	r3, r2
 800cd88:	881b      	ldrh	r3, [r3, #0]
 800cd8a:	b29b      	uxth	r3, r3
 800cd8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cd90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd94:	83bb      	strh	r3, [r7, #28]
 800cd96:	687a      	ldr	r2, [r7, #4]
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	781b      	ldrb	r3, [r3, #0]
 800cd9c:	009b      	lsls	r3, r3, #2
 800cd9e:	441a      	add	r2, r3
 800cda0:	8bbb      	ldrh	r3, [r7, #28]
 800cda2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cda6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cdaa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800cdae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cdb2:	b29b      	uxth	r3, r3
 800cdb4:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cdb6:	687a      	ldr	r2, [r7, #4]
 800cdb8:	683b      	ldr	r3, [r7, #0]
 800cdba:	781b      	ldrb	r3, [r3, #0]
 800cdbc:	009b      	lsls	r3, r3, #2
 800cdbe:	4413      	add	r3, r2
 800cdc0:	881b      	ldrh	r3, [r3, #0]
 800cdc2:	b29b      	uxth	r3, r3
 800cdc4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cdc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cdcc:	837b      	strh	r3, [r7, #26]
 800cdce:	8b7b      	ldrh	r3, [r7, #26]
 800cdd0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800cdd4:	837b      	strh	r3, [r7, #26]
 800cdd6:	8b7b      	ldrh	r3, [r7, #26]
 800cdd8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800cddc:	837b      	strh	r3, [r7, #26]
 800cdde:	687a      	ldr	r2, [r7, #4]
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	781b      	ldrb	r3, [r3, #0]
 800cde4:	009b      	lsls	r3, r3, #2
 800cde6:	441a      	add	r2, r3
 800cde8:	8b7b      	ldrh	r3, [r7, #26]
 800cdea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cdee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cdf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cdf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cdfa:	b29b      	uxth	r3, r3
 800cdfc:	8013      	strh	r3, [r2, #0]
 800cdfe:	e1a2      	b.n	800d146 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800ce00:	687a      	ldr	r2, [r7, #4]
 800ce02:	683b      	ldr	r3, [r7, #0]
 800ce04:	781b      	ldrb	r3, [r3, #0]
 800ce06:	009b      	lsls	r3, r3, #2
 800ce08:	4413      	add	r3, r2
 800ce0a:	881b      	ldrh	r3, [r3, #0]
 800ce0c:	b29b      	uxth	r3, r3
 800ce0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ce12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ce16:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800ce1a:	687a      	ldr	r2, [r7, #4]
 800ce1c:	683b      	ldr	r3, [r7, #0]
 800ce1e:	781b      	ldrb	r3, [r3, #0]
 800ce20:	009b      	lsls	r3, r3, #2
 800ce22:	441a      	add	r2, r3
 800ce24:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800ce28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ce2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ce30:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800ce34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce38:	b29b      	uxth	r3, r3
 800ce3a:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	65bb      	str	r3, [r7, #88]	; 0x58
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ce46:	b29b      	uxth	r3, r3
 800ce48:	461a      	mov	r2, r3
 800ce4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ce4c:	4413      	add	r3, r2
 800ce4e:	65bb      	str	r3, [r7, #88]	; 0x58
 800ce50:	683b      	ldr	r3, [r7, #0]
 800ce52:	781b      	ldrb	r3, [r3, #0]
 800ce54:	011a      	lsls	r2, r3, #4
 800ce56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ce58:	4413      	add	r3, r2
 800ce5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ce5e:	657b      	str	r3, [r7, #84]	; 0x54
 800ce60:	683b      	ldr	r3, [r7, #0]
 800ce62:	891b      	ldrh	r3, [r3, #8]
 800ce64:	085b      	lsrs	r3, r3, #1
 800ce66:	b29b      	uxth	r3, r3
 800ce68:	005b      	lsls	r3, r3, #1
 800ce6a:	b29a      	uxth	r2, r3
 800ce6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce6e:	801a      	strh	r2, [r3, #0]
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	653b      	str	r3, [r7, #80]	; 0x50
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ce7a:	b29b      	uxth	r3, r3
 800ce7c:	461a      	mov	r2, r3
 800ce7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce80:	4413      	add	r3, r2
 800ce82:	653b      	str	r3, [r7, #80]	; 0x50
 800ce84:	683b      	ldr	r3, [r7, #0]
 800ce86:	781b      	ldrb	r3, [r3, #0]
 800ce88:	011a      	lsls	r2, r3, #4
 800ce8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce8c:	4413      	add	r3, r2
 800ce8e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800ce92:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ce94:	683b      	ldr	r3, [r7, #0]
 800ce96:	895b      	ldrh	r3, [r3, #10]
 800ce98:	085b      	lsrs	r3, r3, #1
 800ce9a:	b29b      	uxth	r3, r3
 800ce9c:	005b      	lsls	r3, r3, #1
 800ce9e:	b29a      	uxth	r2, r3
 800cea0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cea2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800cea4:	683b      	ldr	r3, [r7, #0]
 800cea6:	785b      	ldrb	r3, [r3, #1]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	f040 8091 	bne.w	800cfd0 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ceae:	687a      	ldr	r2, [r7, #4]
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	781b      	ldrb	r3, [r3, #0]
 800ceb4:	009b      	lsls	r3, r3, #2
 800ceb6:	4413      	add	r3, r2
 800ceb8:	881b      	ldrh	r3, [r3, #0]
 800ceba:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800cebc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cebe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d01b      	beq.n	800cefe <USB_ActivateEndpoint+0x47e>
 800cec6:	687a      	ldr	r2, [r7, #4]
 800cec8:	683b      	ldr	r3, [r7, #0]
 800ceca:	781b      	ldrb	r3, [r3, #0]
 800cecc:	009b      	lsls	r3, r3, #2
 800cece:	4413      	add	r3, r2
 800ced0:	881b      	ldrh	r3, [r3, #0]
 800ced2:	b29b      	uxth	r3, r3
 800ced4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ced8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cedc:	877b      	strh	r3, [r7, #58]	; 0x3a
 800cede:	687a      	ldr	r2, [r7, #4]
 800cee0:	683b      	ldr	r3, [r7, #0]
 800cee2:	781b      	ldrb	r3, [r3, #0]
 800cee4:	009b      	lsls	r3, r3, #2
 800cee6:	441a      	add	r2, r3
 800cee8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ceea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ceee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cef2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800cef6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cefa:	b29b      	uxth	r3, r3
 800cefc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cefe:	687a      	ldr	r2, [r7, #4]
 800cf00:	683b      	ldr	r3, [r7, #0]
 800cf02:	781b      	ldrb	r3, [r3, #0]
 800cf04:	009b      	lsls	r3, r3, #2
 800cf06:	4413      	add	r3, r2
 800cf08:	881b      	ldrh	r3, [r3, #0]
 800cf0a:	873b      	strh	r3, [r7, #56]	; 0x38
 800cf0c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800cf0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d01b      	beq.n	800cf4e <USB_ActivateEndpoint+0x4ce>
 800cf16:	687a      	ldr	r2, [r7, #4]
 800cf18:	683b      	ldr	r3, [r7, #0]
 800cf1a:	781b      	ldrb	r3, [r3, #0]
 800cf1c:	009b      	lsls	r3, r3, #2
 800cf1e:	4413      	add	r3, r2
 800cf20:	881b      	ldrh	r3, [r3, #0]
 800cf22:	b29b      	uxth	r3, r3
 800cf24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cf28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf2c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800cf2e:	687a      	ldr	r2, [r7, #4]
 800cf30:	683b      	ldr	r3, [r7, #0]
 800cf32:	781b      	ldrb	r3, [r3, #0]
 800cf34:	009b      	lsls	r3, r3, #2
 800cf36:	441a      	add	r2, r3
 800cf38:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cf3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cf3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cf42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cf46:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800cf4a:	b29b      	uxth	r3, r3
 800cf4c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cf4e:	687a      	ldr	r2, [r7, #4]
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	781b      	ldrb	r3, [r3, #0]
 800cf54:	009b      	lsls	r3, r3, #2
 800cf56:	4413      	add	r3, r2
 800cf58:	881b      	ldrh	r3, [r3, #0]
 800cf5a:	b29b      	uxth	r3, r3
 800cf5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cf60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf64:	86bb      	strh	r3, [r7, #52]	; 0x34
 800cf66:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800cf68:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800cf6c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800cf6e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800cf70:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800cf74:	86bb      	strh	r3, [r7, #52]	; 0x34
 800cf76:	687a      	ldr	r2, [r7, #4]
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	781b      	ldrb	r3, [r3, #0]
 800cf7c:	009b      	lsls	r3, r3, #2
 800cf7e:	441a      	add	r2, r3
 800cf80:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800cf82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cf86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cf8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cf8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf92:	b29b      	uxth	r3, r3
 800cf94:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cf96:	687a      	ldr	r2, [r7, #4]
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	781b      	ldrb	r3, [r3, #0]
 800cf9c:	009b      	lsls	r3, r3, #2
 800cf9e:	4413      	add	r3, r2
 800cfa0:	881b      	ldrh	r3, [r3, #0]
 800cfa2:	b29b      	uxth	r3, r3
 800cfa4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cfa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cfac:	867b      	strh	r3, [r7, #50]	; 0x32
 800cfae:	687a      	ldr	r2, [r7, #4]
 800cfb0:	683b      	ldr	r3, [r7, #0]
 800cfb2:	781b      	ldrb	r3, [r3, #0]
 800cfb4:	009b      	lsls	r3, r3, #2
 800cfb6:	441a      	add	r2, r3
 800cfb8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800cfba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cfbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cfc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cfc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cfca:	b29b      	uxth	r3, r3
 800cfcc:	8013      	strh	r3, [r2, #0]
 800cfce:	e0ba      	b.n	800d146 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cfd0:	687a      	ldr	r2, [r7, #4]
 800cfd2:	683b      	ldr	r3, [r7, #0]
 800cfd4:	781b      	ldrb	r3, [r3, #0]
 800cfd6:	009b      	lsls	r3, r3, #2
 800cfd8:	4413      	add	r3, r2
 800cfda:	881b      	ldrh	r3, [r3, #0]
 800cfdc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800cfe0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800cfe4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d01d      	beq.n	800d028 <USB_ActivateEndpoint+0x5a8>
 800cfec:	687a      	ldr	r2, [r7, #4]
 800cfee:	683b      	ldr	r3, [r7, #0]
 800cff0:	781b      	ldrb	r3, [r3, #0]
 800cff2:	009b      	lsls	r3, r3, #2
 800cff4:	4413      	add	r3, r2
 800cff6:	881b      	ldrh	r3, [r3, #0]
 800cff8:	b29b      	uxth	r3, r3
 800cffa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d002:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800d006:	687a      	ldr	r2, [r7, #4]
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	781b      	ldrb	r3, [r3, #0]
 800d00c:	009b      	lsls	r3, r3, #2
 800d00e:	441a      	add	r2, r3
 800d010:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800d014:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d018:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d01c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d024:	b29b      	uxth	r3, r3
 800d026:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d028:	687a      	ldr	r2, [r7, #4]
 800d02a:	683b      	ldr	r3, [r7, #0]
 800d02c:	781b      	ldrb	r3, [r3, #0]
 800d02e:	009b      	lsls	r3, r3, #2
 800d030:	4413      	add	r3, r2
 800d032:	881b      	ldrh	r3, [r3, #0]
 800d034:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800d038:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d03c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d040:	2b00      	cmp	r3, #0
 800d042:	d01d      	beq.n	800d080 <USB_ActivateEndpoint+0x600>
 800d044:	687a      	ldr	r2, [r7, #4]
 800d046:	683b      	ldr	r3, [r7, #0]
 800d048:	781b      	ldrb	r3, [r3, #0]
 800d04a:	009b      	lsls	r3, r3, #2
 800d04c:	4413      	add	r3, r2
 800d04e:	881b      	ldrh	r3, [r3, #0]
 800d050:	b29b      	uxth	r3, r3
 800d052:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d05a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800d05e:	687a      	ldr	r2, [r7, #4]
 800d060:	683b      	ldr	r3, [r7, #0]
 800d062:	781b      	ldrb	r3, [r3, #0]
 800d064:	009b      	lsls	r3, r3, #2
 800d066:	441a      	add	r2, r3
 800d068:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800d06c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d070:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d074:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d078:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d07c:	b29b      	uxth	r3, r3
 800d07e:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 800d080:	683b      	ldr	r3, [r7, #0]
 800d082:	78db      	ldrb	r3, [r3, #3]
 800d084:	2b01      	cmp	r3, #1
 800d086:	d024      	beq.n	800d0d2 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d088:	687a      	ldr	r2, [r7, #4]
 800d08a:	683b      	ldr	r3, [r7, #0]
 800d08c:	781b      	ldrb	r3, [r3, #0]
 800d08e:	009b      	lsls	r3, r3, #2
 800d090:	4413      	add	r3, r2
 800d092:	881b      	ldrh	r3, [r3, #0]
 800d094:	b29b      	uxth	r3, r3
 800d096:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d09a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d09e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800d0a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d0a6:	f083 0320 	eor.w	r3, r3, #32
 800d0aa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800d0ae:	687a      	ldr	r2, [r7, #4]
 800d0b0:	683b      	ldr	r3, [r7, #0]
 800d0b2:	781b      	ldrb	r3, [r3, #0]
 800d0b4:	009b      	lsls	r3, r3, #2
 800d0b6:	441a      	add	r2, r3
 800d0b8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d0bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d0c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d0c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d0c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d0cc:	b29b      	uxth	r3, r3
 800d0ce:	8013      	strh	r3, [r2, #0]
 800d0d0:	e01d      	b.n	800d10e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d0d2:	687a      	ldr	r2, [r7, #4]
 800d0d4:	683b      	ldr	r3, [r7, #0]
 800d0d6:	781b      	ldrb	r3, [r3, #0]
 800d0d8:	009b      	lsls	r3, r3, #2
 800d0da:	4413      	add	r3, r2
 800d0dc:	881b      	ldrh	r3, [r3, #0]
 800d0de:	b29b      	uxth	r3, r3
 800d0e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d0e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d0e8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800d0ec:	687a      	ldr	r2, [r7, #4]
 800d0ee:	683b      	ldr	r3, [r7, #0]
 800d0f0:	781b      	ldrb	r3, [r3, #0]
 800d0f2:	009b      	lsls	r3, r3, #2
 800d0f4:	441a      	add	r2, r3
 800d0f6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d0fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d0fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d102:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d106:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d10a:	b29b      	uxth	r3, r3
 800d10c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d10e:	687a      	ldr	r2, [r7, #4]
 800d110:	683b      	ldr	r3, [r7, #0]
 800d112:	781b      	ldrb	r3, [r3, #0]
 800d114:	009b      	lsls	r3, r3, #2
 800d116:	4413      	add	r3, r2
 800d118:	881b      	ldrh	r3, [r3, #0]
 800d11a:	b29b      	uxth	r3, r3
 800d11c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d120:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d124:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800d126:	687a      	ldr	r2, [r7, #4]
 800d128:	683b      	ldr	r3, [r7, #0]
 800d12a:	781b      	ldrb	r3, [r3, #0]
 800d12c:	009b      	lsls	r3, r3, #2
 800d12e:	441a      	add	r2, r3
 800d130:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d132:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d136:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d13a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d13e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d142:	b29b      	uxth	r3, r3
 800d144:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800d146:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800d14a:	4618      	mov	r0, r3
 800d14c:	376c      	adds	r7, #108	; 0x6c
 800d14e:	46bd      	mov	sp, r7
 800d150:	bc80      	pop	{r7}
 800d152:	4770      	bx	lr

0800d154 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d154:	b480      	push	{r7}
 800d156:	b08d      	sub	sp, #52	; 0x34
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
 800d15c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800d15e:	683b      	ldr	r3, [r7, #0]
 800d160:	7b1b      	ldrb	r3, [r3, #12]
 800d162:	2b00      	cmp	r3, #0
 800d164:	f040 808e 	bne.w	800d284 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800d168:	683b      	ldr	r3, [r7, #0]
 800d16a:	785b      	ldrb	r3, [r3, #1]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d044      	beq.n	800d1fa <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d170:	687a      	ldr	r2, [r7, #4]
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	781b      	ldrb	r3, [r3, #0]
 800d176:	009b      	lsls	r3, r3, #2
 800d178:	4413      	add	r3, r2
 800d17a:	881b      	ldrh	r3, [r3, #0]
 800d17c:	81bb      	strh	r3, [r7, #12]
 800d17e:	89bb      	ldrh	r3, [r7, #12]
 800d180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d184:	2b00      	cmp	r3, #0
 800d186:	d01b      	beq.n	800d1c0 <USB_DeactivateEndpoint+0x6c>
 800d188:	687a      	ldr	r2, [r7, #4]
 800d18a:	683b      	ldr	r3, [r7, #0]
 800d18c:	781b      	ldrb	r3, [r3, #0]
 800d18e:	009b      	lsls	r3, r3, #2
 800d190:	4413      	add	r3, r2
 800d192:	881b      	ldrh	r3, [r3, #0]
 800d194:	b29b      	uxth	r3, r3
 800d196:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d19a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d19e:	817b      	strh	r3, [r7, #10]
 800d1a0:	687a      	ldr	r2, [r7, #4]
 800d1a2:	683b      	ldr	r3, [r7, #0]
 800d1a4:	781b      	ldrb	r3, [r3, #0]
 800d1a6:	009b      	lsls	r3, r3, #2
 800d1a8:	441a      	add	r2, r3
 800d1aa:	897b      	ldrh	r3, [r7, #10]
 800d1ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d1b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d1b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d1b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d1bc:	b29b      	uxth	r3, r3
 800d1be:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d1c0:	687a      	ldr	r2, [r7, #4]
 800d1c2:	683b      	ldr	r3, [r7, #0]
 800d1c4:	781b      	ldrb	r3, [r3, #0]
 800d1c6:	009b      	lsls	r3, r3, #2
 800d1c8:	4413      	add	r3, r2
 800d1ca:	881b      	ldrh	r3, [r3, #0]
 800d1cc:	b29b      	uxth	r3, r3
 800d1ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d1d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d1d6:	813b      	strh	r3, [r7, #8]
 800d1d8:	687a      	ldr	r2, [r7, #4]
 800d1da:	683b      	ldr	r3, [r7, #0]
 800d1dc:	781b      	ldrb	r3, [r3, #0]
 800d1de:	009b      	lsls	r3, r3, #2
 800d1e0:	441a      	add	r2, r3
 800d1e2:	893b      	ldrh	r3, [r7, #8]
 800d1e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d1e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d1ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d1f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d1f4:	b29b      	uxth	r3, r3
 800d1f6:	8013      	strh	r3, [r2, #0]
 800d1f8:	e192      	b.n	800d520 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d1fa:	687a      	ldr	r2, [r7, #4]
 800d1fc:	683b      	ldr	r3, [r7, #0]
 800d1fe:	781b      	ldrb	r3, [r3, #0]
 800d200:	009b      	lsls	r3, r3, #2
 800d202:	4413      	add	r3, r2
 800d204:	881b      	ldrh	r3, [r3, #0]
 800d206:	827b      	strh	r3, [r7, #18]
 800d208:	8a7b      	ldrh	r3, [r7, #18]
 800d20a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d01b      	beq.n	800d24a <USB_DeactivateEndpoint+0xf6>
 800d212:	687a      	ldr	r2, [r7, #4]
 800d214:	683b      	ldr	r3, [r7, #0]
 800d216:	781b      	ldrb	r3, [r3, #0]
 800d218:	009b      	lsls	r3, r3, #2
 800d21a:	4413      	add	r3, r2
 800d21c:	881b      	ldrh	r3, [r3, #0]
 800d21e:	b29b      	uxth	r3, r3
 800d220:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d224:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d228:	823b      	strh	r3, [r7, #16]
 800d22a:	687a      	ldr	r2, [r7, #4]
 800d22c:	683b      	ldr	r3, [r7, #0]
 800d22e:	781b      	ldrb	r3, [r3, #0]
 800d230:	009b      	lsls	r3, r3, #2
 800d232:	441a      	add	r2, r3
 800d234:	8a3b      	ldrh	r3, [r7, #16]
 800d236:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d23a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d23e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d246:	b29b      	uxth	r3, r3
 800d248:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d24a:	687a      	ldr	r2, [r7, #4]
 800d24c:	683b      	ldr	r3, [r7, #0]
 800d24e:	781b      	ldrb	r3, [r3, #0]
 800d250:	009b      	lsls	r3, r3, #2
 800d252:	4413      	add	r3, r2
 800d254:	881b      	ldrh	r3, [r3, #0]
 800d256:	b29b      	uxth	r3, r3
 800d258:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d25c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d260:	81fb      	strh	r3, [r7, #14]
 800d262:	687a      	ldr	r2, [r7, #4]
 800d264:	683b      	ldr	r3, [r7, #0]
 800d266:	781b      	ldrb	r3, [r3, #0]
 800d268:	009b      	lsls	r3, r3, #2
 800d26a:	441a      	add	r2, r3
 800d26c:	89fb      	ldrh	r3, [r7, #14]
 800d26e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d272:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d276:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d27a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d27e:	b29b      	uxth	r3, r3
 800d280:	8013      	strh	r3, [r2, #0]
 800d282:	e14d      	b.n	800d520 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800d284:	683b      	ldr	r3, [r7, #0]
 800d286:	785b      	ldrb	r3, [r3, #1]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	f040 80a5 	bne.w	800d3d8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d28e:	687a      	ldr	r2, [r7, #4]
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	781b      	ldrb	r3, [r3, #0]
 800d294:	009b      	lsls	r3, r3, #2
 800d296:	4413      	add	r3, r2
 800d298:	881b      	ldrh	r3, [r3, #0]
 800d29a:	843b      	strh	r3, [r7, #32]
 800d29c:	8c3b      	ldrh	r3, [r7, #32]
 800d29e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d01b      	beq.n	800d2de <USB_DeactivateEndpoint+0x18a>
 800d2a6:	687a      	ldr	r2, [r7, #4]
 800d2a8:	683b      	ldr	r3, [r7, #0]
 800d2aa:	781b      	ldrb	r3, [r3, #0]
 800d2ac:	009b      	lsls	r3, r3, #2
 800d2ae:	4413      	add	r3, r2
 800d2b0:	881b      	ldrh	r3, [r3, #0]
 800d2b2:	b29b      	uxth	r3, r3
 800d2b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d2b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d2bc:	83fb      	strh	r3, [r7, #30]
 800d2be:	687a      	ldr	r2, [r7, #4]
 800d2c0:	683b      	ldr	r3, [r7, #0]
 800d2c2:	781b      	ldrb	r3, [r3, #0]
 800d2c4:	009b      	lsls	r3, r3, #2
 800d2c6:	441a      	add	r2, r3
 800d2c8:	8bfb      	ldrh	r3, [r7, #30]
 800d2ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d2ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d2d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d2d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2da:	b29b      	uxth	r3, r3
 800d2dc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d2de:	687a      	ldr	r2, [r7, #4]
 800d2e0:	683b      	ldr	r3, [r7, #0]
 800d2e2:	781b      	ldrb	r3, [r3, #0]
 800d2e4:	009b      	lsls	r3, r3, #2
 800d2e6:	4413      	add	r3, r2
 800d2e8:	881b      	ldrh	r3, [r3, #0]
 800d2ea:	83bb      	strh	r3, [r7, #28]
 800d2ec:	8bbb      	ldrh	r3, [r7, #28]
 800d2ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d01b      	beq.n	800d32e <USB_DeactivateEndpoint+0x1da>
 800d2f6:	687a      	ldr	r2, [r7, #4]
 800d2f8:	683b      	ldr	r3, [r7, #0]
 800d2fa:	781b      	ldrb	r3, [r3, #0]
 800d2fc:	009b      	lsls	r3, r3, #2
 800d2fe:	4413      	add	r3, r2
 800d300:	881b      	ldrh	r3, [r3, #0]
 800d302:	b29b      	uxth	r3, r3
 800d304:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d308:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d30c:	837b      	strh	r3, [r7, #26]
 800d30e:	687a      	ldr	r2, [r7, #4]
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	781b      	ldrb	r3, [r3, #0]
 800d314:	009b      	lsls	r3, r3, #2
 800d316:	441a      	add	r2, r3
 800d318:	8b7b      	ldrh	r3, [r7, #26]
 800d31a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d31e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d322:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d326:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d32a:	b29b      	uxth	r3, r3
 800d32c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800d32e:	687a      	ldr	r2, [r7, #4]
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	781b      	ldrb	r3, [r3, #0]
 800d334:	009b      	lsls	r3, r3, #2
 800d336:	4413      	add	r3, r2
 800d338:	881b      	ldrh	r3, [r3, #0]
 800d33a:	b29b      	uxth	r3, r3
 800d33c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d340:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d344:	833b      	strh	r3, [r7, #24]
 800d346:	687a      	ldr	r2, [r7, #4]
 800d348:	683b      	ldr	r3, [r7, #0]
 800d34a:	781b      	ldrb	r3, [r3, #0]
 800d34c:	009b      	lsls	r3, r3, #2
 800d34e:	441a      	add	r2, r3
 800d350:	8b3b      	ldrh	r3, [r7, #24]
 800d352:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d356:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d35a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d35e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d362:	b29b      	uxth	r3, r3
 800d364:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d366:	687a      	ldr	r2, [r7, #4]
 800d368:	683b      	ldr	r3, [r7, #0]
 800d36a:	781b      	ldrb	r3, [r3, #0]
 800d36c:	009b      	lsls	r3, r3, #2
 800d36e:	4413      	add	r3, r2
 800d370:	881b      	ldrh	r3, [r3, #0]
 800d372:	b29b      	uxth	r3, r3
 800d374:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d378:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d37c:	82fb      	strh	r3, [r7, #22]
 800d37e:	687a      	ldr	r2, [r7, #4]
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	781b      	ldrb	r3, [r3, #0]
 800d384:	009b      	lsls	r3, r3, #2
 800d386:	441a      	add	r2, r3
 800d388:	8afb      	ldrh	r3, [r7, #22]
 800d38a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d38e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d392:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d396:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d39a:	b29b      	uxth	r3, r3
 800d39c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d39e:	687a      	ldr	r2, [r7, #4]
 800d3a0:	683b      	ldr	r3, [r7, #0]
 800d3a2:	781b      	ldrb	r3, [r3, #0]
 800d3a4:	009b      	lsls	r3, r3, #2
 800d3a6:	4413      	add	r3, r2
 800d3a8:	881b      	ldrh	r3, [r3, #0]
 800d3aa:	b29b      	uxth	r3, r3
 800d3ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d3b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d3b4:	82bb      	strh	r3, [r7, #20]
 800d3b6:	687a      	ldr	r2, [r7, #4]
 800d3b8:	683b      	ldr	r3, [r7, #0]
 800d3ba:	781b      	ldrb	r3, [r3, #0]
 800d3bc:	009b      	lsls	r3, r3, #2
 800d3be:	441a      	add	r2, r3
 800d3c0:	8abb      	ldrh	r3, [r7, #20]
 800d3c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d3c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d3ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d3ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3d2:	b29b      	uxth	r3, r3
 800d3d4:	8013      	strh	r3, [r2, #0]
 800d3d6:	e0a3      	b.n	800d520 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d3d8:	687a      	ldr	r2, [r7, #4]
 800d3da:	683b      	ldr	r3, [r7, #0]
 800d3dc:	781b      	ldrb	r3, [r3, #0]
 800d3de:	009b      	lsls	r3, r3, #2
 800d3e0:	4413      	add	r3, r2
 800d3e2:	881b      	ldrh	r3, [r3, #0]
 800d3e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d3e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d3e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d01b      	beq.n	800d428 <USB_DeactivateEndpoint+0x2d4>
 800d3f0:	687a      	ldr	r2, [r7, #4]
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	781b      	ldrb	r3, [r3, #0]
 800d3f6:	009b      	lsls	r3, r3, #2
 800d3f8:	4413      	add	r3, r2
 800d3fa:	881b      	ldrh	r3, [r3, #0]
 800d3fc:	b29b      	uxth	r3, r3
 800d3fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d406:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800d408:	687a      	ldr	r2, [r7, #4]
 800d40a:	683b      	ldr	r3, [r7, #0]
 800d40c:	781b      	ldrb	r3, [r3, #0]
 800d40e:	009b      	lsls	r3, r3, #2
 800d410:	441a      	add	r2, r3
 800d412:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d414:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d418:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d41c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d424:	b29b      	uxth	r3, r3
 800d426:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d428:	687a      	ldr	r2, [r7, #4]
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	781b      	ldrb	r3, [r3, #0]
 800d42e:	009b      	lsls	r3, r3, #2
 800d430:	4413      	add	r3, r2
 800d432:	881b      	ldrh	r3, [r3, #0]
 800d434:	857b      	strh	r3, [r7, #42]	; 0x2a
 800d436:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d01b      	beq.n	800d478 <USB_DeactivateEndpoint+0x324>
 800d440:	687a      	ldr	r2, [r7, #4]
 800d442:	683b      	ldr	r3, [r7, #0]
 800d444:	781b      	ldrb	r3, [r3, #0]
 800d446:	009b      	lsls	r3, r3, #2
 800d448:	4413      	add	r3, r2
 800d44a:	881b      	ldrh	r3, [r3, #0]
 800d44c:	b29b      	uxth	r3, r3
 800d44e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d456:	853b      	strh	r3, [r7, #40]	; 0x28
 800d458:	687a      	ldr	r2, [r7, #4]
 800d45a:	683b      	ldr	r3, [r7, #0]
 800d45c:	781b      	ldrb	r3, [r3, #0]
 800d45e:	009b      	lsls	r3, r3, #2
 800d460:	441a      	add	r2, r3
 800d462:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d464:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d468:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d46c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d470:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d474:	b29b      	uxth	r3, r3
 800d476:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800d478:	687a      	ldr	r2, [r7, #4]
 800d47a:	683b      	ldr	r3, [r7, #0]
 800d47c:	781b      	ldrb	r3, [r3, #0]
 800d47e:	009b      	lsls	r3, r3, #2
 800d480:	4413      	add	r3, r2
 800d482:	881b      	ldrh	r3, [r3, #0]
 800d484:	b29b      	uxth	r3, r3
 800d486:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d48a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d48e:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d490:	687a      	ldr	r2, [r7, #4]
 800d492:	683b      	ldr	r3, [r7, #0]
 800d494:	781b      	ldrb	r3, [r3, #0]
 800d496:	009b      	lsls	r3, r3, #2
 800d498:	441a      	add	r2, r3
 800d49a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d49c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d4a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d4a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d4a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d4ac:	b29b      	uxth	r3, r3
 800d4ae:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d4b0:	687a      	ldr	r2, [r7, #4]
 800d4b2:	683b      	ldr	r3, [r7, #0]
 800d4b4:	781b      	ldrb	r3, [r3, #0]
 800d4b6:	009b      	lsls	r3, r3, #2
 800d4b8:	4413      	add	r3, r2
 800d4ba:	881b      	ldrh	r3, [r3, #0]
 800d4bc:	b29b      	uxth	r3, r3
 800d4be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d4c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d4c6:	84bb      	strh	r3, [r7, #36]	; 0x24
 800d4c8:	687a      	ldr	r2, [r7, #4]
 800d4ca:	683b      	ldr	r3, [r7, #0]
 800d4cc:	781b      	ldrb	r3, [r3, #0]
 800d4ce:	009b      	lsls	r3, r3, #2
 800d4d0:	441a      	add	r2, r3
 800d4d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d4d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d4d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d4dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d4e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d4e4:	b29b      	uxth	r3, r3
 800d4e6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d4e8:	687a      	ldr	r2, [r7, #4]
 800d4ea:	683b      	ldr	r3, [r7, #0]
 800d4ec:	781b      	ldrb	r3, [r3, #0]
 800d4ee:	009b      	lsls	r3, r3, #2
 800d4f0:	4413      	add	r3, r2
 800d4f2:	881b      	ldrh	r3, [r3, #0]
 800d4f4:	b29b      	uxth	r3, r3
 800d4f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d4fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d4fe:	847b      	strh	r3, [r7, #34]	; 0x22
 800d500:	687a      	ldr	r2, [r7, #4]
 800d502:	683b      	ldr	r3, [r7, #0]
 800d504:	781b      	ldrb	r3, [r3, #0]
 800d506:	009b      	lsls	r3, r3, #2
 800d508:	441a      	add	r2, r3
 800d50a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d50c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d510:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d514:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d51c:	b29b      	uxth	r3, r3
 800d51e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800d520:	2300      	movs	r3, #0
}
 800d522:	4618      	mov	r0, r3
 800d524:	3734      	adds	r7, #52	; 0x34
 800d526:	46bd      	mov	sp, r7
 800d528:	bc80      	pop	{r7}
 800d52a:	4770      	bx	lr

0800d52c <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b0c4      	sub	sp, #272	; 0x110
 800d530:	af00      	add	r7, sp, #0
 800d532:	1d3b      	adds	r3, r7, #4
 800d534:	6018      	str	r0, [r3, #0]
 800d536:	463b      	mov	r3, r7
 800d538:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d53a:	463b      	mov	r3, r7
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	785b      	ldrb	r3, [r3, #1]
 800d540:	2b01      	cmp	r3, #1
 800d542:	f040 8566 	bne.w	800e012 <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800d546:	463b      	mov	r3, r7
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	699a      	ldr	r2, [r3, #24]
 800d54c:	463b      	mov	r3, r7
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	691b      	ldr	r3, [r3, #16]
 800d552:	429a      	cmp	r2, r3
 800d554:	d905      	bls.n	800d562 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800d556:	463b      	mov	r3, r7
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	691b      	ldr	r3, [r3, #16]
 800d55c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800d560:	e004      	b.n	800d56c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800d562:	463b      	mov	r3, r7
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	699b      	ldr	r3, [r3, #24]
 800d568:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800d56c:	463b      	mov	r3, r7
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	7b1b      	ldrb	r3, [r3, #12]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d12c      	bne.n	800d5d0 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800d576:	463b      	mov	r3, r7
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	6959      	ldr	r1, [r3, #20]
 800d57c:	463b      	mov	r3, r7
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	88da      	ldrh	r2, [r3, #6]
 800d582:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d586:	b29b      	uxth	r3, r3
 800d588:	1d38      	adds	r0, r7, #4
 800d58a:	6800      	ldr	r0, [r0, #0]
 800d58c:	f001 fa31 	bl	800e9f2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d590:	1d3b      	adds	r3, r7, #4
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	617b      	str	r3, [r7, #20]
 800d596:	1d3b      	adds	r3, r7, #4
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d59e:	b29b      	uxth	r3, r3
 800d5a0:	461a      	mov	r2, r3
 800d5a2:	697b      	ldr	r3, [r7, #20]
 800d5a4:	4413      	add	r3, r2
 800d5a6:	617b      	str	r3, [r7, #20]
 800d5a8:	463b      	mov	r3, r7
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	781b      	ldrb	r3, [r3, #0]
 800d5ae:	011a      	lsls	r2, r3, #4
 800d5b0:	697b      	ldr	r3, [r7, #20]
 800d5b2:	4413      	add	r3, r2
 800d5b4:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800d5b8:	f107 0310 	add.w	r3, r7, #16
 800d5bc:	601a      	str	r2, [r3, #0]
 800d5be:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d5c2:	b29a      	uxth	r2, r3
 800d5c4:	f107 0310 	add.w	r3, r7, #16
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	801a      	strh	r2, [r3, #0]
 800d5cc:	f000 bcec 	b.w	800dfa8 <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800d5d0:	463b      	mov	r3, r7
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	78db      	ldrb	r3, [r3, #3]
 800d5d6:	2b02      	cmp	r3, #2
 800d5d8:	f040 8356 	bne.w	800dc88 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800d5dc:	463b      	mov	r3, r7
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	6a1a      	ldr	r2, [r3, #32]
 800d5e2:	463b      	mov	r3, r7
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	691b      	ldr	r3, [r3, #16]
 800d5e8:	429a      	cmp	r2, r3
 800d5ea:	f240 82fa 	bls.w	800dbe2 <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800d5ee:	1d3b      	adds	r3, r7, #4
 800d5f0:	681a      	ldr	r2, [r3, #0]
 800d5f2:	463b      	mov	r3, r7
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	781b      	ldrb	r3, [r3, #0]
 800d5f8:	009b      	lsls	r3, r3, #2
 800d5fa:	4413      	add	r3, r2
 800d5fc:	881b      	ldrh	r3, [r3, #0]
 800d5fe:	b29b      	uxth	r3, r3
 800d600:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d604:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d608:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800d60c:	1d3b      	adds	r3, r7, #4
 800d60e:	681a      	ldr	r2, [r3, #0]
 800d610:	463b      	mov	r3, r7
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	781b      	ldrb	r3, [r3, #0]
 800d616:	009b      	lsls	r3, r3, #2
 800d618:	441a      	add	r2, r3
 800d61a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800d61e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d622:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d626:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800d62a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d62e:	b29b      	uxth	r3, r3
 800d630:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 800d632:	463b      	mov	r3, r7
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	691b      	ldr	r3, [r3, #16]
 800d638:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800d63c:	463b      	mov	r3, r7
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	6a1a      	ldr	r2, [r3, #32]
 800d642:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d646:	1ad2      	subs	r2, r2, r3
 800d648:	463b      	mov	r3, r7
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d64e:	1d3b      	adds	r3, r7, #4
 800d650:	681a      	ldr	r2, [r3, #0]
 800d652:	463b      	mov	r3, r7
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	781b      	ldrb	r3, [r3, #0]
 800d658:	009b      	lsls	r3, r3, #2
 800d65a:	4413      	add	r3, r2
 800d65c:	881b      	ldrh	r3, [r3, #0]
 800d65e:	b29b      	uxth	r3, r3
 800d660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d664:	2b00      	cmp	r3, #0
 800d666:	f000 815e 	beq.w	800d926 <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d66a:	1d3b      	adds	r3, r7, #4
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	637b      	str	r3, [r7, #52]	; 0x34
 800d670:	463b      	mov	r3, r7
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	785b      	ldrb	r3, [r3, #1]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d164      	bne.n	800d744 <USB_EPStartXfer+0x218>
 800d67a:	1d3b      	adds	r3, r7, #4
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d680:	1d3b      	adds	r3, r7, #4
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d688:	b29b      	uxth	r3, r3
 800d68a:	461a      	mov	r2, r3
 800d68c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d68e:	4413      	add	r3, r2
 800d690:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d692:	463b      	mov	r3, r7
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	781b      	ldrb	r3, [r3, #0]
 800d698:	011a      	lsls	r2, r3, #4
 800d69a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d69c:	4413      	add	r3, r2
 800d69e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800d6a2:	62bb      	str	r3, [r7, #40]	; 0x28
 800d6a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d112      	bne.n	800d6d2 <USB_EPStartXfer+0x1a6>
 800d6ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ae:	881b      	ldrh	r3, [r3, #0]
 800d6b0:	b29b      	uxth	r3, r3
 800d6b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d6b6:	b29a      	uxth	r2, r3
 800d6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ba:	801a      	strh	r2, [r3, #0]
 800d6bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6be:	881b      	ldrh	r3, [r3, #0]
 800d6c0:	b29b      	uxth	r3, r3
 800d6c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d6c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d6ca:	b29a      	uxth	r2, r3
 800d6cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ce:	801a      	strh	r2, [r3, #0]
 800d6d0:	e054      	b.n	800d77c <USB_EPStartXfer+0x250>
 800d6d2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d6d6:	2b3e      	cmp	r3, #62	; 0x3e
 800d6d8:	d817      	bhi.n	800d70a <USB_EPStartXfer+0x1de>
 800d6da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d6de:	085b      	lsrs	r3, r3, #1
 800d6e0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800d6e4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d6e8:	f003 0301 	and.w	r3, r3, #1
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d004      	beq.n	800d6fa <USB_EPStartXfer+0x1ce>
 800d6f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d6f4:	3301      	adds	r3, #1
 800d6f6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800d6fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d6fe:	b29b      	uxth	r3, r3
 800d700:	029b      	lsls	r3, r3, #10
 800d702:	b29a      	uxth	r2, r3
 800d704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d706:	801a      	strh	r2, [r3, #0]
 800d708:	e038      	b.n	800d77c <USB_EPStartXfer+0x250>
 800d70a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d70e:	095b      	lsrs	r3, r3, #5
 800d710:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800d714:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d718:	f003 031f 	and.w	r3, r3, #31
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d104      	bne.n	800d72a <USB_EPStartXfer+0x1fe>
 800d720:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d724:	3b01      	subs	r3, #1
 800d726:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800d72a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d72e:	b29b      	uxth	r3, r3
 800d730:	029b      	lsls	r3, r3, #10
 800d732:	b29b      	uxth	r3, r3
 800d734:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d738:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d73c:	b29a      	uxth	r2, r3
 800d73e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d740:	801a      	strh	r2, [r3, #0]
 800d742:	e01b      	b.n	800d77c <USB_EPStartXfer+0x250>
 800d744:	463b      	mov	r3, r7
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	785b      	ldrb	r3, [r3, #1]
 800d74a:	2b01      	cmp	r3, #1
 800d74c:	d116      	bne.n	800d77c <USB_EPStartXfer+0x250>
 800d74e:	1d3b      	adds	r3, r7, #4
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d756:	b29b      	uxth	r3, r3
 800d758:	461a      	mov	r2, r3
 800d75a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d75c:	4413      	add	r3, r2
 800d75e:	637b      	str	r3, [r7, #52]	; 0x34
 800d760:	463b      	mov	r3, r7
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	781b      	ldrb	r3, [r3, #0]
 800d766:	011a      	lsls	r2, r3, #4
 800d768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d76a:	4413      	add	r3, r2
 800d76c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800d770:	633b      	str	r3, [r7, #48]	; 0x30
 800d772:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d776:	b29a      	uxth	r2, r3
 800d778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d77a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800d77c:	463b      	mov	r3, r7
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	895b      	ldrh	r3, [r3, #10]
 800d782:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d786:	463b      	mov	r3, r7
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	6959      	ldr	r1, [r3, #20]
 800d78c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d790:	b29b      	uxth	r3, r3
 800d792:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800d796:	1d38      	adds	r0, r7, #4
 800d798:	6800      	ldr	r0, [r0, #0]
 800d79a:	f001 f92a 	bl	800e9f2 <USB_WritePMA>
            ep->xfer_buff += len;
 800d79e:	463b      	mov	r3, r7
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	695a      	ldr	r2, [r3, #20]
 800d7a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d7a8:	441a      	add	r2, r3
 800d7aa:	463b      	mov	r3, r7
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800d7b0:	463b      	mov	r3, r7
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	6a1a      	ldr	r2, [r3, #32]
 800d7b6:	463b      	mov	r3, r7
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	691b      	ldr	r3, [r3, #16]
 800d7bc:	429a      	cmp	r2, r3
 800d7be:	d90e      	bls.n	800d7de <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 800d7c0:	463b      	mov	r3, r7
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	691b      	ldr	r3, [r3, #16]
 800d7c6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 800d7ca:	463b      	mov	r3, r7
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	6a1a      	ldr	r2, [r3, #32]
 800d7d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d7d4:	1ad2      	subs	r2, r2, r3
 800d7d6:	463b      	mov	r3, r7
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	621a      	str	r2, [r3, #32]
 800d7dc:	e008      	b.n	800d7f0 <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800d7de:	463b      	mov	r3, r7
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	6a1b      	ldr	r3, [r3, #32]
 800d7e4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 800d7e8:	463b      	mov	r3, r7
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d7f0:	463b      	mov	r3, r7
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	785b      	ldrb	r3, [r3, #1]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d164      	bne.n	800d8c4 <USB_EPStartXfer+0x398>
 800d7fa:	1d3b      	adds	r3, r7, #4
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	61fb      	str	r3, [r7, #28]
 800d800:	1d3b      	adds	r3, r7, #4
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d808:	b29b      	uxth	r3, r3
 800d80a:	461a      	mov	r2, r3
 800d80c:	69fb      	ldr	r3, [r7, #28]
 800d80e:	4413      	add	r3, r2
 800d810:	61fb      	str	r3, [r7, #28]
 800d812:	463b      	mov	r3, r7
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	781b      	ldrb	r3, [r3, #0]
 800d818:	011a      	lsls	r2, r3, #4
 800d81a:	69fb      	ldr	r3, [r7, #28]
 800d81c:	4413      	add	r3, r2
 800d81e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d822:	61bb      	str	r3, [r7, #24]
 800d824:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d112      	bne.n	800d852 <USB_EPStartXfer+0x326>
 800d82c:	69bb      	ldr	r3, [r7, #24]
 800d82e:	881b      	ldrh	r3, [r3, #0]
 800d830:	b29b      	uxth	r3, r3
 800d832:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d836:	b29a      	uxth	r2, r3
 800d838:	69bb      	ldr	r3, [r7, #24]
 800d83a:	801a      	strh	r2, [r3, #0]
 800d83c:	69bb      	ldr	r3, [r7, #24]
 800d83e:	881b      	ldrh	r3, [r3, #0]
 800d840:	b29b      	uxth	r3, r3
 800d842:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d846:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d84a:	b29a      	uxth	r2, r3
 800d84c:	69bb      	ldr	r3, [r7, #24]
 800d84e:	801a      	strh	r2, [r3, #0]
 800d850:	e057      	b.n	800d902 <USB_EPStartXfer+0x3d6>
 800d852:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d856:	2b3e      	cmp	r3, #62	; 0x3e
 800d858:	d817      	bhi.n	800d88a <USB_EPStartXfer+0x35e>
 800d85a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d85e:	085b      	lsrs	r3, r3, #1
 800d860:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800d864:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d868:	f003 0301 	and.w	r3, r3, #1
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d004      	beq.n	800d87a <USB_EPStartXfer+0x34e>
 800d870:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800d874:	3301      	adds	r3, #1
 800d876:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800d87a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800d87e:	b29b      	uxth	r3, r3
 800d880:	029b      	lsls	r3, r3, #10
 800d882:	b29a      	uxth	r2, r3
 800d884:	69bb      	ldr	r3, [r7, #24]
 800d886:	801a      	strh	r2, [r3, #0]
 800d888:	e03b      	b.n	800d902 <USB_EPStartXfer+0x3d6>
 800d88a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d88e:	095b      	lsrs	r3, r3, #5
 800d890:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800d894:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d898:	f003 031f 	and.w	r3, r3, #31
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d104      	bne.n	800d8aa <USB_EPStartXfer+0x37e>
 800d8a0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800d8a4:	3b01      	subs	r3, #1
 800d8a6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800d8aa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800d8ae:	b29b      	uxth	r3, r3
 800d8b0:	029b      	lsls	r3, r3, #10
 800d8b2:	b29b      	uxth	r3, r3
 800d8b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d8b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d8bc:	b29a      	uxth	r2, r3
 800d8be:	69bb      	ldr	r3, [r7, #24]
 800d8c0:	801a      	strh	r2, [r3, #0]
 800d8c2:	e01e      	b.n	800d902 <USB_EPStartXfer+0x3d6>
 800d8c4:	463b      	mov	r3, r7
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	785b      	ldrb	r3, [r3, #1]
 800d8ca:	2b01      	cmp	r3, #1
 800d8cc:	d119      	bne.n	800d902 <USB_EPStartXfer+0x3d6>
 800d8ce:	1d3b      	adds	r3, r7, #4
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	627b      	str	r3, [r7, #36]	; 0x24
 800d8d4:	1d3b      	adds	r3, r7, #4
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d8dc:	b29b      	uxth	r3, r3
 800d8de:	461a      	mov	r2, r3
 800d8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8e2:	4413      	add	r3, r2
 800d8e4:	627b      	str	r3, [r7, #36]	; 0x24
 800d8e6:	463b      	mov	r3, r7
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	781b      	ldrb	r3, [r3, #0]
 800d8ec:	011a      	lsls	r2, r3, #4
 800d8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8f0:	4413      	add	r3, r2
 800d8f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d8f6:	623b      	str	r3, [r7, #32]
 800d8f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d8fc:	b29a      	uxth	r2, r3
 800d8fe:	6a3b      	ldr	r3, [r7, #32]
 800d900:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800d902:	463b      	mov	r3, r7
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	891b      	ldrh	r3, [r3, #8]
 800d908:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d90c:	463b      	mov	r3, r7
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	6959      	ldr	r1, [r3, #20]
 800d912:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d916:	b29b      	uxth	r3, r3
 800d918:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800d91c:	1d38      	adds	r0, r7, #4
 800d91e:	6800      	ldr	r0, [r0, #0]
 800d920:	f001 f867 	bl	800e9f2 <USB_WritePMA>
 800d924:	e340      	b.n	800dfa8 <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d926:	463b      	mov	r3, r7
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	785b      	ldrb	r3, [r3, #1]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d164      	bne.n	800d9fa <USB_EPStartXfer+0x4ce>
 800d930:	1d3b      	adds	r3, r7, #4
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d936:	1d3b      	adds	r3, r7, #4
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d93e:	b29b      	uxth	r3, r3
 800d940:	461a      	mov	r2, r3
 800d942:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d944:	4413      	add	r3, r2
 800d946:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d948:	463b      	mov	r3, r7
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	781b      	ldrb	r3, [r3, #0]
 800d94e:	011a      	lsls	r2, r3, #4
 800d950:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d952:	4413      	add	r3, r2
 800d954:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d958:	64bb      	str	r3, [r7, #72]	; 0x48
 800d95a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d112      	bne.n	800d988 <USB_EPStartXfer+0x45c>
 800d962:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d964:	881b      	ldrh	r3, [r3, #0]
 800d966:	b29b      	uxth	r3, r3
 800d968:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d96c:	b29a      	uxth	r2, r3
 800d96e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d970:	801a      	strh	r2, [r3, #0]
 800d972:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d974:	881b      	ldrh	r3, [r3, #0]
 800d976:	b29b      	uxth	r3, r3
 800d978:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d97c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d980:	b29a      	uxth	r2, r3
 800d982:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d984:	801a      	strh	r2, [r3, #0]
 800d986:	e057      	b.n	800da38 <USB_EPStartXfer+0x50c>
 800d988:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d98c:	2b3e      	cmp	r3, #62	; 0x3e
 800d98e:	d817      	bhi.n	800d9c0 <USB_EPStartXfer+0x494>
 800d990:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d994:	085b      	lsrs	r3, r3, #1
 800d996:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d99a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d99e:	f003 0301 	and.w	r3, r3, #1
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d004      	beq.n	800d9b0 <USB_EPStartXfer+0x484>
 800d9a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d9aa:	3301      	adds	r3, #1
 800d9ac:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d9b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d9b4:	b29b      	uxth	r3, r3
 800d9b6:	029b      	lsls	r3, r3, #10
 800d9b8:	b29a      	uxth	r2, r3
 800d9ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d9bc:	801a      	strh	r2, [r3, #0]
 800d9be:	e03b      	b.n	800da38 <USB_EPStartXfer+0x50c>
 800d9c0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d9c4:	095b      	lsrs	r3, r3, #5
 800d9c6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d9ca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d9ce:	f003 031f 	and.w	r3, r3, #31
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d104      	bne.n	800d9e0 <USB_EPStartXfer+0x4b4>
 800d9d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d9da:	3b01      	subs	r3, #1
 800d9dc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d9e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d9e4:	b29b      	uxth	r3, r3
 800d9e6:	029b      	lsls	r3, r3, #10
 800d9e8:	b29b      	uxth	r3, r3
 800d9ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d9ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d9f2:	b29a      	uxth	r2, r3
 800d9f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d9f6:	801a      	strh	r2, [r3, #0]
 800d9f8:	e01e      	b.n	800da38 <USB_EPStartXfer+0x50c>
 800d9fa:	463b      	mov	r3, r7
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	785b      	ldrb	r3, [r3, #1]
 800da00:	2b01      	cmp	r3, #1
 800da02:	d119      	bne.n	800da38 <USB_EPStartXfer+0x50c>
 800da04:	1d3b      	adds	r3, r7, #4
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	657b      	str	r3, [r7, #84]	; 0x54
 800da0a:	1d3b      	adds	r3, r7, #4
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800da12:	b29b      	uxth	r3, r3
 800da14:	461a      	mov	r2, r3
 800da16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da18:	4413      	add	r3, r2
 800da1a:	657b      	str	r3, [r7, #84]	; 0x54
 800da1c:	463b      	mov	r3, r7
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	781b      	ldrb	r3, [r3, #0]
 800da22:	011a      	lsls	r2, r3, #4
 800da24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da26:	4413      	add	r3, r2
 800da28:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800da2c:	653b      	str	r3, [r7, #80]	; 0x50
 800da2e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800da32:	b29a      	uxth	r2, r3
 800da34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da36:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800da38:	463b      	mov	r3, r7
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	891b      	ldrh	r3, [r3, #8]
 800da3e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800da42:	463b      	mov	r3, r7
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	6959      	ldr	r1, [r3, #20]
 800da48:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800da4c:	b29b      	uxth	r3, r3
 800da4e:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800da52:	1d38      	adds	r0, r7, #4
 800da54:	6800      	ldr	r0, [r0, #0]
 800da56:	f000 ffcc 	bl	800e9f2 <USB_WritePMA>
            ep->xfer_buff += len;
 800da5a:	463b      	mov	r3, r7
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	695a      	ldr	r2, [r3, #20]
 800da60:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800da64:	441a      	add	r2, r3
 800da66:	463b      	mov	r3, r7
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800da6c:	463b      	mov	r3, r7
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	6a1a      	ldr	r2, [r3, #32]
 800da72:	463b      	mov	r3, r7
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	691b      	ldr	r3, [r3, #16]
 800da78:	429a      	cmp	r2, r3
 800da7a:	d90e      	bls.n	800da9a <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 800da7c:	463b      	mov	r3, r7
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	691b      	ldr	r3, [r3, #16]
 800da82:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 800da86:	463b      	mov	r3, r7
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	6a1a      	ldr	r2, [r3, #32]
 800da8c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800da90:	1ad2      	subs	r2, r2, r3
 800da92:	463b      	mov	r3, r7
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	621a      	str	r2, [r3, #32]
 800da98:	e008      	b.n	800daac <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 800da9a:	463b      	mov	r3, r7
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	6a1b      	ldr	r3, [r3, #32]
 800daa0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 800daa4:	463b      	mov	r3, r7
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	2200      	movs	r2, #0
 800daaa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800daac:	1d3b      	adds	r3, r7, #4
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	647b      	str	r3, [r7, #68]	; 0x44
 800dab2:	463b      	mov	r3, r7
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	785b      	ldrb	r3, [r3, #1]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d164      	bne.n	800db86 <USB_EPStartXfer+0x65a>
 800dabc:	1d3b      	adds	r3, r7, #4
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dac2:	1d3b      	adds	r3, r7, #4
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800daca:	b29b      	uxth	r3, r3
 800dacc:	461a      	mov	r2, r3
 800dace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dad0:	4413      	add	r3, r2
 800dad2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dad4:	463b      	mov	r3, r7
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	781b      	ldrb	r3, [r3, #0]
 800dada:	011a      	lsls	r2, r3, #4
 800dadc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dade:	4413      	add	r3, r2
 800dae0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800dae4:	63bb      	str	r3, [r7, #56]	; 0x38
 800dae6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800daea:	2b00      	cmp	r3, #0
 800daec:	d112      	bne.n	800db14 <USB_EPStartXfer+0x5e8>
 800daee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daf0:	881b      	ldrh	r3, [r3, #0]
 800daf2:	b29b      	uxth	r3, r3
 800daf4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800daf8:	b29a      	uxth	r2, r3
 800dafa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dafc:	801a      	strh	r2, [r3, #0]
 800dafe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db00:	881b      	ldrh	r3, [r3, #0]
 800db02:	b29b      	uxth	r3, r3
 800db04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800db08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800db0c:	b29a      	uxth	r2, r3
 800db0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db10:	801a      	strh	r2, [r3, #0]
 800db12:	e054      	b.n	800dbbe <USB_EPStartXfer+0x692>
 800db14:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800db18:	2b3e      	cmp	r3, #62	; 0x3e
 800db1a:	d817      	bhi.n	800db4c <USB_EPStartXfer+0x620>
 800db1c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800db20:	085b      	lsrs	r3, r3, #1
 800db22:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800db26:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800db2a:	f003 0301 	and.w	r3, r3, #1
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d004      	beq.n	800db3c <USB_EPStartXfer+0x610>
 800db32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800db36:	3301      	adds	r3, #1
 800db38:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800db3c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800db40:	b29b      	uxth	r3, r3
 800db42:	029b      	lsls	r3, r3, #10
 800db44:	b29a      	uxth	r2, r3
 800db46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db48:	801a      	strh	r2, [r3, #0]
 800db4a:	e038      	b.n	800dbbe <USB_EPStartXfer+0x692>
 800db4c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800db50:	095b      	lsrs	r3, r3, #5
 800db52:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800db56:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800db5a:	f003 031f 	and.w	r3, r3, #31
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d104      	bne.n	800db6c <USB_EPStartXfer+0x640>
 800db62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800db66:	3b01      	subs	r3, #1
 800db68:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800db6c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800db70:	b29b      	uxth	r3, r3
 800db72:	029b      	lsls	r3, r3, #10
 800db74:	b29b      	uxth	r3, r3
 800db76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800db7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800db7e:	b29a      	uxth	r2, r3
 800db80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db82:	801a      	strh	r2, [r3, #0]
 800db84:	e01b      	b.n	800dbbe <USB_EPStartXfer+0x692>
 800db86:	463b      	mov	r3, r7
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	785b      	ldrb	r3, [r3, #1]
 800db8c:	2b01      	cmp	r3, #1
 800db8e:	d116      	bne.n	800dbbe <USB_EPStartXfer+0x692>
 800db90:	1d3b      	adds	r3, r7, #4
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800db98:	b29b      	uxth	r3, r3
 800db9a:	461a      	mov	r2, r3
 800db9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db9e:	4413      	add	r3, r2
 800dba0:	647b      	str	r3, [r7, #68]	; 0x44
 800dba2:	463b      	mov	r3, r7
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	781b      	ldrb	r3, [r3, #0]
 800dba8:	011a      	lsls	r2, r3, #4
 800dbaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dbac:	4413      	add	r3, r2
 800dbae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800dbb2:	643b      	str	r3, [r7, #64]	; 0x40
 800dbb4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800dbb8:	b29a      	uxth	r2, r3
 800dbba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dbbc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800dbbe:	463b      	mov	r3, r7
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	895b      	ldrh	r3, [r3, #10]
 800dbc4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800dbc8:	463b      	mov	r3, r7
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	6959      	ldr	r1, [r3, #20]
 800dbce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800dbd2:	b29b      	uxth	r3, r3
 800dbd4:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800dbd8:	1d38      	adds	r0, r7, #4
 800dbda:	6800      	ldr	r0, [r0, #0]
 800dbdc:	f000 ff09 	bl	800e9f2 <USB_WritePMA>
 800dbe0:	e1e2      	b.n	800dfa8 <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 800dbe2:	463b      	mov	r3, r7
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	6a1b      	ldr	r3, [r3, #32]
 800dbe8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800dbec:	1d3b      	adds	r3, r7, #4
 800dbee:	681a      	ldr	r2, [r3, #0]
 800dbf0:	463b      	mov	r3, r7
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	781b      	ldrb	r3, [r3, #0]
 800dbf6:	009b      	lsls	r3, r3, #2
 800dbf8:	4413      	add	r3, r2
 800dbfa:	881b      	ldrh	r3, [r3, #0]
 800dbfc:	b29b      	uxth	r3, r3
 800dbfe:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800dc02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dc06:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800dc0a:	1d3b      	adds	r3, r7, #4
 800dc0c:	681a      	ldr	r2, [r3, #0]
 800dc0e:	463b      	mov	r3, r7
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	781b      	ldrb	r3, [r3, #0]
 800dc14:	009b      	lsls	r3, r3, #2
 800dc16:	441a      	add	r2, r3
 800dc18:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800dc1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dc20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dc24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dc28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc2c:	b29b      	uxth	r3, r3
 800dc2e:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800dc30:	1d3b      	adds	r3, r7, #4
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	663b      	str	r3, [r7, #96]	; 0x60
 800dc36:	1d3b      	adds	r3, r7, #4
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dc3e:	b29b      	uxth	r3, r3
 800dc40:	461a      	mov	r2, r3
 800dc42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dc44:	4413      	add	r3, r2
 800dc46:	663b      	str	r3, [r7, #96]	; 0x60
 800dc48:	463b      	mov	r3, r7
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	781b      	ldrb	r3, [r3, #0]
 800dc4e:	011a      	lsls	r2, r3, #4
 800dc50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dc52:	4413      	add	r3, r2
 800dc54:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800dc58:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dc5a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800dc5e:	b29a      	uxth	r2, r3
 800dc60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dc62:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800dc64:	463b      	mov	r3, r7
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	891b      	ldrh	r3, [r3, #8]
 800dc6a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800dc6e:	463b      	mov	r3, r7
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	6959      	ldr	r1, [r3, #20]
 800dc74:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800dc78:	b29b      	uxth	r3, r3
 800dc7a:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800dc7e:	1d38      	adds	r0, r7, #4
 800dc80:	6800      	ldr	r0, [r0, #0]
 800dc82:	f000 feb6 	bl	800e9f2 <USB_WritePMA>
 800dc86:	e18f      	b.n	800dfa8 <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800dc88:	1d3b      	adds	r3, r7, #4
 800dc8a:	681a      	ldr	r2, [r3, #0]
 800dc8c:	463b      	mov	r3, r7
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	781b      	ldrb	r3, [r3, #0]
 800dc92:	009b      	lsls	r3, r3, #2
 800dc94:	4413      	add	r3, r2
 800dc96:	881b      	ldrh	r3, [r3, #0]
 800dc98:	b29b      	uxth	r3, r3
 800dc9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	f000 808f 	beq.w	800ddc2 <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800dca4:	1d3b      	adds	r3, r7, #4
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	67bb      	str	r3, [r7, #120]	; 0x78
 800dcaa:	463b      	mov	r3, r7
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	785b      	ldrb	r3, [r3, #1]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d164      	bne.n	800dd7e <USB_EPStartXfer+0x852>
 800dcb4:	1d3b      	adds	r3, r7, #4
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	673b      	str	r3, [r7, #112]	; 0x70
 800dcba:	1d3b      	adds	r3, r7, #4
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dcc2:	b29b      	uxth	r3, r3
 800dcc4:	461a      	mov	r2, r3
 800dcc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dcc8:	4413      	add	r3, r2
 800dcca:	673b      	str	r3, [r7, #112]	; 0x70
 800dccc:	463b      	mov	r3, r7
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	781b      	ldrb	r3, [r3, #0]
 800dcd2:	011a      	lsls	r2, r3, #4
 800dcd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dcd6:	4413      	add	r3, r2
 800dcd8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800dcdc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800dcde:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d112      	bne.n	800dd0c <USB_EPStartXfer+0x7e0>
 800dce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dce8:	881b      	ldrh	r3, [r3, #0]
 800dcea:	b29b      	uxth	r3, r3
 800dcec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800dcf0:	b29a      	uxth	r2, r3
 800dcf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dcf4:	801a      	strh	r2, [r3, #0]
 800dcf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dcf8:	881b      	ldrh	r3, [r3, #0]
 800dcfa:	b29b      	uxth	r3, r3
 800dcfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dd00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dd04:	b29a      	uxth	r2, r3
 800dd06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dd08:	801a      	strh	r2, [r3, #0]
 800dd0a:	e054      	b.n	800ddb6 <USB_EPStartXfer+0x88a>
 800dd0c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800dd10:	2b3e      	cmp	r3, #62	; 0x3e
 800dd12:	d817      	bhi.n	800dd44 <USB_EPStartXfer+0x818>
 800dd14:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800dd18:	085b      	lsrs	r3, r3, #1
 800dd1a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800dd1e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800dd22:	f003 0301 	and.w	r3, r3, #1
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d004      	beq.n	800dd34 <USB_EPStartXfer+0x808>
 800dd2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dd2e:	3301      	adds	r3, #1
 800dd30:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800dd34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dd38:	b29b      	uxth	r3, r3
 800dd3a:	029b      	lsls	r3, r3, #10
 800dd3c:	b29a      	uxth	r2, r3
 800dd3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dd40:	801a      	strh	r2, [r3, #0]
 800dd42:	e038      	b.n	800ddb6 <USB_EPStartXfer+0x88a>
 800dd44:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800dd48:	095b      	lsrs	r3, r3, #5
 800dd4a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800dd4e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800dd52:	f003 031f 	and.w	r3, r3, #31
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d104      	bne.n	800dd64 <USB_EPStartXfer+0x838>
 800dd5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dd5e:	3b01      	subs	r3, #1
 800dd60:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800dd64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dd68:	b29b      	uxth	r3, r3
 800dd6a:	029b      	lsls	r3, r3, #10
 800dd6c:	b29b      	uxth	r3, r3
 800dd6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dd72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dd76:	b29a      	uxth	r2, r3
 800dd78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dd7a:	801a      	strh	r2, [r3, #0]
 800dd7c:	e01b      	b.n	800ddb6 <USB_EPStartXfer+0x88a>
 800dd7e:	463b      	mov	r3, r7
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	785b      	ldrb	r3, [r3, #1]
 800dd84:	2b01      	cmp	r3, #1
 800dd86:	d116      	bne.n	800ddb6 <USB_EPStartXfer+0x88a>
 800dd88:	1d3b      	adds	r3, r7, #4
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dd90:	b29b      	uxth	r3, r3
 800dd92:	461a      	mov	r2, r3
 800dd94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dd96:	4413      	add	r3, r2
 800dd98:	67bb      	str	r3, [r7, #120]	; 0x78
 800dd9a:	463b      	mov	r3, r7
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	781b      	ldrb	r3, [r3, #0]
 800dda0:	011a      	lsls	r2, r3, #4
 800dda2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dda4:	4413      	add	r3, r2
 800dda6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ddaa:	677b      	str	r3, [r7, #116]	; 0x74
 800ddac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800ddb0:	b29a      	uxth	r2, r3
 800ddb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ddb4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800ddb6:	463b      	mov	r3, r7
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	895b      	ldrh	r3, [r3, #10]
 800ddbc:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 800ddc0:	e097      	b.n	800def2 <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ddc2:	463b      	mov	r3, r7
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	785b      	ldrb	r3, [r3, #1]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d168      	bne.n	800de9e <USB_EPStartXfer+0x972>
 800ddcc:	1d3b      	adds	r3, r7, #4
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ddd4:	1d3b      	adds	r3, r7, #4
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dddc:	b29b      	uxth	r3, r3
 800ddde:	461a      	mov	r2, r3
 800dde0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800dde4:	4413      	add	r3, r2
 800dde6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ddea:	463b      	mov	r3, r7
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	781b      	ldrb	r3, [r3, #0]
 800ddf0:	011a      	lsls	r2, r3, #4
 800ddf2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ddf6:	4413      	add	r3, r2
 800ddf8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ddfc:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ddfe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800de02:	2b00      	cmp	r3, #0
 800de04:	d112      	bne.n	800de2c <USB_EPStartXfer+0x900>
 800de06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800de08:	881b      	ldrh	r3, [r3, #0]
 800de0a:	b29b      	uxth	r3, r3
 800de0c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800de10:	b29a      	uxth	r2, r3
 800de12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800de14:	801a      	strh	r2, [r3, #0]
 800de16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800de18:	881b      	ldrh	r3, [r3, #0]
 800de1a:	b29b      	uxth	r3, r3
 800de1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800de20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800de24:	b29a      	uxth	r2, r3
 800de26:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800de28:	801a      	strh	r2, [r3, #0]
 800de2a:	e05d      	b.n	800dee8 <USB_EPStartXfer+0x9bc>
 800de2c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800de30:	2b3e      	cmp	r3, #62	; 0x3e
 800de32:	d817      	bhi.n	800de64 <USB_EPStartXfer+0x938>
 800de34:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800de38:	085b      	lsrs	r3, r3, #1
 800de3a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800de3e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800de42:	f003 0301 	and.w	r3, r3, #1
 800de46:	2b00      	cmp	r3, #0
 800de48:	d004      	beq.n	800de54 <USB_EPStartXfer+0x928>
 800de4a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800de4e:	3301      	adds	r3, #1
 800de50:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800de54:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800de58:	b29b      	uxth	r3, r3
 800de5a:	029b      	lsls	r3, r3, #10
 800de5c:	b29a      	uxth	r2, r3
 800de5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800de60:	801a      	strh	r2, [r3, #0]
 800de62:	e041      	b.n	800dee8 <USB_EPStartXfer+0x9bc>
 800de64:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800de68:	095b      	lsrs	r3, r3, #5
 800de6a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800de6e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800de72:	f003 031f 	and.w	r3, r3, #31
 800de76:	2b00      	cmp	r3, #0
 800de78:	d104      	bne.n	800de84 <USB_EPStartXfer+0x958>
 800de7a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800de7e:	3b01      	subs	r3, #1
 800de80:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800de84:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800de88:	b29b      	uxth	r3, r3
 800de8a:	029b      	lsls	r3, r3, #10
 800de8c:	b29b      	uxth	r3, r3
 800de8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800de92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800de96:	b29a      	uxth	r2, r3
 800de98:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800de9a:	801a      	strh	r2, [r3, #0]
 800de9c:	e024      	b.n	800dee8 <USB_EPStartXfer+0x9bc>
 800de9e:	463b      	mov	r3, r7
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	785b      	ldrb	r3, [r3, #1]
 800dea4:	2b01      	cmp	r3, #1
 800dea6:	d11f      	bne.n	800dee8 <USB_EPStartXfer+0x9bc>
 800dea8:	1d3b      	adds	r3, r7, #4
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800deb0:	1d3b      	adds	r3, r7, #4
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800deb8:	b29b      	uxth	r3, r3
 800deba:	461a      	mov	r2, r3
 800debc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dec0:	4413      	add	r3, r2
 800dec2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800dec6:	463b      	mov	r3, r7
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	781b      	ldrb	r3, [r3, #0]
 800decc:	011a      	lsls	r2, r3, #4
 800dece:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ded2:	4413      	add	r3, r2
 800ded4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ded8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800dedc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800dee0:	b29a      	uxth	r2, r3
 800dee2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dee6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800dee8:	463b      	mov	r3, r7
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	891b      	ldrh	r3, [r3, #8]
 800deee:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800def2:	463b      	mov	r3, r7
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	6959      	ldr	r1, [r3, #20]
 800def8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800defc:	b29b      	uxth	r3, r3
 800defe:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800df02:	1d38      	adds	r0, r7, #4
 800df04:	6800      	ldr	r0, [r0, #0]
 800df06:	f000 fd74 	bl	800e9f2 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800df0a:	463b      	mov	r3, r7
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	785b      	ldrb	r3, [r3, #1]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d122      	bne.n	800df5a <USB_EPStartXfer+0xa2e>
 800df14:	1d3b      	adds	r3, r7, #4
 800df16:	681a      	ldr	r2, [r3, #0]
 800df18:	463b      	mov	r3, r7
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	781b      	ldrb	r3, [r3, #0]
 800df1e:	009b      	lsls	r3, r3, #2
 800df20:	4413      	add	r3, r2
 800df22:	881b      	ldrh	r3, [r3, #0]
 800df24:	b29b      	uxth	r3, r3
 800df26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800df2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800df2e:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 800df32:	1d3b      	adds	r3, r7, #4
 800df34:	681a      	ldr	r2, [r3, #0]
 800df36:	463b      	mov	r3, r7
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	781b      	ldrb	r3, [r3, #0]
 800df3c:	009b      	lsls	r3, r3, #2
 800df3e:	441a      	add	r2, r3
 800df40:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800df44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800df48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800df4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800df50:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800df54:	b29b      	uxth	r3, r3
 800df56:	8013      	strh	r3, [r2, #0]
 800df58:	e026      	b.n	800dfa8 <USB_EPStartXfer+0xa7c>
 800df5a:	463b      	mov	r3, r7
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	785b      	ldrb	r3, [r3, #1]
 800df60:	2b01      	cmp	r3, #1
 800df62:	d121      	bne.n	800dfa8 <USB_EPStartXfer+0xa7c>
 800df64:	1d3b      	adds	r3, r7, #4
 800df66:	681a      	ldr	r2, [r3, #0]
 800df68:	463b      	mov	r3, r7
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	781b      	ldrb	r3, [r3, #0]
 800df6e:	009b      	lsls	r3, r3, #2
 800df70:	4413      	add	r3, r2
 800df72:	881b      	ldrh	r3, [r3, #0]
 800df74:	b29b      	uxth	r3, r3
 800df76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800df7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800df7e:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 800df82:	1d3b      	adds	r3, r7, #4
 800df84:	681a      	ldr	r2, [r3, #0]
 800df86:	463b      	mov	r3, r7
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	781b      	ldrb	r3, [r3, #0]
 800df8c:	009b      	lsls	r3, r3, #2
 800df8e:	441a      	add	r2, r3
 800df90:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800df94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800df98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800df9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800dfa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dfa4:	b29b      	uxth	r3, r3
 800dfa6:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800dfa8:	1d3b      	adds	r3, r7, #4
 800dfaa:	681a      	ldr	r2, [r3, #0]
 800dfac:	463b      	mov	r3, r7
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	781b      	ldrb	r3, [r3, #0]
 800dfb2:	009b      	lsls	r3, r3, #2
 800dfb4:	4413      	add	r3, r2
 800dfb6:	881b      	ldrh	r3, [r3, #0]
 800dfb8:	b29b      	uxth	r3, r3
 800dfba:	f107 020e 	add.w	r2, r7, #14
 800dfbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dfc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dfc6:	8013      	strh	r3, [r2, #0]
 800dfc8:	f107 030e 	add.w	r3, r7, #14
 800dfcc:	f107 020e 	add.w	r2, r7, #14
 800dfd0:	8812      	ldrh	r2, [r2, #0]
 800dfd2:	f082 0210 	eor.w	r2, r2, #16
 800dfd6:	801a      	strh	r2, [r3, #0]
 800dfd8:	f107 030e 	add.w	r3, r7, #14
 800dfdc:	f107 020e 	add.w	r2, r7, #14
 800dfe0:	8812      	ldrh	r2, [r2, #0]
 800dfe2:	f082 0220 	eor.w	r2, r2, #32
 800dfe6:	801a      	strh	r2, [r3, #0]
 800dfe8:	1d3b      	adds	r3, r7, #4
 800dfea:	681a      	ldr	r2, [r3, #0]
 800dfec:	463b      	mov	r3, r7
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	781b      	ldrb	r3, [r3, #0]
 800dff2:	009b      	lsls	r3, r3, #2
 800dff4:	441a      	add	r2, r3
 800dff6:	f107 030e 	add.w	r3, r7, #14
 800dffa:	881b      	ldrh	r3, [r3, #0]
 800dffc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e000:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e004:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e00c:	b29b      	uxth	r3, r3
 800e00e:	8013      	strh	r3, [r2, #0]
 800e010:	e3b5      	b.n	800e77e <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800e012:	463b      	mov	r3, r7
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	7b1b      	ldrb	r3, [r3, #12]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	f040 8090 	bne.w	800e13e <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 800e01e:	463b      	mov	r3, r7
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	699a      	ldr	r2, [r3, #24]
 800e024:	463b      	mov	r3, r7
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	691b      	ldr	r3, [r3, #16]
 800e02a:	429a      	cmp	r2, r3
 800e02c:	d90e      	bls.n	800e04c <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 800e02e:	463b      	mov	r3, r7
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	691b      	ldr	r3, [r3, #16]
 800e034:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 800e038:	463b      	mov	r3, r7
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	699a      	ldr	r2, [r3, #24]
 800e03e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e042:	1ad2      	subs	r2, r2, r3
 800e044:	463b      	mov	r3, r7
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	619a      	str	r2, [r3, #24]
 800e04a:	e008      	b.n	800e05e <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 800e04c:	463b      	mov	r3, r7
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	699b      	ldr	r3, [r3, #24]
 800e052:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 800e056:	463b      	mov	r3, r7
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	2200      	movs	r2, #0
 800e05c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800e05e:	1d3b      	adds	r3, r7, #4
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e066:	1d3b      	adds	r3, r7, #4
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e06e:	b29b      	uxth	r3, r3
 800e070:	461a      	mov	r2, r3
 800e072:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e076:	4413      	add	r3, r2
 800e078:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e07c:	463b      	mov	r3, r7
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	781b      	ldrb	r3, [r3, #0]
 800e082:	011a      	lsls	r2, r3, #4
 800e084:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e088:	4413      	add	r3, r2
 800e08a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800e08e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e092:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e096:	2b00      	cmp	r3, #0
 800e098:	d116      	bne.n	800e0c8 <USB_EPStartXfer+0xb9c>
 800e09a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e09e:	881b      	ldrh	r3, [r3, #0]
 800e0a0:	b29b      	uxth	r3, r3
 800e0a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800e0a6:	b29a      	uxth	r2, r3
 800e0a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e0ac:	801a      	strh	r2, [r3, #0]
 800e0ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e0b2:	881b      	ldrh	r3, [r3, #0]
 800e0b4:	b29b      	uxth	r3, r3
 800e0b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e0ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e0be:	b29a      	uxth	r2, r3
 800e0c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e0c4:	801a      	strh	r2, [r3, #0]
 800e0c6:	e32c      	b.n	800e722 <USB_EPStartXfer+0x11f6>
 800e0c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e0cc:	2b3e      	cmp	r3, #62	; 0x3e
 800e0ce:	d818      	bhi.n	800e102 <USB_EPStartXfer+0xbd6>
 800e0d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e0d4:	085b      	lsrs	r3, r3, #1
 800e0d6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800e0da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e0de:	f003 0301 	and.w	r3, r3, #1
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d004      	beq.n	800e0f0 <USB_EPStartXfer+0xbc4>
 800e0e6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e0ea:	3301      	adds	r3, #1
 800e0ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800e0f0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e0f4:	b29b      	uxth	r3, r3
 800e0f6:	029b      	lsls	r3, r3, #10
 800e0f8:	b29a      	uxth	r2, r3
 800e0fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e0fe:	801a      	strh	r2, [r3, #0]
 800e100:	e30f      	b.n	800e722 <USB_EPStartXfer+0x11f6>
 800e102:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e106:	095b      	lsrs	r3, r3, #5
 800e108:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800e10c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e110:	f003 031f 	and.w	r3, r3, #31
 800e114:	2b00      	cmp	r3, #0
 800e116:	d104      	bne.n	800e122 <USB_EPStartXfer+0xbf6>
 800e118:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e11c:	3b01      	subs	r3, #1
 800e11e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800e122:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e126:	b29b      	uxth	r3, r3
 800e128:	029b      	lsls	r3, r3, #10
 800e12a:	b29b      	uxth	r3, r3
 800e12c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e130:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e134:	b29a      	uxth	r2, r3
 800e136:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e13a:	801a      	strh	r2, [r3, #0]
 800e13c:	e2f1      	b.n	800e722 <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 800e13e:	463b      	mov	r3, r7
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	78db      	ldrb	r3, [r3, #3]
 800e144:	2b02      	cmp	r3, #2
 800e146:	f040 818f 	bne.w	800e468 <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800e14a:	463b      	mov	r3, r7
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	785b      	ldrb	r3, [r3, #1]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d175      	bne.n	800e240 <USB_EPStartXfer+0xd14>
 800e154:	1d3b      	adds	r3, r7, #4
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e15c:	1d3b      	adds	r3, r7, #4
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e164:	b29b      	uxth	r3, r3
 800e166:	461a      	mov	r2, r3
 800e168:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e16c:	4413      	add	r3, r2
 800e16e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e172:	463b      	mov	r3, r7
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	781b      	ldrb	r3, [r3, #0]
 800e178:	011a      	lsls	r2, r3, #4
 800e17a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e17e:	4413      	add	r3, r2
 800e180:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800e184:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e188:	463b      	mov	r3, r7
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	691b      	ldr	r3, [r3, #16]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d116      	bne.n	800e1c0 <USB_EPStartXfer+0xc94>
 800e192:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e196:	881b      	ldrh	r3, [r3, #0]
 800e198:	b29b      	uxth	r3, r3
 800e19a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800e19e:	b29a      	uxth	r2, r3
 800e1a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e1a4:	801a      	strh	r2, [r3, #0]
 800e1a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e1aa:	881b      	ldrh	r3, [r3, #0]
 800e1ac:	b29b      	uxth	r3, r3
 800e1ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e1b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e1b6:	b29a      	uxth	r2, r3
 800e1b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e1bc:	801a      	strh	r2, [r3, #0]
 800e1be:	e065      	b.n	800e28c <USB_EPStartXfer+0xd60>
 800e1c0:	463b      	mov	r3, r7
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	691b      	ldr	r3, [r3, #16]
 800e1c6:	2b3e      	cmp	r3, #62	; 0x3e
 800e1c8:	d81a      	bhi.n	800e200 <USB_EPStartXfer+0xcd4>
 800e1ca:	463b      	mov	r3, r7
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	691b      	ldr	r3, [r3, #16]
 800e1d0:	085b      	lsrs	r3, r3, #1
 800e1d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e1d6:	463b      	mov	r3, r7
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	691b      	ldr	r3, [r3, #16]
 800e1dc:	f003 0301 	and.w	r3, r3, #1
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d004      	beq.n	800e1ee <USB_EPStartXfer+0xcc2>
 800e1e4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e1e8:	3301      	adds	r3, #1
 800e1ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e1ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e1f2:	b29b      	uxth	r3, r3
 800e1f4:	029b      	lsls	r3, r3, #10
 800e1f6:	b29a      	uxth	r2, r3
 800e1f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e1fc:	801a      	strh	r2, [r3, #0]
 800e1fe:	e045      	b.n	800e28c <USB_EPStartXfer+0xd60>
 800e200:	463b      	mov	r3, r7
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	691b      	ldr	r3, [r3, #16]
 800e206:	095b      	lsrs	r3, r3, #5
 800e208:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e20c:	463b      	mov	r3, r7
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	691b      	ldr	r3, [r3, #16]
 800e212:	f003 031f 	and.w	r3, r3, #31
 800e216:	2b00      	cmp	r3, #0
 800e218:	d104      	bne.n	800e224 <USB_EPStartXfer+0xcf8>
 800e21a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e21e:	3b01      	subs	r3, #1
 800e220:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e224:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e228:	b29b      	uxth	r3, r3
 800e22a:	029b      	lsls	r3, r3, #10
 800e22c:	b29b      	uxth	r3, r3
 800e22e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e232:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e236:	b29a      	uxth	r2, r3
 800e238:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e23c:	801a      	strh	r2, [r3, #0]
 800e23e:	e025      	b.n	800e28c <USB_EPStartXfer+0xd60>
 800e240:	463b      	mov	r3, r7
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	785b      	ldrb	r3, [r3, #1]
 800e246:	2b01      	cmp	r3, #1
 800e248:	d120      	bne.n	800e28c <USB_EPStartXfer+0xd60>
 800e24a:	1d3b      	adds	r3, r7, #4
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e252:	1d3b      	adds	r3, r7, #4
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e25a:	b29b      	uxth	r3, r3
 800e25c:	461a      	mov	r2, r3
 800e25e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e262:	4413      	add	r3, r2
 800e264:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e268:	463b      	mov	r3, r7
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	781b      	ldrb	r3, [r3, #0]
 800e26e:	011a      	lsls	r2, r3, #4
 800e270:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e274:	4413      	add	r3, r2
 800e276:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800e27a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e27e:	463b      	mov	r3, r7
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	691b      	ldr	r3, [r3, #16]
 800e284:	b29a      	uxth	r2, r3
 800e286:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e28a:	801a      	strh	r2, [r3, #0]
 800e28c:	1d3b      	adds	r3, r7, #4
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800e294:	463b      	mov	r3, r7
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	785b      	ldrb	r3, [r3, #1]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d175      	bne.n	800e38a <USB_EPStartXfer+0xe5e>
 800e29e:	1d3b      	adds	r3, r7, #4
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800e2a6:	1d3b      	adds	r3, r7, #4
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e2ae:	b29b      	uxth	r3, r3
 800e2b0:	461a      	mov	r2, r3
 800e2b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e2b6:	4413      	add	r3, r2
 800e2b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800e2bc:	463b      	mov	r3, r7
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	781b      	ldrb	r3, [r3, #0]
 800e2c2:	011a      	lsls	r2, r3, #4
 800e2c4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e2c8:	4413      	add	r3, r2
 800e2ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800e2ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e2d2:	463b      	mov	r3, r7
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	691b      	ldr	r3, [r3, #16]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d116      	bne.n	800e30a <USB_EPStartXfer+0xdde>
 800e2dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e2e0:	881b      	ldrh	r3, [r3, #0]
 800e2e2:	b29b      	uxth	r3, r3
 800e2e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800e2e8:	b29a      	uxth	r2, r3
 800e2ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e2ee:	801a      	strh	r2, [r3, #0]
 800e2f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e2f4:	881b      	ldrh	r3, [r3, #0]
 800e2f6:	b29b      	uxth	r3, r3
 800e2f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e2fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e300:	b29a      	uxth	r2, r3
 800e302:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e306:	801a      	strh	r2, [r3, #0]
 800e308:	e061      	b.n	800e3ce <USB_EPStartXfer+0xea2>
 800e30a:	463b      	mov	r3, r7
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	691b      	ldr	r3, [r3, #16]
 800e310:	2b3e      	cmp	r3, #62	; 0x3e
 800e312:	d81a      	bhi.n	800e34a <USB_EPStartXfer+0xe1e>
 800e314:	463b      	mov	r3, r7
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	691b      	ldr	r3, [r3, #16]
 800e31a:	085b      	lsrs	r3, r3, #1
 800e31c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e320:	463b      	mov	r3, r7
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	691b      	ldr	r3, [r3, #16]
 800e326:	f003 0301 	and.w	r3, r3, #1
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d004      	beq.n	800e338 <USB_EPStartXfer+0xe0c>
 800e32e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e332:	3301      	adds	r3, #1
 800e334:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e33c:	b29b      	uxth	r3, r3
 800e33e:	029b      	lsls	r3, r3, #10
 800e340:	b29a      	uxth	r2, r3
 800e342:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e346:	801a      	strh	r2, [r3, #0]
 800e348:	e041      	b.n	800e3ce <USB_EPStartXfer+0xea2>
 800e34a:	463b      	mov	r3, r7
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	691b      	ldr	r3, [r3, #16]
 800e350:	095b      	lsrs	r3, r3, #5
 800e352:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e356:	463b      	mov	r3, r7
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	691b      	ldr	r3, [r3, #16]
 800e35c:	f003 031f 	and.w	r3, r3, #31
 800e360:	2b00      	cmp	r3, #0
 800e362:	d104      	bne.n	800e36e <USB_EPStartXfer+0xe42>
 800e364:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e368:	3b01      	subs	r3, #1
 800e36a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e36e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e372:	b29b      	uxth	r3, r3
 800e374:	029b      	lsls	r3, r3, #10
 800e376:	b29b      	uxth	r3, r3
 800e378:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e37c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e380:	b29a      	uxth	r2, r3
 800e382:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e386:	801a      	strh	r2, [r3, #0]
 800e388:	e021      	b.n	800e3ce <USB_EPStartXfer+0xea2>
 800e38a:	463b      	mov	r3, r7
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	785b      	ldrb	r3, [r3, #1]
 800e390:	2b01      	cmp	r3, #1
 800e392:	d11c      	bne.n	800e3ce <USB_EPStartXfer+0xea2>
 800e394:	1d3b      	adds	r3, r7, #4
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e39c:	b29b      	uxth	r3, r3
 800e39e:	461a      	mov	r2, r3
 800e3a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e3a4:	4413      	add	r3, r2
 800e3a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800e3aa:	463b      	mov	r3, r7
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	781b      	ldrb	r3, [r3, #0]
 800e3b0:	011a      	lsls	r2, r3, #4
 800e3b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e3b6:	4413      	add	r3, r2
 800e3b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800e3bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800e3c0:	463b      	mov	r3, r7
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	691b      	ldr	r3, [r3, #16]
 800e3c6:	b29a      	uxth	r2, r3
 800e3c8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e3cc:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 800e3ce:	463b      	mov	r3, r7
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	69db      	ldr	r3, [r3, #28]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	f000 81a4 	beq.w	800e722 <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800e3da:	1d3b      	adds	r3, r7, #4
 800e3dc:	681a      	ldr	r2, [r3, #0]
 800e3de:	463b      	mov	r3, r7
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	781b      	ldrb	r3, [r3, #0]
 800e3e4:	009b      	lsls	r3, r3, #2
 800e3e6:	4413      	add	r3, r2
 800e3e8:	881b      	ldrh	r3, [r3, #0]
 800e3ea:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800e3ee:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800e3f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d005      	beq.n	800e406 <USB_EPStartXfer+0xeda>
 800e3fa:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800e3fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e402:	2b00      	cmp	r3, #0
 800e404:	d10d      	bne.n	800e422 <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800e406:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800e40a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800e40e:	2b00      	cmp	r3, #0
 800e410:	f040 8187 	bne.w	800e722 <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800e414:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800e418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	f040 8180 	bne.w	800e722 <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800e422:	1d3b      	adds	r3, r7, #4
 800e424:	681a      	ldr	r2, [r3, #0]
 800e426:	463b      	mov	r3, r7
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	781b      	ldrb	r3, [r3, #0]
 800e42c:	009b      	lsls	r3, r3, #2
 800e42e:	4413      	add	r3, r2
 800e430:	881b      	ldrh	r3, [r3, #0]
 800e432:	b29b      	uxth	r3, r3
 800e434:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e438:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e43c:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 800e440:	1d3b      	adds	r3, r7, #4
 800e442:	681a      	ldr	r2, [r3, #0]
 800e444:	463b      	mov	r3, r7
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	781b      	ldrb	r3, [r3, #0]
 800e44a:	009b      	lsls	r3, r3, #2
 800e44c:	441a      	add	r2, r3
 800e44e:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800e452:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e456:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e45a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e45e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800e462:	b29b      	uxth	r3, r3
 800e464:	8013      	strh	r3, [r2, #0]
 800e466:	e15c      	b.n	800e722 <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800e468:	463b      	mov	r3, r7
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	78db      	ldrb	r3, [r3, #3]
 800e46e:	2b01      	cmp	r3, #1
 800e470:	f040 8155 	bne.w	800e71e <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 800e474:	463b      	mov	r3, r7
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	699a      	ldr	r2, [r3, #24]
 800e47a:	463b      	mov	r3, r7
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	691b      	ldr	r3, [r3, #16]
 800e480:	429a      	cmp	r2, r3
 800e482:	d90e      	bls.n	800e4a2 <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 800e484:	463b      	mov	r3, r7
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	691b      	ldr	r3, [r3, #16]
 800e48a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 800e48e:	463b      	mov	r3, r7
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	699a      	ldr	r2, [r3, #24]
 800e494:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e498:	1ad2      	subs	r2, r2, r3
 800e49a:	463b      	mov	r3, r7
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	619a      	str	r2, [r3, #24]
 800e4a0:	e008      	b.n	800e4b4 <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 800e4a2:	463b      	mov	r3, r7
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	699b      	ldr	r3, [r3, #24]
 800e4a8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 800e4ac:	463b      	mov	r3, r7
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	2200      	movs	r2, #0
 800e4b2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800e4b4:	463b      	mov	r3, r7
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	785b      	ldrb	r3, [r3, #1]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d16f      	bne.n	800e59e <USB_EPStartXfer+0x1072>
 800e4be:	1d3b      	adds	r3, r7, #4
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e4c6:	1d3b      	adds	r3, r7, #4
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e4ce:	b29b      	uxth	r3, r3
 800e4d0:	461a      	mov	r2, r3
 800e4d2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800e4d6:	4413      	add	r3, r2
 800e4d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e4dc:	463b      	mov	r3, r7
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	781b      	ldrb	r3, [r3, #0]
 800e4e2:	011a      	lsls	r2, r3, #4
 800e4e4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800e4e8:	4413      	add	r3, r2
 800e4ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800e4ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800e4f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d116      	bne.n	800e528 <USB_EPStartXfer+0xffc>
 800e4fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e4fe:	881b      	ldrh	r3, [r3, #0]
 800e500:	b29b      	uxth	r3, r3
 800e502:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800e506:	b29a      	uxth	r2, r3
 800e508:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e50c:	801a      	strh	r2, [r3, #0]
 800e50e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e512:	881b      	ldrh	r3, [r3, #0]
 800e514:	b29b      	uxth	r3, r3
 800e516:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e51a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e51e:	b29a      	uxth	r2, r3
 800e520:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e524:	801a      	strh	r2, [r3, #0]
 800e526:	e05f      	b.n	800e5e8 <USB_EPStartXfer+0x10bc>
 800e528:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e52c:	2b3e      	cmp	r3, #62	; 0x3e
 800e52e:	d818      	bhi.n	800e562 <USB_EPStartXfer+0x1036>
 800e530:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e534:	085b      	lsrs	r3, r3, #1
 800e536:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800e53a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e53e:	f003 0301 	and.w	r3, r3, #1
 800e542:	2b00      	cmp	r3, #0
 800e544:	d004      	beq.n	800e550 <USB_EPStartXfer+0x1024>
 800e546:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e54a:	3301      	adds	r3, #1
 800e54c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800e550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e554:	b29b      	uxth	r3, r3
 800e556:	029b      	lsls	r3, r3, #10
 800e558:	b29a      	uxth	r2, r3
 800e55a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e55e:	801a      	strh	r2, [r3, #0]
 800e560:	e042      	b.n	800e5e8 <USB_EPStartXfer+0x10bc>
 800e562:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e566:	095b      	lsrs	r3, r3, #5
 800e568:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800e56c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e570:	f003 031f 	and.w	r3, r3, #31
 800e574:	2b00      	cmp	r3, #0
 800e576:	d104      	bne.n	800e582 <USB_EPStartXfer+0x1056>
 800e578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e57c:	3b01      	subs	r3, #1
 800e57e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800e582:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e586:	b29b      	uxth	r3, r3
 800e588:	029b      	lsls	r3, r3, #10
 800e58a:	b29b      	uxth	r3, r3
 800e58c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e590:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e594:	b29a      	uxth	r2, r3
 800e596:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e59a:	801a      	strh	r2, [r3, #0]
 800e59c:	e024      	b.n	800e5e8 <USB_EPStartXfer+0x10bc>
 800e59e:	463b      	mov	r3, r7
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	785b      	ldrb	r3, [r3, #1]
 800e5a4:	2b01      	cmp	r3, #1
 800e5a6:	d11f      	bne.n	800e5e8 <USB_EPStartXfer+0x10bc>
 800e5a8:	1d3b      	adds	r3, r7, #4
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e5b0:	1d3b      	adds	r3, r7, #4
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e5b8:	b29b      	uxth	r3, r3
 800e5ba:	461a      	mov	r2, r3
 800e5bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e5c0:	4413      	add	r3, r2
 800e5c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e5c6:	463b      	mov	r3, r7
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	781b      	ldrb	r3, [r3, #0]
 800e5cc:	011a      	lsls	r2, r3, #4
 800e5ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e5d2:	4413      	add	r3, r2
 800e5d4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800e5d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800e5dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e5e0:	b29a      	uxth	r2, r3
 800e5e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e5e6:	801a      	strh	r2, [r3, #0]
 800e5e8:	1d3b      	adds	r3, r7, #4
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e5f0:	463b      	mov	r3, r7
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	785b      	ldrb	r3, [r3, #1]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d16f      	bne.n	800e6da <USB_EPStartXfer+0x11ae>
 800e5fa:	1d3b      	adds	r3, r7, #4
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e602:	1d3b      	adds	r3, r7, #4
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e60a:	b29b      	uxth	r3, r3
 800e60c:	461a      	mov	r2, r3
 800e60e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e612:	4413      	add	r3, r2
 800e614:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e618:	463b      	mov	r3, r7
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	781b      	ldrb	r3, [r3, #0]
 800e61e:	011a      	lsls	r2, r3, #4
 800e620:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e624:	4413      	add	r3, r2
 800e626:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800e62a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800e62e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e632:	2b00      	cmp	r3, #0
 800e634:	d116      	bne.n	800e664 <USB_EPStartXfer+0x1138>
 800e636:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e63a:	881b      	ldrh	r3, [r3, #0]
 800e63c:	b29b      	uxth	r3, r3
 800e63e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800e642:	b29a      	uxth	r2, r3
 800e644:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e648:	801a      	strh	r2, [r3, #0]
 800e64a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e64e:	881b      	ldrh	r3, [r3, #0]
 800e650:	b29b      	uxth	r3, r3
 800e652:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e656:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e65a:	b29a      	uxth	r2, r3
 800e65c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e660:	801a      	strh	r2, [r3, #0]
 800e662:	e05e      	b.n	800e722 <USB_EPStartXfer+0x11f6>
 800e664:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e668:	2b3e      	cmp	r3, #62	; 0x3e
 800e66a:	d818      	bhi.n	800e69e <USB_EPStartXfer+0x1172>
 800e66c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e670:	085b      	lsrs	r3, r3, #1
 800e672:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e676:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e67a:	f003 0301 	and.w	r3, r3, #1
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d004      	beq.n	800e68c <USB_EPStartXfer+0x1160>
 800e682:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e686:	3301      	adds	r3, #1
 800e688:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e68c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e690:	b29b      	uxth	r3, r3
 800e692:	029b      	lsls	r3, r3, #10
 800e694:	b29a      	uxth	r2, r3
 800e696:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e69a:	801a      	strh	r2, [r3, #0]
 800e69c:	e041      	b.n	800e722 <USB_EPStartXfer+0x11f6>
 800e69e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e6a2:	095b      	lsrs	r3, r3, #5
 800e6a4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e6a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e6ac:	f003 031f 	and.w	r3, r3, #31
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d104      	bne.n	800e6be <USB_EPStartXfer+0x1192>
 800e6b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e6b8:	3b01      	subs	r3, #1
 800e6ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e6be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e6c2:	b29b      	uxth	r3, r3
 800e6c4:	029b      	lsls	r3, r3, #10
 800e6c6:	b29b      	uxth	r3, r3
 800e6c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e6cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e6d0:	b29a      	uxth	r2, r3
 800e6d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e6d6:	801a      	strh	r2, [r3, #0]
 800e6d8:	e023      	b.n	800e722 <USB_EPStartXfer+0x11f6>
 800e6da:	463b      	mov	r3, r7
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	785b      	ldrb	r3, [r3, #1]
 800e6e0:	2b01      	cmp	r3, #1
 800e6e2:	d11e      	bne.n	800e722 <USB_EPStartXfer+0x11f6>
 800e6e4:	1d3b      	adds	r3, r7, #4
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e6ec:	b29b      	uxth	r3, r3
 800e6ee:	461a      	mov	r2, r3
 800e6f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e6f4:	4413      	add	r3, r2
 800e6f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e6fa:	463b      	mov	r3, r7
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	781b      	ldrb	r3, [r3, #0]
 800e700:	011a      	lsls	r2, r3, #4
 800e702:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e706:	4413      	add	r3, r2
 800e708:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800e70c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e710:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e714:	b29a      	uxth	r2, r3
 800e716:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800e71a:	801a      	strh	r2, [r3, #0]
 800e71c:	e001      	b.n	800e722 <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 800e71e:	2301      	movs	r3, #1
 800e720:	e02e      	b.n	800e780 <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e722:	1d3b      	adds	r3, r7, #4
 800e724:	681a      	ldr	r2, [r3, #0]
 800e726:	463b      	mov	r3, r7
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	781b      	ldrb	r3, [r3, #0]
 800e72c:	009b      	lsls	r3, r3, #2
 800e72e:	4413      	add	r3, r2
 800e730:	881b      	ldrh	r3, [r3, #0]
 800e732:	b29b      	uxth	r3, r3
 800e734:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e738:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e73c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800e740:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800e744:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800e748:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800e74c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800e750:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800e754:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800e758:	1d3b      	adds	r3, r7, #4
 800e75a:	681a      	ldr	r2, [r3, #0]
 800e75c:	463b      	mov	r3, r7
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	781b      	ldrb	r3, [r3, #0]
 800e762:	009b      	lsls	r3, r3, #2
 800e764:	441a      	add	r2, r3
 800e766:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800e76a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e76e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e772:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e776:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e77a:	b29b      	uxth	r3, r3
 800e77c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e77e:	2300      	movs	r3, #0
}
 800e780:	4618      	mov	r0, r3
 800e782:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800e786:	46bd      	mov	sp, r7
 800e788:	bd80      	pop	{r7, pc}

0800e78a <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e78a:	b480      	push	{r7}
 800e78c:	b085      	sub	sp, #20
 800e78e:	af00      	add	r7, sp, #0
 800e790:	6078      	str	r0, [r7, #4]
 800e792:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800e794:	683b      	ldr	r3, [r7, #0]
 800e796:	785b      	ldrb	r3, [r3, #1]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d020      	beq.n	800e7de <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800e79c:	687a      	ldr	r2, [r7, #4]
 800e79e:	683b      	ldr	r3, [r7, #0]
 800e7a0:	781b      	ldrb	r3, [r3, #0]
 800e7a2:	009b      	lsls	r3, r3, #2
 800e7a4:	4413      	add	r3, r2
 800e7a6:	881b      	ldrh	r3, [r3, #0]
 800e7a8:	b29b      	uxth	r3, r3
 800e7aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e7ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e7b2:	81bb      	strh	r3, [r7, #12]
 800e7b4:	89bb      	ldrh	r3, [r7, #12]
 800e7b6:	f083 0310 	eor.w	r3, r3, #16
 800e7ba:	81bb      	strh	r3, [r7, #12]
 800e7bc:	687a      	ldr	r2, [r7, #4]
 800e7be:	683b      	ldr	r3, [r7, #0]
 800e7c0:	781b      	ldrb	r3, [r3, #0]
 800e7c2:	009b      	lsls	r3, r3, #2
 800e7c4:	441a      	add	r2, r3
 800e7c6:	89bb      	ldrh	r3, [r7, #12]
 800e7c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e7cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e7d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e7d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e7d8:	b29b      	uxth	r3, r3
 800e7da:	8013      	strh	r3, [r2, #0]
 800e7dc:	e01f      	b.n	800e81e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800e7de:	687a      	ldr	r2, [r7, #4]
 800e7e0:	683b      	ldr	r3, [r7, #0]
 800e7e2:	781b      	ldrb	r3, [r3, #0]
 800e7e4:	009b      	lsls	r3, r3, #2
 800e7e6:	4413      	add	r3, r2
 800e7e8:	881b      	ldrh	r3, [r3, #0]
 800e7ea:	b29b      	uxth	r3, r3
 800e7ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e7f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e7f4:	81fb      	strh	r3, [r7, #14]
 800e7f6:	89fb      	ldrh	r3, [r7, #14]
 800e7f8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800e7fc:	81fb      	strh	r3, [r7, #14]
 800e7fe:	687a      	ldr	r2, [r7, #4]
 800e800:	683b      	ldr	r3, [r7, #0]
 800e802:	781b      	ldrb	r3, [r3, #0]
 800e804:	009b      	lsls	r3, r3, #2
 800e806:	441a      	add	r2, r3
 800e808:	89fb      	ldrh	r3, [r7, #14]
 800e80a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e80e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e812:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e816:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e81a:	b29b      	uxth	r3, r3
 800e81c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e81e:	2300      	movs	r3, #0
}
 800e820:	4618      	mov	r0, r3
 800e822:	3714      	adds	r7, #20
 800e824:	46bd      	mov	sp, r7
 800e826:	bc80      	pop	{r7}
 800e828:	4770      	bx	lr

0800e82a <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e82a:	b480      	push	{r7}
 800e82c:	b087      	sub	sp, #28
 800e82e:	af00      	add	r7, sp, #0
 800e830:	6078      	str	r0, [r7, #4]
 800e832:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800e834:	683b      	ldr	r3, [r7, #0]
 800e836:	7b1b      	ldrb	r3, [r3, #12]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	f040 809d 	bne.w	800e978 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800e83e:	683b      	ldr	r3, [r7, #0]
 800e840:	785b      	ldrb	r3, [r3, #1]
 800e842:	2b00      	cmp	r3, #0
 800e844:	d04c      	beq.n	800e8e0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e846:	687a      	ldr	r2, [r7, #4]
 800e848:	683b      	ldr	r3, [r7, #0]
 800e84a:	781b      	ldrb	r3, [r3, #0]
 800e84c:	009b      	lsls	r3, r3, #2
 800e84e:	4413      	add	r3, r2
 800e850:	881b      	ldrh	r3, [r3, #0]
 800e852:	823b      	strh	r3, [r7, #16]
 800e854:	8a3b      	ldrh	r3, [r7, #16]
 800e856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d01b      	beq.n	800e896 <USB_EPClearStall+0x6c>
 800e85e:	687a      	ldr	r2, [r7, #4]
 800e860:	683b      	ldr	r3, [r7, #0]
 800e862:	781b      	ldrb	r3, [r3, #0]
 800e864:	009b      	lsls	r3, r3, #2
 800e866:	4413      	add	r3, r2
 800e868:	881b      	ldrh	r3, [r3, #0]
 800e86a:	b29b      	uxth	r3, r3
 800e86c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e870:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e874:	81fb      	strh	r3, [r7, #14]
 800e876:	687a      	ldr	r2, [r7, #4]
 800e878:	683b      	ldr	r3, [r7, #0]
 800e87a:	781b      	ldrb	r3, [r3, #0]
 800e87c:	009b      	lsls	r3, r3, #2
 800e87e:	441a      	add	r2, r3
 800e880:	89fb      	ldrh	r3, [r7, #14]
 800e882:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e886:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e88a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e88e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800e892:	b29b      	uxth	r3, r3
 800e894:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e896:	683b      	ldr	r3, [r7, #0]
 800e898:	78db      	ldrb	r3, [r3, #3]
 800e89a:	2b01      	cmp	r3, #1
 800e89c:	d06c      	beq.n	800e978 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800e89e:	687a      	ldr	r2, [r7, #4]
 800e8a0:	683b      	ldr	r3, [r7, #0]
 800e8a2:	781b      	ldrb	r3, [r3, #0]
 800e8a4:	009b      	lsls	r3, r3, #2
 800e8a6:	4413      	add	r3, r2
 800e8a8:	881b      	ldrh	r3, [r3, #0]
 800e8aa:	b29b      	uxth	r3, r3
 800e8ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e8b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e8b4:	81bb      	strh	r3, [r7, #12]
 800e8b6:	89bb      	ldrh	r3, [r7, #12]
 800e8b8:	f083 0320 	eor.w	r3, r3, #32
 800e8bc:	81bb      	strh	r3, [r7, #12]
 800e8be:	687a      	ldr	r2, [r7, #4]
 800e8c0:	683b      	ldr	r3, [r7, #0]
 800e8c2:	781b      	ldrb	r3, [r3, #0]
 800e8c4:	009b      	lsls	r3, r3, #2
 800e8c6:	441a      	add	r2, r3
 800e8c8:	89bb      	ldrh	r3, [r7, #12]
 800e8ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e8ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e8d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e8d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e8da:	b29b      	uxth	r3, r3
 800e8dc:	8013      	strh	r3, [r2, #0]
 800e8de:	e04b      	b.n	800e978 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e8e0:	687a      	ldr	r2, [r7, #4]
 800e8e2:	683b      	ldr	r3, [r7, #0]
 800e8e4:	781b      	ldrb	r3, [r3, #0]
 800e8e6:	009b      	lsls	r3, r3, #2
 800e8e8:	4413      	add	r3, r2
 800e8ea:	881b      	ldrh	r3, [r3, #0]
 800e8ec:	82fb      	strh	r3, [r7, #22]
 800e8ee:	8afb      	ldrh	r3, [r7, #22]
 800e8f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d01b      	beq.n	800e930 <USB_EPClearStall+0x106>
 800e8f8:	687a      	ldr	r2, [r7, #4]
 800e8fa:	683b      	ldr	r3, [r7, #0]
 800e8fc:	781b      	ldrb	r3, [r3, #0]
 800e8fe:	009b      	lsls	r3, r3, #2
 800e900:	4413      	add	r3, r2
 800e902:	881b      	ldrh	r3, [r3, #0]
 800e904:	b29b      	uxth	r3, r3
 800e906:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e90a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e90e:	82bb      	strh	r3, [r7, #20]
 800e910:	687a      	ldr	r2, [r7, #4]
 800e912:	683b      	ldr	r3, [r7, #0]
 800e914:	781b      	ldrb	r3, [r3, #0]
 800e916:	009b      	lsls	r3, r3, #2
 800e918:	441a      	add	r2, r3
 800e91a:	8abb      	ldrh	r3, [r7, #20]
 800e91c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e920:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e924:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800e928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e92c:	b29b      	uxth	r3, r3
 800e92e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e930:	687a      	ldr	r2, [r7, #4]
 800e932:	683b      	ldr	r3, [r7, #0]
 800e934:	781b      	ldrb	r3, [r3, #0]
 800e936:	009b      	lsls	r3, r3, #2
 800e938:	4413      	add	r3, r2
 800e93a:	881b      	ldrh	r3, [r3, #0]
 800e93c:	b29b      	uxth	r3, r3
 800e93e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e946:	827b      	strh	r3, [r7, #18]
 800e948:	8a7b      	ldrh	r3, [r7, #18]
 800e94a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800e94e:	827b      	strh	r3, [r7, #18]
 800e950:	8a7b      	ldrh	r3, [r7, #18]
 800e952:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800e956:	827b      	strh	r3, [r7, #18]
 800e958:	687a      	ldr	r2, [r7, #4]
 800e95a:	683b      	ldr	r3, [r7, #0]
 800e95c:	781b      	ldrb	r3, [r3, #0]
 800e95e:	009b      	lsls	r3, r3, #2
 800e960:	441a      	add	r2, r3
 800e962:	8a7b      	ldrh	r3, [r7, #18]
 800e964:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e968:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e96c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e974:	b29b      	uxth	r3, r3
 800e976:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800e978:	2300      	movs	r3, #0
}
 800e97a:	4618      	mov	r0, r3
 800e97c:	371c      	adds	r7, #28
 800e97e:	46bd      	mov	sp, r7
 800e980:	bc80      	pop	{r7}
 800e982:	4770      	bx	lr

0800e984 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800e984:	b480      	push	{r7}
 800e986:	b083      	sub	sp, #12
 800e988:	af00      	add	r7, sp, #0
 800e98a:	6078      	str	r0, [r7, #4]
 800e98c:	460b      	mov	r3, r1
 800e98e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800e990:	78fb      	ldrb	r3, [r7, #3]
 800e992:	2b00      	cmp	r3, #0
 800e994:	d103      	bne.n	800e99e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	2280      	movs	r2, #128	; 0x80
 800e99a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800e99e:	2300      	movs	r3, #0
}
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	370c      	adds	r7, #12
 800e9a4:	46bd      	mov	sp, r7
 800e9a6:	bc80      	pop	{r7}
 800e9a8:	4770      	bx	lr

0800e9aa <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800e9aa:	b480      	push	{r7}
 800e9ac:	b083      	sub	sp, #12
 800e9ae:	af00      	add	r7, sp, #0
 800e9b0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800e9b2:	2300      	movs	r3, #0
}
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	370c      	adds	r7, #12
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	bc80      	pop	{r7}
 800e9bc:	4770      	bx	lr

0800e9be <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800e9be:	b480      	push	{r7}
 800e9c0:	b085      	sub	sp, #20
 800e9c2:	af00      	add	r7, sp, #0
 800e9c4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800e9cc:	b29b      	uxth	r3, r3
 800e9ce:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800e9d0:	68fb      	ldr	r3, [r7, #12]
}
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	3714      	adds	r7, #20
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	bc80      	pop	{r7}
 800e9da:	4770      	bx	lr

0800e9dc <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800e9dc:	b480      	push	{r7}
 800e9de:	b083      	sub	sp, #12
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	6078      	str	r0, [r7, #4]
 800e9e4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800e9e6:	2300      	movs	r3, #0
}
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	370c      	adds	r7, #12
 800e9ec:	46bd      	mov	sp, r7
 800e9ee:	bc80      	pop	{r7}
 800e9f0:	4770      	bx	lr

0800e9f2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e9f2:	b480      	push	{r7}
 800e9f4:	b08d      	sub	sp, #52	; 0x34
 800e9f6:	af00      	add	r7, sp, #0
 800e9f8:	60f8      	str	r0, [r7, #12]
 800e9fa:	60b9      	str	r1, [r7, #8]
 800e9fc:	4611      	mov	r1, r2
 800e9fe:	461a      	mov	r2, r3
 800ea00:	460b      	mov	r3, r1
 800ea02:	80fb      	strh	r3, [r7, #6]
 800ea04:	4613      	mov	r3, r2
 800ea06:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800ea08:	88bb      	ldrh	r3, [r7, #4]
 800ea0a:	3301      	adds	r3, #1
 800ea0c:	085b      	lsrs	r3, r3, #1
 800ea0e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ea14:	68bb      	ldr	r3, [r7, #8]
 800ea16:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ea18:	88fb      	ldrh	r3, [r7, #6]
 800ea1a:	005a      	lsls	r2, r3, #1
 800ea1c:	69fb      	ldr	r3, [r7, #28]
 800ea1e:	4413      	add	r3, r2
 800ea20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ea24:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800ea26:	6a3b      	ldr	r3, [r7, #32]
 800ea28:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ea2a:	e01e      	b.n	800ea6a <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800ea2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea2e:	781b      	ldrb	r3, [r3, #0]
 800ea30:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800ea32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea34:	3301      	adds	r3, #1
 800ea36:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800ea38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea3a:	781b      	ldrb	r3, [r3, #0]
 800ea3c:	b29b      	uxth	r3, r3
 800ea3e:	021b      	lsls	r3, r3, #8
 800ea40:	b29b      	uxth	r3, r3
 800ea42:	461a      	mov	r2, r3
 800ea44:	69bb      	ldr	r3, [r7, #24]
 800ea46:	4313      	orrs	r3, r2
 800ea48:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800ea4a:	697b      	ldr	r3, [r7, #20]
 800ea4c:	b29a      	uxth	r2, r3
 800ea4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea50:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800ea52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea54:	3302      	adds	r3, #2
 800ea56:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800ea58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea5a:	3302      	adds	r3, #2
 800ea5c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800ea5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea60:	3301      	adds	r3, #1
 800ea62:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800ea64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea66:	3b01      	subs	r3, #1
 800ea68:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ea6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d1dd      	bne.n	800ea2c <USB_WritePMA+0x3a>
  }
}
 800ea70:	bf00      	nop
 800ea72:	3734      	adds	r7, #52	; 0x34
 800ea74:	46bd      	mov	sp, r7
 800ea76:	bc80      	pop	{r7}
 800ea78:	4770      	bx	lr

0800ea7a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ea7a:	b480      	push	{r7}
 800ea7c:	b08b      	sub	sp, #44	; 0x2c
 800ea7e:	af00      	add	r7, sp, #0
 800ea80:	60f8      	str	r0, [r7, #12]
 800ea82:	60b9      	str	r1, [r7, #8]
 800ea84:	4611      	mov	r1, r2
 800ea86:	461a      	mov	r2, r3
 800ea88:	460b      	mov	r3, r1
 800ea8a:	80fb      	strh	r3, [r7, #6]
 800ea8c:	4613      	mov	r3, r2
 800ea8e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800ea90:	88bb      	ldrh	r3, [r7, #4]
 800ea92:	085b      	lsrs	r3, r3, #1
 800ea94:	b29b      	uxth	r3, r3
 800ea96:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ea9c:	68bb      	ldr	r3, [r7, #8]
 800ea9e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800eaa0:	88fb      	ldrh	r3, [r7, #6]
 800eaa2:	005a      	lsls	r2, r3, #1
 800eaa4:	697b      	ldr	r3, [r7, #20]
 800eaa6:	4413      	add	r3, r2
 800eaa8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800eaac:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800eaae:	69bb      	ldr	r3, [r7, #24]
 800eab0:	627b      	str	r3, [r7, #36]	; 0x24
 800eab2:	e01b      	b.n	800eaec <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800eab4:	6a3b      	ldr	r3, [r7, #32]
 800eab6:	881b      	ldrh	r3, [r3, #0]
 800eab8:	b29b      	uxth	r3, r3
 800eaba:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800eabc:	6a3b      	ldr	r3, [r7, #32]
 800eabe:	3302      	adds	r3, #2
 800eac0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800eac2:	693b      	ldr	r3, [r7, #16]
 800eac4:	b2da      	uxtb	r2, r3
 800eac6:	69fb      	ldr	r3, [r7, #28]
 800eac8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800eaca:	69fb      	ldr	r3, [r7, #28]
 800eacc:	3301      	adds	r3, #1
 800eace:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800ead0:	693b      	ldr	r3, [r7, #16]
 800ead2:	0a1b      	lsrs	r3, r3, #8
 800ead4:	b2da      	uxtb	r2, r3
 800ead6:	69fb      	ldr	r3, [r7, #28]
 800ead8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800eada:	69fb      	ldr	r3, [r7, #28]
 800eadc:	3301      	adds	r3, #1
 800eade:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800eae0:	6a3b      	ldr	r3, [r7, #32]
 800eae2:	3302      	adds	r3, #2
 800eae4:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800eae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eae8:	3b01      	subs	r3, #1
 800eaea:	627b      	str	r3, [r7, #36]	; 0x24
 800eaec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d1e0      	bne.n	800eab4 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800eaf2:	88bb      	ldrh	r3, [r7, #4]
 800eaf4:	f003 0301 	and.w	r3, r3, #1
 800eaf8:	b29b      	uxth	r3, r3
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d007      	beq.n	800eb0e <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800eafe:	6a3b      	ldr	r3, [r7, #32]
 800eb00:	881b      	ldrh	r3, [r3, #0]
 800eb02:	b29b      	uxth	r3, r3
 800eb04:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800eb06:	693b      	ldr	r3, [r7, #16]
 800eb08:	b2da      	uxtb	r2, r3
 800eb0a:	69fb      	ldr	r3, [r7, #28]
 800eb0c:	701a      	strb	r2, [r3, #0]
  }
}
 800eb0e:	bf00      	nop
 800eb10:	372c      	adds	r7, #44	; 0x2c
 800eb12:	46bd      	mov	sp, r7
 800eb14:	bc80      	pop	{r7}
 800eb16:	4770      	bx	lr

0800eb18 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800eb1c:	4904      	ldr	r1, [pc, #16]	; (800eb30 <MX_FATFS_Init+0x18>)
 800eb1e:	4805      	ldr	r0, [pc, #20]	; (800eb34 <MX_FATFS_Init+0x1c>)
 800eb20:	f002 faca 	bl	80110b8 <FATFS_LinkDriver>
 800eb24:	4603      	mov	r3, r0
 800eb26:	461a      	mov	r2, r3
 800eb28:	4b03      	ldr	r3, [pc, #12]	; (800eb38 <MX_FATFS_Init+0x20>)
 800eb2a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800eb2c:	bf00      	nop
 800eb2e:	bd80      	pop	{r7, pc}
 800eb30:	200091f8 	.word	0x200091f8
 800eb34:	2000001c 	.word	0x2000001c
 800eb38:	200091fc 	.word	0x200091fc

0800eb3c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800eb3c:	b480      	push	{r7}
 800eb3e:	b083      	sub	sp, #12
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	4603      	mov	r3, r0
 800eb44:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800eb46:	4b05      	ldr	r3, [pc, #20]	; (800eb5c <USER_initialize+0x20>)
 800eb48:	2201      	movs	r2, #1
 800eb4a:	701a      	strb	r2, [r3, #0]
    return Stat;
 800eb4c:	4b03      	ldr	r3, [pc, #12]	; (800eb5c <USER_initialize+0x20>)
 800eb4e:	781b      	ldrb	r3, [r3, #0]
 800eb50:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800eb52:	4618      	mov	r0, r3
 800eb54:	370c      	adds	r7, #12
 800eb56:	46bd      	mov	sp, r7
 800eb58:	bc80      	pop	{r7}
 800eb5a:	4770      	bx	lr
 800eb5c:	20000018 	.word	0x20000018

0800eb60 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800eb60:	b480      	push	{r7}
 800eb62:	b083      	sub	sp, #12
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	4603      	mov	r3, r0
 800eb68:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800eb6a:	4b05      	ldr	r3, [pc, #20]	; (800eb80 <USER_status+0x20>)
 800eb6c:	2201      	movs	r2, #1
 800eb6e:	701a      	strb	r2, [r3, #0]
    return Stat;
 800eb70:	4b03      	ldr	r3, [pc, #12]	; (800eb80 <USER_status+0x20>)
 800eb72:	781b      	ldrb	r3, [r3, #0]
 800eb74:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800eb76:	4618      	mov	r0, r3
 800eb78:	370c      	adds	r7, #12
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	bc80      	pop	{r7}
 800eb7e:	4770      	bx	lr
 800eb80:	20000018 	.word	0x20000018

0800eb84 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800eb84:	b480      	push	{r7}
 800eb86:	b085      	sub	sp, #20
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	60b9      	str	r1, [r7, #8]
 800eb8c:	607a      	str	r2, [r7, #4]
 800eb8e:	603b      	str	r3, [r7, #0]
 800eb90:	4603      	mov	r3, r0
 800eb92:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800eb94:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800eb96:	4618      	mov	r0, r3
 800eb98:	3714      	adds	r7, #20
 800eb9a:	46bd      	mov	sp, r7
 800eb9c:	bc80      	pop	{r7}
 800eb9e:	4770      	bx	lr

0800eba0 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800eba0:	b480      	push	{r7}
 800eba2:	b085      	sub	sp, #20
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	60b9      	str	r1, [r7, #8]
 800eba8:	607a      	str	r2, [r7, #4]
 800ebaa:	603b      	str	r3, [r7, #0]
 800ebac:	4603      	mov	r3, r0
 800ebae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800ebb0:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	3714      	adds	r7, #20
 800ebb6:	46bd      	mov	sp, r7
 800ebb8:	bc80      	pop	{r7}
 800ebba:	4770      	bx	lr

0800ebbc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800ebbc:	b480      	push	{r7}
 800ebbe:	b085      	sub	sp, #20
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	4603      	mov	r3, r0
 800ebc4:	603a      	str	r2, [r7, #0]
 800ebc6:	71fb      	strb	r3, [r7, #7]
 800ebc8:	460b      	mov	r3, r1
 800ebca:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800ebcc:	2301      	movs	r3, #1
 800ebce:	73fb      	strb	r3, [r7, #15]
    return res;
 800ebd0:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	3714      	adds	r7, #20
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	bc80      	pop	{r7}
 800ebda:	4770      	bx	lr

0800ebdc <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t  USBD_MSC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b082      	sub	sp, #8
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]
 800ebe4:	460b      	mov	r3, r1
 800ebe6:	70fb      	strb	r3, [r7, #3]
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	7c1b      	ldrb	r3, [r3, #16]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d115      	bne.n	800ec1c <USBD_MSC_Init+0x40>
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800ebf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ebf4:	2202      	movs	r2, #2
 800ebf6:	2101      	movs	r1, #1
 800ebf8:	6878      	ldr	r0, [r7, #4]
 800ebfa:	f005 ffa2 	bl	8014b42 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	2201      	movs	r2, #1
 800ec02:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800ec06:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ec0a:	2202      	movs	r2, #2
 800ec0c:	2181      	movs	r1, #129	; 0x81
 800ec0e:	6878      	ldr	r0, [r7, #4]
 800ec10:	f005 ff97 	bl	8014b42 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	2201      	movs	r2, #1
 800ec18:	62da      	str	r2, [r3, #44]	; 0x2c
 800ec1a:	e012      	b.n	800ec42 <USBD_MSC_Init+0x66>
  }
  else
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800ec1c:	2340      	movs	r3, #64	; 0x40
 800ec1e:	2202      	movs	r2, #2
 800ec20:	2101      	movs	r1, #1
 800ec22:	6878      	ldr	r0, [r7, #4]
 800ec24:	f005 ff8d 	bl	8014b42 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	2201      	movs	r2, #1
 800ec2c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800ec30:	2340      	movs	r3, #64	; 0x40
 800ec32:	2202      	movs	r2, #2
 800ec34:	2181      	movs	r1, #129	; 0x81
 800ec36:	6878      	ldr	r0, [r7, #4]
 800ec38:	f005 ff83 	bl	8014b42 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	2201      	movs	r2, #1
 800ec40:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  pdev->pClassData = USBD_malloc(sizeof (USBD_MSC_BOT_HandleTypeDef));
 800ec42:	f44f 701b 	mov.w	r0, #620	; 0x26c
 800ec46:	f006 f8c3 	bl	8014dd0 <USBD_static_malloc>
 800ec4a:	4602      	mov	r2, r0
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d101      	bne.n	800ec60 <USBD_MSC_Init+0x84>
  {
    return USBD_FAIL;
 800ec5c:	2302      	movs	r3, #2
 800ec5e:	e003      	b.n	800ec68 <USBD_MSC_Init+0x8c>
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800ec60:	6878      	ldr	r0, [r7, #4]
 800ec62:	f000 f9d9 	bl	800f018 <MSC_BOT_Init>

  return USBD_OK;
 800ec66:	2300      	movs	r3, #0
}
 800ec68:	4618      	mov	r0, r3
 800ec6a:	3708      	adds	r7, #8
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	bd80      	pop	{r7, pc}

0800ec70 <USBD_MSC_DeInit>:
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t  USBD_MSC_DeInit (USBD_HandleTypeDef *pdev,
                              uint8_t cfgidx)
{
 800ec70:	b580      	push	{r7, lr}
 800ec72:	b082      	sub	sp, #8
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	6078      	str	r0, [r7, #4]
 800ec78:	460b      	mov	r3, r1
 800ec7a:	70fb      	strb	r3, [r7, #3]
  /* Close MSC EPs */
  USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 800ec7c:	2101      	movs	r1, #1
 800ec7e:	6878      	ldr	r0, [r7, #4]
 800ec80:	f005 ff85 	bl	8014b8e <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	2200      	movs	r2, #0
 800ec88:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 800ec8c:	2181      	movs	r1, #129	; 0x81
 800ec8e:	6878      	ldr	r0, [r7, #4]
 800ec90:	f005 ff7d 	bl	8014b8e <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	2200      	movs	r2, #0
 800ec98:	62da      	str	r2, [r3, #44]	; 0x2c

    /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 800ec9a:	6878      	ldr	r0, [r7, #4]
 800ec9c:	f000 fa06 	bl	800f0ac <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if(pdev->pClassData != NULL)
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d009      	beq.n	800ecbe <USBD_MSC_DeInit+0x4e>
  {
    USBD_free(pdev->pClassData);
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	f006 f899 	bl	8014de8 <USBD_static_free>
    pdev->pClassData  = NULL;
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	2200      	movs	r2, #0
 800ecba:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }
  return USBD_OK;
 800ecbe:	2300      	movs	r3, #0
}
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	3708      	adds	r7, #8
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	bd80      	pop	{r7, pc}

0800ecc8 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t  USBD_MSC_Setup (USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b086      	sub	sp, #24
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
 800ecd0:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ecd8:	613b      	str	r3, [r7, #16]
  uint8_t ret = USBD_OK;
 800ecda:	2300      	movs	r3, #0
 800ecdc:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800ecde:	2300      	movs	r3, #0
 800ece0:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ece2:	683b      	ldr	r3, [r7, #0]
 800ece4:	781b      	ldrb	r3, [r3, #0]
 800ece6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d04d      	beq.n	800ed8a <USBD_MSC_Setup+0xc2>
 800ecee:	2b20      	cmp	r3, #32
 800ecf0:	f040 8113 	bne.w	800ef1a <USBD_MSC_Setup+0x252>
  {

    /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 800ecf4:	683b      	ldr	r3, [r7, #0]
 800ecf6:	785b      	ldrb	r3, [r3, #1]
 800ecf8:	2bfe      	cmp	r3, #254	; 0xfe
 800ecfa:	d002      	beq.n	800ed02 <USBD_MSC_Setup+0x3a>
 800ecfc:	2bff      	cmp	r3, #255	; 0xff
 800ecfe:	d024      	beq.n	800ed4a <USBD_MSC_Setup+0x82>
 800ed00:	e03b      	b.n	800ed7a <USBD_MSC_Setup+0xb2>
    {
    case BOT_GET_MAX_LUN:
      if((req->wValue  == 0U) && (req->wLength == 1U) &&
 800ed02:	683b      	ldr	r3, [r7, #0]
 800ed04:	885b      	ldrh	r3, [r3, #2]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d118      	bne.n	800ed3c <USBD_MSC_Setup+0x74>
 800ed0a:	683b      	ldr	r3, [r7, #0]
 800ed0c:	88db      	ldrh	r3, [r3, #6]
 800ed0e:	2b01      	cmp	r3, #1
 800ed10:	d114      	bne.n	800ed3c <USBD_MSC_Setup+0x74>
         ((req->bmRequest & 0x80U) == 0x80U))
 800ed12:	683b      	ldr	r3, [r7, #0]
 800ed14:	781b      	ldrb	r3, [r3, #0]
 800ed16:	b25b      	sxtb	r3, r3
      if((req->wValue  == 0U) && (req->wLength == 1U) &&
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	da0f      	bge.n	800ed3c <USBD_MSC_Setup+0x74>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ed22:	699b      	ldr	r3, [r3, #24]
 800ed24:	4798      	blx	r3
 800ed26:	4603      	mov	r3, r0
 800ed28:	461a      	mov	r2, r3
 800ed2a:	693b      	ldr	r3, [r7, #16]
 800ed2c:	601a      	str	r2, [r3, #0]
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hmsc->max_lun, 1U);
 800ed2e:	693b      	ldr	r3, [r7, #16]
 800ed30:	2201      	movs	r2, #1
 800ed32:	4619      	mov	r1, r3
 800ed34:	6878      	ldr	r0, [r7, #4]
 800ed36:	f002 f90f 	bl	8010f58 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800ed3a:	e025      	b.n	800ed88 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 800ed3c:	6839      	ldr	r1, [r7, #0]
 800ed3e:	6878      	ldr	r0, [r7, #4]
 800ed40:	f002 f8a0 	bl	8010e84 <USBD_CtlError>
        ret = USBD_FAIL;
 800ed44:	2302      	movs	r3, #2
 800ed46:	75fb      	strb	r3, [r7, #23]
      break;
 800ed48:	e01e      	b.n	800ed88 <USBD_MSC_Setup+0xc0>

    case BOT_RESET :
      if((req->wValue  == 0U) && (req->wLength == 0U) &&
 800ed4a:	683b      	ldr	r3, [r7, #0]
 800ed4c:	885b      	ldrh	r3, [r3, #2]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d10c      	bne.n	800ed6c <USBD_MSC_Setup+0xa4>
 800ed52:	683b      	ldr	r3, [r7, #0]
 800ed54:	88db      	ldrh	r3, [r3, #6]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d108      	bne.n	800ed6c <USBD_MSC_Setup+0xa4>
         ((req->bmRequest & 0x80U) != 0x80U))
 800ed5a:	683b      	ldr	r3, [r7, #0]
 800ed5c:	781b      	ldrb	r3, [r3, #0]
 800ed5e:	b25b      	sxtb	r3, r3
      if((req->wValue  == 0U) && (req->wLength == 0U) &&
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	db03      	blt.n	800ed6c <USBD_MSC_Setup+0xa4>
      {
        MSC_BOT_Reset(pdev);
 800ed64:	6878      	ldr	r0, [r7, #4]
 800ed66:	f000 f987 	bl	800f078 <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev , req);
        ret = USBD_FAIL;
      }
      break;
 800ed6a:	e00d      	b.n	800ed88 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev , req);
 800ed6c:	6839      	ldr	r1, [r7, #0]
 800ed6e:	6878      	ldr	r0, [r7, #4]
 800ed70:	f002 f888 	bl	8010e84 <USBD_CtlError>
        ret = USBD_FAIL;
 800ed74:	2302      	movs	r3, #2
 800ed76:	75fb      	strb	r3, [r7, #23]
      break;
 800ed78:	e006      	b.n	800ed88 <USBD_MSC_Setup+0xc0>

    default:
      USBD_CtlError(pdev , req);
 800ed7a:	6839      	ldr	r1, [r7, #0]
 800ed7c:	6878      	ldr	r0, [r7, #4]
 800ed7e:	f002 f881 	bl	8010e84 <USBD_CtlError>
      ret = USBD_FAIL;
 800ed82:	2302      	movs	r3, #2
 800ed84:	75fb      	strb	r3, [r7, #23]
      break;
 800ed86:	bf00      	nop
    }
    break;
 800ed88:	e0ce      	b.n	800ef28 <USBD_MSC_Setup+0x260>
    /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800ed8a:	683b      	ldr	r3, [r7, #0]
 800ed8c:	785b      	ldrb	r3, [r3, #1]
 800ed8e:	2b0b      	cmp	r3, #11
 800ed90:	f200 80bb 	bhi.w	800ef0a <USBD_MSC_Setup+0x242>
 800ed94:	a201      	add	r2, pc, #4	; (adr r2, 800ed9c <USBD_MSC_Setup+0xd4>)
 800ed96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed9a:	bf00      	nop
 800ed9c:	0800edcd 	.word	0x0800edcd
 800eda0:	0800ee43 	.word	0x0800ee43
 800eda4:	0800ef0b 	.word	0x0800ef0b
 800eda8:	0800ef0b 	.word	0x0800ef0b
 800edac:	0800ef0b 	.word	0x0800ef0b
 800edb0:	0800ef0b 	.word	0x0800ef0b
 800edb4:	0800ef0b 	.word	0x0800ef0b
 800edb8:	0800ef0b 	.word	0x0800ef0b
 800edbc:	0800ef0b 	.word	0x0800ef0b
 800edc0:	0800ef0b 	.word	0x0800ef0b
 800edc4:	0800edf5 	.word	0x0800edf5
 800edc8:	0800ee1d 	.word	0x0800ee1d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800edd2:	2b03      	cmp	r3, #3
 800edd4:	d107      	bne.n	800ede6 <USBD_MSC_Setup+0x11e>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800edd6:	f107 030e 	add.w	r3, r7, #14
 800edda:	2202      	movs	r2, #2
 800eddc:	4619      	mov	r1, r3
 800edde:	6878      	ldr	r0, [r7, #4]
 800ede0:	f002 f8ba 	bl	8010f58 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800ede4:	e098      	b.n	800ef18 <USBD_MSC_Setup+0x250>
        USBD_CtlError (pdev, req);
 800ede6:	6839      	ldr	r1, [r7, #0]
 800ede8:	6878      	ldr	r0, [r7, #4]
 800edea:	f002 f84b 	bl	8010e84 <USBD_CtlError>
        ret = USBD_FAIL;
 800edee:	2302      	movs	r3, #2
 800edf0:	75fb      	strb	r3, [r7, #23]
      break;
 800edf2:	e091      	b.n	800ef18 <USBD_MSC_Setup+0x250>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800edfa:	2b03      	cmp	r3, #3
 800edfc:	d107      	bne.n	800ee0e <USBD_MSC_Setup+0x146>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hmsc->interface, 1U);
 800edfe:	693b      	ldr	r3, [r7, #16]
 800ee00:	3304      	adds	r3, #4
 800ee02:	2201      	movs	r2, #1
 800ee04:	4619      	mov	r1, r3
 800ee06:	6878      	ldr	r0, [r7, #4]
 800ee08:	f002 f8a6 	bl	8010f58 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800ee0c:	e084      	b.n	800ef18 <USBD_MSC_Setup+0x250>
        USBD_CtlError (pdev, req);
 800ee0e:	6839      	ldr	r1, [r7, #0]
 800ee10:	6878      	ldr	r0, [r7, #4]
 800ee12:	f002 f837 	bl	8010e84 <USBD_CtlError>
        ret = USBD_FAIL;
 800ee16:	2302      	movs	r3, #2
 800ee18:	75fb      	strb	r3, [r7, #23]
      break;
 800ee1a:	e07d      	b.n	800ef18 <USBD_MSC_Setup+0x250>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ee22:	2b03      	cmp	r3, #3
 800ee24:	d106      	bne.n	800ee34 <USBD_MSC_Setup+0x16c>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 800ee26:	683b      	ldr	r3, [r7, #0]
 800ee28:	885b      	ldrh	r3, [r3, #2]
 800ee2a:	b2db      	uxtb	r3, r3
 800ee2c:	461a      	mov	r2, r3
 800ee2e:	693b      	ldr	r3, [r7, #16]
 800ee30:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError (pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800ee32:	e071      	b.n	800ef18 <USBD_MSC_Setup+0x250>
        USBD_CtlError (pdev, req);
 800ee34:	6839      	ldr	r1, [r7, #0]
 800ee36:	6878      	ldr	r0, [r7, #4]
 800ee38:	f002 f824 	bl	8010e84 <USBD_CtlError>
        ret = USBD_FAIL;
 800ee3c:	2302      	movs	r3, #2
 800ee3e:	75fb      	strb	r3, [r7, #23]
      break;
 800ee40:	e06a      	b.n	800ef18 <USBD_MSC_Setup+0x250>

    case USB_REQ_CLEAR_FEATURE:

      /* Flush the FIFO and Clear the stall status */
      USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800ee42:	683b      	ldr	r3, [r7, #0]
 800ee44:	889b      	ldrh	r3, [r3, #4]
 800ee46:	b2db      	uxtb	r3, r3
 800ee48:	4619      	mov	r1, r3
 800ee4a:	6878      	ldr	r0, [r7, #4]
 800ee4c:	f005 febe 	bl	8014bcc <USBD_LL_FlushEP>

      /* Reactivate the EP */
      USBD_LL_CloseEP (pdev , (uint8_t)req->wIndex);
 800ee50:	683b      	ldr	r3, [r7, #0]
 800ee52:	889b      	ldrh	r3, [r3, #4]
 800ee54:	b2db      	uxtb	r3, r3
 800ee56:	4619      	mov	r1, r3
 800ee58:	6878      	ldr	r0, [r7, #4]
 800ee5a:	f005 fe98 	bl	8014b8e <USBD_LL_CloseEP>
      if((((uint8_t)req->wIndex) & 0x80U) == 0x80U)
 800ee5e:	683b      	ldr	r3, [r7, #0]
 800ee60:	889b      	ldrh	r3, [r3, #4]
 800ee62:	b25b      	sxtb	r3, r3
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	da23      	bge.n	800eeb0 <USBD_MSC_Setup+0x1e8>
      {
        pdev->ep_in[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 800ee68:	683b      	ldr	r3, [r7, #0]
 800ee6a:	889b      	ldrh	r3, [r3, #4]
 800ee6c:	b2db      	uxtb	r3, r3
 800ee6e:	f003 020f 	and.w	r2, r3, #15
 800ee72:	6879      	ldr	r1, [r7, #4]
 800ee74:	4613      	mov	r3, r2
 800ee76:	009b      	lsls	r3, r3, #2
 800ee78:	4413      	add	r3, r2
 800ee7a:	009b      	lsls	r3, r3, #2
 800ee7c:	440b      	add	r3, r1
 800ee7e:	3318      	adds	r3, #24
 800ee80:	2200      	movs	r2, #0
 800ee82:	601a      	str	r2, [r3, #0]
        if(pdev->dev_speed == USBD_SPEED_HIGH)
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	7c1b      	ldrb	r3, [r3, #16]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d107      	bne.n	800ee9c <USBD_MSC_Setup+0x1d4>
        {
          /* Open EP IN */
          USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 800ee8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ee90:	2202      	movs	r2, #2
 800ee92:	2181      	movs	r1, #129	; 0x81
 800ee94:	6878      	ldr	r0, [r7, #4]
 800ee96:	f005 fe54 	bl	8014b42 <USBD_LL_OpenEP>
 800ee9a:	e005      	b.n	800eea8 <USBD_MSC_Setup+0x1e0>
                         MSC_MAX_HS_PACKET);
        }
        else
        {
          /* Open EP IN */
          USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 800ee9c:	2340      	movs	r3, #64	; 0x40
 800ee9e:	2202      	movs	r2, #2
 800eea0:	2181      	movs	r1, #129	; 0x81
 800eea2:	6878      	ldr	r0, [r7, #4]
 800eea4:	f005 fe4d 	bl	8014b42 <USBD_LL_OpenEP>
                         MSC_MAX_FS_PACKET);
        }
        pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	2201      	movs	r2, #1
 800eeac:	62da      	str	r2, [r3, #44]	; 0x2c
 800eeae:	e024      	b.n	800eefa <USBD_MSC_Setup+0x232>
      }
      else
      {
        pdev->ep_out[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 800eeb0:	683b      	ldr	r3, [r7, #0]
 800eeb2:	889b      	ldrh	r3, [r3, #4]
 800eeb4:	b2db      	uxtb	r3, r3
 800eeb6:	f003 020f 	and.w	r2, r3, #15
 800eeba:	6879      	ldr	r1, [r7, #4]
 800eebc:	4613      	mov	r3, r2
 800eebe:	009b      	lsls	r3, r3, #2
 800eec0:	4413      	add	r3, r2
 800eec2:	009b      	lsls	r3, r3, #2
 800eec4:	440b      	add	r3, r1
 800eec6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800eeca:	2200      	movs	r2, #0
 800eecc:	601a      	str	r2, [r3, #0]
        if(pdev->dev_speed == USBD_SPEED_HIGH)
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	7c1b      	ldrb	r3, [r3, #16]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d107      	bne.n	800eee6 <USBD_MSC_Setup+0x21e>
        {
          /* Open EP OUT */
          USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 800eed6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800eeda:	2202      	movs	r2, #2
 800eedc:	2101      	movs	r1, #1
 800eede:	6878      	ldr	r0, [r7, #4]
 800eee0:	f005 fe2f 	bl	8014b42 <USBD_LL_OpenEP>
 800eee4:	e005      	b.n	800eef2 <USBD_MSC_Setup+0x22a>
                         MSC_MAX_HS_PACKET);
        }
        else
        {
          /* Open EP OUT */
          USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 800eee6:	2340      	movs	r3, #64	; 0x40
 800eee8:	2202      	movs	r2, #2
 800eeea:	2101      	movs	r1, #1
 800eeec:	6878      	ldr	r0, [r7, #4]
 800eeee:	f005 fe28 	bl	8014b42 <USBD_LL_OpenEP>
                         MSC_MAX_FS_PACKET);
        }
        pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	2201      	movs	r2, #1
 800eef6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
      }

      /* Handle BOT error */
      MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800eefa:	683b      	ldr	r3, [r7, #0]
 800eefc:	889b      	ldrh	r3, [r3, #4]
 800eefe:	b2db      	uxtb	r3, r3
 800ef00:	4619      	mov	r1, r3
 800ef02:	6878      	ldr	r0, [r7, #4]
 800ef04:	f000 fa50 	bl	800f3a8 <MSC_BOT_CplClrFeature>
      break;
 800ef08:	e006      	b.n	800ef18 <USBD_MSC_Setup+0x250>

    default:
      USBD_CtlError (pdev, req);
 800ef0a:	6839      	ldr	r1, [r7, #0]
 800ef0c:	6878      	ldr	r0, [r7, #4]
 800ef0e:	f001 ffb9 	bl	8010e84 <USBD_CtlError>
      ret = USBD_FAIL;
 800ef12:	2302      	movs	r3, #2
 800ef14:	75fb      	strb	r3, [r7, #23]
      break;
 800ef16:	bf00      	nop
    }
    break;
 800ef18:	e006      	b.n	800ef28 <USBD_MSC_Setup+0x260>

  default:
    USBD_CtlError (pdev, req);
 800ef1a:	6839      	ldr	r1, [r7, #0]
 800ef1c:	6878      	ldr	r0, [r7, #4]
 800ef1e:	f001 ffb1 	bl	8010e84 <USBD_CtlError>
    ret = USBD_FAIL;
 800ef22:	2302      	movs	r3, #2
 800ef24:	75fb      	strb	r3, [r7, #23]
    break;
 800ef26:	bf00      	nop
  }

  return ret;
 800ef28:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	3718      	adds	r7, #24
 800ef2e:	46bd      	mov	sp, r7
 800ef30:	bd80      	pop	{r7, pc}
 800ef32:	bf00      	nop

0800ef34 <USBD_MSC_DataIn>:
* @param  epnum: endpoint index
* @retval status
*/
uint8_t  USBD_MSC_DataIn (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b082      	sub	sp, #8
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	6078      	str	r0, [r7, #4]
 800ef3c:	460b      	mov	r3, r1
 800ef3e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev , epnum);
 800ef40:	78fb      	ldrb	r3, [r7, #3]
 800ef42:	4619      	mov	r1, r3
 800ef44:	6878      	ldr	r0, [r7, #4]
 800ef46:	f000 f8c1 	bl	800f0cc <MSC_BOT_DataIn>
  return USBD_OK;
 800ef4a:	2300      	movs	r3, #0
}
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	3708      	adds	r7, #8
 800ef50:	46bd      	mov	sp, r7
 800ef52:	bd80      	pop	{r7, pc}

0800ef54 <USBD_MSC_DataOut>:
* @param  epnum: endpoint index
* @retval status
*/
uint8_t  USBD_MSC_DataOut (USBD_HandleTypeDef *pdev,
                               uint8_t epnum)
{
 800ef54:	b580      	push	{r7, lr}
 800ef56:	b082      	sub	sp, #8
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	6078      	str	r0, [r7, #4]
 800ef5c:	460b      	mov	r3, r1
 800ef5e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev , epnum);
 800ef60:	78fb      	ldrb	r3, [r7, #3]
 800ef62:	4619      	mov	r1, r3
 800ef64:	6878      	ldr	r0, [r7, #4]
 800ef66:	f000 f8e2 	bl	800f12e <MSC_BOT_DataOut>
  return USBD_OK;
 800ef6a:	2300      	movs	r3, #0
}
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	3708      	adds	r7, #8
 800ef70:	46bd      	mov	sp, r7
 800ef72:	bd80      	pop	{r7, pc}

0800ef74 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetHSCfgDesc (uint16_t *length)
{
 800ef74:	b480      	push	{r7}
 800ef76:	b083      	sub	sp, #12
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MSC_CfgHSDesc);
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	2220      	movs	r2, #32
 800ef80:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgHSDesc;
 800ef82:	4b03      	ldr	r3, [pc, #12]	; (800ef90 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 800ef84:	4618      	mov	r0, r3
 800ef86:	370c      	adds	r7, #12
 800ef88:	46bd      	mov	sp, r7
 800ef8a:	bc80      	pop	{r7}
 800ef8c:	4770      	bx	lr
 800ef8e:	bf00      	nop
 800ef90:	20000068 	.word	0x20000068

0800ef94 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetFSCfgDesc (uint16_t *length)
{
 800ef94:	b480      	push	{r7}
 800ef96:	b083      	sub	sp, #12
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MSC_CfgFSDesc);
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	2220      	movs	r2, #32
 800efa0:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgFSDesc;
 800efa2:	4b03      	ldr	r3, [pc, #12]	; (800efb0 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 800efa4:	4618      	mov	r0, r3
 800efa6:	370c      	adds	r7, #12
 800efa8:	46bd      	mov	sp, r7
 800efaa:	bc80      	pop	{r7}
 800efac:	4770      	bx	lr
 800efae:	bf00      	nop
 800efb0:	20000088 	.word	0x20000088

0800efb4 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800efb4:	b480      	push	{r7}
 800efb6:	b083      	sub	sp, #12
 800efb8:	af00      	add	r7, sp, #0
 800efba:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MSC_OtherSpeedCfgDesc);
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	2220      	movs	r2, #32
 800efc0:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_OtherSpeedCfgDesc;
 800efc2:	4b03      	ldr	r3, [pc, #12]	; (800efd0 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 800efc4:	4618      	mov	r0, r3
 800efc6:	370c      	adds	r7, #12
 800efc8:	46bd      	mov	sp, r7
 800efca:	bc80      	pop	{r7}
 800efcc:	4770      	bx	lr
 800efce:	bf00      	nop
 800efd0:	200000a8 	.word	0x200000a8

0800efd4 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800efd4:	b480      	push	{r7}
 800efd6:	b083      	sub	sp, #12
 800efd8:	af00      	add	r7, sp, #0
 800efda:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MSC_DeviceQualifierDesc);
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	220a      	movs	r2, #10
 800efe0:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_DeviceQualifierDesc;
 800efe2:	4b03      	ldr	r3, [pc, #12]	; (800eff0 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800efe4:	4618      	mov	r0, r3
 800efe6:	370c      	adds	r7, #12
 800efe8:	46bd      	mov	sp, r7
 800efea:	bc80      	pop	{r7}
 800efec:	4770      	bx	lr
 800efee:	bf00      	nop
 800eff0:	200000c8 	.word	0x200000c8

0800eff4 <USBD_MSC_RegisterStorage>:
* @param  fops: storage callback
* @retval status
*/
uint8_t  USBD_MSC_RegisterStorage  (USBD_HandleTypeDef   *pdev,
                                    USBD_StorageTypeDef *fops)
{
 800eff4:	b480      	push	{r7}
 800eff6:	b083      	sub	sp, #12
 800eff8:	af00      	add	r7, sp, #0
 800effa:	6078      	str	r0, [r7, #4]
 800effc:	6039      	str	r1, [r7, #0]
  if(fops != NULL)
 800effe:	683b      	ldr	r3, [r7, #0]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d003      	beq.n	800f00c <USBD_MSC_RegisterStorage+0x18>
  {
    pdev->pUserData = fops;
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	683a      	ldr	r2, [r7, #0]
 800f008:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  }
  return USBD_OK;
 800f00c:	2300      	movs	r3, #0
}
 800f00e:	4618      	mov	r0, r3
 800f010:	370c      	adds	r7, #12
 800f012:	46bd      	mov	sp, r7
 800f014:	bc80      	pop	{r7}
 800f016:	4770      	bx	lr

0800f018 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init (USBD_HandleTypeDef  *pdev)
{
 800f018:	b580      	push	{r7, lr}
 800f01a:	b084      	sub	sp, #16
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f026:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	2200      	movs	r2, #0
 800f02c:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	2200      	movs	r2, #0
 800f032:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	2200      	movs	r2, #0
 800f038:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  hmsc->scsi_sense_head = 0U;
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	2200      	movs	r2, #0
 800f040:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	2000      	movs	r0, #0
 800f04e:	4798      	blx	r3

  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 800f050:	2101      	movs	r1, #1
 800f052:	6878      	ldr	r0, [r7, #4]
 800f054:	f005 fdba 	bl	8014bcc <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 800f058:	2181      	movs	r1, #129	; 0x81
 800f05a:	6878      	ldr	r0, [r7, #4]
 800f05c:	f005 fdb6 	bl	8014bcc <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 800f066:	231f      	movs	r3, #31
 800f068:	2101      	movs	r1, #1
 800f06a:	6878      	ldr	r0, [r7, #4]
 800f06c:	f005 fe79 	bl	8014d62 <USBD_LL_PrepareReceive>
                          USBD_BOT_CBW_LENGTH);
}
 800f070:	bf00      	nop
 800f072:	3710      	adds	r7, #16
 800f074:	46bd      	mov	sp, r7
 800f076:	bd80      	pop	{r7, pc}

0800f078 <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset (USBD_HandleTypeDef  *pdev)
{
 800f078:	b580      	push	{r7, lr}
 800f07a:	b084      	sub	sp, #16
 800f07c:	af00      	add	r7, sp, #0
 800f07e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f086:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	2200      	movs	r2, #0
 800f08c:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	2201      	movs	r2, #1
 800f092:	725a      	strb	r2, [r3, #9]

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 800f09a:	231f      	movs	r3, #31
 800f09c:	2101      	movs	r1, #1
 800f09e:	6878      	ldr	r0, [r7, #4]
 800f0a0:	f005 fe5f 	bl	8014d62 <USBD_LL_PrepareReceive>
                          USBD_BOT_CBW_LENGTH);
}
 800f0a4:	bf00      	nop
 800f0a6:	3710      	adds	r7, #16
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	bd80      	pop	{r7, pc}

0800f0ac <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit (USBD_HandleTypeDef  *pdev)
{
 800f0ac:	b480      	push	{r7}
 800f0ae:	b085      	sub	sp, #20
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f0ba:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state  = USBD_BOT_IDLE;
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	2200      	movs	r2, #0
 800f0c0:	721a      	strb	r2, [r3, #8]
}
 800f0c2:	bf00      	nop
 800f0c4:	3714      	adds	r7, #20
 800f0c6:	46bd      	mov	sp, r7
 800f0c8:	bc80      	pop	{r7}
 800f0ca:	4770      	bx	lr

0800f0cc <MSC_BOT_DataIn>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn (USBD_HandleTypeDef  *pdev,
                     uint8_t epnum)
{
 800f0cc:	b580      	push	{r7, lr}
 800f0ce:	b084      	sub	sp, #16
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	6078      	str	r0, [r7, #4]
 800f0d4:	460b      	mov	r3, r1
 800f0d6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f0de:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	7a1b      	ldrb	r3, [r3, #8]
 800f0e4:	2b02      	cmp	r3, #2
 800f0e6:	d004      	beq.n	800f0f2 <MSC_BOT_DataIn+0x26>
 800f0e8:	2b02      	cmp	r3, #2
 800f0ea:	db19      	blt.n	800f120 <MSC_BOT_DataIn+0x54>
 800f0ec:	2b04      	cmp	r3, #4
 800f0ee:	dc17      	bgt.n	800f120 <MSC_BOT_DataIn+0x54>
 800f0f0:	e011      	b.n	800f116 <MSC_BOT_DataIn+0x4a>
  {
  case USBD_BOT_DATA_IN:
    if(SCSI_ProcessCmd(pdev,
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800f0fe:	461a      	mov	r2, r3
 800f100:	6878      	ldr	r0, [r7, #4]
 800f102:	f000 f979 	bl	800f3f8 <SCSI_ProcessCmd>
 800f106:	4603      	mov	r3, r0
 800f108:	2b00      	cmp	r3, #0
 800f10a:	da0b      	bge.n	800f124 <MSC_BOT_DataIn+0x58>
                        hmsc->cbw.bLUN,
                        &hmsc->cbw.CB[0]) < 0)
    {
      MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 800f10c:	2101      	movs	r1, #1
 800f10e:	6878      	ldr	r0, [r7, #4]
 800f110:	f000 f8f0 	bl	800f2f4 <MSC_BOT_SendCSW>
    }
    break;
 800f114:	e006      	b.n	800f124 <MSC_BOT_DataIn+0x58>

  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 800f116:	2100      	movs	r1, #0
 800f118:	6878      	ldr	r0, [r7, #4]
 800f11a:	f000 f8eb 	bl	800f2f4 <MSC_BOT_SendCSW>

    break;
 800f11e:	e002      	b.n	800f126 <MSC_BOT_DataIn+0x5a>

  default:
    break;
 800f120:	bf00      	nop
 800f122:	e000      	b.n	800f126 <MSC_BOT_DataIn+0x5a>
    break;
 800f124:	bf00      	nop
  }
}
 800f126:	bf00      	nop
 800f128:	3710      	adds	r7, #16
 800f12a:	46bd      	mov	sp, r7
 800f12c:	bd80      	pop	{r7, pc}

0800f12e <MSC_BOT_DataOut>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut (USBD_HandleTypeDef  *pdev,
                      uint8_t epnum)
{
 800f12e:	b580      	push	{r7, lr}
 800f130:	b084      	sub	sp, #16
 800f132:	af00      	add	r7, sp, #0
 800f134:	6078      	str	r0, [r7, #4]
 800f136:	460b      	mov	r3, r1
 800f138:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f140:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	7a1b      	ldrb	r3, [r3, #8]
 800f146:	2b00      	cmp	r3, #0
 800f148:	d002      	beq.n	800f150 <MSC_BOT_DataOut+0x22>
 800f14a:	2b01      	cmp	r3, #1
 800f14c:	d004      	beq.n	800f158 <MSC_BOT_DataOut+0x2a>
    }

    break;

  default:
    break;
 800f14e:	e015      	b.n	800f17c <MSC_BOT_DataOut+0x4e>
    MSC_BOT_CBW_Decode(pdev);
 800f150:	6878      	ldr	r0, [r7, #4]
 800f152:	f000 f817 	bl	800f184 <MSC_BOT_CBW_Decode>
    break;
 800f156:	e011      	b.n	800f17c <MSC_BOT_DataOut+0x4e>
    if(SCSI_ProcessCmd(pdev,
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800f164:	461a      	mov	r2, r3
 800f166:	6878      	ldr	r0, [r7, #4]
 800f168:	f000 f946 	bl	800f3f8 <SCSI_ProcessCmd>
 800f16c:	4603      	mov	r3, r0
 800f16e:	2b00      	cmp	r3, #0
 800f170:	da03      	bge.n	800f17a <MSC_BOT_DataOut+0x4c>
      MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 800f172:	2101      	movs	r1, #1
 800f174:	6878      	ldr	r0, [r7, #4]
 800f176:	f000 f8bd 	bl	800f2f4 <MSC_BOT_SendCSW>
    break;
 800f17a:	bf00      	nop
  }
}
 800f17c:	bf00      	nop
 800f17e:	3710      	adds	r7, #16
 800f180:	46bd      	mov	sp, r7
 800f182:	bd80      	pop	{r7, pc}

0800f184 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode (USBD_HandleTypeDef  *pdev)
{
 800f184:	b580      	push	{r7, lr}
 800f186:	b084      	sub	sp, #16
 800f188:	af00      	add	r7, sp, #0
 800f18a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f192:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if ((USBD_LL_GetRxDataSize (pdev ,MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800f1ac:	2101      	movs	r1, #1
 800f1ae:	6878      	ldr	r0, [r7, #4]
 800f1b0:	f005 fdfa 	bl	8014da8 <USBD_LL_GetRxDataSize>
 800f1b4:	4603      	mov	r3, r0
 800f1b6:	2b1f      	cmp	r3, #31
 800f1b8:	d114      	bne.n	800f1e4 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
  if ((USBD_LL_GetRxDataSize (pdev ,MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800f1c0:	4a32      	ldr	r2, [pc, #200]	; (800f28c <MSC_BOT_CBW_Decode+0x108>)
 800f1c2:	4293      	cmp	r3, r2
 800f1c4:	d10e      	bne.n	800f1e4 <MSC_BOT_CBW_Decode+0x60>
        (hmsc->cbw.bLUN > 1U) ||
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	f893 3219 	ldrb.w	r3, [r3, #537]	; 0x219
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800f1cc:	2b01      	cmp	r3, #1
 800f1ce:	d809      	bhi.n	800f1e4 <MSC_BOT_CBW_Decode+0x60>
          (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
        (hmsc->cbw.bLUN > 1U) ||
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d004      	beq.n	800f1e4 <MSC_BOT_CBW_Decode+0x60>
          (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
 800f1e0:	2b10      	cmp	r3, #16
 800f1e2:	d90e      	bls.n	800f202 <MSC_BOT_CBW_Decode+0x7e>
  {

    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800f1ea:	2320      	movs	r3, #32
 800f1ec:	2205      	movs	r2, #5
 800f1ee:	6878      	ldr	r0, [r7, #4]
 800f1f0:	f000 fc48 	bl	800fa84 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	2202      	movs	r2, #2
 800f1f8:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800f1fa:	6878      	ldr	r0, [r7, #4]
 800f1fc:	f000 f8a6 	bl	800f34c <MSC_BOT_Abort>
 800f200:	e041      	b.n	800f286 <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if(SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800f20e:	461a      	mov	r2, r3
 800f210:	6878      	ldr	r0, [r7, #4]
 800f212:	f000 f8f1 	bl	800f3f8 <SCSI_ProcessCmd>
 800f216:	4603      	mov	r3, r0
 800f218:	2b00      	cmp	r3, #0
 800f21a:	da0c      	bge.n	800f236 <MSC_BOT_CBW_Decode+0xb2>
    {
      if(hmsc->bot_state == USBD_BOT_NO_DATA)
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	7a1b      	ldrb	r3, [r3, #8]
 800f220:	2b05      	cmp	r3, #5
 800f222:	d104      	bne.n	800f22e <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 800f224:	2101      	movs	r1, #1
 800f226:	6878      	ldr	r0, [r7, #4]
 800f228:	f000 f864 	bl	800f2f4 <MSC_BOT_SendCSW>
 800f22c:	e02b      	b.n	800f286 <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800f22e:	6878      	ldr	r0, [r7, #4]
 800f230:	f000 f88c 	bl	800f34c <MSC_BOT_Abort>
 800f234:	e027      	b.n	800f286 <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /*Burst xfer handled internally*/
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	7a1b      	ldrb	r3, [r3, #8]
 800f23a:	2b02      	cmp	r3, #2
 800f23c:	d022      	beq.n	800f284 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800f242:	2b01      	cmp	r3, #1
 800f244:	d01e      	beq.n	800f284 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800f24a:	2b03      	cmp	r3, #3
 800f24c:	d01a      	beq.n	800f284 <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	895b      	ldrh	r3, [r3, #10]
 800f252:	2b00      	cmp	r3, #0
 800f254:	d009      	beq.n	800f26a <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	f103 010c 	add.w	r1, r3, #12
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	895b      	ldrh	r3, [r3, #10]
 800f260:	461a      	mov	r2, r3
 800f262:	6878      	ldr	r0, [r7, #4]
 800f264:	f000 f814 	bl	800f290 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800f268:	e00d      	b.n	800f286 <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	895b      	ldrh	r3, [r3, #10]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d104      	bne.n	800f27c <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 800f272:	2100      	movs	r1, #0
 800f274:	6878      	ldr	r0, [r7, #4]
 800f276:	f000 f83d 	bl	800f2f4 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800f27a:	e004      	b.n	800f286 <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800f27c:	6878      	ldr	r0, [r7, #4]
 800f27e:	f000 f865 	bl	800f34c <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800f282:	e000      	b.n	800f286 <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 800f284:	bf00      	nop
    }
  }
}
 800f286:	3710      	adds	r7, #16
 800f288:	46bd      	mov	sp, r7
 800f28a:	bd80      	pop	{r7, pc}
 800f28c:	43425355 	.word	0x43425355

0800f290 <MSC_BOT_SendData>:
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t* pbuf,
                              uint16_t len)
{
 800f290:	b580      	push	{r7, lr}
 800f292:	b086      	sub	sp, #24
 800f294:	af00      	add	r7, sp, #0
 800f296:	60f8      	str	r0, [r7, #12]
 800f298:	60b9      	str	r1, [r7, #8]
 800f29a:	4613      	mov	r3, r2
 800f29c:	80fb      	strh	r3, [r7, #6]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f2a4:	617b      	str	r3, [r7, #20]

  uint16_t length = (uint16_t)MIN(hmsc->cbw.dDataLength, len);
 800f2a6:	697b      	ldr	r3, [r7, #20]
 800f2a8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800f2ac:	88fb      	ldrh	r3, [r7, #6]
 800f2ae:	429a      	cmp	r2, r3
 800f2b0:	d204      	bcs.n	800f2bc <MSC_BOT_SendData+0x2c>
 800f2b2:	697b      	ldr	r3, [r7, #20]
 800f2b4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f2b8:	b29b      	uxth	r3, r3
 800f2ba:	e000      	b.n	800f2be <MSC_BOT_SendData+0x2e>
 800f2bc:	88fb      	ldrh	r3, [r7, #6]
 800f2be:	827b      	strh	r3, [r7, #18]

  hmsc->csw.dDataResidue -= len;
 800f2c0:	697b      	ldr	r3, [r7, #20]
 800f2c2:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 800f2c6:	88fb      	ldrh	r3, [r7, #6]
 800f2c8:	1ad2      	subs	r2, r2, r3
 800f2ca:	697b      	ldr	r3, [r7, #20]
 800f2cc:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800f2d0:	697b      	ldr	r3, [r7, #20]
 800f2d2:	2200      	movs	r2, #0
 800f2d4:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800f2d8:	697b      	ldr	r3, [r7, #20]
 800f2da:	2204      	movs	r2, #4
 800f2dc:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 800f2de:	8a7b      	ldrh	r3, [r7, #18]
 800f2e0:	68ba      	ldr	r2, [r7, #8]
 800f2e2:	2181      	movs	r1, #129	; 0x81
 800f2e4:	68f8      	ldr	r0, [r7, #12]
 800f2e6:	f005 fd19 	bl	8014d1c <USBD_LL_Transmit>
}
 800f2ea:	bf00      	nop
 800f2ec:	3718      	adds	r7, #24
 800f2ee:	46bd      	mov	sp, r7
 800f2f0:	bd80      	pop	{r7, pc}
	...

0800f2f4 <MSC_BOT_SendCSW>:
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW (USBD_HandleTypeDef  *pdev,
                              uint8_t CSW_Status)
{
 800f2f4:	b580      	push	{r7, lr}
 800f2f6:	b084      	sub	sp, #16
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	6078      	str	r0, [r7, #4]
 800f2fc:	460b      	mov	r3, r1
 800f2fe:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f306:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	4a0f      	ldr	r2, [pc, #60]	; (800f348 <MSC_BOT_SendCSW+0x54>)
 800f30c:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
  hmsc->csw.bStatus = CSW_Status;
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	78fa      	ldrb	r2, [r7, #3]
 800f314:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_IDLE;
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	2200      	movs	r2, #0
 800f31c:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, (uint8_t *)(void *)&hmsc->csw,
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	f503 720b 	add.w	r2, r3, #556	; 0x22c
 800f324:	230d      	movs	r3, #13
 800f326:	2181      	movs	r1, #129	; 0x81
 800f328:	6878      	ldr	r0, [r7, #4]
 800f32a:	f005 fcf7 	bl	8014d1c <USBD_LL_Transmit>
                    USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 800f334:	231f      	movs	r3, #31
 800f336:	2101      	movs	r1, #1
 800f338:	6878      	ldr	r0, [r7, #4]
 800f33a:	f005 fd12 	bl	8014d62 <USBD_LL_PrepareReceive>
                          USBD_BOT_CBW_LENGTH);
}
 800f33e:	bf00      	nop
 800f340:	3710      	adds	r7, #16
 800f342:	46bd      	mov	sp, r7
 800f344:	bd80      	pop	{r7, pc}
 800f346:	bf00      	nop
 800f348:	53425355 	.word	0x53425355

0800f34c <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort (USBD_HandleTypeDef  *pdev)
{
 800f34c:	b580      	push	{r7, lr}
 800f34e:	b084      	sub	sp, #16
 800f350:	af00      	add	r7, sp, #0
 800f352:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f35a:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 800f362:	2b00      	cmp	r3, #0
 800f364:	d10c      	bne.n	800f380 <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
  if ((hmsc->cbw.bmFlags == 0U) &&
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d007      	beq.n	800f380 <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800f374:	2b00      	cmp	r3, #0
 800f376:	d103      	bne.n	800f380 <MSC_BOT_Abort+0x34>
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR );
 800f378:	2101      	movs	r1, #1
 800f37a:	6878      	ldr	r0, [r7, #4]
 800f37c:	f005 fc45 	bl	8014c0a <USBD_LL_StallEP>
  }

  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800f380:	2181      	movs	r1, #129	; 0x81
 800f382:	6878      	ldr	r0, [r7, #4]
 800f384:	f005 fc41 	bl	8014c0a <USBD_LL_StallEP>

  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	7a5b      	ldrb	r3, [r3, #9]
 800f38c:	2b02      	cmp	r3, #2
 800f38e:	d107      	bne.n	800f3a0 <MSC_BOT_Abort+0x54>
  {
    USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 800f396:	231f      	movs	r3, #31
 800f398:	2101      	movs	r1, #1
 800f39a:	6878      	ldr	r0, [r7, #4]
 800f39c:	f005 fce1 	bl	8014d62 <USBD_LL_PrepareReceive>
                            USBD_BOT_CBW_LENGTH);
  }
}
 800f3a0:	bf00      	nop
 800f3a2:	3710      	adds	r7, #16
 800f3a4:	46bd      	mov	sp, r7
 800f3a6:	bd80      	pop	{r7, pc}

0800f3a8 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature (USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	b084      	sub	sp, #16
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	6078      	str	r0, [r7, #4]
 800f3b0:	460b      	mov	r3, r1
 800f3b2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f3ba:	60fb      	str	r3, [r7, #12]

  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR)/* Bad CBW Signature */
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	7a5b      	ldrb	r3, [r3, #9]
 800f3c0:	2b02      	cmp	r3, #2
 800f3c2:	d107      	bne.n	800f3d4 <MSC_BOT_CplClrFeature+0x2c>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800f3c4:	2181      	movs	r1, #129	; 0x81
 800f3c6:	6878      	ldr	r0, [r7, #4]
 800f3c8:	f005 fc1f 	bl	8014c0a <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	2200      	movs	r2, #0
 800f3d0:	725a      	strb	r2, [r3, #9]
 800f3d2:	e00d      	b.n	800f3f0 <MSC_BOT_CplClrFeature+0x48>
  }
  else if(((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800f3d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	da08      	bge.n	800f3ee <MSC_BOT_CplClrFeature+0x46>
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	7a5b      	ldrb	r3, [r3, #9]
 800f3e0:	2b01      	cmp	r3, #1
 800f3e2:	d004      	beq.n	800f3ee <MSC_BOT_CplClrFeature+0x46>
  {
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 800f3e4:	2101      	movs	r1, #1
 800f3e6:	6878      	ldr	r0, [r7, #4]
 800f3e8:	f7ff ff84 	bl	800f2f4 <MSC_BOT_SendCSW>
 800f3ec:	e000      	b.n	800f3f0 <MSC_BOT_CplClrFeature+0x48>
  }
  else
  {
    return;
 800f3ee:	bf00      	nop
  }
}
 800f3f0:	3710      	adds	r7, #16
 800f3f2:	46bd      	mov	sp, r7
 800f3f4:	bd80      	pop	{r7, pc}
	...

0800f3f8 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800f3f8:	b580      	push	{r7, lr}
 800f3fa:	b084      	sub	sp, #16
 800f3fc:	af00      	add	r7, sp, #0
 800f3fe:	60f8      	str	r0, [r7, #12]
 800f400:	460b      	mov	r3, r1
 800f402:	607a      	str	r2, [r7, #4]
 800f404:	72fb      	strb	r3, [r7, #11]
  switch (cmd[0])
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	781b      	ldrb	r3, [r3, #0]
 800f40a:	2b5a      	cmp	r3, #90	; 0x5a
 800f40c:	f200 810e 	bhi.w	800f62c <SCSI_ProcessCmd+0x234>
 800f410:	a201      	add	r2, pc, #4	; (adr r2, 800f418 <SCSI_ProcessCmd+0x20>)
 800f412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f416:	bf00      	nop
 800f418:	0800f585 	.word	0x0800f585
 800f41c:	0800f62d 	.word	0x0800f62d
 800f420:	0800f62d 	.word	0x0800f62d
 800f424:	0800f593 	.word	0x0800f593
 800f428:	0800f62d 	.word	0x0800f62d
 800f42c:	0800f62d 	.word	0x0800f62d
 800f430:	0800f62d 	.word	0x0800f62d
 800f434:	0800f62d 	.word	0x0800f62d
 800f438:	0800f62d 	.word	0x0800f62d
 800f43c:	0800f62d 	.word	0x0800f62d
 800f440:	0800f62d 	.word	0x0800f62d
 800f444:	0800f62d 	.word	0x0800f62d
 800f448:	0800f62d 	.word	0x0800f62d
 800f44c:	0800f62d 	.word	0x0800f62d
 800f450:	0800f62d 	.word	0x0800f62d
 800f454:	0800f62d 	.word	0x0800f62d
 800f458:	0800f62d 	.word	0x0800f62d
 800f45c:	0800f62d 	.word	0x0800f62d
 800f460:	0800f5a1 	.word	0x0800f5a1
 800f464:	0800f62d 	.word	0x0800f62d
 800f468:	0800f62d 	.word	0x0800f62d
 800f46c:	0800f62d 	.word	0x0800f62d
 800f470:	0800f62d 	.word	0x0800f62d
 800f474:	0800f62d 	.word	0x0800f62d
 800f478:	0800f62d 	.word	0x0800f62d
 800f47c:	0800f62d 	.word	0x0800f62d
 800f480:	0800f5cb 	.word	0x0800f5cb
 800f484:	0800f5af 	.word	0x0800f5af
 800f488:	0800f62d 	.word	0x0800f62d
 800f48c:	0800f62d 	.word	0x0800f62d
 800f490:	0800f5bd 	.word	0x0800f5bd
 800f494:	0800f62d 	.word	0x0800f62d
 800f498:	0800f62d 	.word	0x0800f62d
 800f49c:	0800f62d 	.word	0x0800f62d
 800f4a0:	0800f62d 	.word	0x0800f62d
 800f4a4:	0800f5e7 	.word	0x0800f5e7
 800f4a8:	0800f62d 	.word	0x0800f62d
 800f4ac:	0800f5f5 	.word	0x0800f5f5
 800f4b0:	0800f62d 	.word	0x0800f62d
 800f4b4:	0800f62d 	.word	0x0800f62d
 800f4b8:	0800f603 	.word	0x0800f603
 800f4bc:	0800f62d 	.word	0x0800f62d
 800f4c0:	0800f611 	.word	0x0800f611
 800f4c4:	0800f62d 	.word	0x0800f62d
 800f4c8:	0800f62d 	.word	0x0800f62d
 800f4cc:	0800f62d 	.word	0x0800f62d
 800f4d0:	0800f62d 	.word	0x0800f62d
 800f4d4:	0800f61f 	.word	0x0800f61f
 800f4d8:	0800f62d 	.word	0x0800f62d
 800f4dc:	0800f62d 	.word	0x0800f62d
 800f4e0:	0800f62d 	.word	0x0800f62d
 800f4e4:	0800f62d 	.word	0x0800f62d
 800f4e8:	0800f62d 	.word	0x0800f62d
 800f4ec:	0800f62d 	.word	0x0800f62d
 800f4f0:	0800f62d 	.word	0x0800f62d
 800f4f4:	0800f62d 	.word	0x0800f62d
 800f4f8:	0800f62d 	.word	0x0800f62d
 800f4fc:	0800f62d 	.word	0x0800f62d
 800f500:	0800f62d 	.word	0x0800f62d
 800f504:	0800f62d 	.word	0x0800f62d
 800f508:	0800f62d 	.word	0x0800f62d
 800f50c:	0800f62d 	.word	0x0800f62d
 800f510:	0800f62d 	.word	0x0800f62d
 800f514:	0800f62d 	.word	0x0800f62d
 800f518:	0800f62d 	.word	0x0800f62d
 800f51c:	0800f62d 	.word	0x0800f62d
 800f520:	0800f62d 	.word	0x0800f62d
 800f524:	0800f62d 	.word	0x0800f62d
 800f528:	0800f62d 	.word	0x0800f62d
 800f52c:	0800f62d 	.word	0x0800f62d
 800f530:	0800f62d 	.word	0x0800f62d
 800f534:	0800f62d 	.word	0x0800f62d
 800f538:	0800f62d 	.word	0x0800f62d
 800f53c:	0800f62d 	.word	0x0800f62d
 800f540:	0800f62d 	.word	0x0800f62d
 800f544:	0800f62d 	.word	0x0800f62d
 800f548:	0800f62d 	.word	0x0800f62d
 800f54c:	0800f62d 	.word	0x0800f62d
 800f550:	0800f62d 	.word	0x0800f62d
 800f554:	0800f62d 	.word	0x0800f62d
 800f558:	0800f62d 	.word	0x0800f62d
 800f55c:	0800f62d 	.word	0x0800f62d
 800f560:	0800f62d 	.word	0x0800f62d
 800f564:	0800f62d 	.word	0x0800f62d
 800f568:	0800f62d 	.word	0x0800f62d
 800f56c:	0800f62d 	.word	0x0800f62d
 800f570:	0800f62d 	.word	0x0800f62d
 800f574:	0800f62d 	.word	0x0800f62d
 800f578:	0800f62d 	.word	0x0800f62d
 800f57c:	0800f62d 	.word	0x0800f62d
 800f580:	0800f5d9 	.word	0x0800f5d9
  {
  case SCSI_TEST_UNIT_READY:
    SCSI_TestUnitReady(pdev, lun, cmd);
 800f584:	7afb      	ldrb	r3, [r7, #11]
 800f586:	687a      	ldr	r2, [r7, #4]
 800f588:	4619      	mov	r1, r3
 800f58a:	68f8      	ldr	r0, [r7, #12]
 800f58c:	f000 f85c 	bl	800f648 <SCSI_TestUnitReady>
    break;
 800f590:	e055      	b.n	800f63e <SCSI_ProcessCmd+0x246>

  case SCSI_REQUEST_SENSE:
    SCSI_RequestSense (pdev, lun, cmd);
 800f592:	7afb      	ldrb	r3, [r7, #11]
 800f594:	687a      	ldr	r2, [r7, #4]
 800f596:	4619      	mov	r1, r3
 800f598:	68f8      	ldr	r0, [r7, #12]
 800f59a:	f000 fa09 	bl	800f9b0 <SCSI_RequestSense>
    break;
 800f59e:	e04e      	b.n	800f63e <SCSI_ProcessCmd+0x246>
  case SCSI_INQUIRY:
    SCSI_Inquiry(pdev, lun, cmd);
 800f5a0:	7afb      	ldrb	r3, [r7, #11]
 800f5a2:	687a      	ldr	r2, [r7, #4]
 800f5a4:	4619      	mov	r1, r3
 800f5a6:	68f8      	ldr	r0, [r7, #12]
 800f5a8:	f000 f888 	bl	800f6bc <SCSI_Inquiry>
    break;
 800f5ac:	e047      	b.n	800f63e <SCSI_ProcessCmd+0x246>

  case SCSI_START_STOP_UNIT:
    SCSI_StartStopUnit(pdev, lun, cmd);
 800f5ae:	7afb      	ldrb	r3, [r7, #11]
 800f5b0:	687a      	ldr	r2, [r7, #4]
 800f5b2:	4619      	mov	r1, r3
 800f5b4:	68f8      	ldr	r0, [r7, #12]
 800f5b6:	f000 fa9e 	bl	800faf6 <SCSI_StartStopUnit>
    break;
 800f5ba:	e040      	b.n	800f63e <SCSI_ProcessCmd+0x246>

  case SCSI_ALLOW_MEDIUM_REMOVAL:
    SCSI_StartStopUnit(pdev, lun, cmd);
 800f5bc:	7afb      	ldrb	r3, [r7, #11]
 800f5be:	687a      	ldr	r2, [r7, #4]
 800f5c0:	4619      	mov	r1, r3
 800f5c2:	68f8      	ldr	r0, [r7, #12]
 800f5c4:	f000 fa97 	bl	800faf6 <SCSI_StartStopUnit>
    break;
 800f5c8:	e039      	b.n	800f63e <SCSI_ProcessCmd+0x246>

  case SCSI_MODE_SENSE6:
    SCSI_ModeSense6 (pdev, lun, cmd);
 800f5ca:	7afb      	ldrb	r3, [r7, #11]
 800f5cc:	687a      	ldr	r2, [r7, #4]
 800f5ce:	4619      	mov	r1, r3
 800f5d0:	68f8      	ldr	r0, [r7, #12]
 800f5d2:	f000 f99d 	bl	800f910 <SCSI_ModeSense6>
    break;
 800f5d6:	e032      	b.n	800f63e <SCSI_ProcessCmd+0x246>

  case SCSI_MODE_SENSE10:
    SCSI_ModeSense10 (pdev, lun, cmd);
 800f5d8:	7afb      	ldrb	r3, [r7, #11]
 800f5da:	687a      	ldr	r2, [r7, #4]
 800f5dc:	4619      	mov	r1, r3
 800f5de:	68f8      	ldr	r0, [r7, #12]
 800f5e0:	f000 f9be 	bl	800f960 <SCSI_ModeSense10>
    break;
 800f5e4:	e02b      	b.n	800f63e <SCSI_ProcessCmd+0x246>

  case SCSI_READ_FORMAT_CAPACITIES:
    SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800f5e6:	7afb      	ldrb	r3, [r7, #11]
 800f5e8:	687a      	ldr	r2, [r7, #4]
 800f5ea:	4619      	mov	r1, r3
 800f5ec:	68f8      	ldr	r0, [r7, #12]
 800f5ee:	f000 f92a 	bl	800f846 <SCSI_ReadFormatCapacity>
    break;
 800f5f2:	e024      	b.n	800f63e <SCSI_ProcessCmd+0x246>

  case SCSI_READ_CAPACITY10:
    SCSI_ReadCapacity10(pdev, lun, cmd);
 800f5f4:	7afb      	ldrb	r3, [r7, #11]
 800f5f6:	687a      	ldr	r2, [r7, #4]
 800f5f8:	4619      	mov	r1, r3
 800f5fa:	68f8      	ldr	r0, [r7, #12]
 800f5fc:	f000 f8bc 	bl	800f778 <SCSI_ReadCapacity10>
    break;
 800f600:	e01d      	b.n	800f63e <SCSI_ProcessCmd+0x246>

  case SCSI_READ10:
    SCSI_Read10(pdev, lun, cmd);
 800f602:	7afb      	ldrb	r3, [r7, #11]
 800f604:	687a      	ldr	r2, [r7, #4]
 800f606:	4619      	mov	r1, r3
 800f608:	68f8      	ldr	r0, [r7, #12]
 800f60a:	f000 fa88 	bl	800fb1e <SCSI_Read10>
    break;
 800f60e:	e016      	b.n	800f63e <SCSI_ProcessCmd+0x246>

  case SCSI_WRITE10:
    SCSI_Write10(pdev, lun, cmd);
 800f610:	7afb      	ldrb	r3, [r7, #11]
 800f612:	687a      	ldr	r2, [r7, #4]
 800f614:	4619      	mov	r1, r3
 800f616:	68f8      	ldr	r0, [r7, #12]
 800f618:	f000 fb0d 	bl	800fc36 <SCSI_Write10>
    break;
 800f61c:	e00f      	b.n	800f63e <SCSI_ProcessCmd+0x246>

  case SCSI_VERIFY10:
    SCSI_Verify10(pdev, lun, cmd);
 800f61e:	7afb      	ldrb	r3, [r7, #11]
 800f620:	687a      	ldr	r2, [r7, #4]
 800f622:	4619      	mov	r1, r3
 800f624:	68f8      	ldr	r0, [r7, #12]
 800f626:	f000 fbb6 	bl	800fd96 <SCSI_Verify10>
    break;
 800f62a:	e008      	b.n	800f63e <SCSI_ProcessCmd+0x246>

  default:
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800f62c:	7af9      	ldrb	r1, [r7, #11]
 800f62e:	2320      	movs	r3, #32
 800f630:	2205      	movs	r2, #5
 800f632:	68f8      	ldr	r0, [r7, #12]
 800f634:	f000 fa26 	bl	800fa84 <SCSI_SenseCode>
    return -1;
 800f638:	f04f 33ff 	mov.w	r3, #4294967295
 800f63c:	e000      	b.n	800f640 <SCSI_ProcessCmd+0x248>
  }
  return 0;
 800f63e:	2300      	movs	r3, #0
}
 800f640:	4618      	mov	r0, r3
 800f642:	3710      	adds	r7, #16
 800f644:	46bd      	mov	sp, r7
 800f646:	bd80      	pop	{r7, pc}

0800f648 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800f648:	b580      	push	{r7, lr}
 800f64a:	b086      	sub	sp, #24
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	60f8      	str	r0, [r7, #12]
 800f650:	460b      	mov	r3, r1
 800f652:	607a      	str	r2, [r7, #4]
 800f654:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f65c:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800f65e:	697b      	ldr	r3, [r7, #20]
 800f660:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f664:	2b00      	cmp	r3, #0
 800f666:	d00a      	beq.n	800f67e <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f668:	697b      	ldr	r3, [r7, #20]
 800f66a:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800f66e:	2320      	movs	r3, #32
 800f670:	2205      	movs	r2, #5
 800f672:	68f8      	ldr	r0, [r7, #12]
 800f674:	f000 fa06 	bl	800fa84 <SCSI_SenseCode>

    return -1;
 800f678:	f04f 33ff 	mov.w	r3, #4294967295
 800f67c:	e019      	b.n	800f6b2 <SCSI_TestUnitReady+0x6a>
  }

  if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f684:	689b      	ldr	r3, [r3, #8]
 800f686:	7afa      	ldrb	r2, [r7, #11]
 800f688:	4610      	mov	r0, r2
 800f68a:	4798      	blx	r3
 800f68c:	4603      	mov	r3, r0
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d00b      	beq.n	800f6aa <SCSI_TestUnitReady+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f692:	7af9      	ldrb	r1, [r7, #11]
 800f694:	233a      	movs	r3, #58	; 0x3a
 800f696:	2202      	movs	r2, #2
 800f698:	68f8      	ldr	r0, [r7, #12]
 800f69a:	f000 f9f3 	bl	800fa84 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800f69e:	697b      	ldr	r3, [r7, #20]
 800f6a0:	2205      	movs	r2, #5
 800f6a2:	721a      	strb	r2, [r3, #8]

    return -1;
 800f6a4:	f04f 33ff 	mov.w	r3, #4294967295
 800f6a8:	e003      	b.n	800f6b2 <SCSI_TestUnitReady+0x6a>
  }
  hmsc->bot_data_length = 0U;
 800f6aa:	697b      	ldr	r3, [r7, #20]
 800f6ac:	2200      	movs	r2, #0
 800f6ae:	815a      	strh	r2, [r3, #10]

  return 0;
 800f6b0:	2300      	movs	r3, #0
}
 800f6b2:	4618      	mov	r0, r3
 800f6b4:	3718      	adds	r7, #24
 800f6b6:	46bd      	mov	sp, r7
 800f6b8:	bd80      	pop	{r7, pc}
	...

0800f6bc <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t  SCSI_Inquiry(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800f6bc:	b480      	push	{r7}
 800f6be:	b089      	sub	sp, #36	; 0x24
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	60f8      	str	r0, [r7, #12]
 800f6c4:	460b      	mov	r3, r1
 800f6c6:	607a      	str	r2, [r7, #4]
 800f6c8:	72fb      	strb	r3, [r7, #11]
  uint8_t* pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f6d0:	61bb      	str	r3, [r7, #24]

  if (params[1] & 0x01U)/*Evpd is set*/
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	3301      	adds	r3, #1
 800f6d6:	781b      	ldrb	r3, [r3, #0]
 800f6d8:	f003 0301 	and.w	r3, r3, #1
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d014      	beq.n	800f70a <SCSI_Inquiry+0x4e>
  {
    len = LENGTH_INQUIRY_PAGE00;
 800f6e0:	2307      	movs	r3, #7
 800f6e2:	83fb      	strh	r3, [r7, #30]
    hmsc->bot_data_length = len;
 800f6e4:	69bb      	ldr	r3, [r7, #24]
 800f6e6:	8bfa      	ldrh	r2, [r7, #30]
 800f6e8:	815a      	strh	r2, [r3, #10]

    while (len)
 800f6ea:	e00a      	b.n	800f702 <SCSI_Inquiry+0x46>
    {
      len--;
 800f6ec:	8bfb      	ldrh	r3, [r7, #30]
 800f6ee:	3b01      	subs	r3, #1
 800f6f0:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = MSC_Page00_Inquiry_Data[len];
 800f6f2:	8bfa      	ldrh	r2, [r7, #30]
 800f6f4:	8bfb      	ldrh	r3, [r7, #30]
 800f6f6:	491f      	ldr	r1, [pc, #124]	; (800f774 <SCSI_Inquiry+0xb8>)
 800f6f8:	5c89      	ldrb	r1, [r1, r2]
 800f6fa:	69ba      	ldr	r2, [r7, #24]
 800f6fc:	4413      	add	r3, r2
 800f6fe:	460a      	mov	r2, r1
 800f700:	731a      	strb	r2, [r3, #12]
    while (len)
 800f702:	8bfb      	ldrh	r3, [r7, #30]
 800f704:	2b00      	cmp	r3, #0
 800f706:	d1f1      	bne.n	800f6ec <SCSI_Inquiry+0x30>
 800f708:	e02e      	b.n	800f768 <SCSI_Inquiry+0xac>
    }
  }
  else
  {
    pPage = (uint8_t *)(void *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f710:	69d9      	ldr	r1, [r3, #28]
 800f712:	7afa      	ldrb	r2, [r7, #11]
 800f714:	4613      	mov	r3, r2
 800f716:	00db      	lsls	r3, r3, #3
 800f718:	4413      	add	r3, r2
 800f71a:	009b      	lsls	r3, r3, #2
 800f71c:	440b      	add	r3, r1
 800f71e:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800f720:	697b      	ldr	r3, [r7, #20]
 800f722:	3304      	adds	r3, #4
 800f724:	781b      	ldrb	r3, [r3, #0]
 800f726:	b29b      	uxth	r3, r3
 800f728:	3305      	adds	r3, #5
 800f72a:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	3304      	adds	r3, #4
 800f730:	781b      	ldrb	r3, [r3, #0]
 800f732:	b29b      	uxth	r3, r3
 800f734:	8bfa      	ldrh	r2, [r7, #30]
 800f736:	429a      	cmp	r2, r3
 800f738:	d303      	bcc.n	800f742 <SCSI_Inquiry+0x86>
    {
      len = params[4];
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	3304      	adds	r3, #4
 800f73e:	781b      	ldrb	r3, [r3, #0]
 800f740:	83fb      	strh	r3, [r7, #30]
    }
    hmsc->bot_data_length = len;
 800f742:	69bb      	ldr	r3, [r7, #24]
 800f744:	8bfa      	ldrh	r2, [r7, #30]
 800f746:	815a      	strh	r2, [r3, #10]

    while (len)
 800f748:	e00b      	b.n	800f762 <SCSI_Inquiry+0xa6>
    {
      len--;
 800f74a:	8bfb      	ldrh	r3, [r7, #30]
 800f74c:	3b01      	subs	r3, #1
 800f74e:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = pPage[len];
 800f750:	8bfb      	ldrh	r3, [r7, #30]
 800f752:	697a      	ldr	r2, [r7, #20]
 800f754:	441a      	add	r2, r3
 800f756:	8bfb      	ldrh	r3, [r7, #30]
 800f758:	7811      	ldrb	r1, [r2, #0]
 800f75a:	69ba      	ldr	r2, [r7, #24]
 800f75c:	4413      	add	r3, r2
 800f75e:	460a      	mov	r2, r1
 800f760:	731a      	strb	r2, [r3, #12]
    while (len)
 800f762:	8bfb      	ldrh	r3, [r7, #30]
 800f764:	2b00      	cmp	r3, #0
 800f766:	d1f0      	bne.n	800f74a <SCSI_Inquiry+0x8e>
    }
  }

  return 0;
 800f768:	2300      	movs	r3, #0
}
 800f76a:	4618      	mov	r0, r3
 800f76c:	3724      	adds	r7, #36	; 0x24
 800f76e:	46bd      	mov	sp, r7
 800f770:	bc80      	pop	{r7}
 800f772:	4770      	bx	lr
 800f774:	0801e5ec 	.word	0x0801e5ec

0800f778 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800f778:	b580      	push	{r7, lr}
 800f77a:	b086      	sub	sp, #24
 800f77c:	af00      	add	r7, sp, #0
 800f77e:	60f8      	str	r0, [r7, #12]
 800f780:	460b      	mov	r3, r1
 800f782:	607a      	str	r2, [r7, #4]
 800f784:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f78c:	617b      	str	r3, [r7, #20]

  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f794:	685b      	ldr	r3, [r3, #4]
 800f796:	697a      	ldr	r2, [r7, #20]
 800f798:	f502 7118 	add.w	r1, r2, #608	; 0x260
 800f79c:	697a      	ldr	r2, [r7, #20]
 800f79e:	f202 225e 	addw	r2, r2, #606	; 0x25e
 800f7a2:	7af8      	ldrb	r0, [r7, #11]
 800f7a4:	4798      	blx	r3
 800f7a6:	4603      	mov	r3, r0
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d008      	beq.n	800f7be <SCSI_ReadCapacity10+0x46>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f7ac:	7af9      	ldrb	r1, [r7, #11]
 800f7ae:	233a      	movs	r3, #58	; 0x3a
 800f7b0:	2202      	movs	r2, #2
 800f7b2:	68f8      	ldr	r0, [r7, #12]
 800f7b4:	f000 f966 	bl	800fa84 <SCSI_SenseCode>
    return -1;
 800f7b8:	f04f 33ff 	mov.w	r3, #4294967295
 800f7bc:	e03f      	b.n	800f83e <SCSI_ReadCapacity10+0xc6>
  }
  else
  {

    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800f7be:	697b      	ldr	r3, [r7, #20]
 800f7c0:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800f7c4:	3b01      	subs	r3, #1
 800f7c6:	0e1b      	lsrs	r3, r3, #24
 800f7c8:	b2da      	uxtb	r2, r3
 800f7ca:	697b      	ldr	r3, [r7, #20]
 800f7cc:	731a      	strb	r2, [r3, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800f7ce:	697b      	ldr	r3, [r7, #20]
 800f7d0:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800f7d4:	3b01      	subs	r3, #1
 800f7d6:	0c1b      	lsrs	r3, r3, #16
 800f7d8:	b2da      	uxtb	r2, r3
 800f7da:	697b      	ldr	r3, [r7, #20]
 800f7dc:	735a      	strb	r2, [r3, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800f7de:	697b      	ldr	r3, [r7, #20]
 800f7e0:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800f7e4:	3b01      	subs	r3, #1
 800f7e6:	0a1b      	lsrs	r3, r3, #8
 800f7e8:	b2da      	uxtb	r2, r3
 800f7ea:	697b      	ldr	r3, [r7, #20]
 800f7ec:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800f7ee:	697b      	ldr	r3, [r7, #20]
 800f7f0:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800f7f4:	b2db      	uxtb	r3, r3
 800f7f6:	3b01      	subs	r3, #1
 800f7f8:	b2da      	uxtb	r2, r3
 800f7fa:	697b      	ldr	r3, [r7, #20]
 800f7fc:	73da      	strb	r2, [r3, #15]

    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800f7fe:	697b      	ldr	r3, [r7, #20]
 800f800:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800f804:	161b      	asrs	r3, r3, #24
 800f806:	b2da      	uxtb	r2, r3
 800f808:	697b      	ldr	r3, [r7, #20]
 800f80a:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800f80c:	697b      	ldr	r3, [r7, #20]
 800f80e:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800f812:	141b      	asrs	r3, r3, #16
 800f814:	b2da      	uxtb	r2, r3
 800f816:	697b      	ldr	r3, [r7, #20]
 800f818:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800f81a:	697b      	ldr	r3, [r7, #20]
 800f81c:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800f820:	0a1b      	lsrs	r3, r3, #8
 800f822:	b29b      	uxth	r3, r3
 800f824:	b2da      	uxtb	r2, r3
 800f826:	697b      	ldr	r3, [r7, #20]
 800f828:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800f82a:	697b      	ldr	r3, [r7, #20]
 800f82c:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800f830:	b2da      	uxtb	r2, r3
 800f832:	697b      	ldr	r3, [r7, #20]
 800f834:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data_length = 8U;
 800f836:	697b      	ldr	r3, [r7, #20]
 800f838:	2208      	movs	r2, #8
 800f83a:	815a      	strh	r2, [r3, #10]
    return 0;
 800f83c:	2300      	movs	r3, #0
  }
}
 800f83e:	4618      	mov	r0, r3
 800f840:	3718      	adds	r7, #24
 800f842:	46bd      	mov	sp, r7
 800f844:	bd80      	pop	{r7, pc}

0800f846 <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800f846:	b580      	push	{r7, lr}
 800f848:	b088      	sub	sp, #32
 800f84a:	af00      	add	r7, sp, #0
 800f84c:	60f8      	str	r0, [r7, #12]
 800f84e:	460b      	mov	r3, r1
 800f850:	607a      	str	r2, [r7, #4]
 800f852:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f85a:	61bb      	str	r3, [r7, #24]

  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;

  for(i = 0U; i < 12U ; i++)
 800f85c:	2300      	movs	r3, #0
 800f85e:	83fb      	strh	r3, [r7, #30]
 800f860:	e007      	b.n	800f872 <SCSI_ReadFormatCapacity+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 800f862:	8bfb      	ldrh	r3, [r7, #30]
 800f864:	69ba      	ldr	r2, [r7, #24]
 800f866:	4413      	add	r3, r2
 800f868:	2200      	movs	r2, #0
 800f86a:	731a      	strb	r2, [r3, #12]
  for(i = 0U; i < 12U ; i++)
 800f86c:	8bfb      	ldrh	r3, [r7, #30]
 800f86e:	3301      	adds	r3, #1
 800f870:	83fb      	strh	r3, [r7, #30]
 800f872:	8bfb      	ldrh	r3, [r7, #30]
 800f874:	2b0b      	cmp	r3, #11
 800f876:	d9f4      	bls.n	800f862 <SCSI_ReadFormatCapacity+0x1c>
  }

  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0U)
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f87e:	685b      	ldr	r3, [r3, #4]
 800f880:	f107 0216 	add.w	r2, r7, #22
 800f884:	f107 0110 	add.w	r1, r7, #16
 800f888:	7af8      	ldrb	r0, [r7, #11]
 800f88a:	4798      	blx	r3
 800f88c:	4603      	mov	r3, r0
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d008      	beq.n	800f8a4 <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f892:	7af9      	ldrb	r1, [r7, #11]
 800f894:	233a      	movs	r3, #58	; 0x3a
 800f896:	2202      	movs	r2, #2
 800f898:	68f8      	ldr	r0, [r7, #12]
 800f89a:	f000 f8f3 	bl	800fa84 <SCSI_SenseCode>
    return -1;
 800f89e:	f04f 33ff 	mov.w	r3, #4294967295
 800f8a2:	e030      	b.n	800f906 <SCSI_ReadFormatCapacity+0xc0>
  }
  else
  {
    hmsc->bot_data[3] = 0x08U;
 800f8a4:	69bb      	ldr	r3, [r7, #24]
 800f8a6:	2208      	movs	r2, #8
 800f8a8:	73da      	strb	r2, [r3, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800f8aa:	693b      	ldr	r3, [r7, #16]
 800f8ac:	3b01      	subs	r3, #1
 800f8ae:	0e1b      	lsrs	r3, r3, #24
 800f8b0:	b2da      	uxtb	r2, r3
 800f8b2:	69bb      	ldr	r3, [r7, #24]
 800f8b4:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800f8b6:	693b      	ldr	r3, [r7, #16]
 800f8b8:	3b01      	subs	r3, #1
 800f8ba:	0c1b      	lsrs	r3, r3, #16
 800f8bc:	b2da      	uxtb	r2, r3
 800f8be:	69bb      	ldr	r3, [r7, #24]
 800f8c0:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800f8c2:	693b      	ldr	r3, [r7, #16]
 800f8c4:	3b01      	subs	r3, #1
 800f8c6:	0a1b      	lsrs	r3, r3, #8
 800f8c8:	b2da      	uxtb	r2, r3
 800f8ca:	69bb      	ldr	r3, [r7, #24]
 800f8cc:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800f8ce:	693b      	ldr	r3, [r7, #16]
 800f8d0:	b2db      	uxtb	r3, r3
 800f8d2:	3b01      	subs	r3, #1
 800f8d4:	b2da      	uxtb	r2, r3
 800f8d6:	69bb      	ldr	r3, [r7, #24]
 800f8d8:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data[8] = 0x02U;
 800f8da:	69bb      	ldr	r3, [r7, #24]
 800f8dc:	2202      	movs	r2, #2
 800f8de:	751a      	strb	r2, [r3, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800f8e0:	8afb      	ldrh	r3, [r7, #22]
 800f8e2:	141b      	asrs	r3, r3, #16
 800f8e4:	b2da      	uxtb	r2, r3
 800f8e6:	69bb      	ldr	r3, [r7, #24]
 800f8e8:	755a      	strb	r2, [r3, #21]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800f8ea:	8afb      	ldrh	r3, [r7, #22]
 800f8ec:	0a1b      	lsrs	r3, r3, #8
 800f8ee:	b29b      	uxth	r3, r3
 800f8f0:	b2da      	uxtb	r2, r3
 800f8f2:	69bb      	ldr	r3, [r7, #24]
 800f8f4:	759a      	strb	r2, [r3, #22]
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 800f8f6:	8afb      	ldrh	r3, [r7, #22]
 800f8f8:	b2da      	uxtb	r2, r3
 800f8fa:	69bb      	ldr	r3, [r7, #24]
 800f8fc:	75da      	strb	r2, [r3, #23]

    hmsc->bot_data_length = 12U;
 800f8fe:	69bb      	ldr	r3, [r7, #24]
 800f900:	220c      	movs	r2, #12
 800f902:	815a      	strh	r2, [r3, #10]
    return 0;
 800f904:	2300      	movs	r3, #0
  }
}
 800f906:	4618      	mov	r0, r3
 800f908:	3720      	adds	r7, #32
 800f90a:	46bd      	mov	sp, r7
 800f90c:	bd80      	pop	{r7, pc}
	...

0800f910 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6 (USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800f910:	b480      	push	{r7}
 800f912:	b087      	sub	sp, #28
 800f914:	af00      	add	r7, sp, #0
 800f916:	60f8      	str	r0, [r7, #12]
 800f918:	460b      	mov	r3, r1
 800f91a:	607a      	str	r2, [r7, #4]
 800f91c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f924:	613b      	str	r3, [r7, #16]
  uint16_t len = 8U;
 800f926:	2308      	movs	r3, #8
 800f928:	82fb      	strh	r3, [r7, #22]
  hmsc->bot_data_length = len;
 800f92a:	693b      	ldr	r3, [r7, #16]
 800f92c:	8afa      	ldrh	r2, [r7, #22]
 800f92e:	815a      	strh	r2, [r3, #10]

  while (len)
 800f930:	e00a      	b.n	800f948 <SCSI_ModeSense6+0x38>
  {
    len--;
 800f932:	8afb      	ldrh	r3, [r7, #22]
 800f934:	3b01      	subs	r3, #1
 800f936:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 800f938:	8afa      	ldrh	r2, [r7, #22]
 800f93a:	8afb      	ldrh	r3, [r7, #22]
 800f93c:	4907      	ldr	r1, [pc, #28]	; (800f95c <SCSI_ModeSense6+0x4c>)
 800f93e:	5c89      	ldrb	r1, [r1, r2]
 800f940:	693a      	ldr	r2, [r7, #16]
 800f942:	4413      	add	r3, r2
 800f944:	460a      	mov	r2, r1
 800f946:	731a      	strb	r2, [r3, #12]
  while (len)
 800f948:	8afb      	ldrh	r3, [r7, #22]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d1f1      	bne.n	800f932 <SCSI_ModeSense6+0x22>
  }
  return 0;
 800f94e:	2300      	movs	r3, #0
}
 800f950:	4618      	mov	r0, r3
 800f952:	371c      	adds	r7, #28
 800f954:	46bd      	mov	sp, r7
 800f956:	bc80      	pop	{r7}
 800f958:	4770      	bx	lr
 800f95a:	bf00      	nop
 800f95c:	0801e5f4 	.word	0x0801e5f4

0800f960 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10 (USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800f960:	b480      	push	{r7}
 800f962:	b087      	sub	sp, #28
 800f964:	af00      	add	r7, sp, #0
 800f966:	60f8      	str	r0, [r7, #12]
 800f968:	460b      	mov	r3, r1
 800f96a:	607a      	str	r2, [r7, #4]
 800f96c:	72fb      	strb	r3, [r7, #11]
  uint16_t len = 8U;
 800f96e:	2308      	movs	r3, #8
 800f970:	82fb      	strh	r3, [r7, #22]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f978:	613b      	str	r3, [r7, #16]

  hmsc->bot_data_length = len;
 800f97a:	693b      	ldr	r3, [r7, #16]
 800f97c:	8afa      	ldrh	r2, [r7, #22]
 800f97e:	815a      	strh	r2, [r3, #10]

  while (len)
 800f980:	e00a      	b.n	800f998 <SCSI_ModeSense10+0x38>
  {
    len--;
 800f982:	8afb      	ldrh	r3, [r7, #22]
 800f984:	3b01      	subs	r3, #1
 800f986:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 800f988:	8afa      	ldrh	r2, [r7, #22]
 800f98a:	8afb      	ldrh	r3, [r7, #22]
 800f98c:	4907      	ldr	r1, [pc, #28]	; (800f9ac <SCSI_ModeSense10+0x4c>)
 800f98e:	5c89      	ldrb	r1, [r1, r2]
 800f990:	693a      	ldr	r2, [r7, #16]
 800f992:	4413      	add	r3, r2
 800f994:	460a      	mov	r2, r1
 800f996:	731a      	strb	r2, [r3, #12]
  while (len)
 800f998:	8afb      	ldrh	r3, [r7, #22]
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d1f1      	bne.n	800f982 <SCSI_ModeSense10+0x22>
  }

  return 0;
 800f99e:	2300      	movs	r3, #0
}
 800f9a0:	4618      	mov	r0, r3
 800f9a2:	371c      	adds	r7, #28
 800f9a4:	46bd      	mov	sp, r7
 800f9a6:	bc80      	pop	{r7}
 800f9a8:	4770      	bx	lr
 800f9aa:	bf00      	nop
 800f9ac:	0801e5fc 	.word	0x0801e5fc

0800f9b0 <SCSI_RequestSense>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_RequestSense (USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800f9b0:	b480      	push	{r7}
 800f9b2:	b087      	sub	sp, #28
 800f9b4:	af00      	add	r7, sp, #0
 800f9b6:	60f8      	str	r0, [r7, #12]
 800f9b8:	460b      	mov	r3, r1
 800f9ba:	607a      	str	r2, [r7, #4]
 800f9bc:	72fb      	strb	r3, [r7, #11]
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f9c4:	613b      	str	r3, [r7, #16]

  for(i = 0U ;i < REQUEST_SENSE_DATA_LEN; i++)
 800f9c6:	2300      	movs	r3, #0
 800f9c8:	75fb      	strb	r3, [r7, #23]
 800f9ca:	e007      	b.n	800f9dc <SCSI_RequestSense+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 800f9cc:	7dfb      	ldrb	r3, [r7, #23]
 800f9ce:	693a      	ldr	r2, [r7, #16]
 800f9d0:	4413      	add	r3, r2
 800f9d2:	2200      	movs	r2, #0
 800f9d4:	731a      	strb	r2, [r3, #12]
  for(i = 0U ;i < REQUEST_SENSE_DATA_LEN; i++)
 800f9d6:	7dfb      	ldrb	r3, [r7, #23]
 800f9d8:	3301      	adds	r3, #1
 800f9da:	75fb      	strb	r3, [r7, #23]
 800f9dc:	7dfb      	ldrb	r3, [r7, #23]
 800f9de:	2b11      	cmp	r3, #17
 800f9e0:	d9f4      	bls.n	800f9cc <SCSI_RequestSense+0x1c>
  }

  hmsc->bot_data[0]	= 0x70U;
 800f9e2:	693b      	ldr	r3, [r7, #16]
 800f9e4:	2270      	movs	r2, #112	; 0x70
 800f9e6:	731a      	strb	r2, [r3, #12]
  hmsc->bot_data[7]	= REQUEST_SENSE_DATA_LEN - 6U;
 800f9e8:	693b      	ldr	r3, [r7, #16]
 800f9ea:	220c      	movs	r2, #12
 800f9ec:	74da      	strb	r2, [r3, #19]

  if((hmsc->scsi_sense_head != hmsc->scsi_sense_tail)) {
 800f9ee:	693b      	ldr	r3, [r7, #16]
 800f9f0:	f893 225c 	ldrb.w	r2, [r3, #604]	; 0x25c
 800f9f4:	693b      	ldr	r3, [r7, #16]
 800f9f6:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800f9fa:	429a      	cmp	r2, r3
 800f9fc:	d02e      	beq.n	800fa5c <SCSI_RequestSense+0xac>

    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800f9fe:	693b      	ldr	r3, [r7, #16]
 800fa00:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800fa04:	693a      	ldr	r2, [r7, #16]
 800fa06:	3347      	adds	r3, #71	; 0x47
 800fa08:	00db      	lsls	r3, r3, #3
 800fa0a:	4413      	add	r3, r2
 800fa0c:	791a      	ldrb	r2, [r3, #4]
 800fa0e:	693b      	ldr	r3, [r7, #16]
 800fa10:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800fa12:	693b      	ldr	r3, [r7, #16]
 800fa14:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800fa18:	693a      	ldr	r2, [r7, #16]
 800fa1a:	3347      	adds	r3, #71	; 0x47
 800fa1c:	00db      	lsls	r3, r3, #3
 800fa1e:	4413      	add	r3, r2
 800fa20:	7a5a      	ldrb	r2, [r3, #9]
 800fa22:	693b      	ldr	r3, [r7, #16]
 800fa24:	761a      	strb	r2, [r3, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800fa26:	693b      	ldr	r3, [r7, #16]
 800fa28:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800fa2c:	693a      	ldr	r2, [r7, #16]
 800fa2e:	3347      	adds	r3, #71	; 0x47
 800fa30:	00db      	lsls	r3, r3, #3
 800fa32:	4413      	add	r3, r2
 800fa34:	7a1a      	ldrb	r2, [r3, #8]
 800fa36:	693b      	ldr	r3, [r7, #16]
 800fa38:	765a      	strb	r2, [r3, #25]
    hmsc->scsi_sense_head++;
 800fa3a:	693b      	ldr	r3, [r7, #16]
 800fa3c:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800fa40:	3301      	adds	r3, #1
 800fa42:	b2da      	uxtb	r2, r3
 800fa44:	693b      	ldr	r3, [r7, #16]
 800fa46:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800fa4a:	693b      	ldr	r3, [r7, #16]
 800fa4c:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800fa50:	2b04      	cmp	r3, #4
 800fa52:	d103      	bne.n	800fa5c <SCSI_RequestSense+0xac>
    {
      hmsc->scsi_sense_head = 0U;
 800fa54:	693b      	ldr	r3, [r7, #16]
 800fa56:	2200      	movs	r2, #0
 800fa58:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c
    }
  }
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800fa5c:	693b      	ldr	r3, [r7, #16]
 800fa5e:	2212      	movs	r2, #18
 800fa60:	815a      	strh	r2, [r3, #10]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	3304      	adds	r3, #4
 800fa66:	781b      	ldrb	r3, [r3, #0]
 800fa68:	2b12      	cmp	r3, #18
 800fa6a:	d805      	bhi.n	800fa78 <SCSI_RequestSense+0xc8>
  {
    hmsc->bot_data_length = params[4];
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	3304      	adds	r3, #4
 800fa70:	781b      	ldrb	r3, [r3, #0]
 800fa72:	b29a      	uxth	r2, r3
 800fa74:	693b      	ldr	r3, [r7, #16]
 800fa76:	815a      	strh	r2, [r3, #10]
  }
  return 0;
 800fa78:	2300      	movs	r3, #0
}
 800fa7a:	4618      	mov	r0, r3
 800fa7c:	371c      	adds	r7, #28
 800fa7e:	46bd      	mov	sp, r7
 800fa80:	bc80      	pop	{r7}
 800fa82:	4770      	bx	lr

0800fa84 <SCSI_SenseCode>:
* @param  ASC: Additional Sense Key
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800fa84:	b480      	push	{r7}
 800fa86:	b085      	sub	sp, #20
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	6078      	str	r0, [r7, #4]
 800fa8c:	4608      	mov	r0, r1
 800fa8e:	4611      	mov	r1, r2
 800fa90:	461a      	mov	r2, r3
 800fa92:	4603      	mov	r3, r0
 800fa94:	70fb      	strb	r3, [r7, #3]
 800fa96:	460b      	mov	r3, r1
 800fa98:	70bb      	strb	r3, [r7, #2]
 800fa9a:	4613      	mov	r3, r2
 800fa9c:	707b      	strb	r3, [r7, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800faa4:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800faac:	68fa      	ldr	r2, [r7, #12]
 800faae:	3347      	adds	r3, #71	; 0x47
 800fab0:	00db      	lsls	r3, r3, #3
 800fab2:	4413      	add	r3, r2
 800fab4:	78ba      	ldrb	r2, [r7, #2]
 800fab6:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800fabe:	68fa      	ldr	r2, [r7, #12]
 800fac0:	3347      	adds	r3, #71	; 0x47
 800fac2:	00db      	lsls	r3, r3, #3
 800fac4:	4413      	add	r3, r2
 800fac6:	2200      	movs	r2, #0
 800fac8:	721a      	strb	r2, [r3, #8]
  hmsc->scsi_sense_tail++;
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800fad0:	3301      	adds	r3, #1
 800fad2:	b2da      	uxtb	r2, r3
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800fae0:	2b04      	cmp	r3, #4
 800fae2:	d103      	bne.n	800faec <SCSI_SenseCode+0x68>
  {
    hmsc->scsi_sense_tail = 0U;
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	2200      	movs	r2, #0
 800fae8:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  }
}
 800faec:	bf00      	nop
 800faee:	3714      	adds	r7, #20
 800faf0:	46bd      	mov	sp, r7
 800faf2:	bc80      	pop	{r7}
 800faf4:	4770      	bx	lr

0800faf6 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800faf6:	b480      	push	{r7}
 800faf8:	b087      	sub	sp, #28
 800fafa:	af00      	add	r7, sp, #0
 800fafc:	60f8      	str	r0, [r7, #12]
 800fafe:	460b      	mov	r3, r1
 800fb00:	607a      	str	r2, [r7, #4]
 800fb02:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800fb0a:	617b      	str	r3, [r7, #20]
  hmsc->bot_data_length = 0U;
 800fb0c:	697b      	ldr	r3, [r7, #20]
 800fb0e:	2200      	movs	r2, #0
 800fb10:	815a      	strh	r2, [r3, #10]
  return 0;
 800fb12:	2300      	movs	r3, #0
}
 800fb14:	4618      	mov	r0, r3
 800fb16:	371c      	adds	r7, #28
 800fb18:	46bd      	mov	sp, r7
 800fb1a:	bc80      	pop	{r7}
 800fb1c:	4770      	bx	lr

0800fb1e <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800fb1e:	b580      	push	{r7, lr}
 800fb20:	b086      	sub	sp, #24
 800fb22:	af00      	add	r7, sp, #0
 800fb24:	60f8      	str	r0, [r7, #12]
 800fb26:	460b      	mov	r3, r1
 800fb28:	607a      	str	r2, [r7, #4]
 800fb2a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800fb32:	617b      	str	r3, [r7, #20]

  if(hmsc->bot_state == USBD_BOT_IDLE)  /* Idle */
 800fb34:	697b      	ldr	r3, [r7, #20]
 800fb36:	7a1b      	ldrb	r3, [r3, #8]
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d16e      	bne.n	800fc1a <SCSI_Read10+0xfc>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800fb3c:	697b      	ldr	r3, [r7, #20]
 800fb3e:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 800fb42:	b25b      	sxtb	r3, r3
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	db0a      	blt.n	800fb5e <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800fb48:	697b      	ldr	r3, [r7, #20]
 800fb4a:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800fb4e:	2320      	movs	r3, #32
 800fb50:	2205      	movs	r2, #5
 800fb52:	68f8      	ldr	r0, [r7, #12]
 800fb54:	f7ff ff96 	bl	800fa84 <SCSI_SenseCode>
      return -1;
 800fb58:	f04f 33ff 	mov.w	r3, #4294967295
 800fb5c:	e067      	b.n	800fc2e <SCSI_Read10+0x110>
    }

    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800fb64:	689b      	ldr	r3, [r3, #8]
 800fb66:	7afa      	ldrb	r2, [r7, #11]
 800fb68:	4610      	mov	r0, r2
 800fb6a:	4798      	blx	r3
 800fb6c:	4603      	mov	r3, r0
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d008      	beq.n	800fb84 <SCSI_Read10+0x66>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800fb72:	7af9      	ldrb	r1, [r7, #11]
 800fb74:	233a      	movs	r3, #58	; 0x3a
 800fb76:	2202      	movs	r2, #2
 800fb78:	68f8      	ldr	r0, [r7, #12]
 800fb7a:	f7ff ff83 	bl	800fa84 <SCSI_SenseCode>
      return -1;
 800fb7e:	f04f 33ff 	mov.w	r3, #4294967295
 800fb82:	e054      	b.n	800fc2e <SCSI_Read10+0x110>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	3302      	adds	r3, #2
 800fb88:	781b      	ldrb	r3, [r3, #0]
 800fb8a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	3303      	adds	r3, #3
 800fb90:	781b      	ldrb	r3, [r3, #0]
 800fb92:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800fb94:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	3304      	adds	r3, #4
 800fb9a:	781b      	ldrb	r3, [r3, #0]
 800fb9c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800fb9e:	4313      	orrs	r3, r2
                           (uint32_t)params[5];
 800fba0:	687a      	ldr	r2, [r7, #4]
 800fba2:	3205      	adds	r2, #5
 800fba4:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800fba6:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800fba8:	697b      	ldr	r3, [r7, #20]
 800fbaa:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len =  ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	3307      	adds	r3, #7
 800fbb2:	781b      	ldrb	r3, [r3, #0]
 800fbb4:	021b      	lsls	r3, r3, #8
 800fbb6:	687a      	ldr	r2, [r7, #4]
 800fbb8:	3208      	adds	r2, #8
 800fbba:	7812      	ldrb	r2, [r2, #0]
 800fbbc:	431a      	orrs	r2, r3
 800fbbe:	697b      	ldr	r3, [r7, #20]
 800fbc0:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    if(SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800fbc4:	697b      	ldr	r3, [r7, #20]
 800fbc6:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800fbca:	697b      	ldr	r3, [r7, #20]
 800fbcc:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800fbd0:	7af9      	ldrb	r1, [r7, #11]
 800fbd2:	68f8      	ldr	r0, [r7, #12]
 800fbd4:	f000 f912 	bl	800fdfc <SCSI_CheckAddressRange>
 800fbd8:	4603      	mov	r3, r0
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	da02      	bge.n	800fbe4 <SCSI_Read10+0xc6>
                              hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800fbde:	f04f 33ff 	mov.w	r3, #4294967295
 800fbe2:	e024      	b.n	800fc2e <SCSI_Read10+0x110>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800fbe4:	697b      	ldr	r3, [r7, #20]
 800fbe6:	2202      	movs	r2, #2
 800fbe8:	721a      	strb	r2, [r3, #8]

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800fbea:	697b      	ldr	r3, [r7, #20]
 800fbec:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800fbf0:	697b      	ldr	r3, [r7, #20]
 800fbf2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800fbf6:	6979      	ldr	r1, [r7, #20]
 800fbf8:	f8b1 125e 	ldrh.w	r1, [r1, #606]	; 0x25e
 800fbfc:	fb01 f303 	mul.w	r3, r1, r3
 800fc00:	429a      	cmp	r2, r3
 800fc02:	d00a      	beq.n	800fc1a <SCSI_Read10+0xfc>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800fc04:	697b      	ldr	r3, [r7, #20]
 800fc06:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800fc0a:	2320      	movs	r3, #32
 800fc0c:	2205      	movs	r2, #5
 800fc0e:	68f8      	ldr	r0, [r7, #12]
 800fc10:	f7ff ff38 	bl	800fa84 <SCSI_SenseCode>
      return -1;
 800fc14:	f04f 33ff 	mov.w	r3, #4294967295
 800fc18:	e009      	b.n	800fc2e <SCSI_Read10+0x110>
    }
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800fc1a:	697b      	ldr	r3, [r7, #20]
 800fc1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fc20:	815a      	strh	r2, [r3, #10]

  return SCSI_ProcessRead(pdev, lun);
 800fc22:	7afb      	ldrb	r3, [r7, #11]
 800fc24:	4619      	mov	r1, r3
 800fc26:	68f8      	ldr	r0, [r7, #12]
 800fc28:	f000 f90a 	bl	800fe40 <SCSI_ProcessRead>
 800fc2c:	4603      	mov	r3, r0
}
 800fc2e:	4618      	mov	r0, r3
 800fc30:	3718      	adds	r7, #24
 800fc32:	46bd      	mov	sp, r7
 800fc34:	bd80      	pop	{r7, pc}

0800fc36 <SCSI_Write10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Write10 (USBD_HandleTypeDef  *pdev, uint8_t lun , uint8_t *params)
{
 800fc36:	b580      	push	{r7, lr}
 800fc38:	b086      	sub	sp, #24
 800fc3a:	af00      	add	r7, sp, #0
 800fc3c:	60f8      	str	r0, [r7, #12]
 800fc3e:	460b      	mov	r3, r1
 800fc40:	607a      	str	r2, [r7, #4]
 800fc42:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800fc4a:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800fc4c:	697b      	ldr	r3, [r7, #20]
 800fc4e:	7a1b      	ldrb	r3, [r3, #8]
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	f040 8096 	bne.w	800fd82 <SCSI_Write10+0x14c>
  {
    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800fc56:	697b      	ldr	r3, [r7, #20]
 800fc58:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 800fc5c:	b25b      	sxtb	r3, r3
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	da0a      	bge.n	800fc78 <SCSI_Write10+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800fc62:	697b      	ldr	r3, [r7, #20]
 800fc64:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800fc68:	2320      	movs	r3, #32
 800fc6a:	2205      	movs	r2, #5
 800fc6c:	68f8      	ldr	r0, [r7, #12]
 800fc6e:	f7ff ff09 	bl	800fa84 <SCSI_SenseCode>
      return -1;
 800fc72:	f04f 33ff 	mov.w	r3, #4294967295
 800fc76:	e08a      	b.n	800fd8e <SCSI_Write10+0x158>
    }

    /* Check whether Media is ready */
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800fc7e:	689b      	ldr	r3, [r3, #8]
 800fc80:	7afa      	ldrb	r2, [r7, #11]
 800fc82:	4610      	mov	r0, r2
 800fc84:	4798      	blx	r3
 800fc86:	4603      	mov	r3, r0
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d008      	beq.n	800fc9e <SCSI_Write10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800fc8c:	7af9      	ldrb	r1, [r7, #11]
 800fc8e:	233a      	movs	r3, #58	; 0x3a
 800fc90:	2202      	movs	r2, #2
 800fc92:	68f8      	ldr	r0, [r7, #12]
 800fc94:	f7ff fef6 	bl	800fa84 <SCSI_SenseCode>
      return -1;
 800fc98:	f04f 33ff 	mov.w	r3, #4294967295
 800fc9c:	e077      	b.n	800fd8e <SCSI_Write10+0x158>
    }

    /* Check If media is write-protected */
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800fca4:	68db      	ldr	r3, [r3, #12]
 800fca6:	7afa      	ldrb	r2, [r7, #11]
 800fca8:	4610      	mov	r0, r2
 800fcaa:	4798      	blx	r3
 800fcac:	4603      	mov	r3, r0
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d008      	beq.n	800fcc4 <SCSI_Write10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800fcb2:	7af9      	ldrb	r1, [r7, #11]
 800fcb4:	2327      	movs	r3, #39	; 0x27
 800fcb6:	2202      	movs	r2, #2
 800fcb8:	68f8      	ldr	r0, [r7, #12]
 800fcba:	f7ff fee3 	bl	800fa84 <SCSI_SenseCode>
      return -1;
 800fcbe:	f04f 33ff 	mov.w	r3, #4294967295
 800fcc2:	e064      	b.n	800fd8e <SCSI_Write10+0x158>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	3302      	adds	r3, #2
 800fcc8:	781b      	ldrb	r3, [r3, #0]
 800fcca:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	3303      	adds	r3, #3
 800fcd0:	781b      	ldrb	r3, [r3, #0]
 800fcd2:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800fcd4:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	3304      	adds	r3, #4
 800fcda:	781b      	ldrb	r3, [r3, #0]
 800fcdc:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800fcde:	4313      	orrs	r3, r2
                           (uint32_t)params[5];
 800fce0:	687a      	ldr	r2, [r7, #4]
 800fce2:	3205      	adds	r2, #5
 800fce4:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800fce6:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800fce8:	697b      	ldr	r3, [r7, #20]
 800fcea:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	3307      	adds	r3, #7
 800fcf2:	781b      	ldrb	r3, [r3, #0]
 800fcf4:	021b      	lsls	r3, r3, #8
                          (uint32_t)params[8];
 800fcf6:	687a      	ldr	r2, [r7, #4]
 800fcf8:	3208      	adds	r2, #8
 800fcfa:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800fcfc:	431a      	orrs	r2, r3
 800fcfe:	697b      	ldr	r3, [r7, #20]
 800fd00:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    /* check if LBA address is in the right range */
    if(SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800fd04:	697b      	ldr	r3, [r7, #20]
 800fd06:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800fd0a:	697b      	ldr	r3, [r7, #20]
 800fd0c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800fd10:	7af9      	ldrb	r1, [r7, #11]
 800fd12:	68f8      	ldr	r0, [r7, #12]
 800fd14:	f000 f872 	bl	800fdfc <SCSI_CheckAddressRange>
 800fd18:	4603      	mov	r3, r0
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	da02      	bge.n	800fd24 <SCSI_Write10+0xee>
                              hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800fd1e:	f04f 33ff 	mov.w	r3, #4294967295
 800fd22:	e034      	b.n	800fd8e <SCSI_Write10+0x158>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800fd24:	697b      	ldr	r3, [r7, #20]
 800fd26:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800fd2a:	697a      	ldr	r2, [r7, #20]
 800fd2c:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 800fd30:	fb02 f303 	mul.w	r3, r2, r3
 800fd34:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800fd36:	697b      	ldr	r3, [r7, #20]
 800fd38:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800fd3c:	693a      	ldr	r2, [r7, #16]
 800fd3e:	429a      	cmp	r2, r3
 800fd40:	d00a      	beq.n	800fd58 <SCSI_Write10+0x122>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800fd42:	697b      	ldr	r3, [r7, #20]
 800fd44:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800fd48:	2320      	movs	r3, #32
 800fd4a:	2205      	movs	r2, #5
 800fd4c:	68f8      	ldr	r0, [r7, #12]
 800fd4e:	f7ff fe99 	bl	800fa84 <SCSI_SenseCode>
      return -1;
 800fd52:	f04f 33ff 	mov.w	r3, #4294967295
 800fd56:	e01a      	b.n	800fd8e <SCSI_Write10+0x158>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800fd58:	693b      	ldr	r3, [r7, #16]
 800fd5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fd5e:	bf28      	it	cs
 800fd60:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800fd64:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800fd66:	697b      	ldr	r3, [r7, #20]
 800fd68:	2201      	movs	r2, #1
 800fd6a:	721a      	strb	r2, [r3, #8]
    USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800fd6c:	697b      	ldr	r3, [r7, #20]
 800fd6e:	f103 020c 	add.w	r2, r3, #12
 800fd72:	693b      	ldr	r3, [r7, #16]
 800fd74:	b29b      	uxth	r3, r3
 800fd76:	2101      	movs	r1, #1
 800fd78:	68f8      	ldr	r0, [r7, #12]
 800fd7a:	f004 fff2 	bl	8014d62 <USBD_LL_PrepareReceive>
  }
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }
  return 0;
 800fd7e:	2300      	movs	r3, #0
 800fd80:	e005      	b.n	800fd8e <SCSI_Write10+0x158>
    return SCSI_ProcessWrite(pdev, lun);
 800fd82:	7afb      	ldrb	r3, [r7, #11]
 800fd84:	4619      	mov	r1, r3
 800fd86:	68f8      	ldr	r0, [r7, #12]
 800fd88:	f000 f8ce 	bl	800ff28 <SCSI_ProcessWrite>
 800fd8c:	4603      	mov	r3, r0
}
 800fd8e:	4618      	mov	r0, r3
 800fd90:	3718      	adds	r7, #24
 800fd92:	46bd      	mov	sp, r7
 800fd94:	bd80      	pop	{r7, pc}

0800fd96 <SCSI_Verify10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Verify10(USBD_HandleTypeDef  *pdev, uint8_t lun , uint8_t *params)
{
 800fd96:	b580      	push	{r7, lr}
 800fd98:	b086      	sub	sp, #24
 800fd9a:	af00      	add	r7, sp, #0
 800fd9c:	60f8      	str	r0, [r7, #12]
 800fd9e:	460b      	mov	r3, r1
 800fda0:	607a      	str	r2, [r7, #4]
 800fda2:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800fdaa:	617b      	str	r3, [r7, #20]

  if ((params[1]& 0x02U) == 0x02U)
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	3301      	adds	r3, #1
 800fdb0:	781b      	ldrb	r3, [r3, #0]
 800fdb2:	f003 0302 	and.w	r3, r3, #2
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d008      	beq.n	800fdcc <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800fdba:	7af9      	ldrb	r1, [r7, #11]
 800fdbc:	2324      	movs	r3, #36	; 0x24
 800fdbe:	2205      	movs	r2, #5
 800fdc0:	68f8      	ldr	r0, [r7, #12]
 800fdc2:	f7ff fe5f 	bl	800fa84 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800fdc6:	f04f 33ff 	mov.w	r3, #4294967295
 800fdca:	e013      	b.n	800fdf4 <SCSI_Verify10+0x5e>
  }

  if(SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800fdcc:	697b      	ldr	r3, [r7, #20]
 800fdce:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800fdd2:	697b      	ldr	r3, [r7, #20]
 800fdd4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800fdd8:	7af9      	ldrb	r1, [r7, #11]
 800fdda:	68f8      	ldr	r0, [r7, #12]
 800fddc:	f000 f80e 	bl	800fdfc <SCSI_CheckAddressRange>
 800fde0:	4603      	mov	r3, r0
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	da02      	bge.n	800fdec <SCSI_Verify10+0x56>
                            hmsc->scsi_blk_len) < 0)
  {
    return -1; /* error */
 800fde6:	f04f 33ff 	mov.w	r3, #4294967295
 800fdea:	e003      	b.n	800fdf4 <SCSI_Verify10+0x5e>
  }
  hmsc->bot_data_length = 0U;
 800fdec:	697b      	ldr	r3, [r7, #20]
 800fdee:	2200      	movs	r2, #0
 800fdf0:	815a      	strh	r2, [r3, #10]
  return 0;
 800fdf2:	2300      	movs	r3, #0
}
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	3718      	adds	r7, #24
 800fdf8:	46bd      	mov	sp, r7
 800fdfa:	bd80      	pop	{r7, pc}

0800fdfc <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange (USBD_HandleTypeDef *pdev, uint8_t lun,
                                      uint32_t blk_offset, uint32_t blk_nbr)
{
 800fdfc:	b580      	push	{r7, lr}
 800fdfe:	b086      	sub	sp, #24
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	60f8      	str	r0, [r7, #12]
 800fe04:	607a      	str	r2, [r7, #4]
 800fe06:	603b      	str	r3, [r7, #0]
 800fe08:	460b      	mov	r3, r1
 800fe0a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800fe12:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800fe14:	687a      	ldr	r2, [r7, #4]
 800fe16:	683b      	ldr	r3, [r7, #0]
 800fe18:	441a      	add	r2, r3
 800fe1a:	697b      	ldr	r3, [r7, #20]
 800fe1c:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800fe20:	429a      	cmp	r2, r3
 800fe22:	d908      	bls.n	800fe36 <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800fe24:	7af9      	ldrb	r1, [r7, #11]
 800fe26:	2321      	movs	r3, #33	; 0x21
 800fe28:	2205      	movs	r2, #5
 800fe2a:	68f8      	ldr	r0, [r7, #12]
 800fe2c:	f7ff fe2a 	bl	800fa84 <SCSI_SenseCode>
    return -1;
 800fe30:	f04f 33ff 	mov.w	r3, #4294967295
 800fe34:	e000      	b.n	800fe38 <SCSI_CheckAddressRange+0x3c>
  }
  return 0;
 800fe36:	2300      	movs	r3, #0
}
 800fe38:	4618      	mov	r0, r3
 800fe3a:	3718      	adds	r7, #24
 800fe3c:	46bd      	mov	sp, r7
 800fe3e:	bd80      	pop	{r7, pc}

0800fe40 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead (USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 800fe40:	b590      	push	{r4, r7, lr}
 800fe42:	b085      	sub	sp, #20
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	6078      	str	r0, [r7, #4]
 800fe48:	460b      	mov	r3, r1
 800fe4a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800fe52:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800fe5a:	68fa      	ldr	r2, [r7, #12]
 800fe5c:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 800fe60:	fb02 f303 	mul.w	r3, r2, r3
 800fe64:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800fe66:	68bb      	ldr	r3, [r7, #8]
 800fe68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fe6c:	bf28      	it	cs
 800fe6e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800fe72:	60bb      	str	r3, [r7, #8]

  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800fe7a:	691c      	ldr	r4, [r3, #16]
                              hmsc->bot_data,
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	f103 010c 	add.w	r1, r3, #12
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                              hmsc->scsi_blk_addr,
                              (len / hmsc->scsi_blk_size)) < 0)
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800fe8e:	4618      	mov	r0, r3
 800fe90:	68bb      	ldr	r3, [r7, #8]
 800fe92:	fbb3 f3f0 	udiv	r3, r3, r0
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 800fe96:	b29b      	uxth	r3, r3
 800fe98:	78f8      	ldrb	r0, [r7, #3]
 800fe9a:	47a0      	blx	r4
 800fe9c:	4603      	mov	r3, r0
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	da08      	bge.n	800feb4 <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800fea2:	78f9      	ldrb	r1, [r7, #3]
 800fea4:	2311      	movs	r3, #17
 800fea6:	2204      	movs	r2, #4
 800fea8:	6878      	ldr	r0, [r7, #4]
 800feaa:	f7ff fdeb 	bl	800fa84 <SCSI_SenseCode>
    return -1;
 800feae:	f04f 33ff 	mov.w	r3, #4294967295
 800feb2:	e035      	b.n	800ff20 <SCSI_ProcessRead+0xe0>
  }

  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	f103 020c 	add.w	r2, r3, #12
 800feba:	68bb      	ldr	r3, [r7, #8]
 800febc:	b29b      	uxth	r3, r3
 800febe:	2181      	movs	r1, #129	; 0x81
 800fec0:	6878      	ldr	r0, [r7, #4]
 800fec2:	f004 ff2b 	bl	8014d1c <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800fed2:	4619      	mov	r1, r3
 800fed4:	68bb      	ldr	r3, [r7, #8]
 800fed6:	fbb3 f3f1 	udiv	r3, r3, r1
 800feda:	441a      	add	r2, r3
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800feee:	4619      	mov	r1, r3
 800fef0:	68bb      	ldr	r3, [r7, #8]
 800fef2:	fbb3 f3f1 	udiv	r3, r3, r1
 800fef6:	1ad2      	subs	r2, r2, r3
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 800ff04:	68bb      	ldr	r3, [r7, #8]
 800ff06:	1ad2      	subs	r2, r2, r3
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d102      	bne.n	800ff1e <SCSI_ProcessRead+0xde>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	2203      	movs	r2, #3
 800ff1c:	721a      	strb	r2, [r3, #8]
  }
  return 0;
 800ff1e:	2300      	movs	r3, #0
}
 800ff20:	4618      	mov	r0, r3
 800ff22:	3714      	adds	r7, #20
 800ff24:	46bd      	mov	sp, r7
 800ff26:	bd90      	pop	{r4, r7, pc}

0800ff28 <SCSI_ProcessWrite>:
* @param  lun: Logical unit number
* @retval status
*/

static int8_t SCSI_ProcessWrite (USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 800ff28:	b590      	push	{r4, r7, lr}
 800ff2a:	b085      	sub	sp, #20
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	6078      	str	r0, [r7, #4]
 800ff30:	460b      	mov	r3, r1
 800ff32:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ff3a:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800ff42:	68fa      	ldr	r2, [r7, #12]
 800ff44:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 800ff48:	fb02 f303 	mul.w	r3, r2, r3
 800ff4c:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800ff4e:	68bb      	ldr	r3, [r7, #8]
 800ff50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ff54:	bf28      	it	cs
 800ff56:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800ff5a:	60bb      	str	r3, [r7, #8]

  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ff62:	695c      	ldr	r4, [r3, #20]
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	f103 010c 	add.w	r1, r3, #12
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                             hmsc->scsi_blk_addr,
                             (len / hmsc->scsi_blk_size)) < 0)
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800ff76:	4618      	mov	r0, r3
 800ff78:	68bb      	ldr	r3, [r7, #8]
 800ff7a:	fbb3 f3f0 	udiv	r3, r3, r0
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800ff7e:	b29b      	uxth	r3, r3
 800ff80:	78f8      	ldrb	r0, [r7, #3]
 800ff82:	47a0      	blx	r4
 800ff84:	4603      	mov	r3, r0
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	da08      	bge.n	800ff9c <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800ff8a:	78f9      	ldrb	r1, [r7, #3]
 800ff8c:	2303      	movs	r3, #3
 800ff8e:	2204      	movs	r2, #4
 800ff90:	6878      	ldr	r0, [r7, #4]
 800ff92:	f7ff fd77 	bl	800fa84 <SCSI_SenseCode>

    return -1;
 800ff96:	f04f 33ff 	mov.w	r3, #4294967295
 800ff9a:	e045      	b.n	8010028 <SCSI_ProcessWrite+0x100>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800ffa8:	4619      	mov	r1, r3
 800ffaa:	68bb      	ldr	r3, [r7, #8]
 800ffac:	fbb3 f3f1 	udiv	r3, r3, r1
 800ffb0:	441a      	add	r2, r3
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800ffc4:	4619      	mov	r1, r3
 800ffc6:	68bb      	ldr	r3, [r7, #8]
 800ffc8:	fbb3 f3f1 	udiv	r3, r3, r1
 800ffcc:	1ad2      	subs	r2, r2, r3
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 800ffda:	68bb      	ldr	r3, [r7, #8]
 800ffdc:	1ad2      	subs	r2, r2, r3
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d104      	bne.n	800fff8 <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 800ffee:	2100      	movs	r1, #0
 800fff0:	6878      	ldr	r0, [r7, #4]
 800fff2:	f7ff f97f 	bl	800f2f4 <MSC_BOT_SendCSW>
 800fff6:	e016      	b.n	8010026 <SCSI_ProcessWrite+0xfe>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800fffe:	68fa      	ldr	r2, [r7, #12]
 8010000:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8010004:	fb02 f303 	mul.w	r3, r2, r3
 8010008:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801000c:	bf28      	it	cs
 801000e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8010012:	60bb      	str	r3, [r7, #8]
    /* Prepare EP to Receive next packet */
    USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	f103 020c 	add.w	r2, r3, #12
 801001a:	68bb      	ldr	r3, [r7, #8]
 801001c:	b29b      	uxth	r3, r3
 801001e:	2101      	movs	r1, #1
 8010020:	6878      	ldr	r0, [r7, #4]
 8010022:	f004 fe9e 	bl	8014d62 <USBD_LL_PrepareReceive>
  }

  return 0;
 8010026:	2300      	movs	r3, #0
}
 8010028:	4618      	mov	r0, r3
 801002a:	3714      	adds	r7, #20
 801002c:	46bd      	mov	sp, r7
 801002e:	bd90      	pop	{r4, r7, pc}

08010030 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010030:	b580      	push	{r7, lr}
 8010032:	b084      	sub	sp, #16
 8010034:	af00      	add	r7, sp, #0
 8010036:	60f8      	str	r0, [r7, #12]
 8010038:	60b9      	str	r1, [r7, #8]
 801003a:	4613      	mov	r3, r2
 801003c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	2b00      	cmp	r3, #0
 8010042:	d101      	bne.n	8010048 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8010044:	2302      	movs	r3, #2
 8010046:	e01a      	b.n	801007e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 801004e:	2b00      	cmp	r3, #0
 8010050:	d003      	beq.n	801005a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	2200      	movs	r2, #0
 8010056:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 801005a:	68bb      	ldr	r3, [r7, #8]
 801005c:	2b00      	cmp	r3, #0
 801005e:	d003      	beq.n	8010068 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	68ba      	ldr	r2, [r7, #8]
 8010064:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	2201      	movs	r2, #1
 801006c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	79fa      	ldrb	r2, [r7, #7]
 8010074:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8010076:	68f8      	ldr	r0, [r7, #12]
 8010078:	f004 fcf8 	bl	8014a6c <USBD_LL_Init>

  return USBD_OK;
 801007c:	2300      	movs	r3, #0
}
 801007e:	4618      	mov	r0, r3
 8010080:	3710      	adds	r7, #16
 8010082:	46bd      	mov	sp, r7
 8010084:	bd80      	pop	{r7, pc}

08010086 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8010086:	b480      	push	{r7}
 8010088:	b085      	sub	sp, #20
 801008a:	af00      	add	r7, sp, #0
 801008c:	6078      	str	r0, [r7, #4]
 801008e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8010090:	2300      	movs	r3, #0
 8010092:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8010094:	683b      	ldr	r3, [r7, #0]
 8010096:	2b00      	cmp	r3, #0
 8010098:	d006      	beq.n	80100a8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	683a      	ldr	r2, [r7, #0]
 801009e:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 80100a2:	2300      	movs	r3, #0
 80100a4:	73fb      	strb	r3, [r7, #15]
 80100a6:	e001      	b.n	80100ac <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80100a8:	2302      	movs	r3, #2
 80100aa:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80100ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80100ae:	4618      	mov	r0, r3
 80100b0:	3714      	adds	r7, #20
 80100b2:	46bd      	mov	sp, r7
 80100b4:	bc80      	pop	{r7}
 80100b6:	4770      	bx	lr

080100b8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80100b8:	b580      	push	{r7, lr}
 80100ba:	b082      	sub	sp, #8
 80100bc:	af00      	add	r7, sp, #0
 80100be:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80100c0:	6878      	ldr	r0, [r7, #4]
 80100c2:	f004 fd23 	bl	8014b0c <USBD_LL_Start>

  return USBD_OK;
 80100c6:	2300      	movs	r3, #0
}
 80100c8:	4618      	mov	r0, r3
 80100ca:	3708      	adds	r7, #8
 80100cc:	46bd      	mov	sp, r7
 80100ce:	bd80      	pop	{r7, pc}

080100d0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 80100d0:	b480      	push	{r7}
 80100d2:	b083      	sub	sp, #12
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80100d8:	2300      	movs	r3, #0
}
 80100da:	4618      	mov	r0, r3
 80100dc:	370c      	adds	r7, #12
 80100de:	46bd      	mov	sp, r7
 80100e0:	bc80      	pop	{r7}
 80100e2:	4770      	bx	lr

080100e4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80100e4:	b580      	push	{r7, lr}
 80100e6:	b084      	sub	sp, #16
 80100e8:	af00      	add	r7, sp, #0
 80100ea:	6078      	str	r0, [r7, #4]
 80100ec:	460b      	mov	r3, r1
 80100ee:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80100f0:	2302      	movs	r3, #2
 80100f2:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d00c      	beq.n	8010118 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	78fa      	ldrb	r2, [r7, #3]
 8010108:	4611      	mov	r1, r2
 801010a:	6878      	ldr	r0, [r7, #4]
 801010c:	4798      	blx	r3
 801010e:	4603      	mov	r3, r0
 8010110:	2b00      	cmp	r3, #0
 8010112:	d101      	bne.n	8010118 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8010114:	2300      	movs	r3, #0
 8010116:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8010118:	7bfb      	ldrb	r3, [r7, #15]
}
 801011a:	4618      	mov	r0, r3
 801011c:	3710      	adds	r7, #16
 801011e:	46bd      	mov	sp, r7
 8010120:	bd80      	pop	{r7, pc}

08010122 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8010122:	b580      	push	{r7, lr}
 8010124:	b082      	sub	sp, #8
 8010126:	af00      	add	r7, sp, #0
 8010128:	6078      	str	r0, [r7, #4]
 801012a:	460b      	mov	r3, r1
 801012c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010134:	685b      	ldr	r3, [r3, #4]
 8010136:	78fa      	ldrb	r2, [r7, #3]
 8010138:	4611      	mov	r1, r2
 801013a:	6878      	ldr	r0, [r7, #4]
 801013c:	4798      	blx	r3
  return USBD_OK;
 801013e:	2300      	movs	r3, #0
}
 8010140:	4618      	mov	r0, r3
 8010142:	3708      	adds	r7, #8
 8010144:	46bd      	mov	sp, r7
 8010146:	bd80      	pop	{r7, pc}

08010148 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8010148:	b580      	push	{r7, lr}
 801014a:	b082      	sub	sp, #8
 801014c:	af00      	add	r7, sp, #0
 801014e:	6078      	str	r0, [r7, #4]
 8010150:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8010158:	6839      	ldr	r1, [r7, #0]
 801015a:	4618      	mov	r0, r3
 801015c:	f000 fe56 	bl	8010e0c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	2201      	movs	r2, #1
 8010164:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 801016e:	461a      	mov	r2, r3
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 801017c:	f003 031f 	and.w	r3, r3, #31
 8010180:	2b01      	cmp	r3, #1
 8010182:	d00c      	beq.n	801019e <USBD_LL_SetupStage+0x56>
 8010184:	2b01      	cmp	r3, #1
 8010186:	d302      	bcc.n	801018e <USBD_LL_SetupStage+0x46>
 8010188:	2b02      	cmp	r3, #2
 801018a:	d010      	beq.n	80101ae <USBD_LL_SetupStage+0x66>
 801018c:	e017      	b.n	80101be <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8010194:	4619      	mov	r1, r3
 8010196:	6878      	ldr	r0, [r7, #4]
 8010198:	f000 f9c6 	bl	8010528 <USBD_StdDevReq>
    break;
 801019c:	e01a      	b.n	80101d4 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80101a4:	4619      	mov	r1, r3
 80101a6:	6878      	ldr	r0, [r7, #4]
 80101a8:	f000 fa28 	bl	80105fc <USBD_StdItfReq>
    break;
 80101ac:	e012      	b.n	80101d4 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80101b4:	4619      	mov	r1, r3
 80101b6:	6878      	ldr	r0, [r7, #4]
 80101b8:	f000 fa66 	bl	8010688 <USBD_StdEPReq>
    break;
 80101bc:	e00a      	b.n	80101d4 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80101c4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80101c8:	b2db      	uxtb	r3, r3
 80101ca:	4619      	mov	r1, r3
 80101cc:	6878      	ldr	r0, [r7, #4]
 80101ce:	f004 fd1c 	bl	8014c0a <USBD_LL_StallEP>
    break;
 80101d2:	bf00      	nop
  }

  return USBD_OK;
 80101d4:	2300      	movs	r3, #0
}
 80101d6:	4618      	mov	r0, r3
 80101d8:	3708      	adds	r7, #8
 80101da:	46bd      	mov	sp, r7
 80101dc:	bd80      	pop	{r7, pc}

080101de <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80101de:	b580      	push	{r7, lr}
 80101e0:	b086      	sub	sp, #24
 80101e2:	af00      	add	r7, sp, #0
 80101e4:	60f8      	str	r0, [r7, #12]
 80101e6:	460b      	mov	r3, r1
 80101e8:	607a      	str	r2, [r7, #4]
 80101ea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 80101ec:	7afb      	ldrb	r3, [r7, #11]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d14b      	bne.n	801028a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80101f8:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8010200:	2b03      	cmp	r3, #3
 8010202:	d134      	bne.n	801026e <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8010204:	697b      	ldr	r3, [r7, #20]
 8010206:	68da      	ldr	r2, [r3, #12]
 8010208:	697b      	ldr	r3, [r7, #20]
 801020a:	691b      	ldr	r3, [r3, #16]
 801020c:	429a      	cmp	r2, r3
 801020e:	d919      	bls.n	8010244 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8010210:	697b      	ldr	r3, [r7, #20]
 8010212:	68da      	ldr	r2, [r3, #12]
 8010214:	697b      	ldr	r3, [r7, #20]
 8010216:	691b      	ldr	r3, [r3, #16]
 8010218:	1ad2      	subs	r2, r2, r3
 801021a:	697b      	ldr	r3, [r7, #20]
 801021c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801021e:	697b      	ldr	r3, [r7, #20]
 8010220:	68da      	ldr	r2, [r3, #12]
 8010222:	697b      	ldr	r3, [r7, #20]
 8010224:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8010226:	429a      	cmp	r2, r3
 8010228:	d203      	bcs.n	8010232 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801022a:	697b      	ldr	r3, [r7, #20]
 801022c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 801022e:	b29b      	uxth	r3, r3
 8010230:	e002      	b.n	8010238 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8010232:	697b      	ldr	r3, [r7, #20]
 8010234:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8010236:	b29b      	uxth	r3, r3
 8010238:	461a      	mov	r2, r3
 801023a:	6879      	ldr	r1, [r7, #4]
 801023c:	68f8      	ldr	r0, [r7, #12]
 801023e:	f000 feb9 	bl	8010fb4 <USBD_CtlContinueRx>
 8010242:	e038      	b.n	80102b6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 801024a:	691b      	ldr	r3, [r3, #16]
 801024c:	2b00      	cmp	r3, #0
 801024e:	d00a      	beq.n	8010266 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8010256:	2b03      	cmp	r3, #3
 8010258:	d105      	bne.n	8010266 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010260:	691b      	ldr	r3, [r3, #16]
 8010262:	68f8      	ldr	r0, [r7, #12]
 8010264:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8010266:	68f8      	ldr	r0, [r7, #12]
 8010268:	f000 feb6 	bl	8010fd8 <USBD_CtlSendStatus>
 801026c:	e023      	b.n	80102b6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8010274:	2b05      	cmp	r3, #5
 8010276:	d11e      	bne.n	80102b6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	2200      	movs	r2, #0
 801027c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8010280:	2100      	movs	r1, #0
 8010282:	68f8      	ldr	r0, [r7, #12]
 8010284:	f004 fcc1 	bl	8014c0a <USBD_LL_StallEP>
 8010288:	e015      	b.n	80102b6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010290:	699b      	ldr	r3, [r3, #24]
 8010292:	2b00      	cmp	r3, #0
 8010294:	d00d      	beq.n	80102b2 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 801029c:	2b03      	cmp	r3, #3
 801029e:	d108      	bne.n	80102b2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80102a6:	699b      	ldr	r3, [r3, #24]
 80102a8:	7afa      	ldrb	r2, [r7, #11]
 80102aa:	4611      	mov	r1, r2
 80102ac:	68f8      	ldr	r0, [r7, #12]
 80102ae:	4798      	blx	r3
 80102b0:	e001      	b.n	80102b6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80102b2:	2302      	movs	r3, #2
 80102b4:	e000      	b.n	80102b8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80102b6:	2300      	movs	r3, #0
}
 80102b8:	4618      	mov	r0, r3
 80102ba:	3718      	adds	r7, #24
 80102bc:	46bd      	mov	sp, r7
 80102be:	bd80      	pop	{r7, pc}

080102c0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 80102c0:	b580      	push	{r7, lr}
 80102c2:	b086      	sub	sp, #24
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	60f8      	str	r0, [r7, #12]
 80102c8:	460b      	mov	r3, r1
 80102ca:	607a      	str	r2, [r7, #4]
 80102cc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 80102ce:	7afb      	ldrb	r3, [r7, #11]
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d17f      	bne.n	80103d4 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	3314      	adds	r3, #20
 80102d8:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80102e0:	2b02      	cmp	r3, #2
 80102e2:	d15c      	bne.n	801039e <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 80102e4:	697b      	ldr	r3, [r7, #20]
 80102e6:	68da      	ldr	r2, [r3, #12]
 80102e8:	697b      	ldr	r3, [r7, #20]
 80102ea:	691b      	ldr	r3, [r3, #16]
 80102ec:	429a      	cmp	r2, r3
 80102ee:	d915      	bls.n	801031c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80102f0:	697b      	ldr	r3, [r7, #20]
 80102f2:	68da      	ldr	r2, [r3, #12]
 80102f4:	697b      	ldr	r3, [r7, #20]
 80102f6:	691b      	ldr	r3, [r3, #16]
 80102f8:	1ad2      	subs	r2, r2, r3
 80102fa:	697b      	ldr	r3, [r7, #20]
 80102fc:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 80102fe:	697b      	ldr	r3, [r7, #20]
 8010300:	68db      	ldr	r3, [r3, #12]
 8010302:	b29b      	uxth	r3, r3
 8010304:	461a      	mov	r2, r3
 8010306:	6879      	ldr	r1, [r7, #4]
 8010308:	68f8      	ldr	r0, [r7, #12]
 801030a:	f000 fe41 	bl	8010f90 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 801030e:	2300      	movs	r3, #0
 8010310:	2200      	movs	r2, #0
 8010312:	2100      	movs	r1, #0
 8010314:	68f8      	ldr	r0, [r7, #12]
 8010316:	f004 fd24 	bl	8014d62 <USBD_LL_PrepareReceive>
 801031a:	e04e      	b.n	80103ba <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 801031c:	697b      	ldr	r3, [r7, #20]
 801031e:	689b      	ldr	r3, [r3, #8]
 8010320:	697a      	ldr	r2, [r7, #20]
 8010322:	6912      	ldr	r2, [r2, #16]
 8010324:	fbb3 f1f2 	udiv	r1, r3, r2
 8010328:	fb02 f201 	mul.w	r2, r2, r1
 801032c:	1a9b      	subs	r3, r3, r2
 801032e:	2b00      	cmp	r3, #0
 8010330:	d11c      	bne.n	801036c <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8010332:	697b      	ldr	r3, [r7, #20]
 8010334:	689a      	ldr	r2, [r3, #8]
 8010336:	697b      	ldr	r3, [r7, #20]
 8010338:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 801033a:	429a      	cmp	r2, r3
 801033c:	d316      	bcc.n	801036c <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 801033e:	697b      	ldr	r3, [r7, #20]
 8010340:	689a      	ldr	r2, [r3, #8]
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8010348:	429a      	cmp	r2, r3
 801034a:	d20f      	bcs.n	801036c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 801034c:	2200      	movs	r2, #0
 801034e:	2100      	movs	r1, #0
 8010350:	68f8      	ldr	r0, [r7, #12]
 8010352:	f000 fe1d 	bl	8010f90 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	2200      	movs	r2, #0
 801035a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 801035e:	2300      	movs	r3, #0
 8010360:	2200      	movs	r2, #0
 8010362:	2100      	movs	r1, #0
 8010364:	68f8      	ldr	r0, [r7, #12]
 8010366:	f004 fcfc 	bl	8014d62 <USBD_LL_PrepareReceive>
 801036a:	e026      	b.n	80103ba <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010372:	68db      	ldr	r3, [r3, #12]
 8010374:	2b00      	cmp	r3, #0
 8010376:	d00a      	beq.n	801038e <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 801037e:	2b03      	cmp	r3, #3
 8010380:	d105      	bne.n	801038e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010388:	68db      	ldr	r3, [r3, #12]
 801038a:	68f8      	ldr	r0, [r7, #12]
 801038c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 801038e:	2180      	movs	r1, #128	; 0x80
 8010390:	68f8      	ldr	r0, [r7, #12]
 8010392:	f004 fc3a 	bl	8014c0a <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8010396:	68f8      	ldr	r0, [r7, #12]
 8010398:	f000 fe31 	bl	8010ffe <USBD_CtlReceiveStatus>
 801039c:	e00d      	b.n	80103ba <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80103a4:	2b04      	cmp	r3, #4
 80103a6:	d004      	beq.n	80103b2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d103      	bne.n	80103ba <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80103b2:	2180      	movs	r1, #128	; 0x80
 80103b4:	68f8      	ldr	r0, [r7, #12]
 80103b6:	f004 fc28 	bl	8014c0a <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 80103c0:	2b01      	cmp	r3, #1
 80103c2:	d11d      	bne.n	8010400 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80103c4:	68f8      	ldr	r0, [r7, #12]
 80103c6:	f7ff fe83 	bl	80100d0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	2200      	movs	r2, #0
 80103ce:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 80103d2:	e015      	b.n	8010400 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80103da:	695b      	ldr	r3, [r3, #20]
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d00d      	beq.n	80103fc <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 80103e6:	2b03      	cmp	r3, #3
 80103e8:	d108      	bne.n	80103fc <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80103f0:	695b      	ldr	r3, [r3, #20]
 80103f2:	7afa      	ldrb	r2, [r7, #11]
 80103f4:	4611      	mov	r1, r2
 80103f6:	68f8      	ldr	r0, [r7, #12]
 80103f8:	4798      	blx	r3
 80103fa:	e001      	b.n	8010400 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80103fc:	2302      	movs	r3, #2
 80103fe:	e000      	b.n	8010402 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8010400:	2300      	movs	r3, #0
}
 8010402:	4618      	mov	r0, r3
 8010404:	3718      	adds	r7, #24
 8010406:	46bd      	mov	sp, r7
 8010408:	bd80      	pop	{r7, pc}

0801040a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 801040a:	b580      	push	{r7, lr}
 801040c:	b082      	sub	sp, #8
 801040e:	af00      	add	r7, sp, #0
 8010410:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010412:	2340      	movs	r3, #64	; 0x40
 8010414:	2200      	movs	r2, #0
 8010416:	2100      	movs	r1, #0
 8010418:	6878      	ldr	r0, [r7, #4]
 801041a:	f004 fb92 	bl	8014b42 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	2201      	movs	r2, #1
 8010422:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	2240      	movs	r2, #64	; 0x40
 801042a:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801042e:	2340      	movs	r3, #64	; 0x40
 8010430:	2200      	movs	r2, #0
 8010432:	2180      	movs	r1, #128	; 0x80
 8010434:	6878      	ldr	r0, [r7, #4]
 8010436:	f004 fb84 	bl	8014b42 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	2201      	movs	r2, #1
 801043e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	2240      	movs	r2, #64	; 0x40
 8010444:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	2201      	movs	r2, #1
 801044a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	2200      	movs	r2, #0
 8010452:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	2200      	movs	r2, #0
 801045a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	2200      	movs	r2, #0
 8010460:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 801046a:	2b00      	cmp	r3, #0
 801046c:	d009      	beq.n	8010482 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010474:	685b      	ldr	r3, [r3, #4]
 8010476:	687a      	ldr	r2, [r7, #4]
 8010478:	6852      	ldr	r2, [r2, #4]
 801047a:	b2d2      	uxtb	r2, r2
 801047c:	4611      	mov	r1, r2
 801047e:	6878      	ldr	r0, [r7, #4]
 8010480:	4798      	blx	r3
  }

  return USBD_OK;
 8010482:	2300      	movs	r3, #0
}
 8010484:	4618      	mov	r0, r3
 8010486:	3708      	adds	r7, #8
 8010488:	46bd      	mov	sp, r7
 801048a:	bd80      	pop	{r7, pc}

0801048c <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 801048c:	b480      	push	{r7}
 801048e:	b083      	sub	sp, #12
 8010490:	af00      	add	r7, sp, #0
 8010492:	6078      	str	r0, [r7, #4]
 8010494:	460b      	mov	r3, r1
 8010496:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	78fa      	ldrb	r2, [r7, #3]
 801049c:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 801049e:	2300      	movs	r3, #0
}
 80104a0:	4618      	mov	r0, r3
 80104a2:	370c      	adds	r7, #12
 80104a4:	46bd      	mov	sp, r7
 80104a6:	bc80      	pop	{r7}
 80104a8:	4770      	bx	lr

080104aa <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 80104aa:	b480      	push	{r7}
 80104ac:	b083      	sub	sp, #12
 80104ae:	af00      	add	r7, sp, #0
 80104b0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	2204      	movs	r2, #4
 80104c2:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 80104c6:	2300      	movs	r3, #0
}
 80104c8:	4618      	mov	r0, r3
 80104ca:	370c      	adds	r7, #12
 80104cc:	46bd      	mov	sp, r7
 80104ce:	bc80      	pop	{r7}
 80104d0:	4770      	bx	lr

080104d2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 80104d2:	b480      	push	{r7}
 80104d4:	b083      	sub	sp, #12
 80104d6:	af00      	add	r7, sp, #0
 80104d8:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 80104e6:	2300      	movs	r3, #0
}
 80104e8:	4618      	mov	r0, r3
 80104ea:	370c      	adds	r7, #12
 80104ec:	46bd      	mov	sp, r7
 80104ee:	bc80      	pop	{r7}
 80104f0:	4770      	bx	lr

080104f2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80104f2:	b580      	push	{r7, lr}
 80104f4:	b082      	sub	sp, #8
 80104f6:	af00      	add	r7, sp, #0
 80104f8:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010500:	2b03      	cmp	r3, #3
 8010502:	d10b      	bne.n	801051c <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 801050a:	69db      	ldr	r3, [r3, #28]
 801050c:	2b00      	cmp	r3, #0
 801050e:	d005      	beq.n	801051c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010516:	69db      	ldr	r3, [r3, #28]
 8010518:	6878      	ldr	r0, [r7, #4]
 801051a:	4798      	blx	r3
    }
  }
  return USBD_OK;
 801051c:	2300      	movs	r3, #0
}
 801051e:	4618      	mov	r0, r3
 8010520:	3708      	adds	r7, #8
 8010522:	46bd      	mov	sp, r7
 8010524:	bd80      	pop	{r7, pc}
	...

08010528 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8010528:	b580      	push	{r7, lr}
 801052a:	b084      	sub	sp, #16
 801052c:	af00      	add	r7, sp, #0
 801052e:	6078      	str	r0, [r7, #4]
 8010530:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010532:	2300      	movs	r3, #0
 8010534:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010536:	683b      	ldr	r3, [r7, #0]
 8010538:	781b      	ldrb	r3, [r3, #0]
 801053a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801053e:	2b20      	cmp	r3, #32
 8010540:	d004      	beq.n	801054c <USBD_StdDevReq+0x24>
 8010542:	2b40      	cmp	r3, #64	; 0x40
 8010544:	d002      	beq.n	801054c <USBD_StdDevReq+0x24>
 8010546:	2b00      	cmp	r3, #0
 8010548:	d008      	beq.n	801055c <USBD_StdDevReq+0x34>
 801054a:	e04c      	b.n	80105e6 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010552:	689b      	ldr	r3, [r3, #8]
 8010554:	6839      	ldr	r1, [r7, #0]
 8010556:	6878      	ldr	r0, [r7, #4]
 8010558:	4798      	blx	r3
    break;
 801055a:	e049      	b.n	80105f0 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 801055c:	683b      	ldr	r3, [r7, #0]
 801055e:	785b      	ldrb	r3, [r3, #1]
 8010560:	2b09      	cmp	r3, #9
 8010562:	d83a      	bhi.n	80105da <USBD_StdDevReq+0xb2>
 8010564:	a201      	add	r2, pc, #4	; (adr r2, 801056c <USBD_StdDevReq+0x44>)
 8010566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801056a:	bf00      	nop
 801056c:	080105bd 	.word	0x080105bd
 8010570:	080105d1 	.word	0x080105d1
 8010574:	080105db 	.word	0x080105db
 8010578:	080105c7 	.word	0x080105c7
 801057c:	080105db 	.word	0x080105db
 8010580:	0801059f 	.word	0x0801059f
 8010584:	08010595 	.word	0x08010595
 8010588:	080105db 	.word	0x080105db
 801058c:	080105b3 	.word	0x080105b3
 8010590:	080105a9 	.word	0x080105a9
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8010594:	6839      	ldr	r1, [r7, #0]
 8010596:	6878      	ldr	r0, [r7, #4]
 8010598:	f000 f9d2 	bl	8010940 <USBD_GetDescriptor>
      break;
 801059c:	e022      	b.n	80105e4 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 801059e:	6839      	ldr	r1, [r7, #0]
 80105a0:	6878      	ldr	r0, [r7, #4]
 80105a2:	f000 fac7 	bl	8010b34 <USBD_SetAddress>
      break;
 80105a6:	e01d      	b.n	80105e4 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 80105a8:	6839      	ldr	r1, [r7, #0]
 80105aa:	6878      	ldr	r0, [r7, #4]
 80105ac:	f000 fb04 	bl	8010bb8 <USBD_SetConfig>
      break;
 80105b0:	e018      	b.n	80105e4 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 80105b2:	6839      	ldr	r1, [r7, #0]
 80105b4:	6878      	ldr	r0, [r7, #4]
 80105b6:	f000 fb8d 	bl	8010cd4 <USBD_GetConfig>
      break;
 80105ba:	e013      	b.n	80105e4 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 80105bc:	6839      	ldr	r1, [r7, #0]
 80105be:	6878      	ldr	r0, [r7, #4]
 80105c0:	f000 fbbc 	bl	8010d3c <USBD_GetStatus>
      break;
 80105c4:	e00e      	b.n	80105e4 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 80105c6:	6839      	ldr	r1, [r7, #0]
 80105c8:	6878      	ldr	r0, [r7, #4]
 80105ca:	f000 fbea 	bl	8010da2 <USBD_SetFeature>
      break;
 80105ce:	e009      	b.n	80105e4 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 80105d0:	6839      	ldr	r1, [r7, #0]
 80105d2:	6878      	ldr	r0, [r7, #4]
 80105d4:	f000 fbf9 	bl	8010dca <USBD_ClrFeature>
      break;
 80105d8:	e004      	b.n	80105e4 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 80105da:	6839      	ldr	r1, [r7, #0]
 80105dc:	6878      	ldr	r0, [r7, #4]
 80105de:	f000 fc51 	bl	8010e84 <USBD_CtlError>
      break;
 80105e2:	bf00      	nop
    }
    break;
 80105e4:	e004      	b.n	80105f0 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 80105e6:	6839      	ldr	r1, [r7, #0]
 80105e8:	6878      	ldr	r0, [r7, #4]
 80105ea:	f000 fc4b 	bl	8010e84 <USBD_CtlError>
    break;
 80105ee:	bf00      	nop
  }

  return ret;
 80105f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80105f2:	4618      	mov	r0, r3
 80105f4:	3710      	adds	r7, #16
 80105f6:	46bd      	mov	sp, r7
 80105f8:	bd80      	pop	{r7, pc}
 80105fa:	bf00      	nop

080105fc <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80105fc:	b580      	push	{r7, lr}
 80105fe:	b084      	sub	sp, #16
 8010600:	af00      	add	r7, sp, #0
 8010602:	6078      	str	r0, [r7, #4]
 8010604:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010606:	2300      	movs	r3, #0
 8010608:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801060a:	683b      	ldr	r3, [r7, #0]
 801060c:	781b      	ldrb	r3, [r3, #0]
 801060e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010612:	2b20      	cmp	r3, #32
 8010614:	d003      	beq.n	801061e <USBD_StdItfReq+0x22>
 8010616:	2b40      	cmp	r3, #64	; 0x40
 8010618:	d001      	beq.n	801061e <USBD_StdItfReq+0x22>
 801061a:	2b00      	cmp	r3, #0
 801061c:	d12a      	bne.n	8010674 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010624:	3b01      	subs	r3, #1
 8010626:	2b02      	cmp	r3, #2
 8010628:	d81d      	bhi.n	8010666 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801062a:	683b      	ldr	r3, [r7, #0]
 801062c:	889b      	ldrh	r3, [r3, #4]
 801062e:	b2db      	uxtb	r3, r3
 8010630:	2b01      	cmp	r3, #1
 8010632:	d813      	bhi.n	801065c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 801063a:	689b      	ldr	r3, [r3, #8]
 801063c:	6839      	ldr	r1, [r7, #0]
 801063e:	6878      	ldr	r0, [r7, #4]
 8010640:	4798      	blx	r3
 8010642:	4603      	mov	r3, r0
 8010644:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8010646:	683b      	ldr	r3, [r7, #0]
 8010648:	88db      	ldrh	r3, [r3, #6]
 801064a:	2b00      	cmp	r3, #0
 801064c:	d110      	bne.n	8010670 <USBD_StdItfReq+0x74>
 801064e:	7bfb      	ldrb	r3, [r7, #15]
 8010650:	2b00      	cmp	r3, #0
 8010652:	d10d      	bne.n	8010670 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8010654:	6878      	ldr	r0, [r7, #4]
 8010656:	f000 fcbf 	bl	8010fd8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 801065a:	e009      	b.n	8010670 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 801065c:	6839      	ldr	r1, [r7, #0]
 801065e:	6878      	ldr	r0, [r7, #4]
 8010660:	f000 fc10 	bl	8010e84 <USBD_CtlError>
      break;
 8010664:	e004      	b.n	8010670 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8010666:	6839      	ldr	r1, [r7, #0]
 8010668:	6878      	ldr	r0, [r7, #4]
 801066a:	f000 fc0b 	bl	8010e84 <USBD_CtlError>
      break;
 801066e:	e000      	b.n	8010672 <USBD_StdItfReq+0x76>
      break;
 8010670:	bf00      	nop
    }
    break;
 8010672:	e004      	b.n	801067e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8010674:	6839      	ldr	r1, [r7, #0]
 8010676:	6878      	ldr	r0, [r7, #4]
 8010678:	f000 fc04 	bl	8010e84 <USBD_CtlError>
    break;
 801067c:	bf00      	nop
  }

  return USBD_OK;
 801067e:	2300      	movs	r3, #0
}
 8010680:	4618      	mov	r0, r3
 8010682:	3710      	adds	r7, #16
 8010684:	46bd      	mov	sp, r7
 8010686:	bd80      	pop	{r7, pc}

08010688 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8010688:	b580      	push	{r7, lr}
 801068a:	b084      	sub	sp, #16
 801068c:	af00      	add	r7, sp, #0
 801068e:	6078      	str	r0, [r7, #4]
 8010690:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8010692:	2300      	movs	r3, #0
 8010694:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8010696:	683b      	ldr	r3, [r7, #0]
 8010698:	889b      	ldrh	r3, [r3, #4]
 801069a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801069c:	683b      	ldr	r3, [r7, #0]
 801069e:	781b      	ldrb	r3, [r3, #0]
 80106a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80106a4:	2b20      	cmp	r3, #32
 80106a6:	d004      	beq.n	80106b2 <USBD_StdEPReq+0x2a>
 80106a8:	2b40      	cmp	r3, #64	; 0x40
 80106aa:	d002      	beq.n	80106b2 <USBD_StdEPReq+0x2a>
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d008      	beq.n	80106c2 <USBD_StdEPReq+0x3a>
 80106b0:	e13b      	b.n	801092a <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80106b8:	689b      	ldr	r3, [r3, #8]
 80106ba:	6839      	ldr	r1, [r7, #0]
 80106bc:	6878      	ldr	r0, [r7, #4]
 80106be:	4798      	blx	r3
    break;
 80106c0:	e138      	b.n	8010934 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 80106c2:	683b      	ldr	r3, [r7, #0]
 80106c4:	781b      	ldrb	r3, [r3, #0]
 80106c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80106ca:	2b20      	cmp	r3, #32
 80106cc:	d10a      	bne.n	80106e4 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80106d4:	689b      	ldr	r3, [r3, #8]
 80106d6:	6839      	ldr	r1, [r7, #0]
 80106d8:	6878      	ldr	r0, [r7, #4]
 80106da:	4798      	blx	r3
 80106dc:	4603      	mov	r3, r0
 80106de:	73fb      	strb	r3, [r7, #15]

      return ret;
 80106e0:	7bfb      	ldrb	r3, [r7, #15]
 80106e2:	e128      	b.n	8010936 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 80106e4:	683b      	ldr	r3, [r7, #0]
 80106e6:	785b      	ldrb	r3, [r3, #1]
 80106e8:	2b01      	cmp	r3, #1
 80106ea:	d03e      	beq.n	801076a <USBD_StdEPReq+0xe2>
 80106ec:	2b03      	cmp	r3, #3
 80106ee:	d002      	beq.n	80106f6 <USBD_StdEPReq+0x6e>
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d070      	beq.n	80107d6 <USBD_StdEPReq+0x14e>
 80106f4:	e113      	b.n	801091e <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80106fc:	2b02      	cmp	r3, #2
 80106fe:	d002      	beq.n	8010706 <USBD_StdEPReq+0x7e>
 8010700:	2b03      	cmp	r3, #3
 8010702:	d015      	beq.n	8010730 <USBD_StdEPReq+0xa8>
 8010704:	e02b      	b.n	801075e <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010706:	7bbb      	ldrb	r3, [r7, #14]
 8010708:	2b00      	cmp	r3, #0
 801070a:	d00c      	beq.n	8010726 <USBD_StdEPReq+0x9e>
 801070c:	7bbb      	ldrb	r3, [r7, #14]
 801070e:	2b80      	cmp	r3, #128	; 0x80
 8010710:	d009      	beq.n	8010726 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8010712:	7bbb      	ldrb	r3, [r7, #14]
 8010714:	4619      	mov	r1, r3
 8010716:	6878      	ldr	r0, [r7, #4]
 8010718:	f004 fa77 	bl	8014c0a <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 801071c:	2180      	movs	r1, #128	; 0x80
 801071e:	6878      	ldr	r0, [r7, #4]
 8010720:	f004 fa73 	bl	8014c0a <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8010724:	e020      	b.n	8010768 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 8010726:	6839      	ldr	r1, [r7, #0]
 8010728:	6878      	ldr	r0, [r7, #4]
 801072a:	f000 fbab 	bl	8010e84 <USBD_CtlError>
        break;
 801072e:	e01b      	b.n	8010768 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8010730:	683b      	ldr	r3, [r7, #0]
 8010732:	885b      	ldrh	r3, [r3, #2]
 8010734:	2b00      	cmp	r3, #0
 8010736:	d10e      	bne.n	8010756 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010738:	7bbb      	ldrb	r3, [r7, #14]
 801073a:	2b00      	cmp	r3, #0
 801073c:	d00b      	beq.n	8010756 <USBD_StdEPReq+0xce>
 801073e:	7bbb      	ldrb	r3, [r7, #14]
 8010740:	2b80      	cmp	r3, #128	; 0x80
 8010742:	d008      	beq.n	8010756 <USBD_StdEPReq+0xce>
 8010744:	683b      	ldr	r3, [r7, #0]
 8010746:	88db      	ldrh	r3, [r3, #6]
 8010748:	2b00      	cmp	r3, #0
 801074a:	d104      	bne.n	8010756 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 801074c:	7bbb      	ldrb	r3, [r7, #14]
 801074e:	4619      	mov	r1, r3
 8010750:	6878      	ldr	r0, [r7, #4]
 8010752:	f004 fa5a 	bl	8014c0a <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8010756:	6878      	ldr	r0, [r7, #4]
 8010758:	f000 fc3e 	bl	8010fd8 <USBD_CtlSendStatus>

        break;
 801075c:	e004      	b.n	8010768 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 801075e:	6839      	ldr	r1, [r7, #0]
 8010760:	6878      	ldr	r0, [r7, #4]
 8010762:	f000 fb8f 	bl	8010e84 <USBD_CtlError>
        break;
 8010766:	bf00      	nop
      }
      break;
 8010768:	e0de      	b.n	8010928 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010770:	2b02      	cmp	r3, #2
 8010772:	d002      	beq.n	801077a <USBD_StdEPReq+0xf2>
 8010774:	2b03      	cmp	r3, #3
 8010776:	d015      	beq.n	80107a4 <USBD_StdEPReq+0x11c>
 8010778:	e026      	b.n	80107c8 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801077a:	7bbb      	ldrb	r3, [r7, #14]
 801077c:	2b00      	cmp	r3, #0
 801077e:	d00c      	beq.n	801079a <USBD_StdEPReq+0x112>
 8010780:	7bbb      	ldrb	r3, [r7, #14]
 8010782:	2b80      	cmp	r3, #128	; 0x80
 8010784:	d009      	beq.n	801079a <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8010786:	7bbb      	ldrb	r3, [r7, #14]
 8010788:	4619      	mov	r1, r3
 801078a:	6878      	ldr	r0, [r7, #4]
 801078c:	f004 fa3d 	bl	8014c0a <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8010790:	2180      	movs	r1, #128	; 0x80
 8010792:	6878      	ldr	r0, [r7, #4]
 8010794:	f004 fa39 	bl	8014c0a <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8010798:	e01c      	b.n	80107d4 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 801079a:	6839      	ldr	r1, [r7, #0]
 801079c:	6878      	ldr	r0, [r7, #4]
 801079e:	f000 fb71 	bl	8010e84 <USBD_CtlError>
        break;
 80107a2:	e017      	b.n	80107d4 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80107a4:	683b      	ldr	r3, [r7, #0]
 80107a6:	885b      	ldrh	r3, [r3, #2]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d112      	bne.n	80107d2 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80107ac:	7bbb      	ldrb	r3, [r7, #14]
 80107ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d004      	beq.n	80107c0 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 80107b6:	7bbb      	ldrb	r3, [r7, #14]
 80107b8:	4619      	mov	r1, r3
 80107ba:	6878      	ldr	r0, [r7, #4]
 80107bc:	f004 fa44 	bl	8014c48 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 80107c0:	6878      	ldr	r0, [r7, #4]
 80107c2:	f000 fc09 	bl	8010fd8 <USBD_CtlSendStatus>
        }
        break;
 80107c6:	e004      	b.n	80107d2 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 80107c8:	6839      	ldr	r1, [r7, #0]
 80107ca:	6878      	ldr	r0, [r7, #4]
 80107cc:	f000 fb5a 	bl	8010e84 <USBD_CtlError>
        break;
 80107d0:	e000      	b.n	80107d4 <USBD_StdEPReq+0x14c>
        break;
 80107d2:	bf00      	nop
      }
      break;
 80107d4:	e0a8      	b.n	8010928 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80107dc:	2b02      	cmp	r3, #2
 80107de:	d002      	beq.n	80107e6 <USBD_StdEPReq+0x15e>
 80107e0:	2b03      	cmp	r3, #3
 80107e2:	d031      	beq.n	8010848 <USBD_StdEPReq+0x1c0>
 80107e4:	e095      	b.n	8010912 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80107e6:	7bbb      	ldrb	r3, [r7, #14]
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d007      	beq.n	80107fc <USBD_StdEPReq+0x174>
 80107ec:	7bbb      	ldrb	r3, [r7, #14]
 80107ee:	2b80      	cmp	r3, #128	; 0x80
 80107f0:	d004      	beq.n	80107fc <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 80107f2:	6839      	ldr	r1, [r7, #0]
 80107f4:	6878      	ldr	r0, [r7, #4]
 80107f6:	f000 fb45 	bl	8010e84 <USBD_CtlError>
          break;
 80107fa:	e08f      	b.n	801091c <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80107fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010800:	2b00      	cmp	r3, #0
 8010802:	da0b      	bge.n	801081c <USBD_StdEPReq+0x194>
 8010804:	7bbb      	ldrb	r3, [r7, #14]
 8010806:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801080a:	4613      	mov	r3, r2
 801080c:	009b      	lsls	r3, r3, #2
 801080e:	4413      	add	r3, r2
 8010810:	009b      	lsls	r3, r3, #2
 8010812:	3310      	adds	r3, #16
 8010814:	687a      	ldr	r2, [r7, #4]
 8010816:	4413      	add	r3, r2
 8010818:	3304      	adds	r3, #4
 801081a:	e00a      	b.n	8010832 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 801081c:	7bbb      	ldrb	r3, [r7, #14]
 801081e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8010822:	4613      	mov	r3, r2
 8010824:	009b      	lsls	r3, r3, #2
 8010826:	4413      	add	r3, r2
 8010828:	009b      	lsls	r3, r3, #2
 801082a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 801082e:	687a      	ldr	r2, [r7, #4]
 8010830:	4413      	add	r3, r2
 8010832:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8010834:	68bb      	ldr	r3, [r7, #8]
 8010836:	2200      	movs	r2, #0
 8010838:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 801083a:	68bb      	ldr	r3, [r7, #8]
 801083c:	2202      	movs	r2, #2
 801083e:	4619      	mov	r1, r3
 8010840:	6878      	ldr	r0, [r7, #4]
 8010842:	f000 fb89 	bl	8010f58 <USBD_CtlSendData>
          break;
 8010846:	e069      	b.n	801091c <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8010848:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801084c:	2b00      	cmp	r3, #0
 801084e:	da11      	bge.n	8010874 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010850:	7bbb      	ldrb	r3, [r7, #14]
 8010852:	f003 020f 	and.w	r2, r3, #15
 8010856:	6879      	ldr	r1, [r7, #4]
 8010858:	4613      	mov	r3, r2
 801085a:	009b      	lsls	r3, r3, #2
 801085c:	4413      	add	r3, r2
 801085e:	009b      	lsls	r3, r3, #2
 8010860:	440b      	add	r3, r1
 8010862:	3318      	adds	r3, #24
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	2b00      	cmp	r3, #0
 8010868:	d117      	bne.n	801089a <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 801086a:	6839      	ldr	r1, [r7, #0]
 801086c:	6878      	ldr	r0, [r7, #4]
 801086e:	f000 fb09 	bl	8010e84 <USBD_CtlError>
            break;
 8010872:	e053      	b.n	801091c <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8010874:	7bbb      	ldrb	r3, [r7, #14]
 8010876:	f003 020f 	and.w	r2, r3, #15
 801087a:	6879      	ldr	r1, [r7, #4]
 801087c:	4613      	mov	r3, r2
 801087e:	009b      	lsls	r3, r3, #2
 8010880:	4413      	add	r3, r2
 8010882:	009b      	lsls	r3, r3, #2
 8010884:	440b      	add	r3, r1
 8010886:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	2b00      	cmp	r3, #0
 801088e:	d104      	bne.n	801089a <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8010890:	6839      	ldr	r1, [r7, #0]
 8010892:	6878      	ldr	r0, [r7, #4]
 8010894:	f000 faf6 	bl	8010e84 <USBD_CtlError>
            break;
 8010898:	e040      	b.n	801091c <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 801089a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801089e:	2b00      	cmp	r3, #0
 80108a0:	da0b      	bge.n	80108ba <USBD_StdEPReq+0x232>
 80108a2:	7bbb      	ldrb	r3, [r7, #14]
 80108a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80108a8:	4613      	mov	r3, r2
 80108aa:	009b      	lsls	r3, r3, #2
 80108ac:	4413      	add	r3, r2
 80108ae:	009b      	lsls	r3, r3, #2
 80108b0:	3310      	adds	r3, #16
 80108b2:	687a      	ldr	r2, [r7, #4]
 80108b4:	4413      	add	r3, r2
 80108b6:	3304      	adds	r3, #4
 80108b8:	e00a      	b.n	80108d0 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 80108ba:	7bbb      	ldrb	r3, [r7, #14]
 80108bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80108c0:	4613      	mov	r3, r2
 80108c2:	009b      	lsls	r3, r3, #2
 80108c4:	4413      	add	r3, r2
 80108c6:	009b      	lsls	r3, r3, #2
 80108c8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80108cc:	687a      	ldr	r2, [r7, #4]
 80108ce:	4413      	add	r3, r2
 80108d0:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80108d2:	7bbb      	ldrb	r3, [r7, #14]
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d002      	beq.n	80108de <USBD_StdEPReq+0x256>
 80108d8:	7bbb      	ldrb	r3, [r7, #14]
 80108da:	2b80      	cmp	r3, #128	; 0x80
 80108dc:	d103      	bne.n	80108e6 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 80108de:	68bb      	ldr	r3, [r7, #8]
 80108e0:	2200      	movs	r2, #0
 80108e2:	601a      	str	r2, [r3, #0]
 80108e4:	e00e      	b.n	8010904 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 80108e6:	7bbb      	ldrb	r3, [r7, #14]
 80108e8:	4619      	mov	r1, r3
 80108ea:	6878      	ldr	r0, [r7, #4]
 80108ec:	f004 f9cb 	bl	8014c86 <USBD_LL_IsStallEP>
 80108f0:	4603      	mov	r3, r0
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d003      	beq.n	80108fe <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 80108f6:	68bb      	ldr	r3, [r7, #8]
 80108f8:	2201      	movs	r2, #1
 80108fa:	601a      	str	r2, [r3, #0]
 80108fc:	e002      	b.n	8010904 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 80108fe:	68bb      	ldr	r3, [r7, #8]
 8010900:	2200      	movs	r2, #0
 8010902:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8010904:	68bb      	ldr	r3, [r7, #8]
 8010906:	2202      	movs	r2, #2
 8010908:	4619      	mov	r1, r3
 801090a:	6878      	ldr	r0, [r7, #4]
 801090c:	f000 fb24 	bl	8010f58 <USBD_CtlSendData>
          break;
 8010910:	e004      	b.n	801091c <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 8010912:	6839      	ldr	r1, [r7, #0]
 8010914:	6878      	ldr	r0, [r7, #4]
 8010916:	f000 fab5 	bl	8010e84 <USBD_CtlError>
        break;
 801091a:	bf00      	nop
      }
      break;
 801091c:	e004      	b.n	8010928 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 801091e:	6839      	ldr	r1, [r7, #0]
 8010920:	6878      	ldr	r0, [r7, #4]
 8010922:	f000 faaf 	bl	8010e84 <USBD_CtlError>
      break;
 8010926:	bf00      	nop
    }
    break;
 8010928:	e004      	b.n	8010934 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 801092a:	6839      	ldr	r1, [r7, #0]
 801092c:	6878      	ldr	r0, [r7, #4]
 801092e:	f000 faa9 	bl	8010e84 <USBD_CtlError>
    break;
 8010932:	bf00      	nop
  }

  return ret;
 8010934:	7bfb      	ldrb	r3, [r7, #15]
}
 8010936:	4618      	mov	r0, r3
 8010938:	3710      	adds	r7, #16
 801093a:	46bd      	mov	sp, r7
 801093c:	bd80      	pop	{r7, pc}
	...

08010940 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8010940:	b580      	push	{r7, lr}
 8010942:	b084      	sub	sp, #16
 8010944:	af00      	add	r7, sp, #0
 8010946:	6078      	str	r0, [r7, #4]
 8010948:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 801094a:	683b      	ldr	r3, [r7, #0]
 801094c:	885b      	ldrh	r3, [r3, #2]
 801094e:	0a1b      	lsrs	r3, r3, #8
 8010950:	b29b      	uxth	r3, r3
 8010952:	3b01      	subs	r3, #1
 8010954:	2b06      	cmp	r3, #6
 8010956:	f200 80c9 	bhi.w	8010aec <USBD_GetDescriptor+0x1ac>
 801095a:	a201      	add	r2, pc, #4	; (adr r2, 8010960 <USBD_GetDescriptor+0x20>)
 801095c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010960:	0801097d 	.word	0x0801097d
 8010964:	08010995 	.word	0x08010995
 8010968:	080109d5 	.word	0x080109d5
 801096c:	08010aed 	.word	0x08010aed
 8010970:	08010aed 	.word	0x08010aed
 8010974:	08010a99 	.word	0x08010a99
 8010978:	08010abf 	.word	0x08010abf
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	687a      	ldr	r2, [r7, #4]
 8010986:	7c12      	ldrb	r2, [r2, #16]
 8010988:	f107 010a 	add.w	r1, r7, #10
 801098c:	4610      	mov	r0, r2
 801098e:	4798      	blx	r3
 8010990:	60f8      	str	r0, [r7, #12]
    break;
 8010992:	e0b0      	b.n	8010af6 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	7c1b      	ldrb	r3, [r3, #16]
 8010998:	2b00      	cmp	r3, #0
 801099a:	d10d      	bne.n	80109b8 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80109a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109a4:	f107 020a 	add.w	r2, r7, #10
 80109a8:	4610      	mov	r0, r2
 80109aa:	4798      	blx	r3
 80109ac:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	3301      	adds	r3, #1
 80109b2:	2202      	movs	r2, #2
 80109b4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80109b6:	e09e      	b.n	8010af6 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80109be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109c0:	f107 020a 	add.w	r2, r7, #10
 80109c4:	4610      	mov	r0, r2
 80109c6:	4798      	blx	r3
 80109c8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	3301      	adds	r3, #1
 80109ce:	2202      	movs	r2, #2
 80109d0:	701a      	strb	r2, [r3, #0]
    break;
 80109d2:	e090      	b.n	8010af6 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80109d4:	683b      	ldr	r3, [r7, #0]
 80109d6:	885b      	ldrh	r3, [r3, #2]
 80109d8:	b2db      	uxtb	r3, r3
 80109da:	2b05      	cmp	r3, #5
 80109dc:	d856      	bhi.n	8010a8c <USBD_GetDescriptor+0x14c>
 80109de:	a201      	add	r2, pc, #4	; (adr r2, 80109e4 <USBD_GetDescriptor+0xa4>)
 80109e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109e4:	080109fd 	.word	0x080109fd
 80109e8:	08010a15 	.word	0x08010a15
 80109ec:	08010a2d 	.word	0x08010a2d
 80109f0:	08010a45 	.word	0x08010a45
 80109f4:	08010a5d 	.word	0x08010a5d
 80109f8:	08010a75 	.word	0x08010a75
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8010a02:	685b      	ldr	r3, [r3, #4]
 8010a04:	687a      	ldr	r2, [r7, #4]
 8010a06:	7c12      	ldrb	r2, [r2, #16]
 8010a08:	f107 010a 	add.w	r1, r7, #10
 8010a0c:	4610      	mov	r0, r2
 8010a0e:	4798      	blx	r3
 8010a10:	60f8      	str	r0, [r7, #12]
      break;
 8010a12:	e040      	b.n	8010a96 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8010a1a:	689b      	ldr	r3, [r3, #8]
 8010a1c:	687a      	ldr	r2, [r7, #4]
 8010a1e:	7c12      	ldrb	r2, [r2, #16]
 8010a20:	f107 010a 	add.w	r1, r7, #10
 8010a24:	4610      	mov	r0, r2
 8010a26:	4798      	blx	r3
 8010a28:	60f8      	str	r0, [r7, #12]
      break;
 8010a2a:	e034      	b.n	8010a96 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8010a32:	68db      	ldr	r3, [r3, #12]
 8010a34:	687a      	ldr	r2, [r7, #4]
 8010a36:	7c12      	ldrb	r2, [r2, #16]
 8010a38:	f107 010a 	add.w	r1, r7, #10
 8010a3c:	4610      	mov	r0, r2
 8010a3e:	4798      	blx	r3
 8010a40:	60f8      	str	r0, [r7, #12]
      break;
 8010a42:	e028      	b.n	8010a96 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8010a4a:	691b      	ldr	r3, [r3, #16]
 8010a4c:	687a      	ldr	r2, [r7, #4]
 8010a4e:	7c12      	ldrb	r2, [r2, #16]
 8010a50:	f107 010a 	add.w	r1, r7, #10
 8010a54:	4610      	mov	r0, r2
 8010a56:	4798      	blx	r3
 8010a58:	60f8      	str	r0, [r7, #12]
      break;
 8010a5a:	e01c      	b.n	8010a96 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8010a62:	695b      	ldr	r3, [r3, #20]
 8010a64:	687a      	ldr	r2, [r7, #4]
 8010a66:	7c12      	ldrb	r2, [r2, #16]
 8010a68:	f107 010a 	add.w	r1, r7, #10
 8010a6c:	4610      	mov	r0, r2
 8010a6e:	4798      	blx	r3
 8010a70:	60f8      	str	r0, [r7, #12]
      break;
 8010a72:	e010      	b.n	8010a96 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8010a7a:	699b      	ldr	r3, [r3, #24]
 8010a7c:	687a      	ldr	r2, [r7, #4]
 8010a7e:	7c12      	ldrb	r2, [r2, #16]
 8010a80:	f107 010a 	add.w	r1, r7, #10
 8010a84:	4610      	mov	r0, r2
 8010a86:	4798      	blx	r3
 8010a88:	60f8      	str	r0, [r7, #12]
      break;
 8010a8a:	e004      	b.n	8010a96 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8010a8c:	6839      	ldr	r1, [r7, #0]
 8010a8e:	6878      	ldr	r0, [r7, #4]
 8010a90:	f000 f9f8 	bl	8010e84 <USBD_CtlError>
      return;
 8010a94:	e04b      	b.n	8010b2e <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8010a96:	e02e      	b.n	8010af6 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	7c1b      	ldrb	r3, [r3, #16]
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d109      	bne.n	8010ab4 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010aa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010aa8:	f107 020a 	add.w	r2, r7, #10
 8010aac:	4610      	mov	r0, r2
 8010aae:	4798      	blx	r3
 8010ab0:	60f8      	str	r0, [r7, #12]
      break;
 8010ab2:	e020      	b.n	8010af6 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8010ab4:	6839      	ldr	r1, [r7, #0]
 8010ab6:	6878      	ldr	r0, [r7, #4]
 8010ab8:	f000 f9e4 	bl	8010e84 <USBD_CtlError>
      return;
 8010abc:	e037      	b.n	8010b2e <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	7c1b      	ldrb	r3, [r3, #16]
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d10d      	bne.n	8010ae2 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ace:	f107 020a 	add.w	r2, r7, #10
 8010ad2:	4610      	mov	r0, r2
 8010ad4:	4798      	blx	r3
 8010ad6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	3301      	adds	r3, #1
 8010adc:	2207      	movs	r2, #7
 8010ade:	701a      	strb	r2, [r3, #0]
      break;
 8010ae0:	e009      	b.n	8010af6 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8010ae2:	6839      	ldr	r1, [r7, #0]
 8010ae4:	6878      	ldr	r0, [r7, #4]
 8010ae6:	f000 f9cd 	bl	8010e84 <USBD_CtlError>
      return;
 8010aea:	e020      	b.n	8010b2e <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8010aec:	6839      	ldr	r1, [r7, #0]
 8010aee:	6878      	ldr	r0, [r7, #4]
 8010af0:	f000 f9c8 	bl	8010e84 <USBD_CtlError>
    return;
 8010af4:	e01b      	b.n	8010b2e <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8010af6:	897b      	ldrh	r3, [r7, #10]
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d011      	beq.n	8010b20 <USBD_GetDescriptor+0x1e0>
 8010afc:	683b      	ldr	r3, [r7, #0]
 8010afe:	88db      	ldrh	r3, [r3, #6]
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d00d      	beq.n	8010b20 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8010b04:	683b      	ldr	r3, [r7, #0]
 8010b06:	88da      	ldrh	r2, [r3, #6]
 8010b08:	897b      	ldrh	r3, [r7, #10]
 8010b0a:	4293      	cmp	r3, r2
 8010b0c:	bf28      	it	cs
 8010b0e:	4613      	movcs	r3, r2
 8010b10:	b29b      	uxth	r3, r3
 8010b12:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8010b14:	897b      	ldrh	r3, [r7, #10]
 8010b16:	461a      	mov	r2, r3
 8010b18:	68f9      	ldr	r1, [r7, #12]
 8010b1a:	6878      	ldr	r0, [r7, #4]
 8010b1c:	f000 fa1c 	bl	8010f58 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8010b20:	683b      	ldr	r3, [r7, #0]
 8010b22:	88db      	ldrh	r3, [r3, #6]
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d102      	bne.n	8010b2e <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8010b28:	6878      	ldr	r0, [r7, #4]
 8010b2a:	f000 fa55 	bl	8010fd8 <USBD_CtlSendStatus>
  }
}
 8010b2e:	3710      	adds	r7, #16
 8010b30:	46bd      	mov	sp, r7
 8010b32:	bd80      	pop	{r7, pc}

08010b34 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8010b34:	b580      	push	{r7, lr}
 8010b36:	b084      	sub	sp, #16
 8010b38:	af00      	add	r7, sp, #0
 8010b3a:	6078      	str	r0, [r7, #4]
 8010b3c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8010b3e:	683b      	ldr	r3, [r7, #0]
 8010b40:	889b      	ldrh	r3, [r3, #4]
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d130      	bne.n	8010ba8 <USBD_SetAddress+0x74>
 8010b46:	683b      	ldr	r3, [r7, #0]
 8010b48:	88db      	ldrh	r3, [r3, #6]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d12c      	bne.n	8010ba8 <USBD_SetAddress+0x74>
 8010b4e:	683b      	ldr	r3, [r7, #0]
 8010b50:	885b      	ldrh	r3, [r3, #2]
 8010b52:	2b7f      	cmp	r3, #127	; 0x7f
 8010b54:	d828      	bhi.n	8010ba8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8010b56:	683b      	ldr	r3, [r7, #0]
 8010b58:	885b      	ldrh	r3, [r3, #2]
 8010b5a:	b2db      	uxtb	r3, r3
 8010b5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010b60:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010b68:	2b03      	cmp	r3, #3
 8010b6a:	d104      	bne.n	8010b76 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8010b6c:	6839      	ldr	r1, [r7, #0]
 8010b6e:	6878      	ldr	r0, [r7, #4]
 8010b70:	f000 f988 	bl	8010e84 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010b74:	e01c      	b.n	8010bb0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	7bfa      	ldrb	r2, [r7, #15]
 8010b7a:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010b7e:	7bfb      	ldrb	r3, [r7, #15]
 8010b80:	4619      	mov	r1, r3
 8010b82:	6878      	ldr	r0, [r7, #4]
 8010b84:	f004 f8ab 	bl	8014cde <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8010b88:	6878      	ldr	r0, [r7, #4]
 8010b8a:	f000 fa25 	bl	8010fd8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010b8e:	7bfb      	ldrb	r3, [r7, #15]
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d004      	beq.n	8010b9e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	2202      	movs	r2, #2
 8010b98:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010b9c:	e008      	b.n	8010bb0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	2201      	movs	r2, #1
 8010ba2:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010ba6:	e003      	b.n	8010bb0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8010ba8:	6839      	ldr	r1, [r7, #0]
 8010baa:	6878      	ldr	r0, [r7, #4]
 8010bac:	f000 f96a 	bl	8010e84 <USBD_CtlError>
  }
}
 8010bb0:	bf00      	nop
 8010bb2:	3710      	adds	r7, #16
 8010bb4:	46bd      	mov	sp, r7
 8010bb6:	bd80      	pop	{r7, pc}

08010bb8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010bb8:	b580      	push	{r7, lr}
 8010bba:	b082      	sub	sp, #8
 8010bbc:	af00      	add	r7, sp, #0
 8010bbe:	6078      	str	r0, [r7, #4]
 8010bc0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8010bc2:	683b      	ldr	r3, [r7, #0]
 8010bc4:	885b      	ldrh	r3, [r3, #2]
 8010bc6:	b2da      	uxtb	r2, r3
 8010bc8:	4b41      	ldr	r3, [pc, #260]	; (8010cd0 <USBD_SetConfig+0x118>)
 8010bca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010bcc:	4b40      	ldr	r3, [pc, #256]	; (8010cd0 <USBD_SetConfig+0x118>)
 8010bce:	781b      	ldrb	r3, [r3, #0]
 8010bd0:	2b01      	cmp	r3, #1
 8010bd2:	d904      	bls.n	8010bde <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8010bd4:	6839      	ldr	r1, [r7, #0]
 8010bd6:	6878      	ldr	r0, [r7, #4]
 8010bd8:	f000 f954 	bl	8010e84 <USBD_CtlError>
 8010bdc:	e075      	b.n	8010cca <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010be4:	2b02      	cmp	r3, #2
 8010be6:	d002      	beq.n	8010bee <USBD_SetConfig+0x36>
 8010be8:	2b03      	cmp	r3, #3
 8010bea:	d023      	beq.n	8010c34 <USBD_SetConfig+0x7c>
 8010bec:	e062      	b.n	8010cb4 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8010bee:	4b38      	ldr	r3, [pc, #224]	; (8010cd0 <USBD_SetConfig+0x118>)
 8010bf0:	781b      	ldrb	r3, [r3, #0]
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d01a      	beq.n	8010c2c <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8010bf6:	4b36      	ldr	r3, [pc, #216]	; (8010cd0 <USBD_SetConfig+0x118>)
 8010bf8:	781b      	ldrb	r3, [r3, #0]
 8010bfa:	461a      	mov	r2, r3
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	2203      	movs	r2, #3
 8010c04:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8010c08:	4b31      	ldr	r3, [pc, #196]	; (8010cd0 <USBD_SetConfig+0x118>)
 8010c0a:	781b      	ldrb	r3, [r3, #0]
 8010c0c:	4619      	mov	r1, r3
 8010c0e:	6878      	ldr	r0, [r7, #4]
 8010c10:	f7ff fa68 	bl	80100e4 <USBD_SetClassConfig>
 8010c14:	4603      	mov	r3, r0
 8010c16:	2b02      	cmp	r3, #2
 8010c18:	d104      	bne.n	8010c24 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8010c1a:	6839      	ldr	r1, [r7, #0]
 8010c1c:	6878      	ldr	r0, [r7, #4]
 8010c1e:	f000 f931 	bl	8010e84 <USBD_CtlError>
          return;
 8010c22:	e052      	b.n	8010cca <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8010c24:	6878      	ldr	r0, [r7, #4]
 8010c26:	f000 f9d7 	bl	8010fd8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8010c2a:	e04e      	b.n	8010cca <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8010c2c:	6878      	ldr	r0, [r7, #4]
 8010c2e:	f000 f9d3 	bl	8010fd8 <USBD_CtlSendStatus>
      break;
 8010c32:	e04a      	b.n	8010cca <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8010c34:	4b26      	ldr	r3, [pc, #152]	; (8010cd0 <USBD_SetConfig+0x118>)
 8010c36:	781b      	ldrb	r3, [r3, #0]
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d112      	bne.n	8010c62 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	2202      	movs	r2, #2
 8010c40:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8010c44:	4b22      	ldr	r3, [pc, #136]	; (8010cd0 <USBD_SetConfig+0x118>)
 8010c46:	781b      	ldrb	r3, [r3, #0]
 8010c48:	461a      	mov	r2, r3
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8010c4e:	4b20      	ldr	r3, [pc, #128]	; (8010cd0 <USBD_SetConfig+0x118>)
 8010c50:	781b      	ldrb	r3, [r3, #0]
 8010c52:	4619      	mov	r1, r3
 8010c54:	6878      	ldr	r0, [r7, #4]
 8010c56:	f7ff fa64 	bl	8010122 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8010c5a:	6878      	ldr	r0, [r7, #4]
 8010c5c:	f000 f9bc 	bl	8010fd8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8010c60:	e033      	b.n	8010cca <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8010c62:	4b1b      	ldr	r3, [pc, #108]	; (8010cd0 <USBD_SetConfig+0x118>)
 8010c64:	781b      	ldrb	r3, [r3, #0]
 8010c66:	461a      	mov	r2, r3
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	685b      	ldr	r3, [r3, #4]
 8010c6c:	429a      	cmp	r2, r3
 8010c6e:	d01d      	beq.n	8010cac <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	685b      	ldr	r3, [r3, #4]
 8010c74:	b2db      	uxtb	r3, r3
 8010c76:	4619      	mov	r1, r3
 8010c78:	6878      	ldr	r0, [r7, #4]
 8010c7a:	f7ff fa52 	bl	8010122 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8010c7e:	4b14      	ldr	r3, [pc, #80]	; (8010cd0 <USBD_SetConfig+0x118>)
 8010c80:	781b      	ldrb	r3, [r3, #0]
 8010c82:	461a      	mov	r2, r3
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8010c88:	4b11      	ldr	r3, [pc, #68]	; (8010cd0 <USBD_SetConfig+0x118>)
 8010c8a:	781b      	ldrb	r3, [r3, #0]
 8010c8c:	4619      	mov	r1, r3
 8010c8e:	6878      	ldr	r0, [r7, #4]
 8010c90:	f7ff fa28 	bl	80100e4 <USBD_SetClassConfig>
 8010c94:	4603      	mov	r3, r0
 8010c96:	2b02      	cmp	r3, #2
 8010c98:	d104      	bne.n	8010ca4 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8010c9a:	6839      	ldr	r1, [r7, #0]
 8010c9c:	6878      	ldr	r0, [r7, #4]
 8010c9e:	f000 f8f1 	bl	8010e84 <USBD_CtlError>
          return;
 8010ca2:	e012      	b.n	8010cca <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8010ca4:	6878      	ldr	r0, [r7, #4]
 8010ca6:	f000 f997 	bl	8010fd8 <USBD_CtlSendStatus>
      break;
 8010caa:	e00e      	b.n	8010cca <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8010cac:	6878      	ldr	r0, [r7, #4]
 8010cae:	f000 f993 	bl	8010fd8 <USBD_CtlSendStatus>
      break;
 8010cb2:	e00a      	b.n	8010cca <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8010cb4:	6839      	ldr	r1, [r7, #0]
 8010cb6:	6878      	ldr	r0, [r7, #4]
 8010cb8:	f000 f8e4 	bl	8010e84 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8010cbc:	4b04      	ldr	r3, [pc, #16]	; (8010cd0 <USBD_SetConfig+0x118>)
 8010cbe:	781b      	ldrb	r3, [r3, #0]
 8010cc0:	4619      	mov	r1, r3
 8010cc2:	6878      	ldr	r0, [r7, #4]
 8010cc4:	f7ff fa2d 	bl	8010122 <USBD_ClrClassConfig>
      break;
 8010cc8:	bf00      	nop
    }
  }
}
 8010cca:	3708      	adds	r7, #8
 8010ccc:	46bd      	mov	sp, r7
 8010cce:	bd80      	pop	{r7, pc}
 8010cd0:	2000047f 	.word	0x2000047f

08010cd4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010cd4:	b580      	push	{r7, lr}
 8010cd6:	b082      	sub	sp, #8
 8010cd8:	af00      	add	r7, sp, #0
 8010cda:	6078      	str	r0, [r7, #4]
 8010cdc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8010cde:	683b      	ldr	r3, [r7, #0]
 8010ce0:	88db      	ldrh	r3, [r3, #6]
 8010ce2:	2b01      	cmp	r3, #1
 8010ce4:	d004      	beq.n	8010cf0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8010ce6:	6839      	ldr	r1, [r7, #0]
 8010ce8:	6878      	ldr	r0, [r7, #4]
 8010cea:	f000 f8cb 	bl	8010e84 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8010cee:	e021      	b.n	8010d34 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010cf6:	2b01      	cmp	r3, #1
 8010cf8:	db17      	blt.n	8010d2a <USBD_GetConfig+0x56>
 8010cfa:	2b02      	cmp	r3, #2
 8010cfc:	dd02      	ble.n	8010d04 <USBD_GetConfig+0x30>
 8010cfe:	2b03      	cmp	r3, #3
 8010d00:	d00b      	beq.n	8010d1a <USBD_GetConfig+0x46>
 8010d02:	e012      	b.n	8010d2a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	2200      	movs	r2, #0
 8010d08:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	3308      	adds	r3, #8
 8010d0e:	2201      	movs	r2, #1
 8010d10:	4619      	mov	r1, r3
 8010d12:	6878      	ldr	r0, [r7, #4]
 8010d14:	f000 f920 	bl	8010f58 <USBD_CtlSendData>
      break;
 8010d18:	e00c      	b.n	8010d34 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	3304      	adds	r3, #4
 8010d1e:	2201      	movs	r2, #1
 8010d20:	4619      	mov	r1, r3
 8010d22:	6878      	ldr	r0, [r7, #4]
 8010d24:	f000 f918 	bl	8010f58 <USBD_CtlSendData>
      break;
 8010d28:	e004      	b.n	8010d34 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 8010d2a:	6839      	ldr	r1, [r7, #0]
 8010d2c:	6878      	ldr	r0, [r7, #4]
 8010d2e:	f000 f8a9 	bl	8010e84 <USBD_CtlError>
      break;
 8010d32:	bf00      	nop
}
 8010d34:	bf00      	nop
 8010d36:	3708      	adds	r7, #8
 8010d38:	46bd      	mov	sp, r7
 8010d3a:	bd80      	pop	{r7, pc}

08010d3c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010d3c:	b580      	push	{r7, lr}
 8010d3e:	b082      	sub	sp, #8
 8010d40:	af00      	add	r7, sp, #0
 8010d42:	6078      	str	r0, [r7, #4]
 8010d44:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010d4c:	3b01      	subs	r3, #1
 8010d4e:	2b02      	cmp	r3, #2
 8010d50:	d81e      	bhi.n	8010d90 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8010d52:	683b      	ldr	r3, [r7, #0]
 8010d54:	88db      	ldrh	r3, [r3, #6]
 8010d56:	2b02      	cmp	r3, #2
 8010d58:	d004      	beq.n	8010d64 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8010d5a:	6839      	ldr	r1, [r7, #0]
 8010d5c:	6878      	ldr	r0, [r7, #4]
 8010d5e:	f000 f891 	bl	8010e84 <USBD_CtlError>
      break;
 8010d62:	e01a      	b.n	8010d9a <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	2201      	movs	r2, #1
 8010d68:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d005      	beq.n	8010d80 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	68db      	ldr	r3, [r3, #12]
 8010d78:	f043 0202 	orr.w	r2, r3, #2
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	330c      	adds	r3, #12
 8010d84:	2202      	movs	r2, #2
 8010d86:	4619      	mov	r1, r3
 8010d88:	6878      	ldr	r0, [r7, #4]
 8010d8a:	f000 f8e5 	bl	8010f58 <USBD_CtlSendData>
    break;
 8010d8e:	e004      	b.n	8010d9a <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8010d90:	6839      	ldr	r1, [r7, #0]
 8010d92:	6878      	ldr	r0, [r7, #4]
 8010d94:	f000 f876 	bl	8010e84 <USBD_CtlError>
    break;
 8010d98:	bf00      	nop
  }
}
 8010d9a:	bf00      	nop
 8010d9c:	3708      	adds	r7, #8
 8010d9e:	46bd      	mov	sp, r7
 8010da0:	bd80      	pop	{r7, pc}

08010da2 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8010da2:	b580      	push	{r7, lr}
 8010da4:	b082      	sub	sp, #8
 8010da6:	af00      	add	r7, sp, #0
 8010da8:	6078      	str	r0, [r7, #4]
 8010daa:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010dac:	683b      	ldr	r3, [r7, #0]
 8010dae:	885b      	ldrh	r3, [r3, #2]
 8010db0:	2b01      	cmp	r3, #1
 8010db2:	d106      	bne.n	8010dc2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	2201      	movs	r2, #1
 8010db8:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8010dbc:	6878      	ldr	r0, [r7, #4]
 8010dbe:	f000 f90b 	bl	8010fd8 <USBD_CtlSendStatus>
  }

}
 8010dc2:	bf00      	nop
 8010dc4:	3708      	adds	r7, #8
 8010dc6:	46bd      	mov	sp, r7
 8010dc8:	bd80      	pop	{r7, pc}

08010dca <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8010dca:	b580      	push	{r7, lr}
 8010dcc:	b082      	sub	sp, #8
 8010dce:	af00      	add	r7, sp, #0
 8010dd0:	6078      	str	r0, [r7, #4]
 8010dd2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010dda:	3b01      	subs	r3, #1
 8010ddc:	2b02      	cmp	r3, #2
 8010dde:	d80b      	bhi.n	8010df8 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010de0:	683b      	ldr	r3, [r7, #0]
 8010de2:	885b      	ldrh	r3, [r3, #2]
 8010de4:	2b01      	cmp	r3, #1
 8010de6:	d10c      	bne.n	8010e02 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	2200      	movs	r2, #0
 8010dec:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8010df0:	6878      	ldr	r0, [r7, #4]
 8010df2:	f000 f8f1 	bl	8010fd8 <USBD_CtlSendStatus>
    }
    break;
 8010df6:	e004      	b.n	8010e02 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8010df8:	6839      	ldr	r1, [r7, #0]
 8010dfa:	6878      	ldr	r0, [r7, #4]
 8010dfc:	f000 f842 	bl	8010e84 <USBD_CtlError>
    break;
 8010e00:	e000      	b.n	8010e04 <USBD_ClrFeature+0x3a>
    break;
 8010e02:	bf00      	nop
  }
}
 8010e04:	bf00      	nop
 8010e06:	3708      	adds	r7, #8
 8010e08:	46bd      	mov	sp, r7
 8010e0a:	bd80      	pop	{r7, pc}

08010e0c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010e0c:	b480      	push	{r7}
 8010e0e:	b083      	sub	sp, #12
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	6078      	str	r0, [r7, #4]
 8010e14:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8010e16:	683b      	ldr	r3, [r7, #0]
 8010e18:	781a      	ldrb	r2, [r3, #0]
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8010e1e:	683b      	ldr	r3, [r7, #0]
 8010e20:	785a      	ldrb	r2, [r3, #1]
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8010e26:	683b      	ldr	r3, [r7, #0]
 8010e28:	3302      	adds	r3, #2
 8010e2a:	781b      	ldrb	r3, [r3, #0]
 8010e2c:	b29a      	uxth	r2, r3
 8010e2e:	683b      	ldr	r3, [r7, #0]
 8010e30:	3303      	adds	r3, #3
 8010e32:	781b      	ldrb	r3, [r3, #0]
 8010e34:	b29b      	uxth	r3, r3
 8010e36:	021b      	lsls	r3, r3, #8
 8010e38:	b29b      	uxth	r3, r3
 8010e3a:	4413      	add	r3, r2
 8010e3c:	b29a      	uxth	r2, r3
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8010e42:	683b      	ldr	r3, [r7, #0]
 8010e44:	3304      	adds	r3, #4
 8010e46:	781b      	ldrb	r3, [r3, #0]
 8010e48:	b29a      	uxth	r2, r3
 8010e4a:	683b      	ldr	r3, [r7, #0]
 8010e4c:	3305      	adds	r3, #5
 8010e4e:	781b      	ldrb	r3, [r3, #0]
 8010e50:	b29b      	uxth	r3, r3
 8010e52:	021b      	lsls	r3, r3, #8
 8010e54:	b29b      	uxth	r3, r3
 8010e56:	4413      	add	r3, r2
 8010e58:	b29a      	uxth	r2, r3
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8010e5e:	683b      	ldr	r3, [r7, #0]
 8010e60:	3306      	adds	r3, #6
 8010e62:	781b      	ldrb	r3, [r3, #0]
 8010e64:	b29a      	uxth	r2, r3
 8010e66:	683b      	ldr	r3, [r7, #0]
 8010e68:	3307      	adds	r3, #7
 8010e6a:	781b      	ldrb	r3, [r3, #0]
 8010e6c:	b29b      	uxth	r3, r3
 8010e6e:	021b      	lsls	r3, r3, #8
 8010e70:	b29b      	uxth	r3, r3
 8010e72:	4413      	add	r3, r2
 8010e74:	b29a      	uxth	r2, r3
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	80da      	strh	r2, [r3, #6]

}
 8010e7a:	bf00      	nop
 8010e7c:	370c      	adds	r7, #12
 8010e7e:	46bd      	mov	sp, r7
 8010e80:	bc80      	pop	{r7}
 8010e82:	4770      	bx	lr

08010e84 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8010e84:	b580      	push	{r7, lr}
 8010e86:	b082      	sub	sp, #8
 8010e88:	af00      	add	r7, sp, #0
 8010e8a:	6078      	str	r0, [r7, #4]
 8010e8c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8010e8e:	2180      	movs	r1, #128	; 0x80
 8010e90:	6878      	ldr	r0, [r7, #4]
 8010e92:	f003 feba 	bl	8014c0a <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8010e96:	2100      	movs	r1, #0
 8010e98:	6878      	ldr	r0, [r7, #4]
 8010e9a:	f003 feb6 	bl	8014c0a <USBD_LL_StallEP>
}
 8010e9e:	bf00      	nop
 8010ea0:	3708      	adds	r7, #8
 8010ea2:	46bd      	mov	sp, r7
 8010ea4:	bd80      	pop	{r7, pc}

08010ea6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8010ea6:	b580      	push	{r7, lr}
 8010ea8:	b086      	sub	sp, #24
 8010eaa:	af00      	add	r7, sp, #0
 8010eac:	60f8      	str	r0, [r7, #12]
 8010eae:	60b9      	str	r1, [r7, #8]
 8010eb0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010eb2:	2300      	movs	r3, #0
 8010eb4:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8010eb6:	68fb      	ldr	r3, [r7, #12]
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d032      	beq.n	8010f22 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8010ebc:	68f8      	ldr	r0, [r7, #12]
 8010ebe:	f000 f834 	bl	8010f2a <USBD_GetLen>
 8010ec2:	4603      	mov	r3, r0
 8010ec4:	3301      	adds	r3, #1
 8010ec6:	b29b      	uxth	r3, r3
 8010ec8:	005b      	lsls	r3, r3, #1
 8010eca:	b29a      	uxth	r2, r3
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8010ed0:	7dfb      	ldrb	r3, [r7, #23]
 8010ed2:	1c5a      	adds	r2, r3, #1
 8010ed4:	75fa      	strb	r2, [r7, #23]
 8010ed6:	461a      	mov	r2, r3
 8010ed8:	68bb      	ldr	r3, [r7, #8]
 8010eda:	4413      	add	r3, r2
 8010edc:	687a      	ldr	r2, [r7, #4]
 8010ede:	7812      	ldrb	r2, [r2, #0]
 8010ee0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8010ee2:	7dfb      	ldrb	r3, [r7, #23]
 8010ee4:	1c5a      	adds	r2, r3, #1
 8010ee6:	75fa      	strb	r2, [r7, #23]
 8010ee8:	461a      	mov	r2, r3
 8010eea:	68bb      	ldr	r3, [r7, #8]
 8010eec:	4413      	add	r3, r2
 8010eee:	2203      	movs	r2, #3
 8010ef0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8010ef2:	e012      	b.n	8010f1a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	1c5a      	adds	r2, r3, #1
 8010ef8:	60fa      	str	r2, [r7, #12]
 8010efa:	7dfa      	ldrb	r2, [r7, #23]
 8010efc:	1c51      	adds	r1, r2, #1
 8010efe:	75f9      	strb	r1, [r7, #23]
 8010f00:	4611      	mov	r1, r2
 8010f02:	68ba      	ldr	r2, [r7, #8]
 8010f04:	440a      	add	r2, r1
 8010f06:	781b      	ldrb	r3, [r3, #0]
 8010f08:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8010f0a:	7dfb      	ldrb	r3, [r7, #23]
 8010f0c:	1c5a      	adds	r2, r3, #1
 8010f0e:	75fa      	strb	r2, [r7, #23]
 8010f10:	461a      	mov	r2, r3
 8010f12:	68bb      	ldr	r3, [r7, #8]
 8010f14:	4413      	add	r3, r2
 8010f16:	2200      	movs	r2, #0
 8010f18:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	781b      	ldrb	r3, [r3, #0]
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d1e8      	bne.n	8010ef4 <USBD_GetString+0x4e>
    }
  }
}
 8010f22:	bf00      	nop
 8010f24:	3718      	adds	r7, #24
 8010f26:	46bd      	mov	sp, r7
 8010f28:	bd80      	pop	{r7, pc}

08010f2a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8010f2a:	b480      	push	{r7}
 8010f2c:	b085      	sub	sp, #20
 8010f2e:	af00      	add	r7, sp, #0
 8010f30:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8010f32:	2300      	movs	r3, #0
 8010f34:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8010f36:	e005      	b.n	8010f44 <USBD_GetLen+0x1a>
    {
        len++;
 8010f38:	7bfb      	ldrb	r3, [r7, #15]
 8010f3a:	3301      	adds	r3, #1
 8010f3c:	73fb      	strb	r3, [r7, #15]
        buf++;
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	3301      	adds	r3, #1
 8010f42:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	781b      	ldrb	r3, [r3, #0]
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d1f5      	bne.n	8010f38 <USBD_GetLen+0xe>
    }

    return len;
 8010f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f4e:	4618      	mov	r0, r3
 8010f50:	3714      	adds	r7, #20
 8010f52:	46bd      	mov	sp, r7
 8010f54:	bc80      	pop	{r7}
 8010f56:	4770      	bx	lr

08010f58 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8010f58:	b580      	push	{r7, lr}
 8010f5a:	b084      	sub	sp, #16
 8010f5c:	af00      	add	r7, sp, #0
 8010f5e:	60f8      	str	r0, [r7, #12]
 8010f60:	60b9      	str	r1, [r7, #8]
 8010f62:	4613      	mov	r3, r2
 8010f64:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	2202      	movs	r2, #2
 8010f6a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8010f6e:	88fa      	ldrh	r2, [r7, #6]
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8010f74:	88fa      	ldrh	r2, [r7, #6]
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8010f7a:	88fb      	ldrh	r3, [r7, #6]
 8010f7c:	68ba      	ldr	r2, [r7, #8]
 8010f7e:	2100      	movs	r1, #0
 8010f80:	68f8      	ldr	r0, [r7, #12]
 8010f82:	f003 fecb 	bl	8014d1c <USBD_LL_Transmit>

  return USBD_OK;
 8010f86:	2300      	movs	r3, #0
}
 8010f88:	4618      	mov	r0, r3
 8010f8a:	3710      	adds	r7, #16
 8010f8c:	46bd      	mov	sp, r7
 8010f8e:	bd80      	pop	{r7, pc}

08010f90 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8010f90:	b580      	push	{r7, lr}
 8010f92:	b084      	sub	sp, #16
 8010f94:	af00      	add	r7, sp, #0
 8010f96:	60f8      	str	r0, [r7, #12]
 8010f98:	60b9      	str	r1, [r7, #8]
 8010f9a:	4613      	mov	r3, r2
 8010f9c:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8010f9e:	88fb      	ldrh	r3, [r7, #6]
 8010fa0:	68ba      	ldr	r2, [r7, #8]
 8010fa2:	2100      	movs	r1, #0
 8010fa4:	68f8      	ldr	r0, [r7, #12]
 8010fa6:	f003 feb9 	bl	8014d1c <USBD_LL_Transmit>

  return USBD_OK;
 8010faa:	2300      	movs	r3, #0
}
 8010fac:	4618      	mov	r0, r3
 8010fae:	3710      	adds	r7, #16
 8010fb0:	46bd      	mov	sp, r7
 8010fb2:	bd80      	pop	{r7, pc}

08010fb4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8010fb4:	b580      	push	{r7, lr}
 8010fb6:	b084      	sub	sp, #16
 8010fb8:	af00      	add	r7, sp, #0
 8010fba:	60f8      	str	r0, [r7, #12]
 8010fbc:	60b9      	str	r1, [r7, #8]
 8010fbe:	4613      	mov	r3, r2
 8010fc0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010fc2:	88fb      	ldrh	r3, [r7, #6]
 8010fc4:	68ba      	ldr	r2, [r7, #8]
 8010fc6:	2100      	movs	r1, #0
 8010fc8:	68f8      	ldr	r0, [r7, #12]
 8010fca:	f003 feca 	bl	8014d62 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010fce:	2300      	movs	r3, #0
}
 8010fd0:	4618      	mov	r0, r3
 8010fd2:	3710      	adds	r7, #16
 8010fd4:	46bd      	mov	sp, r7
 8010fd6:	bd80      	pop	{r7, pc}

08010fd8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8010fd8:	b580      	push	{r7, lr}
 8010fda:	b082      	sub	sp, #8
 8010fdc:	af00      	add	r7, sp, #0
 8010fde:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	2204      	movs	r2, #4
 8010fe4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010fe8:	2300      	movs	r3, #0
 8010fea:	2200      	movs	r2, #0
 8010fec:	2100      	movs	r1, #0
 8010fee:	6878      	ldr	r0, [r7, #4]
 8010ff0:	f003 fe94 	bl	8014d1c <USBD_LL_Transmit>

  return USBD_OK;
 8010ff4:	2300      	movs	r3, #0
}
 8010ff6:	4618      	mov	r0, r3
 8010ff8:	3708      	adds	r7, #8
 8010ffa:	46bd      	mov	sp, r7
 8010ffc:	bd80      	pop	{r7, pc}

08010ffe <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8010ffe:	b580      	push	{r7, lr}
 8011000:	b082      	sub	sp, #8
 8011002:	af00      	add	r7, sp, #0
 8011004:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	2205      	movs	r2, #5
 801100a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 801100e:	2300      	movs	r3, #0
 8011010:	2200      	movs	r2, #0
 8011012:	2100      	movs	r1, #0
 8011014:	6878      	ldr	r0, [r7, #4]
 8011016:	f003 fea4 	bl	8014d62 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801101a:	2300      	movs	r3, #0
}
 801101c:	4618      	mov	r0, r3
 801101e:	3708      	adds	r7, #8
 8011020:	46bd      	mov	sp, r7
 8011022:	bd80      	pop	{r7, pc}

08011024 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011024:	b480      	push	{r7}
 8011026:	b087      	sub	sp, #28
 8011028:	af00      	add	r7, sp, #0
 801102a:	60f8      	str	r0, [r7, #12]
 801102c:	60b9      	str	r1, [r7, #8]
 801102e:	4613      	mov	r3, r2
 8011030:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011032:	2301      	movs	r3, #1
 8011034:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011036:	2300      	movs	r3, #0
 8011038:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801103a:	4b1e      	ldr	r3, [pc, #120]	; (80110b4 <FATFS_LinkDriverEx+0x90>)
 801103c:	7a5b      	ldrb	r3, [r3, #9]
 801103e:	b2db      	uxtb	r3, r3
 8011040:	2b00      	cmp	r3, #0
 8011042:	d131      	bne.n	80110a8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011044:	4b1b      	ldr	r3, [pc, #108]	; (80110b4 <FATFS_LinkDriverEx+0x90>)
 8011046:	7a5b      	ldrb	r3, [r3, #9]
 8011048:	b2db      	uxtb	r3, r3
 801104a:	461a      	mov	r2, r3
 801104c:	4b19      	ldr	r3, [pc, #100]	; (80110b4 <FATFS_LinkDriverEx+0x90>)
 801104e:	2100      	movs	r1, #0
 8011050:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011052:	4b18      	ldr	r3, [pc, #96]	; (80110b4 <FATFS_LinkDriverEx+0x90>)
 8011054:	7a5b      	ldrb	r3, [r3, #9]
 8011056:	b2db      	uxtb	r3, r3
 8011058:	4a16      	ldr	r2, [pc, #88]	; (80110b4 <FATFS_LinkDriverEx+0x90>)
 801105a:	009b      	lsls	r3, r3, #2
 801105c:	4413      	add	r3, r2
 801105e:	68fa      	ldr	r2, [r7, #12]
 8011060:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011062:	4b14      	ldr	r3, [pc, #80]	; (80110b4 <FATFS_LinkDriverEx+0x90>)
 8011064:	7a5b      	ldrb	r3, [r3, #9]
 8011066:	b2db      	uxtb	r3, r3
 8011068:	461a      	mov	r2, r3
 801106a:	4b12      	ldr	r3, [pc, #72]	; (80110b4 <FATFS_LinkDriverEx+0x90>)
 801106c:	4413      	add	r3, r2
 801106e:	79fa      	ldrb	r2, [r7, #7]
 8011070:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011072:	4b10      	ldr	r3, [pc, #64]	; (80110b4 <FATFS_LinkDriverEx+0x90>)
 8011074:	7a5b      	ldrb	r3, [r3, #9]
 8011076:	b2db      	uxtb	r3, r3
 8011078:	1c5a      	adds	r2, r3, #1
 801107a:	b2d1      	uxtb	r1, r2
 801107c:	4a0d      	ldr	r2, [pc, #52]	; (80110b4 <FATFS_LinkDriverEx+0x90>)
 801107e:	7251      	strb	r1, [r2, #9]
 8011080:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011082:	7dbb      	ldrb	r3, [r7, #22]
 8011084:	3330      	adds	r3, #48	; 0x30
 8011086:	b2da      	uxtb	r2, r3
 8011088:	68bb      	ldr	r3, [r7, #8]
 801108a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801108c:	68bb      	ldr	r3, [r7, #8]
 801108e:	3301      	adds	r3, #1
 8011090:	223a      	movs	r2, #58	; 0x3a
 8011092:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011094:	68bb      	ldr	r3, [r7, #8]
 8011096:	3302      	adds	r3, #2
 8011098:	222f      	movs	r2, #47	; 0x2f
 801109a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801109c:	68bb      	ldr	r3, [r7, #8]
 801109e:	3303      	adds	r3, #3
 80110a0:	2200      	movs	r2, #0
 80110a2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80110a4:	2300      	movs	r3, #0
 80110a6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80110a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80110aa:	4618      	mov	r0, r3
 80110ac:	371c      	adds	r7, #28
 80110ae:	46bd      	mov	sp, r7
 80110b0:	bc80      	pop	{r7}
 80110b2:	4770      	bx	lr
 80110b4:	20000480 	.word	0x20000480

080110b8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80110b8:	b580      	push	{r7, lr}
 80110ba:	b082      	sub	sp, #8
 80110bc:	af00      	add	r7, sp, #0
 80110be:	6078      	str	r0, [r7, #4]
 80110c0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80110c2:	2200      	movs	r2, #0
 80110c4:	6839      	ldr	r1, [r7, #0]
 80110c6:	6878      	ldr	r0, [r7, #4]
 80110c8:	f7ff ffac 	bl	8011024 <FATFS_LinkDriverEx>
 80110cc:	4603      	mov	r3, r0
}
 80110ce:	4618      	mov	r0, r3
 80110d0:	3708      	adds	r7, #8
 80110d2:	46bd      	mov	sp, r7
 80110d4:	bd80      	pop	{r7, pc}
	...

080110d8 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80110d8:	b480      	push	{r7}
 80110da:	b085      	sub	sp, #20
 80110dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80110de:	f3ef 8305 	mrs	r3, IPSR
 80110e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80110e4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d10f      	bne.n	801110a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80110ea:	f3ef 8310 	mrs	r3, PRIMASK
 80110ee:	607b      	str	r3, [r7, #4]
  return(result);
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d109      	bne.n	801110a <osKernelInitialize+0x32>
 80110f6:	4b10      	ldr	r3, [pc, #64]	; (8011138 <osKernelInitialize+0x60>)
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	2b02      	cmp	r3, #2
 80110fc:	d109      	bne.n	8011112 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80110fe:	f3ef 8311 	mrs	r3, BASEPRI
 8011102:	603b      	str	r3, [r7, #0]
  return(result);
 8011104:	683b      	ldr	r3, [r7, #0]
 8011106:	2b00      	cmp	r3, #0
 8011108:	d003      	beq.n	8011112 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 801110a:	f06f 0305 	mvn.w	r3, #5
 801110e:	60fb      	str	r3, [r7, #12]
 8011110:	e00c      	b.n	801112c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8011112:	4b09      	ldr	r3, [pc, #36]	; (8011138 <osKernelInitialize+0x60>)
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	2b00      	cmp	r3, #0
 8011118:	d105      	bne.n	8011126 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 801111a:	4b07      	ldr	r3, [pc, #28]	; (8011138 <osKernelInitialize+0x60>)
 801111c:	2201      	movs	r2, #1
 801111e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8011120:	2300      	movs	r3, #0
 8011122:	60fb      	str	r3, [r7, #12]
 8011124:	e002      	b.n	801112c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8011126:	f04f 33ff 	mov.w	r3, #4294967295
 801112a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 801112c:	68fb      	ldr	r3, [r7, #12]
}
 801112e:	4618      	mov	r0, r3
 8011130:	3714      	adds	r7, #20
 8011132:	46bd      	mov	sp, r7
 8011134:	bc80      	pop	{r7}
 8011136:	4770      	bx	lr
 8011138:	2000048c 	.word	0x2000048c

0801113c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 801113c:	b580      	push	{r7, lr}
 801113e:	b084      	sub	sp, #16
 8011140:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011142:	f3ef 8305 	mrs	r3, IPSR
 8011146:	60bb      	str	r3, [r7, #8]
  return(result);
 8011148:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801114a:	2b00      	cmp	r3, #0
 801114c:	d10f      	bne.n	801116e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801114e:	f3ef 8310 	mrs	r3, PRIMASK
 8011152:	607b      	str	r3, [r7, #4]
  return(result);
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	2b00      	cmp	r3, #0
 8011158:	d109      	bne.n	801116e <osKernelStart+0x32>
 801115a:	4b11      	ldr	r3, [pc, #68]	; (80111a0 <osKernelStart+0x64>)
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	2b02      	cmp	r3, #2
 8011160:	d109      	bne.n	8011176 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011162:	f3ef 8311 	mrs	r3, BASEPRI
 8011166:	603b      	str	r3, [r7, #0]
  return(result);
 8011168:	683b      	ldr	r3, [r7, #0]
 801116a:	2b00      	cmp	r3, #0
 801116c:	d003      	beq.n	8011176 <osKernelStart+0x3a>
    stat = osErrorISR;
 801116e:	f06f 0305 	mvn.w	r3, #5
 8011172:	60fb      	str	r3, [r7, #12]
 8011174:	e00e      	b.n	8011194 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8011176:	4b0a      	ldr	r3, [pc, #40]	; (80111a0 <osKernelStart+0x64>)
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	2b01      	cmp	r3, #1
 801117c:	d107      	bne.n	801118e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 801117e:	4b08      	ldr	r3, [pc, #32]	; (80111a0 <osKernelStart+0x64>)
 8011180:	2202      	movs	r2, #2
 8011182:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8011184:	f001 fd04 	bl	8012b90 <vTaskStartScheduler>
      stat = osOK;
 8011188:	2300      	movs	r3, #0
 801118a:	60fb      	str	r3, [r7, #12]
 801118c:	e002      	b.n	8011194 <osKernelStart+0x58>
    } else {
      stat = osError;
 801118e:	f04f 33ff 	mov.w	r3, #4294967295
 8011192:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8011194:	68fb      	ldr	r3, [r7, #12]
}
 8011196:	4618      	mov	r0, r3
 8011198:	3710      	adds	r7, #16
 801119a:	46bd      	mov	sp, r7
 801119c:	bd80      	pop	{r7, pc}
 801119e:	bf00      	nop
 80111a0:	2000048c 	.word	0x2000048c

080111a4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80111a4:	b580      	push	{r7, lr}
 80111a6:	b092      	sub	sp, #72	; 0x48
 80111a8:	af04      	add	r7, sp, #16
 80111aa:	60f8      	str	r0, [r7, #12]
 80111ac:	60b9      	str	r1, [r7, #8]
 80111ae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80111b0:	2300      	movs	r3, #0
 80111b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80111b4:	f3ef 8305 	mrs	r3, IPSR
 80111b8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80111ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80111bc:	2b00      	cmp	r3, #0
 80111be:	f040 8094 	bne.w	80112ea <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80111c2:	f3ef 8310 	mrs	r3, PRIMASK
 80111c6:	623b      	str	r3, [r7, #32]
  return(result);
 80111c8:	6a3b      	ldr	r3, [r7, #32]
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	f040 808d 	bne.w	80112ea <osThreadNew+0x146>
 80111d0:	4b48      	ldr	r3, [pc, #288]	; (80112f4 <osThreadNew+0x150>)
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	2b02      	cmp	r3, #2
 80111d6:	d106      	bne.n	80111e6 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80111d8:	f3ef 8311 	mrs	r3, BASEPRI
 80111dc:	61fb      	str	r3, [r7, #28]
  return(result);
 80111de:	69fb      	ldr	r3, [r7, #28]
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	f040 8082 	bne.w	80112ea <osThreadNew+0x146>
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d07e      	beq.n	80112ea <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80111ec:	2380      	movs	r3, #128	; 0x80
 80111ee:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80111f0:	2318      	movs	r3, #24
 80111f2:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80111f4:	2300      	movs	r3, #0
 80111f6:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80111f8:	f107 031b 	add.w	r3, r7, #27
 80111fc:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80111fe:	f04f 33ff 	mov.w	r3, #4294967295
 8011202:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	2b00      	cmp	r3, #0
 8011208:	d045      	beq.n	8011296 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	2b00      	cmp	r3, #0
 8011210:	d002      	beq.n	8011218 <osThreadNew+0x74>
        name = attr->name;
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	699b      	ldr	r3, [r3, #24]
 801121c:	2b00      	cmp	r3, #0
 801121e:	d002      	beq.n	8011226 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	699b      	ldr	r3, [r3, #24]
 8011224:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8011226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011228:	2b00      	cmp	r3, #0
 801122a:	d008      	beq.n	801123e <osThreadNew+0x9a>
 801122c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801122e:	2b38      	cmp	r3, #56	; 0x38
 8011230:	d805      	bhi.n	801123e <osThreadNew+0x9a>
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	685b      	ldr	r3, [r3, #4]
 8011236:	f003 0301 	and.w	r3, r3, #1
 801123a:	2b00      	cmp	r3, #0
 801123c:	d001      	beq.n	8011242 <osThreadNew+0x9e>
        return (NULL);
 801123e:	2300      	movs	r3, #0
 8011240:	e054      	b.n	80112ec <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	695b      	ldr	r3, [r3, #20]
 8011246:	2b00      	cmp	r3, #0
 8011248:	d003      	beq.n	8011252 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	695b      	ldr	r3, [r3, #20]
 801124e:	089b      	lsrs	r3, r3, #2
 8011250:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	689b      	ldr	r3, [r3, #8]
 8011256:	2b00      	cmp	r3, #0
 8011258:	d00e      	beq.n	8011278 <osThreadNew+0xd4>
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	68db      	ldr	r3, [r3, #12]
 801125e:	2b63      	cmp	r3, #99	; 0x63
 8011260:	d90a      	bls.n	8011278 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011266:	2b00      	cmp	r3, #0
 8011268:	d006      	beq.n	8011278 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	695b      	ldr	r3, [r3, #20]
 801126e:	2b00      	cmp	r3, #0
 8011270:	d002      	beq.n	8011278 <osThreadNew+0xd4>
        mem = 1;
 8011272:	2301      	movs	r3, #1
 8011274:	62bb      	str	r3, [r7, #40]	; 0x28
 8011276:	e010      	b.n	801129a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	689b      	ldr	r3, [r3, #8]
 801127c:	2b00      	cmp	r3, #0
 801127e:	d10c      	bne.n	801129a <osThreadNew+0xf6>
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	68db      	ldr	r3, [r3, #12]
 8011284:	2b00      	cmp	r3, #0
 8011286:	d108      	bne.n	801129a <osThreadNew+0xf6>
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	691b      	ldr	r3, [r3, #16]
 801128c:	2b00      	cmp	r3, #0
 801128e:	d104      	bne.n	801129a <osThreadNew+0xf6>
          mem = 0;
 8011290:	2300      	movs	r3, #0
 8011292:	62bb      	str	r3, [r7, #40]	; 0x28
 8011294:	e001      	b.n	801129a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8011296:	2300      	movs	r3, #0
 8011298:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 801129a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801129c:	2b01      	cmp	r3, #1
 801129e:	d110      	bne.n	80112c2 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80112a4:	687a      	ldr	r2, [r7, #4]
 80112a6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80112a8:	9202      	str	r2, [sp, #8]
 80112aa:	9301      	str	r3, [sp, #4]
 80112ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112ae:	9300      	str	r3, [sp, #0]
 80112b0:	68bb      	ldr	r3, [r7, #8]
 80112b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80112b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80112b6:	68f8      	ldr	r0, [r7, #12]
 80112b8:	f001 fa9c 	bl	80127f4 <xTaskCreateStatic>
 80112bc:	4603      	mov	r3, r0
 80112be:	617b      	str	r3, [r7, #20]
 80112c0:	e013      	b.n	80112ea <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80112c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d110      	bne.n	80112ea <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80112c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112ca:	b29a      	uxth	r2, r3
 80112cc:	f107 0314 	add.w	r3, r7, #20
 80112d0:	9301      	str	r3, [sp, #4]
 80112d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112d4:	9300      	str	r3, [sp, #0]
 80112d6:	68bb      	ldr	r3, [r7, #8]
 80112d8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80112da:	68f8      	ldr	r0, [r7, #12]
 80112dc:	f001 fae3 	bl	80128a6 <xTaskCreate>
 80112e0:	4603      	mov	r3, r0
 80112e2:	2b01      	cmp	r3, #1
 80112e4:	d001      	beq.n	80112ea <osThreadNew+0x146>
          hTask = NULL;
 80112e6:	2300      	movs	r3, #0
 80112e8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80112ea:	697b      	ldr	r3, [r7, #20]
}
 80112ec:	4618      	mov	r0, r3
 80112ee:	3738      	adds	r7, #56	; 0x38
 80112f0:	46bd      	mov	sp, r7
 80112f2:	bd80      	pop	{r7, pc}
 80112f4:	2000048c 	.word	0x2000048c

080112f8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80112f8:	b580      	push	{r7, lr}
 80112fa:	b086      	sub	sp, #24
 80112fc:	af00      	add	r7, sp, #0
 80112fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011300:	f3ef 8305 	mrs	r3, IPSR
 8011304:	613b      	str	r3, [r7, #16]
  return(result);
 8011306:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011308:	2b00      	cmp	r3, #0
 801130a:	d10f      	bne.n	801132c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801130c:	f3ef 8310 	mrs	r3, PRIMASK
 8011310:	60fb      	str	r3, [r7, #12]
  return(result);
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	2b00      	cmp	r3, #0
 8011316:	d109      	bne.n	801132c <osDelay+0x34>
 8011318:	4b0d      	ldr	r3, [pc, #52]	; (8011350 <osDelay+0x58>)
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	2b02      	cmp	r3, #2
 801131e:	d109      	bne.n	8011334 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011320:	f3ef 8311 	mrs	r3, BASEPRI
 8011324:	60bb      	str	r3, [r7, #8]
  return(result);
 8011326:	68bb      	ldr	r3, [r7, #8]
 8011328:	2b00      	cmp	r3, #0
 801132a:	d003      	beq.n	8011334 <osDelay+0x3c>
    stat = osErrorISR;
 801132c:	f06f 0305 	mvn.w	r3, #5
 8011330:	617b      	str	r3, [r7, #20]
 8011332:	e007      	b.n	8011344 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8011334:	2300      	movs	r3, #0
 8011336:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	2b00      	cmp	r3, #0
 801133c:	d002      	beq.n	8011344 <osDelay+0x4c>
      vTaskDelay(ticks);
 801133e:	6878      	ldr	r0, [r7, #4]
 8011340:	f001 fbf2 	bl	8012b28 <vTaskDelay>
    }
  }

  return (stat);
 8011344:	697b      	ldr	r3, [r7, #20]
}
 8011346:	4618      	mov	r0, r3
 8011348:	3718      	adds	r7, #24
 801134a:	46bd      	mov	sp, r7
 801134c:	bd80      	pop	{r7, pc}
 801134e:	bf00      	nop
 8011350:	2000048c 	.word	0x2000048c

08011354 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8011354:	b580      	push	{r7, lr}
 8011356:	b08a      	sub	sp, #40	; 0x28
 8011358:	af00      	add	r7, sp, #0
 801135a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 801135c:	2300      	movs	r3, #0
 801135e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011360:	f3ef 8305 	mrs	r3, IPSR
 8011364:	613b      	str	r3, [r7, #16]
  return(result);
 8011366:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8011368:	2b00      	cmp	r3, #0
 801136a:	f040 8085 	bne.w	8011478 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801136e:	f3ef 8310 	mrs	r3, PRIMASK
 8011372:	60fb      	str	r3, [r7, #12]
  return(result);
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	2b00      	cmp	r3, #0
 8011378:	d17e      	bne.n	8011478 <osMutexNew+0x124>
 801137a:	4b42      	ldr	r3, [pc, #264]	; (8011484 <osMutexNew+0x130>)
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	2b02      	cmp	r3, #2
 8011380:	d105      	bne.n	801138e <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011382:	f3ef 8311 	mrs	r3, BASEPRI
 8011386:	60bb      	str	r3, [r7, #8]
  return(result);
 8011388:	68bb      	ldr	r3, [r7, #8]
 801138a:	2b00      	cmp	r3, #0
 801138c:	d174      	bne.n	8011478 <osMutexNew+0x124>
    if (attr != NULL) {
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	2b00      	cmp	r3, #0
 8011392:	d003      	beq.n	801139c <osMutexNew+0x48>
      type = attr->attr_bits;
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	685b      	ldr	r3, [r3, #4]
 8011398:	623b      	str	r3, [r7, #32]
 801139a:	e001      	b.n	80113a0 <osMutexNew+0x4c>
    } else {
      type = 0U;
 801139c:	2300      	movs	r3, #0
 801139e:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80113a0:	6a3b      	ldr	r3, [r7, #32]
 80113a2:	f003 0301 	and.w	r3, r3, #1
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d002      	beq.n	80113b0 <osMutexNew+0x5c>
      rmtx = 1U;
 80113aa:	2301      	movs	r3, #1
 80113ac:	61fb      	str	r3, [r7, #28]
 80113ae:	e001      	b.n	80113b4 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 80113b0:	2300      	movs	r3, #0
 80113b2:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80113b4:	6a3b      	ldr	r3, [r7, #32]
 80113b6:	f003 0308 	and.w	r3, r3, #8
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d15c      	bne.n	8011478 <osMutexNew+0x124>
      mem = -1;
 80113be:	f04f 33ff 	mov.w	r3, #4294967295
 80113c2:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d015      	beq.n	80113f6 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	689b      	ldr	r3, [r3, #8]
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d006      	beq.n	80113e0 <osMutexNew+0x8c>
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	68db      	ldr	r3, [r3, #12]
 80113d6:	2b4f      	cmp	r3, #79	; 0x4f
 80113d8:	d902      	bls.n	80113e0 <osMutexNew+0x8c>
          mem = 1;
 80113da:	2301      	movs	r3, #1
 80113dc:	61bb      	str	r3, [r7, #24]
 80113de:	e00c      	b.n	80113fa <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	689b      	ldr	r3, [r3, #8]
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d108      	bne.n	80113fa <osMutexNew+0xa6>
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	68db      	ldr	r3, [r3, #12]
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d104      	bne.n	80113fa <osMutexNew+0xa6>
            mem = 0;
 80113f0:	2300      	movs	r3, #0
 80113f2:	61bb      	str	r3, [r7, #24]
 80113f4:	e001      	b.n	80113fa <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 80113f6:	2300      	movs	r3, #0
 80113f8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80113fa:	69bb      	ldr	r3, [r7, #24]
 80113fc:	2b01      	cmp	r3, #1
 80113fe:	d112      	bne.n	8011426 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8011400:	69fb      	ldr	r3, [r7, #28]
 8011402:	2b00      	cmp	r3, #0
 8011404:	d007      	beq.n	8011416 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	689b      	ldr	r3, [r3, #8]
 801140a:	4619      	mov	r1, r3
 801140c:	2004      	movs	r0, #4
 801140e:	f000 fbbd 	bl	8011b8c <xQueueCreateMutexStatic>
 8011412:	6278      	str	r0, [r7, #36]	; 0x24
 8011414:	e016      	b.n	8011444 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	689b      	ldr	r3, [r3, #8]
 801141a:	4619      	mov	r1, r3
 801141c:	2001      	movs	r0, #1
 801141e:	f000 fbb5 	bl	8011b8c <xQueueCreateMutexStatic>
 8011422:	6278      	str	r0, [r7, #36]	; 0x24
 8011424:	e00e      	b.n	8011444 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8011426:	69bb      	ldr	r3, [r7, #24]
 8011428:	2b00      	cmp	r3, #0
 801142a:	d10b      	bne.n	8011444 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 801142c:	69fb      	ldr	r3, [r7, #28]
 801142e:	2b00      	cmp	r3, #0
 8011430:	d004      	beq.n	801143c <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8011432:	2004      	movs	r0, #4
 8011434:	f000 fb92 	bl	8011b5c <xQueueCreateMutex>
 8011438:	6278      	str	r0, [r7, #36]	; 0x24
 801143a:	e003      	b.n	8011444 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 801143c:	2001      	movs	r0, #1
 801143e:	f000 fb8d 	bl	8011b5c <xQueueCreateMutex>
 8011442:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8011444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011446:	2b00      	cmp	r3, #0
 8011448:	d00c      	beq.n	8011464 <osMutexNew+0x110>
        if (attr != NULL) {
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	2b00      	cmp	r3, #0
 801144e:	d003      	beq.n	8011458 <osMutexNew+0x104>
          name = attr->name;
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	617b      	str	r3, [r7, #20]
 8011456:	e001      	b.n	801145c <osMutexNew+0x108>
        } else {
          name = NULL;
 8011458:	2300      	movs	r3, #0
 801145a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 801145c:	6979      	ldr	r1, [r7, #20]
 801145e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011460:	f001 f96c 	bl	801273c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8011464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011466:	2b00      	cmp	r3, #0
 8011468:	d006      	beq.n	8011478 <osMutexNew+0x124>
 801146a:	69fb      	ldr	r3, [r7, #28]
 801146c:	2b00      	cmp	r3, #0
 801146e:	d003      	beq.n	8011478 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8011470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011472:	f043 0301 	orr.w	r3, r3, #1
 8011476:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8011478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801147a:	4618      	mov	r0, r3
 801147c:	3728      	adds	r7, #40	; 0x28
 801147e:	46bd      	mov	sp, r7
 8011480:	bd80      	pop	{r7, pc}
 8011482:	bf00      	nop
 8011484:	2000048c 	.word	0x2000048c

08011488 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8011488:	b580      	push	{r7, lr}
 801148a:	b088      	sub	sp, #32
 801148c:	af00      	add	r7, sp, #0
 801148e:	6078      	str	r0, [r7, #4]
 8011490:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	f023 0301 	bic.w	r3, r3, #1
 8011498:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	f003 0301 	and.w	r3, r3, #1
 80114a0:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80114a2:	2300      	movs	r3, #0
 80114a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80114a6:	f3ef 8305 	mrs	r3, IPSR
 80114aa:	613b      	str	r3, [r7, #16]
  return(result);
 80114ac:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d10f      	bne.n	80114d2 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80114b2:	f3ef 8310 	mrs	r3, PRIMASK
 80114b6:	60fb      	str	r3, [r7, #12]
  return(result);
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d109      	bne.n	80114d2 <osMutexAcquire+0x4a>
 80114be:	4b20      	ldr	r3, [pc, #128]	; (8011540 <osMutexAcquire+0xb8>)
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	2b02      	cmp	r3, #2
 80114c4:	d109      	bne.n	80114da <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80114c6:	f3ef 8311 	mrs	r3, BASEPRI
 80114ca:	60bb      	str	r3, [r7, #8]
  return(result);
 80114cc:	68bb      	ldr	r3, [r7, #8]
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d003      	beq.n	80114da <osMutexAcquire+0x52>
    stat = osErrorISR;
 80114d2:	f06f 0305 	mvn.w	r3, #5
 80114d6:	61fb      	str	r3, [r7, #28]
 80114d8:	e02c      	b.n	8011534 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 80114da:	69bb      	ldr	r3, [r7, #24]
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d103      	bne.n	80114e8 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 80114e0:	f06f 0303 	mvn.w	r3, #3
 80114e4:	61fb      	str	r3, [r7, #28]
 80114e6:	e025      	b.n	8011534 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 80114e8:	697b      	ldr	r3, [r7, #20]
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d011      	beq.n	8011512 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80114ee:	6839      	ldr	r1, [r7, #0]
 80114f0:	69b8      	ldr	r0, [r7, #24]
 80114f2:	f000 fb99 	bl	8011c28 <xQueueTakeMutexRecursive>
 80114f6:	4603      	mov	r3, r0
 80114f8:	2b01      	cmp	r3, #1
 80114fa:	d01b      	beq.n	8011534 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80114fc:	683b      	ldr	r3, [r7, #0]
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d003      	beq.n	801150a <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8011502:	f06f 0301 	mvn.w	r3, #1
 8011506:	61fb      	str	r3, [r7, #28]
 8011508:	e014      	b.n	8011534 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 801150a:	f06f 0302 	mvn.w	r3, #2
 801150e:	61fb      	str	r3, [r7, #28]
 8011510:	e010      	b.n	8011534 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8011512:	6839      	ldr	r1, [r7, #0]
 8011514:	69b8      	ldr	r0, [r7, #24]
 8011516:	f000 fee1 	bl	80122dc <xQueueSemaphoreTake>
 801151a:	4603      	mov	r3, r0
 801151c:	2b01      	cmp	r3, #1
 801151e:	d009      	beq.n	8011534 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8011520:	683b      	ldr	r3, [r7, #0]
 8011522:	2b00      	cmp	r3, #0
 8011524:	d003      	beq.n	801152e <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8011526:	f06f 0301 	mvn.w	r3, #1
 801152a:	61fb      	str	r3, [r7, #28]
 801152c:	e002      	b.n	8011534 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 801152e:	f06f 0302 	mvn.w	r3, #2
 8011532:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8011534:	69fb      	ldr	r3, [r7, #28]
}
 8011536:	4618      	mov	r0, r3
 8011538:	3720      	adds	r7, #32
 801153a:	46bd      	mov	sp, r7
 801153c:	bd80      	pop	{r7, pc}
 801153e:	bf00      	nop
 8011540:	2000048c 	.word	0x2000048c

08011544 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8011544:	b580      	push	{r7, lr}
 8011546:	b088      	sub	sp, #32
 8011548:	af00      	add	r7, sp, #0
 801154a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	f023 0301 	bic.w	r3, r3, #1
 8011552:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	f003 0301 	and.w	r3, r3, #1
 801155a:	617b      	str	r3, [r7, #20]

  stat = osOK;
 801155c:	2300      	movs	r3, #0
 801155e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011560:	f3ef 8305 	mrs	r3, IPSR
 8011564:	613b      	str	r3, [r7, #16]
  return(result);
 8011566:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8011568:	2b00      	cmp	r3, #0
 801156a:	d10f      	bne.n	801158c <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801156c:	f3ef 8310 	mrs	r3, PRIMASK
 8011570:	60fb      	str	r3, [r7, #12]
  return(result);
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	2b00      	cmp	r3, #0
 8011576:	d109      	bne.n	801158c <osMutexRelease+0x48>
 8011578:	4b19      	ldr	r3, [pc, #100]	; (80115e0 <osMutexRelease+0x9c>)
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	2b02      	cmp	r3, #2
 801157e:	d109      	bne.n	8011594 <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011580:	f3ef 8311 	mrs	r3, BASEPRI
 8011584:	60bb      	str	r3, [r7, #8]
  return(result);
 8011586:	68bb      	ldr	r3, [r7, #8]
 8011588:	2b00      	cmp	r3, #0
 801158a:	d003      	beq.n	8011594 <osMutexRelease+0x50>
    stat = osErrorISR;
 801158c:	f06f 0305 	mvn.w	r3, #5
 8011590:	61fb      	str	r3, [r7, #28]
 8011592:	e01f      	b.n	80115d4 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8011594:	69bb      	ldr	r3, [r7, #24]
 8011596:	2b00      	cmp	r3, #0
 8011598:	d103      	bne.n	80115a2 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 801159a:	f06f 0303 	mvn.w	r3, #3
 801159e:	61fb      	str	r3, [r7, #28]
 80115a0:	e018      	b.n	80115d4 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 80115a2:	697b      	ldr	r3, [r7, #20]
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d009      	beq.n	80115bc <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80115a8:	69b8      	ldr	r0, [r7, #24]
 80115aa:	f000 fb0a 	bl	8011bc2 <xQueueGiveMutexRecursive>
 80115ae:	4603      	mov	r3, r0
 80115b0:	2b01      	cmp	r3, #1
 80115b2:	d00f      	beq.n	80115d4 <osMutexRelease+0x90>
        stat = osErrorResource;
 80115b4:	f06f 0302 	mvn.w	r3, #2
 80115b8:	61fb      	str	r3, [r7, #28]
 80115ba:	e00b      	b.n	80115d4 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80115bc:	2300      	movs	r3, #0
 80115be:	2200      	movs	r2, #0
 80115c0:	2100      	movs	r1, #0
 80115c2:	69b8      	ldr	r0, [r7, #24]
 80115c4:	f000 fb96 	bl	8011cf4 <xQueueGenericSend>
 80115c8:	4603      	mov	r3, r0
 80115ca:	2b01      	cmp	r3, #1
 80115cc:	d002      	beq.n	80115d4 <osMutexRelease+0x90>
        stat = osErrorResource;
 80115ce:	f06f 0302 	mvn.w	r3, #2
 80115d2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 80115d4:	69fb      	ldr	r3, [r7, #28]
}
 80115d6:	4618      	mov	r0, r3
 80115d8:	3720      	adds	r7, #32
 80115da:	46bd      	mov	sp, r7
 80115dc:	bd80      	pop	{r7, pc}
 80115de:	bf00      	nop
 80115e0:	2000048c 	.word	0x2000048c

080115e4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80115e4:	b580      	push	{r7, lr}
 80115e6:	b08c      	sub	sp, #48	; 0x30
 80115e8:	af02      	add	r7, sp, #8
 80115ea:	60f8      	str	r0, [r7, #12]
 80115ec:	60b9      	str	r1, [r7, #8]
 80115ee:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80115f0:	2300      	movs	r3, #0
 80115f2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80115f4:	f3ef 8305 	mrs	r3, IPSR
 80115f8:	61bb      	str	r3, [r7, #24]
  return(result);
 80115fa:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d170      	bne.n	80116e2 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011600:	f3ef 8310 	mrs	r3, PRIMASK
 8011604:	617b      	str	r3, [r7, #20]
  return(result);
 8011606:	697b      	ldr	r3, [r7, #20]
 8011608:	2b00      	cmp	r3, #0
 801160a:	d16a      	bne.n	80116e2 <osMessageQueueNew+0xfe>
 801160c:	4b37      	ldr	r3, [pc, #220]	; (80116ec <osMessageQueueNew+0x108>)
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	2b02      	cmp	r3, #2
 8011612:	d105      	bne.n	8011620 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011614:	f3ef 8311 	mrs	r3, BASEPRI
 8011618:	613b      	str	r3, [r7, #16]
  return(result);
 801161a:	693b      	ldr	r3, [r7, #16]
 801161c:	2b00      	cmp	r3, #0
 801161e:	d160      	bne.n	80116e2 <osMessageQueueNew+0xfe>
 8011620:	68fb      	ldr	r3, [r7, #12]
 8011622:	2b00      	cmp	r3, #0
 8011624:	d05d      	beq.n	80116e2 <osMessageQueueNew+0xfe>
 8011626:	68bb      	ldr	r3, [r7, #8]
 8011628:	2b00      	cmp	r3, #0
 801162a:	d05a      	beq.n	80116e2 <osMessageQueueNew+0xfe>
    mem = -1;
 801162c:	f04f 33ff 	mov.w	r3, #4294967295
 8011630:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	2b00      	cmp	r3, #0
 8011636:	d029      	beq.n	801168c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	689b      	ldr	r3, [r3, #8]
 801163c:	2b00      	cmp	r3, #0
 801163e:	d012      	beq.n	8011666 <osMessageQueueNew+0x82>
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	68db      	ldr	r3, [r3, #12]
 8011644:	2b4f      	cmp	r3, #79	; 0x4f
 8011646:	d90e      	bls.n	8011666 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801164c:	2b00      	cmp	r3, #0
 801164e:	d00a      	beq.n	8011666 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	695a      	ldr	r2, [r3, #20]
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	68b9      	ldr	r1, [r7, #8]
 8011658:	fb01 f303 	mul.w	r3, r1, r3
 801165c:	429a      	cmp	r2, r3
 801165e:	d302      	bcc.n	8011666 <osMessageQueueNew+0x82>
        mem = 1;
 8011660:	2301      	movs	r3, #1
 8011662:	623b      	str	r3, [r7, #32]
 8011664:	e014      	b.n	8011690 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	689b      	ldr	r3, [r3, #8]
 801166a:	2b00      	cmp	r3, #0
 801166c:	d110      	bne.n	8011690 <osMessageQueueNew+0xac>
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	68db      	ldr	r3, [r3, #12]
 8011672:	2b00      	cmp	r3, #0
 8011674:	d10c      	bne.n	8011690 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801167a:	2b00      	cmp	r3, #0
 801167c:	d108      	bne.n	8011690 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	695b      	ldr	r3, [r3, #20]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d104      	bne.n	8011690 <osMessageQueueNew+0xac>
          mem = 0;
 8011686:	2300      	movs	r3, #0
 8011688:	623b      	str	r3, [r7, #32]
 801168a:	e001      	b.n	8011690 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 801168c:	2300      	movs	r3, #0
 801168e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8011690:	6a3b      	ldr	r3, [r7, #32]
 8011692:	2b01      	cmp	r3, #1
 8011694:	d10c      	bne.n	80116b0 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	691a      	ldr	r2, [r3, #16]
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	6899      	ldr	r1, [r3, #8]
 801169e:	2300      	movs	r3, #0
 80116a0:	9300      	str	r3, [sp, #0]
 80116a2:	460b      	mov	r3, r1
 80116a4:	68b9      	ldr	r1, [r7, #8]
 80116a6:	68f8      	ldr	r0, [r7, #12]
 80116a8:	f000 f96c 	bl	8011984 <xQueueGenericCreateStatic>
 80116ac:	6278      	str	r0, [r7, #36]	; 0x24
 80116ae:	e008      	b.n	80116c2 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 80116b0:	6a3b      	ldr	r3, [r7, #32]
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d105      	bne.n	80116c2 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 80116b6:	2200      	movs	r2, #0
 80116b8:	68b9      	ldr	r1, [r7, #8]
 80116ba:	68f8      	ldr	r0, [r7, #12]
 80116bc:	f000 f9d4 	bl	8011a68 <xQueueGenericCreate>
 80116c0:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80116c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d00c      	beq.n	80116e2 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d003      	beq.n	80116d6 <osMessageQueueNew+0xf2>
        name = attr->name;
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	61fb      	str	r3, [r7, #28]
 80116d4:	e001      	b.n	80116da <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 80116d6:	2300      	movs	r3, #0
 80116d8:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80116da:	69f9      	ldr	r1, [r7, #28]
 80116dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80116de:	f001 f82d 	bl	801273c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80116e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80116e4:	4618      	mov	r0, r3
 80116e6:	3728      	adds	r7, #40	; 0x28
 80116e8:	46bd      	mov	sp, r7
 80116ea:	bd80      	pop	{r7, pc}
 80116ec:	2000048c 	.word	0x2000048c

080116f0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80116f0:	b480      	push	{r7}
 80116f2:	b085      	sub	sp, #20
 80116f4:	af00      	add	r7, sp, #0
 80116f6:	60f8      	str	r0, [r7, #12]
 80116f8:	60b9      	str	r1, [r7, #8]
 80116fa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	4a06      	ldr	r2, [pc, #24]	; (8011718 <vApplicationGetIdleTaskMemory+0x28>)
 8011700:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8011702:	68bb      	ldr	r3, [r7, #8]
 8011704:	4a05      	ldr	r2, [pc, #20]	; (801171c <vApplicationGetIdleTaskMemory+0x2c>)
 8011706:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	2280      	movs	r2, #128	; 0x80
 801170c:	601a      	str	r2, [r3, #0]
}
 801170e:	bf00      	nop
 8011710:	3714      	adds	r7, #20
 8011712:	46bd      	mov	sp, r7
 8011714:	bc80      	pop	{r7}
 8011716:	4770      	bx	lr
 8011718:	20000490 	.word	0x20000490
 801171c:	200004f4 	.word	0x200004f4

08011720 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8011720:	b480      	push	{r7}
 8011722:	b085      	sub	sp, #20
 8011724:	af00      	add	r7, sp, #0
 8011726:	60f8      	str	r0, [r7, #12]
 8011728:	60b9      	str	r1, [r7, #8]
 801172a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 801172c:	68fb      	ldr	r3, [r7, #12]
 801172e:	4a07      	ldr	r2, [pc, #28]	; (801174c <vApplicationGetTimerTaskMemory+0x2c>)
 8011730:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8011732:	68bb      	ldr	r3, [r7, #8]
 8011734:	4a06      	ldr	r2, [pc, #24]	; (8011750 <vApplicationGetTimerTaskMemory+0x30>)
 8011736:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801173e:	601a      	str	r2, [r3, #0]
}
 8011740:	bf00      	nop
 8011742:	3714      	adds	r7, #20
 8011744:	46bd      	mov	sp, r7
 8011746:	bc80      	pop	{r7}
 8011748:	4770      	bx	lr
 801174a:	bf00      	nop
 801174c:	200006f4 	.word	0x200006f4
 8011750:	20000758 	.word	0x20000758

08011754 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011754:	b480      	push	{r7}
 8011756:	b083      	sub	sp, #12
 8011758:	af00      	add	r7, sp, #0
 801175a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	f103 0208 	add.w	r2, r3, #8
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	f04f 32ff 	mov.w	r2, #4294967295
 801176c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	f103 0208 	add.w	r2, r3, #8
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	f103 0208 	add.w	r2, r3, #8
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	2200      	movs	r2, #0
 8011786:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011788:	bf00      	nop
 801178a:	370c      	adds	r7, #12
 801178c:	46bd      	mov	sp, r7
 801178e:	bc80      	pop	{r7}
 8011790:	4770      	bx	lr

08011792 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8011792:	b480      	push	{r7}
 8011794:	b083      	sub	sp, #12
 8011796:	af00      	add	r7, sp, #0
 8011798:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	2200      	movs	r2, #0
 801179e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80117a0:	bf00      	nop
 80117a2:	370c      	adds	r7, #12
 80117a4:	46bd      	mov	sp, r7
 80117a6:	bc80      	pop	{r7}
 80117a8:	4770      	bx	lr

080117aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80117aa:	b480      	push	{r7}
 80117ac:	b085      	sub	sp, #20
 80117ae:	af00      	add	r7, sp, #0
 80117b0:	6078      	str	r0, [r7, #4]
 80117b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	685b      	ldr	r3, [r3, #4]
 80117b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80117ba:	683b      	ldr	r3, [r7, #0]
 80117bc:	68fa      	ldr	r2, [r7, #12]
 80117be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	689a      	ldr	r2, [r3, #8]
 80117c4:	683b      	ldr	r3, [r7, #0]
 80117c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80117c8:	68fb      	ldr	r3, [r7, #12]
 80117ca:	689b      	ldr	r3, [r3, #8]
 80117cc:	683a      	ldr	r2, [r7, #0]
 80117ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80117d0:	68fb      	ldr	r3, [r7, #12]
 80117d2:	683a      	ldr	r2, [r7, #0]
 80117d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80117d6:	683b      	ldr	r3, [r7, #0]
 80117d8:	687a      	ldr	r2, [r7, #4]
 80117da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	1c5a      	adds	r2, r3, #1
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	601a      	str	r2, [r3, #0]
}
 80117e6:	bf00      	nop
 80117e8:	3714      	adds	r7, #20
 80117ea:	46bd      	mov	sp, r7
 80117ec:	bc80      	pop	{r7}
 80117ee:	4770      	bx	lr

080117f0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80117f0:	b480      	push	{r7}
 80117f2:	b085      	sub	sp, #20
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	6078      	str	r0, [r7, #4]
 80117f8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80117fa:	683b      	ldr	r3, [r7, #0]
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8011800:	68bb      	ldr	r3, [r7, #8]
 8011802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011806:	d103      	bne.n	8011810 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	691b      	ldr	r3, [r3, #16]
 801180c:	60fb      	str	r3, [r7, #12]
 801180e:	e00c      	b.n	801182a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	3308      	adds	r3, #8
 8011814:	60fb      	str	r3, [r7, #12]
 8011816:	e002      	b.n	801181e <vListInsert+0x2e>
 8011818:	68fb      	ldr	r3, [r7, #12]
 801181a:	685b      	ldr	r3, [r3, #4]
 801181c:	60fb      	str	r3, [r7, #12]
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	685b      	ldr	r3, [r3, #4]
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	68ba      	ldr	r2, [r7, #8]
 8011826:	429a      	cmp	r2, r3
 8011828:	d2f6      	bcs.n	8011818 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	685a      	ldr	r2, [r3, #4]
 801182e:	683b      	ldr	r3, [r7, #0]
 8011830:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011832:	683b      	ldr	r3, [r7, #0]
 8011834:	685b      	ldr	r3, [r3, #4]
 8011836:	683a      	ldr	r2, [r7, #0]
 8011838:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801183a:	683b      	ldr	r3, [r7, #0]
 801183c:	68fa      	ldr	r2, [r7, #12]
 801183e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8011840:	68fb      	ldr	r3, [r7, #12]
 8011842:	683a      	ldr	r2, [r7, #0]
 8011844:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8011846:	683b      	ldr	r3, [r7, #0]
 8011848:	687a      	ldr	r2, [r7, #4]
 801184a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	681b      	ldr	r3, [r3, #0]
 8011850:	1c5a      	adds	r2, r3, #1
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	601a      	str	r2, [r3, #0]
}
 8011856:	bf00      	nop
 8011858:	3714      	adds	r7, #20
 801185a:	46bd      	mov	sp, r7
 801185c:	bc80      	pop	{r7}
 801185e:	4770      	bx	lr

08011860 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011860:	b480      	push	{r7}
 8011862:	b085      	sub	sp, #20
 8011864:	af00      	add	r7, sp, #0
 8011866:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	691b      	ldr	r3, [r3, #16]
 801186c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	685b      	ldr	r3, [r3, #4]
 8011872:	687a      	ldr	r2, [r7, #4]
 8011874:	6892      	ldr	r2, [r2, #8]
 8011876:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	689b      	ldr	r3, [r3, #8]
 801187c:	687a      	ldr	r2, [r7, #4]
 801187e:	6852      	ldr	r2, [r2, #4]
 8011880:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	685b      	ldr	r3, [r3, #4]
 8011886:	687a      	ldr	r2, [r7, #4]
 8011888:	429a      	cmp	r2, r3
 801188a:	d103      	bne.n	8011894 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	689a      	ldr	r2, [r3, #8]
 8011890:	68fb      	ldr	r3, [r7, #12]
 8011892:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	2200      	movs	r2, #0
 8011898:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	1e5a      	subs	r2, r3, #1
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	681b      	ldr	r3, [r3, #0]
}
 80118a8:	4618      	mov	r0, r3
 80118aa:	3714      	adds	r7, #20
 80118ac:	46bd      	mov	sp, r7
 80118ae:	bc80      	pop	{r7}
 80118b0:	4770      	bx	lr
	...

080118b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80118b4:	b580      	push	{r7, lr}
 80118b6:	b084      	sub	sp, #16
 80118b8:	af00      	add	r7, sp, #0
 80118ba:	6078      	str	r0, [r7, #4]
 80118bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80118c2:	68fb      	ldr	r3, [r7, #12]
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d109      	bne.n	80118dc <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80118c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118cc:	f383 8811 	msr	BASEPRI, r3
 80118d0:	f3bf 8f6f 	isb	sy
 80118d4:	f3bf 8f4f 	dsb	sy
 80118d8:	60bb      	str	r3, [r7, #8]
 80118da:	e7fe      	b.n	80118da <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80118dc:	f002 fb9c 	bl	8014018 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80118e0:	68fb      	ldr	r3, [r7, #12]
 80118e2:	681a      	ldr	r2, [r3, #0]
 80118e4:	68fb      	ldr	r3, [r7, #12]
 80118e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80118e8:	68f9      	ldr	r1, [r7, #12]
 80118ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80118ec:	fb01 f303 	mul.w	r3, r1, r3
 80118f0:	441a      	add	r2, r3
 80118f2:	68fb      	ldr	r3, [r7, #12]
 80118f4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	2200      	movs	r2, #0
 80118fa:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	681a      	ldr	r2, [r3, #0]
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	681a      	ldr	r2, [r3, #0]
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801190c:	3b01      	subs	r3, #1
 801190e:	68f9      	ldr	r1, [r7, #12]
 8011910:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011912:	fb01 f303 	mul.w	r3, r1, r3
 8011916:	441a      	add	r2, r3
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	22ff      	movs	r2, #255	; 0xff
 8011920:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8011924:	68fb      	ldr	r3, [r7, #12]
 8011926:	22ff      	movs	r2, #255	; 0xff
 8011928:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801192c:	683b      	ldr	r3, [r7, #0]
 801192e:	2b00      	cmp	r3, #0
 8011930:	d114      	bne.n	801195c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	691b      	ldr	r3, [r3, #16]
 8011936:	2b00      	cmp	r3, #0
 8011938:	d01a      	beq.n	8011970 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	3310      	adds	r3, #16
 801193e:	4618      	mov	r0, r3
 8011940:	f001 fbc8 	bl	80130d4 <xTaskRemoveFromEventList>
 8011944:	4603      	mov	r3, r0
 8011946:	2b00      	cmp	r3, #0
 8011948:	d012      	beq.n	8011970 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801194a:	4b0d      	ldr	r3, [pc, #52]	; (8011980 <xQueueGenericReset+0xcc>)
 801194c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011950:	601a      	str	r2, [r3, #0]
 8011952:	f3bf 8f4f 	dsb	sy
 8011956:	f3bf 8f6f 	isb	sy
 801195a:	e009      	b.n	8011970 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	3310      	adds	r3, #16
 8011960:	4618      	mov	r0, r3
 8011962:	f7ff fef7 	bl	8011754 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	3324      	adds	r3, #36	; 0x24
 801196a:	4618      	mov	r0, r3
 801196c:	f7ff fef2 	bl	8011754 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8011970:	f002 fb80 	bl	8014074 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8011974:	2301      	movs	r3, #1
}
 8011976:	4618      	mov	r0, r3
 8011978:	3710      	adds	r7, #16
 801197a:	46bd      	mov	sp, r7
 801197c:	bd80      	pop	{r7, pc}
 801197e:	bf00      	nop
 8011980:	e000ed04 	.word	0xe000ed04

08011984 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8011984:	b580      	push	{r7, lr}
 8011986:	b08e      	sub	sp, #56	; 0x38
 8011988:	af02      	add	r7, sp, #8
 801198a:	60f8      	str	r0, [r7, #12]
 801198c:	60b9      	str	r1, [r7, #8]
 801198e:	607a      	str	r2, [r7, #4]
 8011990:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011992:	68fb      	ldr	r3, [r7, #12]
 8011994:	2b00      	cmp	r3, #0
 8011996:	d109      	bne.n	80119ac <xQueueGenericCreateStatic+0x28>
 8011998:	f04f 0350 	mov.w	r3, #80	; 0x50
 801199c:	f383 8811 	msr	BASEPRI, r3
 80119a0:	f3bf 8f6f 	isb	sy
 80119a4:	f3bf 8f4f 	dsb	sy
 80119a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80119aa:	e7fe      	b.n	80119aa <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80119ac:	683b      	ldr	r3, [r7, #0]
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d109      	bne.n	80119c6 <xQueueGenericCreateStatic+0x42>
 80119b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119b6:	f383 8811 	msr	BASEPRI, r3
 80119ba:	f3bf 8f6f 	isb	sy
 80119be:	f3bf 8f4f 	dsb	sy
 80119c2:	627b      	str	r3, [r7, #36]	; 0x24
 80119c4:	e7fe      	b.n	80119c4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d002      	beq.n	80119d2 <xQueueGenericCreateStatic+0x4e>
 80119cc:	68bb      	ldr	r3, [r7, #8]
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d001      	beq.n	80119d6 <xQueueGenericCreateStatic+0x52>
 80119d2:	2301      	movs	r3, #1
 80119d4:	e000      	b.n	80119d8 <xQueueGenericCreateStatic+0x54>
 80119d6:	2300      	movs	r3, #0
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d109      	bne.n	80119f0 <xQueueGenericCreateStatic+0x6c>
 80119dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119e0:	f383 8811 	msr	BASEPRI, r3
 80119e4:	f3bf 8f6f 	isb	sy
 80119e8:	f3bf 8f4f 	dsb	sy
 80119ec:	623b      	str	r3, [r7, #32]
 80119ee:	e7fe      	b.n	80119ee <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d102      	bne.n	80119fc <xQueueGenericCreateStatic+0x78>
 80119f6:	68bb      	ldr	r3, [r7, #8]
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d101      	bne.n	8011a00 <xQueueGenericCreateStatic+0x7c>
 80119fc:	2301      	movs	r3, #1
 80119fe:	e000      	b.n	8011a02 <xQueueGenericCreateStatic+0x7e>
 8011a00:	2300      	movs	r3, #0
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d109      	bne.n	8011a1a <xQueueGenericCreateStatic+0x96>
 8011a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a0a:	f383 8811 	msr	BASEPRI, r3
 8011a0e:	f3bf 8f6f 	isb	sy
 8011a12:	f3bf 8f4f 	dsb	sy
 8011a16:	61fb      	str	r3, [r7, #28]
 8011a18:	e7fe      	b.n	8011a18 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8011a1a:	2350      	movs	r3, #80	; 0x50
 8011a1c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8011a1e:	697b      	ldr	r3, [r7, #20]
 8011a20:	2b50      	cmp	r3, #80	; 0x50
 8011a22:	d009      	beq.n	8011a38 <xQueueGenericCreateStatic+0xb4>
 8011a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a28:	f383 8811 	msr	BASEPRI, r3
 8011a2c:	f3bf 8f6f 	isb	sy
 8011a30:	f3bf 8f4f 	dsb	sy
 8011a34:	61bb      	str	r3, [r7, #24]
 8011a36:	e7fe      	b.n	8011a36 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011a38:	683b      	ldr	r3, [r7, #0]
 8011a3a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8011a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d00d      	beq.n	8011a5e <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8011a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a44:	2201      	movs	r2, #1
 8011a46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011a4a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8011a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a50:	9300      	str	r3, [sp, #0]
 8011a52:	4613      	mov	r3, r2
 8011a54:	687a      	ldr	r2, [r7, #4]
 8011a56:	68b9      	ldr	r1, [r7, #8]
 8011a58:	68f8      	ldr	r0, [r7, #12]
 8011a5a:	f000 f842 	bl	8011ae2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8011a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8011a60:	4618      	mov	r0, r3
 8011a62:	3730      	adds	r7, #48	; 0x30
 8011a64:	46bd      	mov	sp, r7
 8011a66:	bd80      	pop	{r7, pc}

08011a68 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8011a68:	b580      	push	{r7, lr}
 8011a6a:	b08a      	sub	sp, #40	; 0x28
 8011a6c:	af02      	add	r7, sp, #8
 8011a6e:	60f8      	str	r0, [r7, #12]
 8011a70:	60b9      	str	r1, [r7, #8]
 8011a72:	4613      	mov	r3, r2
 8011a74:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d109      	bne.n	8011a90 <xQueueGenericCreate+0x28>
 8011a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a80:	f383 8811 	msr	BASEPRI, r3
 8011a84:	f3bf 8f6f 	isb	sy
 8011a88:	f3bf 8f4f 	dsb	sy
 8011a8c:	613b      	str	r3, [r7, #16]
 8011a8e:	e7fe      	b.n	8011a8e <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8011a90:	68bb      	ldr	r3, [r7, #8]
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d102      	bne.n	8011a9c <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8011a96:	2300      	movs	r3, #0
 8011a98:	61fb      	str	r3, [r7, #28]
 8011a9a:	e004      	b.n	8011aa6 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	68ba      	ldr	r2, [r7, #8]
 8011aa0:	fb02 f303 	mul.w	r3, r2, r3
 8011aa4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8011aa6:	69fb      	ldr	r3, [r7, #28]
 8011aa8:	3350      	adds	r3, #80	; 0x50
 8011aaa:	4618      	mov	r0, r3
 8011aac:	f002 fbaa 	bl	8014204 <pvPortMalloc>
 8011ab0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8011ab2:	69bb      	ldr	r3, [r7, #24]
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d00f      	beq.n	8011ad8 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8011ab8:	69bb      	ldr	r3, [r7, #24]
 8011aba:	3350      	adds	r3, #80	; 0x50
 8011abc:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8011abe:	69bb      	ldr	r3, [r7, #24]
 8011ac0:	2200      	movs	r2, #0
 8011ac2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011ac6:	79fa      	ldrb	r2, [r7, #7]
 8011ac8:	69bb      	ldr	r3, [r7, #24]
 8011aca:	9300      	str	r3, [sp, #0]
 8011acc:	4613      	mov	r3, r2
 8011ace:	697a      	ldr	r2, [r7, #20]
 8011ad0:	68b9      	ldr	r1, [r7, #8]
 8011ad2:	68f8      	ldr	r0, [r7, #12]
 8011ad4:	f000 f805 	bl	8011ae2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8011ad8:	69bb      	ldr	r3, [r7, #24]
	}
 8011ada:	4618      	mov	r0, r3
 8011adc:	3720      	adds	r7, #32
 8011ade:	46bd      	mov	sp, r7
 8011ae0:	bd80      	pop	{r7, pc}

08011ae2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8011ae2:	b580      	push	{r7, lr}
 8011ae4:	b084      	sub	sp, #16
 8011ae6:	af00      	add	r7, sp, #0
 8011ae8:	60f8      	str	r0, [r7, #12]
 8011aea:	60b9      	str	r1, [r7, #8]
 8011aec:	607a      	str	r2, [r7, #4]
 8011aee:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8011af0:	68bb      	ldr	r3, [r7, #8]
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d103      	bne.n	8011afe <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011af6:	69bb      	ldr	r3, [r7, #24]
 8011af8:	69ba      	ldr	r2, [r7, #24]
 8011afa:	601a      	str	r2, [r3, #0]
 8011afc:	e002      	b.n	8011b04 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011afe:	69bb      	ldr	r3, [r7, #24]
 8011b00:	687a      	ldr	r2, [r7, #4]
 8011b02:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8011b04:	69bb      	ldr	r3, [r7, #24]
 8011b06:	68fa      	ldr	r2, [r7, #12]
 8011b08:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011b0a:	69bb      	ldr	r3, [r7, #24]
 8011b0c:	68ba      	ldr	r2, [r7, #8]
 8011b0e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011b10:	2101      	movs	r1, #1
 8011b12:	69b8      	ldr	r0, [r7, #24]
 8011b14:	f7ff fece 	bl	80118b4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8011b18:	69bb      	ldr	r3, [r7, #24]
 8011b1a:	78fa      	ldrb	r2, [r7, #3]
 8011b1c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8011b20:	bf00      	nop
 8011b22:	3710      	adds	r7, #16
 8011b24:	46bd      	mov	sp, r7
 8011b26:	bd80      	pop	{r7, pc}

08011b28 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8011b28:	b580      	push	{r7, lr}
 8011b2a:	b082      	sub	sp, #8
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d00e      	beq.n	8011b54 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	2200      	movs	r2, #0
 8011b3a:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	2200      	movs	r2, #0
 8011b40:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	2200      	movs	r2, #0
 8011b46:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8011b48:	2300      	movs	r3, #0
 8011b4a:	2200      	movs	r2, #0
 8011b4c:	2100      	movs	r1, #0
 8011b4e:	6878      	ldr	r0, [r7, #4]
 8011b50:	f000 f8d0 	bl	8011cf4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8011b54:	bf00      	nop
 8011b56:	3708      	adds	r7, #8
 8011b58:	46bd      	mov	sp, r7
 8011b5a:	bd80      	pop	{r7, pc}

08011b5c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8011b5c:	b580      	push	{r7, lr}
 8011b5e:	b086      	sub	sp, #24
 8011b60:	af00      	add	r7, sp, #0
 8011b62:	4603      	mov	r3, r0
 8011b64:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8011b66:	2301      	movs	r3, #1
 8011b68:	617b      	str	r3, [r7, #20]
 8011b6a:	2300      	movs	r3, #0
 8011b6c:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8011b6e:	79fb      	ldrb	r3, [r7, #7]
 8011b70:	461a      	mov	r2, r3
 8011b72:	6939      	ldr	r1, [r7, #16]
 8011b74:	6978      	ldr	r0, [r7, #20]
 8011b76:	f7ff ff77 	bl	8011a68 <xQueueGenericCreate>
 8011b7a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8011b7c:	68f8      	ldr	r0, [r7, #12]
 8011b7e:	f7ff ffd3 	bl	8011b28 <prvInitialiseMutex>

		return pxNewQueue;
 8011b82:	68fb      	ldr	r3, [r7, #12]
	}
 8011b84:	4618      	mov	r0, r3
 8011b86:	3718      	adds	r7, #24
 8011b88:	46bd      	mov	sp, r7
 8011b8a:	bd80      	pop	{r7, pc}

08011b8c <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8011b8c:	b580      	push	{r7, lr}
 8011b8e:	b088      	sub	sp, #32
 8011b90:	af02      	add	r7, sp, #8
 8011b92:	4603      	mov	r3, r0
 8011b94:	6039      	str	r1, [r7, #0]
 8011b96:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8011b98:	2301      	movs	r3, #1
 8011b9a:	617b      	str	r3, [r7, #20]
 8011b9c:	2300      	movs	r3, #0
 8011b9e:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8011ba0:	79fb      	ldrb	r3, [r7, #7]
 8011ba2:	9300      	str	r3, [sp, #0]
 8011ba4:	683b      	ldr	r3, [r7, #0]
 8011ba6:	2200      	movs	r2, #0
 8011ba8:	6939      	ldr	r1, [r7, #16]
 8011baa:	6978      	ldr	r0, [r7, #20]
 8011bac:	f7ff feea 	bl	8011984 <xQueueGenericCreateStatic>
 8011bb0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8011bb2:	68f8      	ldr	r0, [r7, #12]
 8011bb4:	f7ff ffb8 	bl	8011b28 <prvInitialiseMutex>

		return pxNewQueue;
 8011bb8:	68fb      	ldr	r3, [r7, #12]
	}
 8011bba:	4618      	mov	r0, r3
 8011bbc:	3718      	adds	r7, #24
 8011bbe:	46bd      	mov	sp, r7
 8011bc0:	bd80      	pop	{r7, pc}

08011bc2 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8011bc2:	b590      	push	{r4, r7, lr}
 8011bc4:	b087      	sub	sp, #28
 8011bc6:	af00      	add	r7, sp, #0
 8011bc8:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8011bce:	693b      	ldr	r3, [r7, #16]
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d109      	bne.n	8011be8 <xQueueGiveMutexRecursive+0x26>
 8011bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bd8:	f383 8811 	msr	BASEPRI, r3
 8011bdc:	f3bf 8f6f 	isb	sy
 8011be0:	f3bf 8f4f 	dsb	sy
 8011be4:	60fb      	str	r3, [r7, #12]
 8011be6:	e7fe      	b.n	8011be6 <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8011be8:	693b      	ldr	r3, [r7, #16]
 8011bea:	685c      	ldr	r4, [r3, #4]
 8011bec:	f001 fc2c 	bl	8013448 <xTaskGetCurrentTaskHandle>
 8011bf0:	4603      	mov	r3, r0
 8011bf2:	429c      	cmp	r4, r3
 8011bf4:	d111      	bne.n	8011c1a <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 8011bf6:	693b      	ldr	r3, [r7, #16]
 8011bf8:	68db      	ldr	r3, [r3, #12]
 8011bfa:	1e5a      	subs	r2, r3, #1
 8011bfc:	693b      	ldr	r3, [r7, #16]
 8011bfe:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8011c00:	693b      	ldr	r3, [r7, #16]
 8011c02:	68db      	ldr	r3, [r3, #12]
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d105      	bne.n	8011c14 <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8011c08:	2300      	movs	r3, #0
 8011c0a:	2200      	movs	r2, #0
 8011c0c:	2100      	movs	r1, #0
 8011c0e:	6938      	ldr	r0, [r7, #16]
 8011c10:	f000 f870 	bl	8011cf4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8011c14:	2301      	movs	r3, #1
 8011c16:	617b      	str	r3, [r7, #20]
 8011c18:	e001      	b.n	8011c1e <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8011c1a:	2300      	movs	r3, #0
 8011c1c:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8011c1e:	697b      	ldr	r3, [r7, #20]
	}
 8011c20:	4618      	mov	r0, r3
 8011c22:	371c      	adds	r7, #28
 8011c24:	46bd      	mov	sp, r7
 8011c26:	bd90      	pop	{r4, r7, pc}

08011c28 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8011c28:	b590      	push	{r4, r7, lr}
 8011c2a:	b087      	sub	sp, #28
 8011c2c:	af00      	add	r7, sp, #0
 8011c2e:	6078      	str	r0, [r7, #4]
 8011c30:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8011c36:	693b      	ldr	r3, [r7, #16]
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d109      	bne.n	8011c50 <xQueueTakeMutexRecursive+0x28>
 8011c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c40:	f383 8811 	msr	BASEPRI, r3
 8011c44:	f3bf 8f6f 	isb	sy
 8011c48:	f3bf 8f4f 	dsb	sy
 8011c4c:	60fb      	str	r3, [r7, #12]
 8011c4e:	e7fe      	b.n	8011c4e <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8011c50:	693b      	ldr	r3, [r7, #16]
 8011c52:	685c      	ldr	r4, [r3, #4]
 8011c54:	f001 fbf8 	bl	8013448 <xTaskGetCurrentTaskHandle>
 8011c58:	4603      	mov	r3, r0
 8011c5a:	429c      	cmp	r4, r3
 8011c5c:	d107      	bne.n	8011c6e <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 8011c5e:	693b      	ldr	r3, [r7, #16]
 8011c60:	68db      	ldr	r3, [r3, #12]
 8011c62:	1c5a      	adds	r2, r3, #1
 8011c64:	693b      	ldr	r3, [r7, #16]
 8011c66:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8011c68:	2301      	movs	r3, #1
 8011c6a:	617b      	str	r3, [r7, #20]
 8011c6c:	e00c      	b.n	8011c88 <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8011c6e:	6839      	ldr	r1, [r7, #0]
 8011c70:	6938      	ldr	r0, [r7, #16]
 8011c72:	f000 fb33 	bl	80122dc <xQueueSemaphoreTake>
 8011c76:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8011c78:	697b      	ldr	r3, [r7, #20]
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d004      	beq.n	8011c88 <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 8011c7e:	693b      	ldr	r3, [r7, #16]
 8011c80:	68db      	ldr	r3, [r3, #12]
 8011c82:	1c5a      	adds	r2, r3, #1
 8011c84:	693b      	ldr	r3, [r7, #16]
 8011c86:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8011c88:	697b      	ldr	r3, [r7, #20]
	}
 8011c8a:	4618      	mov	r0, r3
 8011c8c:	371c      	adds	r7, #28
 8011c8e:	46bd      	mov	sp, r7
 8011c90:	bd90      	pop	{r4, r7, pc}

08011c92 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8011c92:	b580      	push	{r7, lr}
 8011c94:	b086      	sub	sp, #24
 8011c96:	af00      	add	r7, sp, #0
 8011c98:	6078      	str	r0, [r7, #4]
 8011c9a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d109      	bne.n	8011cb6 <xQueueCreateCountingSemaphore+0x24>
 8011ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ca6:	f383 8811 	msr	BASEPRI, r3
 8011caa:	f3bf 8f6f 	isb	sy
 8011cae:	f3bf 8f4f 	dsb	sy
 8011cb2:	613b      	str	r3, [r7, #16]
 8011cb4:	e7fe      	b.n	8011cb4 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8011cb6:	683a      	ldr	r2, [r7, #0]
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	429a      	cmp	r2, r3
 8011cbc:	d909      	bls.n	8011cd2 <xQueueCreateCountingSemaphore+0x40>
 8011cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cc2:	f383 8811 	msr	BASEPRI, r3
 8011cc6:	f3bf 8f6f 	isb	sy
 8011cca:	f3bf 8f4f 	dsb	sy
 8011cce:	60fb      	str	r3, [r7, #12]
 8011cd0:	e7fe      	b.n	8011cd0 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8011cd2:	2202      	movs	r2, #2
 8011cd4:	2100      	movs	r1, #0
 8011cd6:	6878      	ldr	r0, [r7, #4]
 8011cd8:	f7ff fec6 	bl	8011a68 <xQueueGenericCreate>
 8011cdc:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8011cde:	697b      	ldr	r3, [r7, #20]
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d002      	beq.n	8011cea <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8011ce4:	697b      	ldr	r3, [r7, #20]
 8011ce6:	683a      	ldr	r2, [r7, #0]
 8011ce8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8011cea:	697b      	ldr	r3, [r7, #20]
	}
 8011cec:	4618      	mov	r0, r3
 8011cee:	3718      	adds	r7, #24
 8011cf0:	46bd      	mov	sp, r7
 8011cf2:	bd80      	pop	{r7, pc}

08011cf4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011cf4:	b580      	push	{r7, lr}
 8011cf6:	b08e      	sub	sp, #56	; 0x38
 8011cf8:	af00      	add	r7, sp, #0
 8011cfa:	60f8      	str	r0, [r7, #12]
 8011cfc:	60b9      	str	r1, [r7, #8]
 8011cfe:	607a      	str	r2, [r7, #4]
 8011d00:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8011d02:	2300      	movs	r3, #0
 8011d04:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d109      	bne.n	8011d24 <xQueueGenericSend+0x30>
 8011d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d14:	f383 8811 	msr	BASEPRI, r3
 8011d18:	f3bf 8f6f 	isb	sy
 8011d1c:	f3bf 8f4f 	dsb	sy
 8011d20:	62bb      	str	r3, [r7, #40]	; 0x28
 8011d22:	e7fe      	b.n	8011d22 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011d24:	68bb      	ldr	r3, [r7, #8]
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d103      	bne.n	8011d32 <xQueueGenericSend+0x3e>
 8011d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d101      	bne.n	8011d36 <xQueueGenericSend+0x42>
 8011d32:	2301      	movs	r3, #1
 8011d34:	e000      	b.n	8011d38 <xQueueGenericSend+0x44>
 8011d36:	2300      	movs	r3, #0
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d109      	bne.n	8011d50 <xQueueGenericSend+0x5c>
 8011d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d40:	f383 8811 	msr	BASEPRI, r3
 8011d44:	f3bf 8f6f 	isb	sy
 8011d48:	f3bf 8f4f 	dsb	sy
 8011d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8011d4e:	e7fe      	b.n	8011d4e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011d50:	683b      	ldr	r3, [r7, #0]
 8011d52:	2b02      	cmp	r3, #2
 8011d54:	d103      	bne.n	8011d5e <xQueueGenericSend+0x6a>
 8011d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011d5a:	2b01      	cmp	r3, #1
 8011d5c:	d101      	bne.n	8011d62 <xQueueGenericSend+0x6e>
 8011d5e:	2301      	movs	r3, #1
 8011d60:	e000      	b.n	8011d64 <xQueueGenericSend+0x70>
 8011d62:	2300      	movs	r3, #0
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d109      	bne.n	8011d7c <xQueueGenericSend+0x88>
 8011d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d6c:	f383 8811 	msr	BASEPRI, r3
 8011d70:	f3bf 8f6f 	isb	sy
 8011d74:	f3bf 8f4f 	dsb	sy
 8011d78:	623b      	str	r3, [r7, #32]
 8011d7a:	e7fe      	b.n	8011d7a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011d7c:	f001 fb72 	bl	8013464 <xTaskGetSchedulerState>
 8011d80:	4603      	mov	r3, r0
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d102      	bne.n	8011d8c <xQueueGenericSend+0x98>
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d101      	bne.n	8011d90 <xQueueGenericSend+0x9c>
 8011d8c:	2301      	movs	r3, #1
 8011d8e:	e000      	b.n	8011d92 <xQueueGenericSend+0x9e>
 8011d90:	2300      	movs	r3, #0
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d109      	bne.n	8011daa <xQueueGenericSend+0xb6>
 8011d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d9a:	f383 8811 	msr	BASEPRI, r3
 8011d9e:	f3bf 8f6f 	isb	sy
 8011da2:	f3bf 8f4f 	dsb	sy
 8011da6:	61fb      	str	r3, [r7, #28]
 8011da8:	e7fe      	b.n	8011da8 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011daa:	f002 f935 	bl	8014018 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011db0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011db6:	429a      	cmp	r2, r3
 8011db8:	d302      	bcc.n	8011dc0 <xQueueGenericSend+0xcc>
 8011dba:	683b      	ldr	r3, [r7, #0]
 8011dbc:	2b02      	cmp	r3, #2
 8011dbe:	d129      	bne.n	8011e14 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011dc0:	683a      	ldr	r2, [r7, #0]
 8011dc2:	68b9      	ldr	r1, [r7, #8]
 8011dc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011dc6:	f000 fba8 	bl	801251a <prvCopyDataToQueue>
 8011dca:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d010      	beq.n	8011df6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dd6:	3324      	adds	r3, #36	; 0x24
 8011dd8:	4618      	mov	r0, r3
 8011dda:	f001 f97b 	bl	80130d4 <xTaskRemoveFromEventList>
 8011dde:	4603      	mov	r3, r0
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d013      	beq.n	8011e0c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011de4:	4b3f      	ldr	r3, [pc, #252]	; (8011ee4 <xQueueGenericSend+0x1f0>)
 8011de6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011dea:	601a      	str	r2, [r3, #0]
 8011dec:	f3bf 8f4f 	dsb	sy
 8011df0:	f3bf 8f6f 	isb	sy
 8011df4:	e00a      	b.n	8011e0c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8011df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d007      	beq.n	8011e0c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011dfc:	4b39      	ldr	r3, [pc, #228]	; (8011ee4 <xQueueGenericSend+0x1f0>)
 8011dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011e02:	601a      	str	r2, [r3, #0]
 8011e04:	f3bf 8f4f 	dsb	sy
 8011e08:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011e0c:	f002 f932 	bl	8014074 <vPortExitCritical>
				return pdPASS;
 8011e10:	2301      	movs	r3, #1
 8011e12:	e063      	b.n	8011edc <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d103      	bne.n	8011e22 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011e1a:	f002 f92b 	bl	8014074 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011e1e:	2300      	movs	r3, #0
 8011e20:	e05c      	b.n	8011edc <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d106      	bne.n	8011e36 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011e28:	f107 0314 	add.w	r3, r7, #20
 8011e2c:	4618      	mov	r0, r3
 8011e2e:	f001 f9b3 	bl	8013198 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011e32:	2301      	movs	r3, #1
 8011e34:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011e36:	f002 f91d 	bl	8014074 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011e3a:	f000 ff0f 	bl	8012c5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011e3e:	f002 f8eb 	bl	8014018 <vPortEnterCritical>
 8011e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011e48:	b25b      	sxtb	r3, r3
 8011e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e4e:	d103      	bne.n	8011e58 <xQueueGenericSend+0x164>
 8011e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e52:	2200      	movs	r2, #0
 8011e54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011e5e:	b25b      	sxtb	r3, r3
 8011e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e64:	d103      	bne.n	8011e6e <xQueueGenericSend+0x17a>
 8011e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e68:	2200      	movs	r2, #0
 8011e6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011e6e:	f002 f901 	bl	8014074 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011e72:	1d3a      	adds	r2, r7, #4
 8011e74:	f107 0314 	add.w	r3, r7, #20
 8011e78:	4611      	mov	r1, r2
 8011e7a:	4618      	mov	r0, r3
 8011e7c:	f001 f9a2 	bl	80131c4 <xTaskCheckForTimeOut>
 8011e80:	4603      	mov	r3, r0
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d124      	bne.n	8011ed0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011e86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011e88:	f000 fc3f 	bl	801270a <prvIsQueueFull>
 8011e8c:	4603      	mov	r3, r0
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d018      	beq.n	8011ec4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e94:	3310      	adds	r3, #16
 8011e96:	687a      	ldr	r2, [r7, #4]
 8011e98:	4611      	mov	r1, r2
 8011e9a:	4618      	mov	r0, r3
 8011e9c:	f001 f8cc 	bl	8013038 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011ea0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011ea2:	f000 fbca 	bl	801263a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8011ea6:	f000 fee7 	bl	8012c78 <xTaskResumeAll>
 8011eaa:	4603      	mov	r3, r0
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	f47f af7c 	bne.w	8011daa <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8011eb2:	4b0c      	ldr	r3, [pc, #48]	; (8011ee4 <xQueueGenericSend+0x1f0>)
 8011eb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011eb8:	601a      	str	r2, [r3, #0]
 8011eba:	f3bf 8f4f 	dsb	sy
 8011ebe:	f3bf 8f6f 	isb	sy
 8011ec2:	e772      	b.n	8011daa <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011ec4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011ec6:	f000 fbb8 	bl	801263a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011eca:	f000 fed5 	bl	8012c78 <xTaskResumeAll>
 8011ece:	e76c      	b.n	8011daa <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011ed0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011ed2:	f000 fbb2 	bl	801263a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011ed6:	f000 fecf 	bl	8012c78 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8011eda:	2300      	movs	r3, #0
		}
	}
}
 8011edc:	4618      	mov	r0, r3
 8011ede:	3738      	adds	r7, #56	; 0x38
 8011ee0:	46bd      	mov	sp, r7
 8011ee2:	bd80      	pop	{r7, pc}
 8011ee4:	e000ed04 	.word	0xe000ed04

08011ee8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8011ee8:	b580      	push	{r7, lr}
 8011eea:	b08e      	sub	sp, #56	; 0x38
 8011eec:	af00      	add	r7, sp, #0
 8011eee:	60f8      	str	r0, [r7, #12]
 8011ef0:	60b9      	str	r1, [r7, #8]
 8011ef2:	607a      	str	r2, [r7, #4]
 8011ef4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d109      	bne.n	8011f14 <xQueueGenericSendFromISR+0x2c>
 8011f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f04:	f383 8811 	msr	BASEPRI, r3
 8011f08:	f3bf 8f6f 	isb	sy
 8011f0c:	f3bf 8f4f 	dsb	sy
 8011f10:	627b      	str	r3, [r7, #36]	; 0x24
 8011f12:	e7fe      	b.n	8011f12 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011f14:	68bb      	ldr	r3, [r7, #8]
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d103      	bne.n	8011f22 <xQueueGenericSendFromISR+0x3a>
 8011f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d101      	bne.n	8011f26 <xQueueGenericSendFromISR+0x3e>
 8011f22:	2301      	movs	r3, #1
 8011f24:	e000      	b.n	8011f28 <xQueueGenericSendFromISR+0x40>
 8011f26:	2300      	movs	r3, #0
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d109      	bne.n	8011f40 <xQueueGenericSendFromISR+0x58>
 8011f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f30:	f383 8811 	msr	BASEPRI, r3
 8011f34:	f3bf 8f6f 	isb	sy
 8011f38:	f3bf 8f4f 	dsb	sy
 8011f3c:	623b      	str	r3, [r7, #32]
 8011f3e:	e7fe      	b.n	8011f3e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011f40:	683b      	ldr	r3, [r7, #0]
 8011f42:	2b02      	cmp	r3, #2
 8011f44:	d103      	bne.n	8011f4e <xQueueGenericSendFromISR+0x66>
 8011f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011f4a:	2b01      	cmp	r3, #1
 8011f4c:	d101      	bne.n	8011f52 <xQueueGenericSendFromISR+0x6a>
 8011f4e:	2301      	movs	r3, #1
 8011f50:	e000      	b.n	8011f54 <xQueueGenericSendFromISR+0x6c>
 8011f52:	2300      	movs	r3, #0
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d109      	bne.n	8011f6c <xQueueGenericSendFromISR+0x84>
 8011f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f5c:	f383 8811 	msr	BASEPRI, r3
 8011f60:	f3bf 8f6f 	isb	sy
 8011f64:	f3bf 8f4f 	dsb	sy
 8011f68:	61fb      	str	r3, [r7, #28]
 8011f6a:	e7fe      	b.n	8011f6a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011f6c:	f002 f90e 	bl	801418c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011f70:	f3ef 8211 	mrs	r2, BASEPRI
 8011f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f78:	f383 8811 	msr	BASEPRI, r3
 8011f7c:	f3bf 8f6f 	isb	sy
 8011f80:	f3bf 8f4f 	dsb	sy
 8011f84:	61ba      	str	r2, [r7, #24]
 8011f86:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011f88:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011f94:	429a      	cmp	r2, r3
 8011f96:	d302      	bcc.n	8011f9e <xQueueGenericSendFromISR+0xb6>
 8011f98:	683b      	ldr	r3, [r7, #0]
 8011f9a:	2b02      	cmp	r3, #2
 8011f9c:	d12c      	bne.n	8011ff8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fa0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011fa4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011fa8:	683a      	ldr	r2, [r7, #0]
 8011faa:	68b9      	ldr	r1, [r7, #8]
 8011fac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011fae:	f000 fab4 	bl	801251a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011fb2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8011fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fba:	d112      	bne.n	8011fe2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d016      	beq.n	8011ff2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fc6:	3324      	adds	r3, #36	; 0x24
 8011fc8:	4618      	mov	r0, r3
 8011fca:	f001 f883 	bl	80130d4 <xTaskRemoveFromEventList>
 8011fce:	4603      	mov	r3, r0
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d00e      	beq.n	8011ff2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d00b      	beq.n	8011ff2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	2201      	movs	r2, #1
 8011fde:	601a      	str	r2, [r3, #0]
 8011fe0:	e007      	b.n	8011ff2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011fe2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011fe6:	3301      	adds	r3, #1
 8011fe8:	b2db      	uxtb	r3, r3
 8011fea:	b25a      	sxtb	r2, r3
 8011fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011ff2:	2301      	movs	r3, #1
 8011ff4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8011ff6:	e001      	b.n	8011ffc <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011ff8:	2300      	movs	r3, #0
 8011ffa:	637b      	str	r3, [r7, #52]	; 0x34
 8011ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ffe:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012000:	693b      	ldr	r3, [r7, #16]
 8012002:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012008:	4618      	mov	r0, r3
 801200a:	3738      	adds	r7, #56	; 0x38
 801200c:	46bd      	mov	sp, r7
 801200e:	bd80      	pop	{r7, pc}

08012010 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012010:	b580      	push	{r7, lr}
 8012012:	b08e      	sub	sp, #56	; 0x38
 8012014:	af00      	add	r7, sp, #0
 8012016:	6078      	str	r0, [r7, #4]
 8012018:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801201e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012020:	2b00      	cmp	r3, #0
 8012022:	d109      	bne.n	8012038 <xQueueGiveFromISR+0x28>
	__asm volatile
 8012024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012028:	f383 8811 	msr	BASEPRI, r3
 801202c:	f3bf 8f6f 	isb	sy
 8012030:	f3bf 8f4f 	dsb	sy
 8012034:	623b      	str	r3, [r7, #32]
 8012036:	e7fe      	b.n	8012036 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801203a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801203c:	2b00      	cmp	r3, #0
 801203e:	d009      	beq.n	8012054 <xQueueGiveFromISR+0x44>
 8012040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012044:	f383 8811 	msr	BASEPRI, r3
 8012048:	f3bf 8f6f 	isb	sy
 801204c:	f3bf 8f4f 	dsb	sy
 8012050:	61fb      	str	r3, [r7, #28]
 8012052:	e7fe      	b.n	8012052 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8012054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	2b00      	cmp	r3, #0
 801205a:	d103      	bne.n	8012064 <xQueueGiveFromISR+0x54>
 801205c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801205e:	685b      	ldr	r3, [r3, #4]
 8012060:	2b00      	cmp	r3, #0
 8012062:	d101      	bne.n	8012068 <xQueueGiveFromISR+0x58>
 8012064:	2301      	movs	r3, #1
 8012066:	e000      	b.n	801206a <xQueueGiveFromISR+0x5a>
 8012068:	2300      	movs	r3, #0
 801206a:	2b00      	cmp	r3, #0
 801206c:	d109      	bne.n	8012082 <xQueueGiveFromISR+0x72>
 801206e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012072:	f383 8811 	msr	BASEPRI, r3
 8012076:	f3bf 8f6f 	isb	sy
 801207a:	f3bf 8f4f 	dsb	sy
 801207e:	61bb      	str	r3, [r7, #24]
 8012080:	e7fe      	b.n	8012080 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012082:	f002 f883 	bl	801418c <vPortValidateInterruptPriority>
	__asm volatile
 8012086:	f3ef 8211 	mrs	r2, BASEPRI
 801208a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801208e:	f383 8811 	msr	BASEPRI, r3
 8012092:	f3bf 8f6f 	isb	sy
 8012096:	f3bf 8f4f 	dsb	sy
 801209a:	617a      	str	r2, [r7, #20]
 801209c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801209e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80120a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80120a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80120a6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80120a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80120ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80120ae:	429a      	cmp	r2, r3
 80120b0:	d22b      	bcs.n	801210a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80120b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80120b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80120bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120be:	1c5a      	adds	r2, r3, #1
 80120c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120c2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80120c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80120c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120cc:	d112      	bne.n	80120f4 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80120ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	d016      	beq.n	8012104 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80120d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120d8:	3324      	adds	r3, #36	; 0x24
 80120da:	4618      	mov	r0, r3
 80120dc:	f000 fffa 	bl	80130d4 <xTaskRemoveFromEventList>
 80120e0:	4603      	mov	r3, r0
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d00e      	beq.n	8012104 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80120e6:	683b      	ldr	r3, [r7, #0]
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d00b      	beq.n	8012104 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80120ec:	683b      	ldr	r3, [r7, #0]
 80120ee:	2201      	movs	r2, #1
 80120f0:	601a      	str	r2, [r3, #0]
 80120f2:	e007      	b.n	8012104 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80120f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80120f8:	3301      	adds	r3, #1
 80120fa:	b2db      	uxtb	r3, r3
 80120fc:	b25a      	sxtb	r2, r3
 80120fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012100:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012104:	2301      	movs	r3, #1
 8012106:	637b      	str	r3, [r7, #52]	; 0x34
 8012108:	e001      	b.n	801210e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801210a:	2300      	movs	r3, #0
 801210c:	637b      	str	r3, [r7, #52]	; 0x34
 801210e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012110:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8012112:	68fb      	ldr	r3, [r7, #12]
 8012114:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801211a:	4618      	mov	r0, r3
 801211c:	3738      	adds	r7, #56	; 0x38
 801211e:	46bd      	mov	sp, r7
 8012120:	bd80      	pop	{r7, pc}
	...

08012124 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8012124:	b580      	push	{r7, lr}
 8012126:	b08c      	sub	sp, #48	; 0x30
 8012128:	af00      	add	r7, sp, #0
 801212a:	60f8      	str	r0, [r7, #12]
 801212c:	60b9      	str	r1, [r7, #8]
 801212e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8012130:	2300      	movs	r3, #0
 8012132:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8012134:	68fb      	ldr	r3, [r7, #12]
 8012136:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801213a:	2b00      	cmp	r3, #0
 801213c:	d109      	bne.n	8012152 <xQueueReceive+0x2e>
	__asm volatile
 801213e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012142:	f383 8811 	msr	BASEPRI, r3
 8012146:	f3bf 8f6f 	isb	sy
 801214a:	f3bf 8f4f 	dsb	sy
 801214e:	623b      	str	r3, [r7, #32]
 8012150:	e7fe      	b.n	8012150 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012152:	68bb      	ldr	r3, [r7, #8]
 8012154:	2b00      	cmp	r3, #0
 8012156:	d103      	bne.n	8012160 <xQueueReceive+0x3c>
 8012158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801215a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801215c:	2b00      	cmp	r3, #0
 801215e:	d101      	bne.n	8012164 <xQueueReceive+0x40>
 8012160:	2301      	movs	r3, #1
 8012162:	e000      	b.n	8012166 <xQueueReceive+0x42>
 8012164:	2300      	movs	r3, #0
 8012166:	2b00      	cmp	r3, #0
 8012168:	d109      	bne.n	801217e <xQueueReceive+0x5a>
 801216a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801216e:	f383 8811 	msr	BASEPRI, r3
 8012172:	f3bf 8f6f 	isb	sy
 8012176:	f3bf 8f4f 	dsb	sy
 801217a:	61fb      	str	r3, [r7, #28]
 801217c:	e7fe      	b.n	801217c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801217e:	f001 f971 	bl	8013464 <xTaskGetSchedulerState>
 8012182:	4603      	mov	r3, r0
 8012184:	2b00      	cmp	r3, #0
 8012186:	d102      	bne.n	801218e <xQueueReceive+0x6a>
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	2b00      	cmp	r3, #0
 801218c:	d101      	bne.n	8012192 <xQueueReceive+0x6e>
 801218e:	2301      	movs	r3, #1
 8012190:	e000      	b.n	8012194 <xQueueReceive+0x70>
 8012192:	2300      	movs	r3, #0
 8012194:	2b00      	cmp	r3, #0
 8012196:	d109      	bne.n	80121ac <xQueueReceive+0x88>
 8012198:	f04f 0350 	mov.w	r3, #80	; 0x50
 801219c:	f383 8811 	msr	BASEPRI, r3
 80121a0:	f3bf 8f6f 	isb	sy
 80121a4:	f3bf 8f4f 	dsb	sy
 80121a8:	61bb      	str	r3, [r7, #24]
 80121aa:	e7fe      	b.n	80121aa <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80121ac:	f001 ff34 	bl	8014018 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80121b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121b4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80121b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d01f      	beq.n	80121fc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80121bc:	68b9      	ldr	r1, [r7, #8]
 80121be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80121c0:	f000 fa15 	bl	80125ee <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80121c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121c6:	1e5a      	subs	r2, r3, #1
 80121c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121ca:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80121cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121ce:	691b      	ldr	r3, [r3, #16]
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d00f      	beq.n	80121f4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80121d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121d6:	3310      	adds	r3, #16
 80121d8:	4618      	mov	r0, r3
 80121da:	f000 ff7b 	bl	80130d4 <xTaskRemoveFromEventList>
 80121de:	4603      	mov	r3, r0
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d007      	beq.n	80121f4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80121e4:	4b3c      	ldr	r3, [pc, #240]	; (80122d8 <xQueueReceive+0x1b4>)
 80121e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80121ea:	601a      	str	r2, [r3, #0]
 80121ec:	f3bf 8f4f 	dsb	sy
 80121f0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80121f4:	f001 ff3e 	bl	8014074 <vPortExitCritical>
				return pdPASS;
 80121f8:	2301      	movs	r3, #1
 80121fa:	e069      	b.n	80122d0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d103      	bne.n	801220a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012202:	f001 ff37 	bl	8014074 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012206:	2300      	movs	r3, #0
 8012208:	e062      	b.n	80122d0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 801220a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801220c:	2b00      	cmp	r3, #0
 801220e:	d106      	bne.n	801221e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012210:	f107 0310 	add.w	r3, r7, #16
 8012214:	4618      	mov	r0, r3
 8012216:	f000 ffbf 	bl	8013198 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801221a:	2301      	movs	r3, #1
 801221c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801221e:	f001 ff29 	bl	8014074 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012222:	f000 fd1b 	bl	8012c5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012226:	f001 fef7 	bl	8014018 <vPortEnterCritical>
 801222a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801222c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012230:	b25b      	sxtb	r3, r3
 8012232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012236:	d103      	bne.n	8012240 <xQueueReceive+0x11c>
 8012238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801223a:	2200      	movs	r2, #0
 801223c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012242:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012246:	b25b      	sxtb	r3, r3
 8012248:	f1b3 3fff 	cmp.w	r3, #4294967295
 801224c:	d103      	bne.n	8012256 <xQueueReceive+0x132>
 801224e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012250:	2200      	movs	r2, #0
 8012252:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012256:	f001 ff0d 	bl	8014074 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801225a:	1d3a      	adds	r2, r7, #4
 801225c:	f107 0310 	add.w	r3, r7, #16
 8012260:	4611      	mov	r1, r2
 8012262:	4618      	mov	r0, r3
 8012264:	f000 ffae 	bl	80131c4 <xTaskCheckForTimeOut>
 8012268:	4603      	mov	r3, r0
 801226a:	2b00      	cmp	r3, #0
 801226c:	d123      	bne.n	80122b6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801226e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012270:	f000 fa35 	bl	80126de <prvIsQueueEmpty>
 8012274:	4603      	mov	r3, r0
 8012276:	2b00      	cmp	r3, #0
 8012278:	d017      	beq.n	80122aa <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801227a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801227c:	3324      	adds	r3, #36	; 0x24
 801227e:	687a      	ldr	r2, [r7, #4]
 8012280:	4611      	mov	r1, r2
 8012282:	4618      	mov	r0, r3
 8012284:	f000 fed8 	bl	8013038 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012288:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801228a:	f000 f9d6 	bl	801263a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801228e:	f000 fcf3 	bl	8012c78 <xTaskResumeAll>
 8012292:	4603      	mov	r3, r0
 8012294:	2b00      	cmp	r3, #0
 8012296:	d189      	bne.n	80121ac <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8012298:	4b0f      	ldr	r3, [pc, #60]	; (80122d8 <xQueueReceive+0x1b4>)
 801229a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801229e:	601a      	str	r2, [r3, #0]
 80122a0:	f3bf 8f4f 	dsb	sy
 80122a4:	f3bf 8f6f 	isb	sy
 80122a8:	e780      	b.n	80121ac <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80122aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80122ac:	f000 f9c5 	bl	801263a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80122b0:	f000 fce2 	bl	8012c78 <xTaskResumeAll>
 80122b4:	e77a      	b.n	80121ac <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80122b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80122b8:	f000 f9bf 	bl	801263a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80122bc:	f000 fcdc 	bl	8012c78 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80122c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80122c2:	f000 fa0c 	bl	80126de <prvIsQueueEmpty>
 80122c6:	4603      	mov	r3, r0
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	f43f af6f 	beq.w	80121ac <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80122ce:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80122d0:	4618      	mov	r0, r3
 80122d2:	3730      	adds	r7, #48	; 0x30
 80122d4:	46bd      	mov	sp, r7
 80122d6:	bd80      	pop	{r7, pc}
 80122d8:	e000ed04 	.word	0xe000ed04

080122dc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80122dc:	b580      	push	{r7, lr}
 80122de:	b08e      	sub	sp, #56	; 0x38
 80122e0:	af00      	add	r7, sp, #0
 80122e2:	6078      	str	r0, [r7, #4]
 80122e4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80122e6:	2300      	movs	r3, #0
 80122e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80122ee:	2300      	movs	r3, #0
 80122f0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80122f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d109      	bne.n	801230c <xQueueSemaphoreTake+0x30>
 80122f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122fc:	f383 8811 	msr	BASEPRI, r3
 8012300:	f3bf 8f6f 	isb	sy
 8012304:	f3bf 8f4f 	dsb	sy
 8012308:	623b      	str	r3, [r7, #32]
 801230a:	e7fe      	b.n	801230a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801230c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801230e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012310:	2b00      	cmp	r3, #0
 8012312:	d009      	beq.n	8012328 <xQueueSemaphoreTake+0x4c>
 8012314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012318:	f383 8811 	msr	BASEPRI, r3
 801231c:	f3bf 8f6f 	isb	sy
 8012320:	f3bf 8f4f 	dsb	sy
 8012324:	61fb      	str	r3, [r7, #28]
 8012326:	e7fe      	b.n	8012326 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012328:	f001 f89c 	bl	8013464 <xTaskGetSchedulerState>
 801232c:	4603      	mov	r3, r0
 801232e:	2b00      	cmp	r3, #0
 8012330:	d102      	bne.n	8012338 <xQueueSemaphoreTake+0x5c>
 8012332:	683b      	ldr	r3, [r7, #0]
 8012334:	2b00      	cmp	r3, #0
 8012336:	d101      	bne.n	801233c <xQueueSemaphoreTake+0x60>
 8012338:	2301      	movs	r3, #1
 801233a:	e000      	b.n	801233e <xQueueSemaphoreTake+0x62>
 801233c:	2300      	movs	r3, #0
 801233e:	2b00      	cmp	r3, #0
 8012340:	d109      	bne.n	8012356 <xQueueSemaphoreTake+0x7a>
 8012342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012346:	f383 8811 	msr	BASEPRI, r3
 801234a:	f3bf 8f6f 	isb	sy
 801234e:	f3bf 8f4f 	dsb	sy
 8012352:	61bb      	str	r3, [r7, #24]
 8012354:	e7fe      	b.n	8012354 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8012356:	f001 fe5f 	bl	8014018 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801235a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801235c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801235e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8012360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012362:	2b00      	cmp	r3, #0
 8012364:	d024      	beq.n	80123b0 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8012366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012368:	1e5a      	subs	r2, r3, #1
 801236a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801236c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801236e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012370:	681b      	ldr	r3, [r3, #0]
 8012372:	2b00      	cmp	r3, #0
 8012374:	d104      	bne.n	8012380 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8012376:	f001 f9f1 	bl	801375c <pvTaskIncrementMutexHeldCount>
 801237a:	4602      	mov	r2, r0
 801237c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801237e:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012382:	691b      	ldr	r3, [r3, #16]
 8012384:	2b00      	cmp	r3, #0
 8012386:	d00f      	beq.n	80123a8 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801238a:	3310      	adds	r3, #16
 801238c:	4618      	mov	r0, r3
 801238e:	f000 fea1 	bl	80130d4 <xTaskRemoveFromEventList>
 8012392:	4603      	mov	r3, r0
 8012394:	2b00      	cmp	r3, #0
 8012396:	d007      	beq.n	80123a8 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012398:	4b53      	ldr	r3, [pc, #332]	; (80124e8 <xQueueSemaphoreTake+0x20c>)
 801239a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801239e:	601a      	str	r2, [r3, #0]
 80123a0:	f3bf 8f4f 	dsb	sy
 80123a4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80123a8:	f001 fe64 	bl	8014074 <vPortExitCritical>
				return pdPASS;
 80123ac:	2301      	movs	r3, #1
 80123ae:	e096      	b.n	80124de <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80123b0:	683b      	ldr	r3, [r7, #0]
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d110      	bne.n	80123d8 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80123b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d009      	beq.n	80123d0 <xQueueSemaphoreTake+0xf4>
 80123bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123c0:	f383 8811 	msr	BASEPRI, r3
 80123c4:	f3bf 8f6f 	isb	sy
 80123c8:	f3bf 8f4f 	dsb	sy
 80123cc:	617b      	str	r3, [r7, #20]
 80123ce:	e7fe      	b.n	80123ce <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80123d0:	f001 fe50 	bl	8014074 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80123d4:	2300      	movs	r3, #0
 80123d6:	e082      	b.n	80124de <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80123d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d106      	bne.n	80123ec <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80123de:	f107 030c 	add.w	r3, r7, #12
 80123e2:	4618      	mov	r0, r3
 80123e4:	f000 fed8 	bl	8013198 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80123e8:	2301      	movs	r3, #1
 80123ea:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80123ec:	f001 fe42 	bl	8014074 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80123f0:	f000 fc34 	bl	8012c5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80123f4:	f001 fe10 	bl	8014018 <vPortEnterCritical>
 80123f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80123fe:	b25b      	sxtb	r3, r3
 8012400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012404:	d103      	bne.n	801240e <xQueueSemaphoreTake+0x132>
 8012406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012408:	2200      	movs	r2, #0
 801240a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801240e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012410:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012414:	b25b      	sxtb	r3, r3
 8012416:	f1b3 3fff 	cmp.w	r3, #4294967295
 801241a:	d103      	bne.n	8012424 <xQueueSemaphoreTake+0x148>
 801241c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801241e:	2200      	movs	r2, #0
 8012420:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012424:	f001 fe26 	bl	8014074 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012428:	463a      	mov	r2, r7
 801242a:	f107 030c 	add.w	r3, r7, #12
 801242e:	4611      	mov	r1, r2
 8012430:	4618      	mov	r0, r3
 8012432:	f000 fec7 	bl	80131c4 <xTaskCheckForTimeOut>
 8012436:	4603      	mov	r3, r0
 8012438:	2b00      	cmp	r3, #0
 801243a:	d132      	bne.n	80124a2 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801243c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801243e:	f000 f94e 	bl	80126de <prvIsQueueEmpty>
 8012442:	4603      	mov	r3, r0
 8012444:	2b00      	cmp	r3, #0
 8012446:	d026      	beq.n	8012496 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801244a:	681b      	ldr	r3, [r3, #0]
 801244c:	2b00      	cmp	r3, #0
 801244e:	d109      	bne.n	8012464 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8012450:	f001 fde2 	bl	8014018 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8012454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012456:	685b      	ldr	r3, [r3, #4]
 8012458:	4618      	mov	r0, r3
 801245a:	f001 f821 	bl	80134a0 <xTaskPriorityInherit>
 801245e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8012460:	f001 fe08 	bl	8014074 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012466:	3324      	adds	r3, #36	; 0x24
 8012468:	683a      	ldr	r2, [r7, #0]
 801246a:	4611      	mov	r1, r2
 801246c:	4618      	mov	r0, r3
 801246e:	f000 fde3 	bl	8013038 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012472:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012474:	f000 f8e1 	bl	801263a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012478:	f000 fbfe 	bl	8012c78 <xTaskResumeAll>
 801247c:	4603      	mov	r3, r0
 801247e:	2b00      	cmp	r3, #0
 8012480:	f47f af69 	bne.w	8012356 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8012484:	4b18      	ldr	r3, [pc, #96]	; (80124e8 <xQueueSemaphoreTake+0x20c>)
 8012486:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801248a:	601a      	str	r2, [r3, #0]
 801248c:	f3bf 8f4f 	dsb	sy
 8012490:	f3bf 8f6f 	isb	sy
 8012494:	e75f      	b.n	8012356 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8012496:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012498:	f000 f8cf 	bl	801263a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801249c:	f000 fbec 	bl	8012c78 <xTaskResumeAll>
 80124a0:	e759      	b.n	8012356 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80124a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80124a4:	f000 f8c9 	bl	801263a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80124a8:	f000 fbe6 	bl	8012c78 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80124ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80124ae:	f000 f916 	bl	80126de <prvIsQueueEmpty>
 80124b2:	4603      	mov	r3, r0
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	f43f af4e 	beq.w	8012356 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80124ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d00d      	beq.n	80124dc <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80124c0:	f001 fdaa 	bl	8014018 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80124c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80124c6:	f000 f811 	bl	80124ec <prvGetDisinheritPriorityAfterTimeout>
 80124ca:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80124cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124ce:	685b      	ldr	r3, [r3, #4]
 80124d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80124d2:	4618      	mov	r0, r3
 80124d4:	f001 f8be 	bl	8013654 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80124d8:	f001 fdcc 	bl	8014074 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80124dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80124de:	4618      	mov	r0, r3
 80124e0:	3738      	adds	r7, #56	; 0x38
 80124e2:	46bd      	mov	sp, r7
 80124e4:	bd80      	pop	{r7, pc}
 80124e6:	bf00      	nop
 80124e8:	e000ed04 	.word	0xe000ed04

080124ec <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80124ec:	b480      	push	{r7}
 80124ee:	b085      	sub	sp, #20
 80124f0:	af00      	add	r7, sp, #0
 80124f2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d006      	beq.n	801250a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8012506:	60fb      	str	r3, [r7, #12]
 8012508:	e001      	b.n	801250e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801250a:	2300      	movs	r3, #0
 801250c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801250e:	68fb      	ldr	r3, [r7, #12]
	}
 8012510:	4618      	mov	r0, r3
 8012512:	3714      	adds	r7, #20
 8012514:	46bd      	mov	sp, r7
 8012516:	bc80      	pop	{r7}
 8012518:	4770      	bx	lr

0801251a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801251a:	b580      	push	{r7, lr}
 801251c:	b086      	sub	sp, #24
 801251e:	af00      	add	r7, sp, #0
 8012520:	60f8      	str	r0, [r7, #12]
 8012522:	60b9      	str	r1, [r7, #8]
 8012524:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8012526:	2300      	movs	r3, #0
 8012528:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801252a:	68fb      	ldr	r3, [r7, #12]
 801252c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801252e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012530:	68fb      	ldr	r3, [r7, #12]
 8012532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012534:	2b00      	cmp	r3, #0
 8012536:	d10d      	bne.n	8012554 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	681b      	ldr	r3, [r3, #0]
 801253c:	2b00      	cmp	r3, #0
 801253e:	d14d      	bne.n	80125dc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	685b      	ldr	r3, [r3, #4]
 8012544:	4618      	mov	r0, r3
 8012546:	f001 f819 	bl	801357c <xTaskPriorityDisinherit>
 801254a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 801254c:	68fb      	ldr	r3, [r7, #12]
 801254e:	2200      	movs	r2, #0
 8012550:	605a      	str	r2, [r3, #4]
 8012552:	e043      	b.n	80125dc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	2b00      	cmp	r3, #0
 8012558:	d119      	bne.n	801258e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 801255a:	68fb      	ldr	r3, [r7, #12]
 801255c:	6898      	ldr	r0, [r3, #8]
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012562:	461a      	mov	r2, r3
 8012564:	68b9      	ldr	r1, [r7, #8]
 8012566:	f002 fc99 	bl	8014e9c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 801256a:	68fb      	ldr	r3, [r7, #12]
 801256c:	689a      	ldr	r2, [r3, #8]
 801256e:	68fb      	ldr	r3, [r7, #12]
 8012570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012572:	441a      	add	r2, r3
 8012574:	68fb      	ldr	r3, [r7, #12]
 8012576:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012578:	68fb      	ldr	r3, [r7, #12]
 801257a:	689a      	ldr	r2, [r3, #8]
 801257c:	68fb      	ldr	r3, [r7, #12]
 801257e:	685b      	ldr	r3, [r3, #4]
 8012580:	429a      	cmp	r2, r3
 8012582:	d32b      	bcc.n	80125dc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8012584:	68fb      	ldr	r3, [r7, #12]
 8012586:	681a      	ldr	r2, [r3, #0]
 8012588:	68fb      	ldr	r3, [r7, #12]
 801258a:	609a      	str	r2, [r3, #8]
 801258c:	e026      	b.n	80125dc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801258e:	68fb      	ldr	r3, [r7, #12]
 8012590:	68d8      	ldr	r0, [r3, #12]
 8012592:	68fb      	ldr	r3, [r7, #12]
 8012594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012596:	461a      	mov	r2, r3
 8012598:	68b9      	ldr	r1, [r7, #8]
 801259a:	f002 fc7f 	bl	8014e9c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 801259e:	68fb      	ldr	r3, [r7, #12]
 80125a0:	68da      	ldr	r2, [r3, #12]
 80125a2:	68fb      	ldr	r3, [r7, #12]
 80125a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80125a6:	425b      	negs	r3, r3
 80125a8:	441a      	add	r2, r3
 80125aa:	68fb      	ldr	r3, [r7, #12]
 80125ac:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80125ae:	68fb      	ldr	r3, [r7, #12]
 80125b0:	68da      	ldr	r2, [r3, #12]
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	429a      	cmp	r2, r3
 80125b8:	d207      	bcs.n	80125ca <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80125ba:	68fb      	ldr	r3, [r7, #12]
 80125bc:	685a      	ldr	r2, [r3, #4]
 80125be:	68fb      	ldr	r3, [r7, #12]
 80125c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80125c2:	425b      	negs	r3, r3
 80125c4:	441a      	add	r2, r3
 80125c6:	68fb      	ldr	r3, [r7, #12]
 80125c8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	2b02      	cmp	r3, #2
 80125ce:	d105      	bne.n	80125dc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80125d0:	693b      	ldr	r3, [r7, #16]
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	d002      	beq.n	80125dc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80125d6:	693b      	ldr	r3, [r7, #16]
 80125d8:	3b01      	subs	r3, #1
 80125da:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80125dc:	693b      	ldr	r3, [r7, #16]
 80125de:	1c5a      	adds	r2, r3, #1
 80125e0:	68fb      	ldr	r3, [r7, #12]
 80125e2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80125e4:	697b      	ldr	r3, [r7, #20]
}
 80125e6:	4618      	mov	r0, r3
 80125e8:	3718      	adds	r7, #24
 80125ea:	46bd      	mov	sp, r7
 80125ec:	bd80      	pop	{r7, pc}

080125ee <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80125ee:	b580      	push	{r7, lr}
 80125f0:	b082      	sub	sp, #8
 80125f2:	af00      	add	r7, sp, #0
 80125f4:	6078      	str	r0, [r7, #4]
 80125f6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d018      	beq.n	8012632 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	68da      	ldr	r2, [r3, #12]
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012608:	441a      	add	r2, r3
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	68da      	ldr	r2, [r3, #12]
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	685b      	ldr	r3, [r3, #4]
 8012616:	429a      	cmp	r2, r3
 8012618:	d303      	bcc.n	8012622 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	681a      	ldr	r2, [r3, #0]
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	68d9      	ldr	r1, [r3, #12]
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801262a:	461a      	mov	r2, r3
 801262c:	6838      	ldr	r0, [r7, #0]
 801262e:	f002 fc35 	bl	8014e9c <memcpy>
	}
}
 8012632:	bf00      	nop
 8012634:	3708      	adds	r7, #8
 8012636:	46bd      	mov	sp, r7
 8012638:	bd80      	pop	{r7, pc}

0801263a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801263a:	b580      	push	{r7, lr}
 801263c:	b084      	sub	sp, #16
 801263e:	af00      	add	r7, sp, #0
 8012640:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012642:	f001 fce9 	bl	8014018 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801264c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801264e:	e011      	b.n	8012674 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012654:	2b00      	cmp	r3, #0
 8012656:	d012      	beq.n	801267e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	3324      	adds	r3, #36	; 0x24
 801265c:	4618      	mov	r0, r3
 801265e:	f000 fd39 	bl	80130d4 <xTaskRemoveFromEventList>
 8012662:	4603      	mov	r3, r0
 8012664:	2b00      	cmp	r3, #0
 8012666:	d001      	beq.n	801266c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8012668:	f000 fe0c 	bl	8013284 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801266c:	7bfb      	ldrb	r3, [r7, #15]
 801266e:	3b01      	subs	r3, #1
 8012670:	b2db      	uxtb	r3, r3
 8012672:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012674:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012678:	2b00      	cmp	r3, #0
 801267a:	dce9      	bgt.n	8012650 <prvUnlockQueue+0x16>
 801267c:	e000      	b.n	8012680 <prvUnlockQueue+0x46>
					break;
 801267e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	22ff      	movs	r2, #255	; 0xff
 8012684:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8012688:	f001 fcf4 	bl	8014074 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801268c:	f001 fcc4 	bl	8014018 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012696:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012698:	e011      	b.n	80126be <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	691b      	ldr	r3, [r3, #16]
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d012      	beq.n	80126c8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	3310      	adds	r3, #16
 80126a6:	4618      	mov	r0, r3
 80126a8:	f000 fd14 	bl	80130d4 <xTaskRemoveFromEventList>
 80126ac:	4603      	mov	r3, r0
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d001      	beq.n	80126b6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80126b2:	f000 fde7 	bl	8013284 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80126b6:	7bbb      	ldrb	r3, [r7, #14]
 80126b8:	3b01      	subs	r3, #1
 80126ba:	b2db      	uxtb	r3, r3
 80126bc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80126be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	dce9      	bgt.n	801269a <prvUnlockQueue+0x60>
 80126c6:	e000      	b.n	80126ca <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80126c8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	22ff      	movs	r2, #255	; 0xff
 80126ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80126d2:	f001 fccf 	bl	8014074 <vPortExitCritical>
}
 80126d6:	bf00      	nop
 80126d8:	3710      	adds	r7, #16
 80126da:	46bd      	mov	sp, r7
 80126dc:	bd80      	pop	{r7, pc}

080126de <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80126de:	b580      	push	{r7, lr}
 80126e0:	b084      	sub	sp, #16
 80126e2:	af00      	add	r7, sp, #0
 80126e4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80126e6:	f001 fc97 	bl	8014018 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d102      	bne.n	80126f8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80126f2:	2301      	movs	r3, #1
 80126f4:	60fb      	str	r3, [r7, #12]
 80126f6:	e001      	b.n	80126fc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80126f8:	2300      	movs	r3, #0
 80126fa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80126fc:	f001 fcba 	bl	8014074 <vPortExitCritical>

	return xReturn;
 8012700:	68fb      	ldr	r3, [r7, #12]
}
 8012702:	4618      	mov	r0, r3
 8012704:	3710      	adds	r7, #16
 8012706:	46bd      	mov	sp, r7
 8012708:	bd80      	pop	{r7, pc}

0801270a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801270a:	b580      	push	{r7, lr}
 801270c:	b084      	sub	sp, #16
 801270e:	af00      	add	r7, sp, #0
 8012710:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012712:	f001 fc81 	bl	8014018 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801271e:	429a      	cmp	r2, r3
 8012720:	d102      	bne.n	8012728 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8012722:	2301      	movs	r3, #1
 8012724:	60fb      	str	r3, [r7, #12]
 8012726:	e001      	b.n	801272c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8012728:	2300      	movs	r3, #0
 801272a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801272c:	f001 fca2 	bl	8014074 <vPortExitCritical>

	return xReturn;
 8012730:	68fb      	ldr	r3, [r7, #12]
}
 8012732:	4618      	mov	r0, r3
 8012734:	3710      	adds	r7, #16
 8012736:	46bd      	mov	sp, r7
 8012738:	bd80      	pop	{r7, pc}
	...

0801273c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801273c:	b480      	push	{r7}
 801273e:	b085      	sub	sp, #20
 8012740:	af00      	add	r7, sp, #0
 8012742:	6078      	str	r0, [r7, #4]
 8012744:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012746:	2300      	movs	r3, #0
 8012748:	60fb      	str	r3, [r7, #12]
 801274a:	e014      	b.n	8012776 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801274c:	4a0e      	ldr	r2, [pc, #56]	; (8012788 <vQueueAddToRegistry+0x4c>)
 801274e:	68fb      	ldr	r3, [r7, #12]
 8012750:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8012754:	2b00      	cmp	r3, #0
 8012756:	d10b      	bne.n	8012770 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8012758:	490b      	ldr	r1, [pc, #44]	; (8012788 <vQueueAddToRegistry+0x4c>)
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	683a      	ldr	r2, [r7, #0]
 801275e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8012762:	4a09      	ldr	r2, [pc, #36]	; (8012788 <vQueueAddToRegistry+0x4c>)
 8012764:	68fb      	ldr	r3, [r7, #12]
 8012766:	00db      	lsls	r3, r3, #3
 8012768:	4413      	add	r3, r2
 801276a:	687a      	ldr	r2, [r7, #4]
 801276c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801276e:	e005      	b.n	801277c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012770:	68fb      	ldr	r3, [r7, #12]
 8012772:	3301      	adds	r3, #1
 8012774:	60fb      	str	r3, [r7, #12]
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	2b07      	cmp	r3, #7
 801277a:	d9e7      	bls.n	801274c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801277c:	bf00      	nop
 801277e:	3714      	adds	r7, #20
 8012780:	46bd      	mov	sp, r7
 8012782:	bc80      	pop	{r7}
 8012784:	4770      	bx	lr
 8012786:	bf00      	nop
 8012788:	20009664 	.word	0x20009664

0801278c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801278c:	b580      	push	{r7, lr}
 801278e:	b086      	sub	sp, #24
 8012790:	af00      	add	r7, sp, #0
 8012792:	60f8      	str	r0, [r7, #12]
 8012794:	60b9      	str	r1, [r7, #8]
 8012796:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8012798:	68fb      	ldr	r3, [r7, #12]
 801279a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801279c:	f001 fc3c 	bl	8014018 <vPortEnterCritical>
 80127a0:	697b      	ldr	r3, [r7, #20]
 80127a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80127a6:	b25b      	sxtb	r3, r3
 80127a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127ac:	d103      	bne.n	80127b6 <vQueueWaitForMessageRestricted+0x2a>
 80127ae:	697b      	ldr	r3, [r7, #20]
 80127b0:	2200      	movs	r2, #0
 80127b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80127b6:	697b      	ldr	r3, [r7, #20]
 80127b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80127bc:	b25b      	sxtb	r3, r3
 80127be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127c2:	d103      	bne.n	80127cc <vQueueWaitForMessageRestricted+0x40>
 80127c4:	697b      	ldr	r3, [r7, #20]
 80127c6:	2200      	movs	r2, #0
 80127c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80127cc:	f001 fc52 	bl	8014074 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80127d0:	697b      	ldr	r3, [r7, #20]
 80127d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d106      	bne.n	80127e6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80127d8:	697b      	ldr	r3, [r7, #20]
 80127da:	3324      	adds	r3, #36	; 0x24
 80127dc:	687a      	ldr	r2, [r7, #4]
 80127de:	68b9      	ldr	r1, [r7, #8]
 80127e0:	4618      	mov	r0, r3
 80127e2:	f000 fc4d 	bl	8013080 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80127e6:	6978      	ldr	r0, [r7, #20]
 80127e8:	f7ff ff27 	bl	801263a <prvUnlockQueue>
	}
 80127ec:	bf00      	nop
 80127ee:	3718      	adds	r7, #24
 80127f0:	46bd      	mov	sp, r7
 80127f2:	bd80      	pop	{r7, pc}

080127f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80127f4:	b580      	push	{r7, lr}
 80127f6:	b08e      	sub	sp, #56	; 0x38
 80127f8:	af04      	add	r7, sp, #16
 80127fa:	60f8      	str	r0, [r7, #12]
 80127fc:	60b9      	str	r1, [r7, #8]
 80127fe:	607a      	str	r2, [r7, #4]
 8012800:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8012802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012804:	2b00      	cmp	r3, #0
 8012806:	d109      	bne.n	801281c <xTaskCreateStatic+0x28>
 8012808:	f04f 0350 	mov.w	r3, #80	; 0x50
 801280c:	f383 8811 	msr	BASEPRI, r3
 8012810:	f3bf 8f6f 	isb	sy
 8012814:	f3bf 8f4f 	dsb	sy
 8012818:	623b      	str	r3, [r7, #32]
 801281a:	e7fe      	b.n	801281a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 801281c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801281e:	2b00      	cmp	r3, #0
 8012820:	d109      	bne.n	8012836 <xTaskCreateStatic+0x42>
 8012822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012826:	f383 8811 	msr	BASEPRI, r3
 801282a:	f3bf 8f6f 	isb	sy
 801282e:	f3bf 8f4f 	dsb	sy
 8012832:	61fb      	str	r3, [r7, #28]
 8012834:	e7fe      	b.n	8012834 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8012836:	2364      	movs	r3, #100	; 0x64
 8012838:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801283a:	693b      	ldr	r3, [r7, #16]
 801283c:	2b64      	cmp	r3, #100	; 0x64
 801283e:	d009      	beq.n	8012854 <xTaskCreateStatic+0x60>
 8012840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012844:	f383 8811 	msr	BASEPRI, r3
 8012848:	f3bf 8f6f 	isb	sy
 801284c:	f3bf 8f4f 	dsb	sy
 8012850:	61bb      	str	r3, [r7, #24]
 8012852:	e7fe      	b.n	8012852 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8012854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012856:	2b00      	cmp	r3, #0
 8012858:	d01e      	beq.n	8012898 <xTaskCreateStatic+0xa4>
 801285a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801285c:	2b00      	cmp	r3, #0
 801285e:	d01b      	beq.n	8012898 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012862:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8012864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012866:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012868:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801286c:	2202      	movs	r2, #2
 801286e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8012872:	2300      	movs	r3, #0
 8012874:	9303      	str	r3, [sp, #12]
 8012876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012878:	9302      	str	r3, [sp, #8]
 801287a:	f107 0314 	add.w	r3, r7, #20
 801287e:	9301      	str	r3, [sp, #4]
 8012880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012882:	9300      	str	r3, [sp, #0]
 8012884:	683b      	ldr	r3, [r7, #0]
 8012886:	687a      	ldr	r2, [r7, #4]
 8012888:	68b9      	ldr	r1, [r7, #8]
 801288a:	68f8      	ldr	r0, [r7, #12]
 801288c:	f000 f850 	bl	8012930 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012890:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012892:	f000 f8d9 	bl	8012a48 <prvAddNewTaskToReadyList>
 8012896:	e001      	b.n	801289c <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8012898:	2300      	movs	r3, #0
 801289a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801289c:	697b      	ldr	r3, [r7, #20]
	}
 801289e:	4618      	mov	r0, r3
 80128a0:	3728      	adds	r7, #40	; 0x28
 80128a2:	46bd      	mov	sp, r7
 80128a4:	bd80      	pop	{r7, pc}

080128a6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80128a6:	b580      	push	{r7, lr}
 80128a8:	b08c      	sub	sp, #48	; 0x30
 80128aa:	af04      	add	r7, sp, #16
 80128ac:	60f8      	str	r0, [r7, #12]
 80128ae:	60b9      	str	r1, [r7, #8]
 80128b0:	603b      	str	r3, [r7, #0]
 80128b2:	4613      	mov	r3, r2
 80128b4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80128b6:	88fb      	ldrh	r3, [r7, #6]
 80128b8:	009b      	lsls	r3, r3, #2
 80128ba:	4618      	mov	r0, r3
 80128bc:	f001 fca2 	bl	8014204 <pvPortMalloc>
 80128c0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80128c2:	697b      	ldr	r3, [r7, #20]
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d00e      	beq.n	80128e6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80128c8:	2064      	movs	r0, #100	; 0x64
 80128ca:	f001 fc9b 	bl	8014204 <pvPortMalloc>
 80128ce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80128d0:	69fb      	ldr	r3, [r7, #28]
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d003      	beq.n	80128de <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80128d6:	69fb      	ldr	r3, [r7, #28]
 80128d8:	697a      	ldr	r2, [r7, #20]
 80128da:	631a      	str	r2, [r3, #48]	; 0x30
 80128dc:	e005      	b.n	80128ea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80128de:	6978      	ldr	r0, [r7, #20]
 80128e0:	f001 fd52 	bl	8014388 <vPortFree>
 80128e4:	e001      	b.n	80128ea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80128e6:	2300      	movs	r3, #0
 80128e8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80128ea:	69fb      	ldr	r3, [r7, #28]
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d017      	beq.n	8012920 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80128f0:	69fb      	ldr	r3, [r7, #28]
 80128f2:	2200      	movs	r2, #0
 80128f4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80128f8:	88fa      	ldrh	r2, [r7, #6]
 80128fa:	2300      	movs	r3, #0
 80128fc:	9303      	str	r3, [sp, #12]
 80128fe:	69fb      	ldr	r3, [r7, #28]
 8012900:	9302      	str	r3, [sp, #8]
 8012902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012904:	9301      	str	r3, [sp, #4]
 8012906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012908:	9300      	str	r3, [sp, #0]
 801290a:	683b      	ldr	r3, [r7, #0]
 801290c:	68b9      	ldr	r1, [r7, #8]
 801290e:	68f8      	ldr	r0, [r7, #12]
 8012910:	f000 f80e 	bl	8012930 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012914:	69f8      	ldr	r0, [r7, #28]
 8012916:	f000 f897 	bl	8012a48 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801291a:	2301      	movs	r3, #1
 801291c:	61bb      	str	r3, [r7, #24]
 801291e:	e002      	b.n	8012926 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012920:	f04f 33ff 	mov.w	r3, #4294967295
 8012924:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8012926:	69bb      	ldr	r3, [r7, #24]
	}
 8012928:	4618      	mov	r0, r3
 801292a:	3720      	adds	r7, #32
 801292c:	46bd      	mov	sp, r7
 801292e:	bd80      	pop	{r7, pc}

08012930 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012930:	b580      	push	{r7, lr}
 8012932:	b088      	sub	sp, #32
 8012934:	af00      	add	r7, sp, #0
 8012936:	60f8      	str	r0, [r7, #12]
 8012938:	60b9      	str	r1, [r7, #8]
 801293a:	607a      	str	r2, [r7, #4]
 801293c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801293e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012940:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	009b      	lsls	r3, r3, #2
 8012946:	461a      	mov	r2, r3
 8012948:	21a5      	movs	r1, #165	; 0xa5
 801294a:	f002 facb 	bl	8014ee4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 801294e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012950:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012958:	3b01      	subs	r3, #1
 801295a:	009b      	lsls	r3, r3, #2
 801295c:	4413      	add	r3, r2
 801295e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8012960:	69bb      	ldr	r3, [r7, #24]
 8012962:	f023 0307 	bic.w	r3, r3, #7
 8012966:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8012968:	69bb      	ldr	r3, [r7, #24]
 801296a:	f003 0307 	and.w	r3, r3, #7
 801296e:	2b00      	cmp	r3, #0
 8012970:	d009      	beq.n	8012986 <prvInitialiseNewTask+0x56>
 8012972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012976:	f383 8811 	msr	BASEPRI, r3
 801297a:	f3bf 8f6f 	isb	sy
 801297e:	f3bf 8f4f 	dsb	sy
 8012982:	617b      	str	r3, [r7, #20]
 8012984:	e7fe      	b.n	8012984 <prvInitialiseNewTask+0x54>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8012986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012988:	69ba      	ldr	r2, [r7, #24]
 801298a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801298c:	2300      	movs	r3, #0
 801298e:	61fb      	str	r3, [r7, #28]
 8012990:	e012      	b.n	80129b8 <prvInitialiseNewTask+0x88>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8012992:	68ba      	ldr	r2, [r7, #8]
 8012994:	69fb      	ldr	r3, [r7, #28]
 8012996:	4413      	add	r3, r2
 8012998:	7819      	ldrb	r1, [r3, #0]
 801299a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801299c:	69fb      	ldr	r3, [r7, #28]
 801299e:	4413      	add	r3, r2
 80129a0:	3334      	adds	r3, #52	; 0x34
 80129a2:	460a      	mov	r2, r1
 80129a4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80129a6:	68ba      	ldr	r2, [r7, #8]
 80129a8:	69fb      	ldr	r3, [r7, #28]
 80129aa:	4413      	add	r3, r2
 80129ac:	781b      	ldrb	r3, [r3, #0]
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d006      	beq.n	80129c0 <prvInitialiseNewTask+0x90>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80129b2:	69fb      	ldr	r3, [r7, #28]
 80129b4:	3301      	adds	r3, #1
 80129b6:	61fb      	str	r3, [r7, #28]
 80129b8:	69fb      	ldr	r3, [r7, #28]
 80129ba:	2b0f      	cmp	r3, #15
 80129bc:	d9e9      	bls.n	8012992 <prvInitialiseNewTask+0x62>
 80129be:	e000      	b.n	80129c2 <prvInitialiseNewTask+0x92>
		{
			break;
 80129c0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80129c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129c4:	2200      	movs	r2, #0
 80129c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80129ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129cc:	2b37      	cmp	r3, #55	; 0x37
 80129ce:	d901      	bls.n	80129d4 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80129d0:	2337      	movs	r3, #55	; 0x37
 80129d2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80129d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80129d8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80129da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80129de:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 80129e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129e2:	2200      	movs	r2, #0
 80129e4:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80129e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129e8:	3304      	adds	r3, #4
 80129ea:	4618      	mov	r0, r3
 80129ec:	f7fe fed1 	bl	8011792 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80129f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129f2:	3318      	adds	r3, #24
 80129f4:	4618      	mov	r0, r3
 80129f6:	f7fe fecc 	bl	8011792 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80129fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80129fe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a02:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a08:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8012a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012a0e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8012a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a12:	2200      	movs	r2, #0
 8012a14:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a18:	2200      	movs	r2, #0
 8012a1a:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a1e:	2200      	movs	r2, #0
 8012a20:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012a24:	683a      	ldr	r2, [r7, #0]
 8012a26:	68f9      	ldr	r1, [r7, #12]
 8012a28:	69b8      	ldr	r0, [r7, #24]
 8012a2a:	f001 fa09 	bl	8013e40 <pxPortInitialiseStack>
 8012a2e:	4602      	mov	r2, r0
 8012a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a32:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8012a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d002      	beq.n	8012a40 <prvInitialiseNewTask+0x110>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012a3e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012a40:	bf00      	nop
 8012a42:	3720      	adds	r7, #32
 8012a44:	46bd      	mov	sp, r7
 8012a46:	bd80      	pop	{r7, pc}

08012a48 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012a48:	b580      	push	{r7, lr}
 8012a4a:	b082      	sub	sp, #8
 8012a4c:	af00      	add	r7, sp, #0
 8012a4e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012a50:	f001 fae2 	bl	8014018 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012a54:	4b2d      	ldr	r3, [pc, #180]	; (8012b0c <prvAddNewTaskToReadyList+0xc4>)
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	3301      	adds	r3, #1
 8012a5a:	4a2c      	ldr	r2, [pc, #176]	; (8012b0c <prvAddNewTaskToReadyList+0xc4>)
 8012a5c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8012a5e:	4b2c      	ldr	r3, [pc, #176]	; (8012b10 <prvAddNewTaskToReadyList+0xc8>)
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d109      	bne.n	8012a7a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8012a66:	4a2a      	ldr	r2, [pc, #168]	; (8012b10 <prvAddNewTaskToReadyList+0xc8>)
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012a6c:	4b27      	ldr	r3, [pc, #156]	; (8012b0c <prvAddNewTaskToReadyList+0xc4>)
 8012a6e:	681b      	ldr	r3, [r3, #0]
 8012a70:	2b01      	cmp	r3, #1
 8012a72:	d110      	bne.n	8012a96 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012a74:	f000 fc2a 	bl	80132cc <prvInitialiseTaskLists>
 8012a78:	e00d      	b.n	8012a96 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8012a7a:	4b26      	ldr	r3, [pc, #152]	; (8012b14 <prvAddNewTaskToReadyList+0xcc>)
 8012a7c:	681b      	ldr	r3, [r3, #0]
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d109      	bne.n	8012a96 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8012a82:	4b23      	ldr	r3, [pc, #140]	; (8012b10 <prvAddNewTaskToReadyList+0xc8>)
 8012a84:	681b      	ldr	r3, [r3, #0]
 8012a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a8c:	429a      	cmp	r2, r3
 8012a8e:	d802      	bhi.n	8012a96 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012a90:	4a1f      	ldr	r2, [pc, #124]	; (8012b10 <prvAddNewTaskToReadyList+0xc8>)
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8012a96:	4b20      	ldr	r3, [pc, #128]	; (8012b18 <prvAddNewTaskToReadyList+0xd0>)
 8012a98:	681b      	ldr	r3, [r3, #0]
 8012a9a:	3301      	adds	r3, #1
 8012a9c:	4a1e      	ldr	r2, [pc, #120]	; (8012b18 <prvAddNewTaskToReadyList+0xd0>)
 8012a9e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8012aa0:	4b1d      	ldr	r3, [pc, #116]	; (8012b18 <prvAddNewTaskToReadyList+0xd0>)
 8012aa2:	681a      	ldr	r2, [r3, #0]
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012aac:	4b1b      	ldr	r3, [pc, #108]	; (8012b1c <prvAddNewTaskToReadyList+0xd4>)
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	429a      	cmp	r2, r3
 8012ab2:	d903      	bls.n	8012abc <prvAddNewTaskToReadyList+0x74>
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ab8:	4a18      	ldr	r2, [pc, #96]	; (8012b1c <prvAddNewTaskToReadyList+0xd4>)
 8012aba:	6013      	str	r3, [r2, #0]
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ac0:	4613      	mov	r3, r2
 8012ac2:	009b      	lsls	r3, r3, #2
 8012ac4:	4413      	add	r3, r2
 8012ac6:	009b      	lsls	r3, r3, #2
 8012ac8:	4a15      	ldr	r2, [pc, #84]	; (8012b20 <prvAddNewTaskToReadyList+0xd8>)
 8012aca:	441a      	add	r2, r3
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	3304      	adds	r3, #4
 8012ad0:	4619      	mov	r1, r3
 8012ad2:	4610      	mov	r0, r2
 8012ad4:	f7fe fe69 	bl	80117aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012ad8:	f001 facc 	bl	8014074 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8012adc:	4b0d      	ldr	r3, [pc, #52]	; (8012b14 <prvAddNewTaskToReadyList+0xcc>)
 8012ade:	681b      	ldr	r3, [r3, #0]
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d00e      	beq.n	8012b02 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012ae4:	4b0a      	ldr	r3, [pc, #40]	; (8012b10 <prvAddNewTaskToReadyList+0xc8>)
 8012ae6:	681b      	ldr	r3, [r3, #0]
 8012ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012aee:	429a      	cmp	r2, r3
 8012af0:	d207      	bcs.n	8012b02 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8012af2:	4b0c      	ldr	r3, [pc, #48]	; (8012b24 <prvAddNewTaskToReadyList+0xdc>)
 8012af4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012af8:	601a      	str	r2, [r3, #0]
 8012afa:	f3bf 8f4f 	dsb	sy
 8012afe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012b02:	bf00      	nop
 8012b04:	3708      	adds	r7, #8
 8012b06:	46bd      	mov	sp, r7
 8012b08:	bd80      	pop	{r7, pc}
 8012b0a:	bf00      	nop
 8012b0c:	2000102c 	.word	0x2000102c
 8012b10:	20000b58 	.word	0x20000b58
 8012b14:	20001038 	.word	0x20001038
 8012b18:	20001048 	.word	0x20001048
 8012b1c:	20001034 	.word	0x20001034
 8012b20:	20000b5c 	.word	0x20000b5c
 8012b24:	e000ed04 	.word	0xe000ed04

08012b28 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012b28:	b580      	push	{r7, lr}
 8012b2a:	b084      	sub	sp, #16
 8012b2c:	af00      	add	r7, sp, #0
 8012b2e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8012b30:	2300      	movs	r3, #0
 8012b32:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d016      	beq.n	8012b68 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8012b3a:	4b13      	ldr	r3, [pc, #76]	; (8012b88 <vTaskDelay+0x60>)
 8012b3c:	681b      	ldr	r3, [r3, #0]
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d009      	beq.n	8012b56 <vTaskDelay+0x2e>
 8012b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b46:	f383 8811 	msr	BASEPRI, r3
 8012b4a:	f3bf 8f6f 	isb	sy
 8012b4e:	f3bf 8f4f 	dsb	sy
 8012b52:	60bb      	str	r3, [r7, #8]
 8012b54:	e7fe      	b.n	8012b54 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8012b56:	f000 f881 	bl	8012c5c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8012b5a:	2100      	movs	r1, #0
 8012b5c:	6878      	ldr	r0, [r7, #4]
 8012b5e:	f000 fe11 	bl	8013784 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8012b62:	f000 f889 	bl	8012c78 <xTaskResumeAll>
 8012b66:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012b68:	68fb      	ldr	r3, [r7, #12]
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d107      	bne.n	8012b7e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8012b6e:	4b07      	ldr	r3, [pc, #28]	; (8012b8c <vTaskDelay+0x64>)
 8012b70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012b74:	601a      	str	r2, [r3, #0]
 8012b76:	f3bf 8f4f 	dsb	sy
 8012b7a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012b7e:	bf00      	nop
 8012b80:	3710      	adds	r7, #16
 8012b82:	46bd      	mov	sp, r7
 8012b84:	bd80      	pop	{r7, pc}
 8012b86:	bf00      	nop
 8012b88:	20001054 	.word	0x20001054
 8012b8c:	e000ed04 	.word	0xe000ed04

08012b90 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012b90:	b580      	push	{r7, lr}
 8012b92:	b08a      	sub	sp, #40	; 0x28
 8012b94:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8012b96:	2300      	movs	r3, #0
 8012b98:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8012b9a:	2300      	movs	r3, #0
 8012b9c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8012b9e:	463a      	mov	r2, r7
 8012ba0:	1d39      	adds	r1, r7, #4
 8012ba2:	f107 0308 	add.w	r3, r7, #8
 8012ba6:	4618      	mov	r0, r3
 8012ba8:	f7fe fda2 	bl	80116f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8012bac:	6839      	ldr	r1, [r7, #0]
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	68ba      	ldr	r2, [r7, #8]
 8012bb2:	9202      	str	r2, [sp, #8]
 8012bb4:	9301      	str	r3, [sp, #4]
 8012bb6:	2300      	movs	r3, #0
 8012bb8:	9300      	str	r3, [sp, #0]
 8012bba:	2300      	movs	r3, #0
 8012bbc:	460a      	mov	r2, r1
 8012bbe:	4921      	ldr	r1, [pc, #132]	; (8012c44 <vTaskStartScheduler+0xb4>)
 8012bc0:	4821      	ldr	r0, [pc, #132]	; (8012c48 <vTaskStartScheduler+0xb8>)
 8012bc2:	f7ff fe17 	bl	80127f4 <xTaskCreateStatic>
 8012bc6:	4602      	mov	r2, r0
 8012bc8:	4b20      	ldr	r3, [pc, #128]	; (8012c4c <vTaskStartScheduler+0xbc>)
 8012bca:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8012bcc:	4b1f      	ldr	r3, [pc, #124]	; (8012c4c <vTaskStartScheduler+0xbc>)
 8012bce:	681b      	ldr	r3, [r3, #0]
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d002      	beq.n	8012bda <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012bd4:	2301      	movs	r3, #1
 8012bd6:	617b      	str	r3, [r7, #20]
 8012bd8:	e001      	b.n	8012bde <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8012bda:	2300      	movs	r3, #0
 8012bdc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8012bde:	697b      	ldr	r3, [r7, #20]
 8012be0:	2b01      	cmp	r3, #1
 8012be2:	d102      	bne.n	8012bea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8012be4:	f000 fe22 	bl	801382c <xTimerCreateTimerTask>
 8012be8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8012bea:	697b      	ldr	r3, [r7, #20]
 8012bec:	2b01      	cmp	r3, #1
 8012bee:	d117      	bne.n	8012c20 <vTaskStartScheduler+0x90>
 8012bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bf4:	f383 8811 	msr	BASEPRI, r3
 8012bf8:	f3bf 8f6f 	isb	sy
 8012bfc:	f3bf 8f4f 	dsb	sy
 8012c00:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8012c02:	4b13      	ldr	r3, [pc, #76]	; (8012c50 <vTaskStartScheduler+0xc0>)
 8012c04:	f04f 32ff 	mov.w	r2, #4294967295
 8012c08:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8012c0a:	4b12      	ldr	r3, [pc, #72]	; (8012c54 <vTaskStartScheduler+0xc4>)
 8012c0c:	2201      	movs	r2, #1
 8012c0e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8012c10:	4b11      	ldr	r3, [pc, #68]	; (8012c58 <vTaskStartScheduler+0xc8>)
 8012c12:	2200      	movs	r2, #0
 8012c14:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8012c16:	f7ef fb0b 	bl	8002230 <configureTimerForRunTimeStats>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012c1a:	f001 f98d 	bl	8013f38 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8012c1e:	e00d      	b.n	8012c3c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012c20:	697b      	ldr	r3, [r7, #20]
 8012c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c26:	d109      	bne.n	8012c3c <vTaskStartScheduler+0xac>
 8012c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c2c:	f383 8811 	msr	BASEPRI, r3
 8012c30:	f3bf 8f6f 	isb	sy
 8012c34:	f3bf 8f4f 	dsb	sy
 8012c38:	60fb      	str	r3, [r7, #12]
 8012c3a:	e7fe      	b.n	8012c3a <vTaskStartScheduler+0xaa>
}
 8012c3c:	bf00      	nop
 8012c3e:	3718      	adds	r7, #24
 8012c40:	46bd      	mov	sp, r7
 8012c42:	bd80      	pop	{r7, pc}
 8012c44:	0801a958 	.word	0x0801a958
 8012c48:	0801329d 	.word	0x0801329d
 8012c4c:	20001050 	.word	0x20001050
 8012c50:	2000104c 	.word	0x2000104c
 8012c54:	20001038 	.word	0x20001038
 8012c58:	20001030 	.word	0x20001030

08012c5c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012c5c:	b480      	push	{r7}
 8012c5e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8012c60:	4b04      	ldr	r3, [pc, #16]	; (8012c74 <vTaskSuspendAll+0x18>)
 8012c62:	681b      	ldr	r3, [r3, #0]
 8012c64:	3301      	adds	r3, #1
 8012c66:	4a03      	ldr	r2, [pc, #12]	; (8012c74 <vTaskSuspendAll+0x18>)
 8012c68:	6013      	str	r3, [r2, #0]
}
 8012c6a:	bf00      	nop
 8012c6c:	46bd      	mov	sp, r7
 8012c6e:	bc80      	pop	{r7}
 8012c70:	4770      	bx	lr
 8012c72:	bf00      	nop
 8012c74:	20001054 	.word	0x20001054

08012c78 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012c78:	b580      	push	{r7, lr}
 8012c7a:	b084      	sub	sp, #16
 8012c7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8012c7e:	2300      	movs	r3, #0
 8012c80:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8012c82:	2300      	movs	r3, #0
 8012c84:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8012c86:	4b41      	ldr	r3, [pc, #260]	; (8012d8c <xTaskResumeAll+0x114>)
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d109      	bne.n	8012ca2 <xTaskResumeAll+0x2a>
 8012c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c92:	f383 8811 	msr	BASEPRI, r3
 8012c96:	f3bf 8f6f 	isb	sy
 8012c9a:	f3bf 8f4f 	dsb	sy
 8012c9e:	603b      	str	r3, [r7, #0]
 8012ca0:	e7fe      	b.n	8012ca0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8012ca2:	f001 f9b9 	bl	8014018 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012ca6:	4b39      	ldr	r3, [pc, #228]	; (8012d8c <xTaskResumeAll+0x114>)
 8012ca8:	681b      	ldr	r3, [r3, #0]
 8012caa:	3b01      	subs	r3, #1
 8012cac:	4a37      	ldr	r2, [pc, #220]	; (8012d8c <xTaskResumeAll+0x114>)
 8012cae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012cb0:	4b36      	ldr	r3, [pc, #216]	; (8012d8c <xTaskResumeAll+0x114>)
 8012cb2:	681b      	ldr	r3, [r3, #0]
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	d162      	bne.n	8012d7e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012cb8:	4b35      	ldr	r3, [pc, #212]	; (8012d90 <xTaskResumeAll+0x118>)
 8012cba:	681b      	ldr	r3, [r3, #0]
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d05e      	beq.n	8012d7e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012cc0:	e02f      	b.n	8012d22 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8012cc2:	4b34      	ldr	r3, [pc, #208]	; (8012d94 <xTaskResumeAll+0x11c>)
 8012cc4:	68db      	ldr	r3, [r3, #12]
 8012cc6:	68db      	ldr	r3, [r3, #12]
 8012cc8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012cca:	68fb      	ldr	r3, [r7, #12]
 8012ccc:	3318      	adds	r3, #24
 8012cce:	4618      	mov	r0, r3
 8012cd0:	f7fe fdc6 	bl	8011860 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012cd4:	68fb      	ldr	r3, [r7, #12]
 8012cd6:	3304      	adds	r3, #4
 8012cd8:	4618      	mov	r0, r3
 8012cda:	f7fe fdc1 	bl	8011860 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012cde:	68fb      	ldr	r3, [r7, #12]
 8012ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ce2:	4b2d      	ldr	r3, [pc, #180]	; (8012d98 <xTaskResumeAll+0x120>)
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	429a      	cmp	r2, r3
 8012ce8:	d903      	bls.n	8012cf2 <xTaskResumeAll+0x7a>
 8012cea:	68fb      	ldr	r3, [r7, #12]
 8012cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012cee:	4a2a      	ldr	r2, [pc, #168]	; (8012d98 <xTaskResumeAll+0x120>)
 8012cf0:	6013      	str	r3, [r2, #0]
 8012cf2:	68fb      	ldr	r3, [r7, #12]
 8012cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012cf6:	4613      	mov	r3, r2
 8012cf8:	009b      	lsls	r3, r3, #2
 8012cfa:	4413      	add	r3, r2
 8012cfc:	009b      	lsls	r3, r3, #2
 8012cfe:	4a27      	ldr	r2, [pc, #156]	; (8012d9c <xTaskResumeAll+0x124>)
 8012d00:	441a      	add	r2, r3
 8012d02:	68fb      	ldr	r3, [r7, #12]
 8012d04:	3304      	adds	r3, #4
 8012d06:	4619      	mov	r1, r3
 8012d08:	4610      	mov	r0, r2
 8012d0a:	f7fe fd4e 	bl	80117aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012d0e:	68fb      	ldr	r3, [r7, #12]
 8012d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d12:	4b23      	ldr	r3, [pc, #140]	; (8012da0 <xTaskResumeAll+0x128>)
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d18:	429a      	cmp	r2, r3
 8012d1a:	d302      	bcc.n	8012d22 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8012d1c:	4b21      	ldr	r3, [pc, #132]	; (8012da4 <xTaskResumeAll+0x12c>)
 8012d1e:	2201      	movs	r2, #1
 8012d20:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012d22:	4b1c      	ldr	r3, [pc, #112]	; (8012d94 <xTaskResumeAll+0x11c>)
 8012d24:	681b      	ldr	r3, [r3, #0]
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d1cb      	bne.n	8012cc2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8012d2a:	68fb      	ldr	r3, [r7, #12]
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	d001      	beq.n	8012d34 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8012d30:	f000 fb66 	bl	8013400 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8012d34:	4b1c      	ldr	r3, [pc, #112]	; (8012da8 <xTaskResumeAll+0x130>)
 8012d36:	681b      	ldr	r3, [r3, #0]
 8012d38:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d010      	beq.n	8012d62 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8012d40:	f000 f844 	bl	8012dcc <xTaskIncrementTick>
 8012d44:	4603      	mov	r3, r0
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d002      	beq.n	8012d50 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8012d4a:	4b16      	ldr	r3, [pc, #88]	; (8012da4 <xTaskResumeAll+0x12c>)
 8012d4c:	2201      	movs	r2, #1
 8012d4e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	3b01      	subs	r3, #1
 8012d54:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d1f1      	bne.n	8012d40 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8012d5c:	4b12      	ldr	r3, [pc, #72]	; (8012da8 <xTaskResumeAll+0x130>)
 8012d5e:	2200      	movs	r2, #0
 8012d60:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8012d62:	4b10      	ldr	r3, [pc, #64]	; (8012da4 <xTaskResumeAll+0x12c>)
 8012d64:	681b      	ldr	r3, [r3, #0]
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d009      	beq.n	8012d7e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012d6a:	2301      	movs	r3, #1
 8012d6c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8012d6e:	4b0f      	ldr	r3, [pc, #60]	; (8012dac <xTaskResumeAll+0x134>)
 8012d70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012d74:	601a      	str	r2, [r3, #0]
 8012d76:	f3bf 8f4f 	dsb	sy
 8012d7a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012d7e:	f001 f979 	bl	8014074 <vPortExitCritical>

	return xAlreadyYielded;
 8012d82:	68bb      	ldr	r3, [r7, #8]
}
 8012d84:	4618      	mov	r0, r3
 8012d86:	3710      	adds	r7, #16
 8012d88:	46bd      	mov	sp, r7
 8012d8a:	bd80      	pop	{r7, pc}
 8012d8c:	20001054 	.word	0x20001054
 8012d90:	2000102c 	.word	0x2000102c
 8012d94:	20000fec 	.word	0x20000fec
 8012d98:	20001034 	.word	0x20001034
 8012d9c:	20000b5c 	.word	0x20000b5c
 8012da0:	20000b58 	.word	0x20000b58
 8012da4:	20001040 	.word	0x20001040
 8012da8:	2000103c 	.word	0x2000103c
 8012dac:	e000ed04 	.word	0xe000ed04

08012db0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012db0:	b480      	push	{r7}
 8012db2:	b083      	sub	sp, #12
 8012db4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8012db6:	4b04      	ldr	r3, [pc, #16]	; (8012dc8 <xTaskGetTickCount+0x18>)
 8012db8:	681b      	ldr	r3, [r3, #0]
 8012dba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8012dbc:	687b      	ldr	r3, [r7, #4]
}
 8012dbe:	4618      	mov	r0, r3
 8012dc0:	370c      	adds	r7, #12
 8012dc2:	46bd      	mov	sp, r7
 8012dc4:	bc80      	pop	{r7}
 8012dc6:	4770      	bx	lr
 8012dc8:	20001030 	.word	0x20001030

08012dcc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012dcc:	b580      	push	{r7, lr}
 8012dce:	b086      	sub	sp, #24
 8012dd0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8012dd2:	2300      	movs	r3, #0
 8012dd4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012dd6:	4b51      	ldr	r3, [pc, #324]	; (8012f1c <xTaskIncrementTick+0x150>)
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	f040 808d 	bne.w	8012efa <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012de0:	4b4f      	ldr	r3, [pc, #316]	; (8012f20 <xTaskIncrementTick+0x154>)
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	3301      	adds	r3, #1
 8012de6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012de8:	4a4d      	ldr	r2, [pc, #308]	; (8012f20 <xTaskIncrementTick+0x154>)
 8012dea:	693b      	ldr	r3, [r7, #16]
 8012dec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8012dee:	693b      	ldr	r3, [r7, #16]
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d11f      	bne.n	8012e34 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8012df4:	4b4b      	ldr	r3, [pc, #300]	; (8012f24 <xTaskIncrementTick+0x158>)
 8012df6:	681b      	ldr	r3, [r3, #0]
 8012df8:	681b      	ldr	r3, [r3, #0]
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d009      	beq.n	8012e12 <xTaskIncrementTick+0x46>
 8012dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e02:	f383 8811 	msr	BASEPRI, r3
 8012e06:	f3bf 8f6f 	isb	sy
 8012e0a:	f3bf 8f4f 	dsb	sy
 8012e0e:	603b      	str	r3, [r7, #0]
 8012e10:	e7fe      	b.n	8012e10 <xTaskIncrementTick+0x44>
 8012e12:	4b44      	ldr	r3, [pc, #272]	; (8012f24 <xTaskIncrementTick+0x158>)
 8012e14:	681b      	ldr	r3, [r3, #0]
 8012e16:	60fb      	str	r3, [r7, #12]
 8012e18:	4b43      	ldr	r3, [pc, #268]	; (8012f28 <xTaskIncrementTick+0x15c>)
 8012e1a:	681b      	ldr	r3, [r3, #0]
 8012e1c:	4a41      	ldr	r2, [pc, #260]	; (8012f24 <xTaskIncrementTick+0x158>)
 8012e1e:	6013      	str	r3, [r2, #0]
 8012e20:	4a41      	ldr	r2, [pc, #260]	; (8012f28 <xTaskIncrementTick+0x15c>)
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	6013      	str	r3, [r2, #0]
 8012e26:	4b41      	ldr	r3, [pc, #260]	; (8012f2c <xTaskIncrementTick+0x160>)
 8012e28:	681b      	ldr	r3, [r3, #0]
 8012e2a:	3301      	adds	r3, #1
 8012e2c:	4a3f      	ldr	r2, [pc, #252]	; (8012f2c <xTaskIncrementTick+0x160>)
 8012e2e:	6013      	str	r3, [r2, #0]
 8012e30:	f000 fae6 	bl	8013400 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012e34:	4b3e      	ldr	r3, [pc, #248]	; (8012f30 <xTaskIncrementTick+0x164>)
 8012e36:	681b      	ldr	r3, [r3, #0]
 8012e38:	693a      	ldr	r2, [r7, #16]
 8012e3a:	429a      	cmp	r2, r3
 8012e3c:	d34e      	bcc.n	8012edc <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012e3e:	4b39      	ldr	r3, [pc, #228]	; (8012f24 <xTaskIncrementTick+0x158>)
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d101      	bne.n	8012e4c <xTaskIncrementTick+0x80>
 8012e48:	2301      	movs	r3, #1
 8012e4a:	e000      	b.n	8012e4e <xTaskIncrementTick+0x82>
 8012e4c:	2300      	movs	r3, #0
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d004      	beq.n	8012e5c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012e52:	4b37      	ldr	r3, [pc, #220]	; (8012f30 <xTaskIncrementTick+0x164>)
 8012e54:	f04f 32ff 	mov.w	r2, #4294967295
 8012e58:	601a      	str	r2, [r3, #0]
					break;
 8012e5a:	e03f      	b.n	8012edc <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8012e5c:	4b31      	ldr	r3, [pc, #196]	; (8012f24 <xTaskIncrementTick+0x158>)
 8012e5e:	681b      	ldr	r3, [r3, #0]
 8012e60:	68db      	ldr	r3, [r3, #12]
 8012e62:	68db      	ldr	r3, [r3, #12]
 8012e64:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012e66:	68bb      	ldr	r3, [r7, #8]
 8012e68:	685b      	ldr	r3, [r3, #4]
 8012e6a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012e6c:	693a      	ldr	r2, [r7, #16]
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	429a      	cmp	r2, r3
 8012e72:	d203      	bcs.n	8012e7c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012e74:	4a2e      	ldr	r2, [pc, #184]	; (8012f30 <xTaskIncrementTick+0x164>)
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	6013      	str	r3, [r2, #0]
						break;
 8012e7a:	e02f      	b.n	8012edc <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012e7c:	68bb      	ldr	r3, [r7, #8]
 8012e7e:	3304      	adds	r3, #4
 8012e80:	4618      	mov	r0, r3
 8012e82:	f7fe fced 	bl	8011860 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012e86:	68bb      	ldr	r3, [r7, #8]
 8012e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d004      	beq.n	8012e98 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012e8e:	68bb      	ldr	r3, [r7, #8]
 8012e90:	3318      	adds	r3, #24
 8012e92:	4618      	mov	r0, r3
 8012e94:	f7fe fce4 	bl	8011860 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012e98:	68bb      	ldr	r3, [r7, #8]
 8012e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e9c:	4b25      	ldr	r3, [pc, #148]	; (8012f34 <xTaskIncrementTick+0x168>)
 8012e9e:	681b      	ldr	r3, [r3, #0]
 8012ea0:	429a      	cmp	r2, r3
 8012ea2:	d903      	bls.n	8012eac <xTaskIncrementTick+0xe0>
 8012ea4:	68bb      	ldr	r3, [r7, #8]
 8012ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ea8:	4a22      	ldr	r2, [pc, #136]	; (8012f34 <xTaskIncrementTick+0x168>)
 8012eaa:	6013      	str	r3, [r2, #0]
 8012eac:	68bb      	ldr	r3, [r7, #8]
 8012eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012eb0:	4613      	mov	r3, r2
 8012eb2:	009b      	lsls	r3, r3, #2
 8012eb4:	4413      	add	r3, r2
 8012eb6:	009b      	lsls	r3, r3, #2
 8012eb8:	4a1f      	ldr	r2, [pc, #124]	; (8012f38 <xTaskIncrementTick+0x16c>)
 8012eba:	441a      	add	r2, r3
 8012ebc:	68bb      	ldr	r3, [r7, #8]
 8012ebe:	3304      	adds	r3, #4
 8012ec0:	4619      	mov	r1, r3
 8012ec2:	4610      	mov	r0, r2
 8012ec4:	f7fe fc71 	bl	80117aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012ec8:	68bb      	ldr	r3, [r7, #8]
 8012eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ecc:	4b1b      	ldr	r3, [pc, #108]	; (8012f3c <xTaskIncrementTick+0x170>)
 8012ece:	681b      	ldr	r3, [r3, #0]
 8012ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ed2:	429a      	cmp	r2, r3
 8012ed4:	d3b3      	bcc.n	8012e3e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8012ed6:	2301      	movs	r3, #1
 8012ed8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012eda:	e7b0      	b.n	8012e3e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012edc:	4b17      	ldr	r3, [pc, #92]	; (8012f3c <xTaskIncrementTick+0x170>)
 8012ede:	681b      	ldr	r3, [r3, #0]
 8012ee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ee2:	4915      	ldr	r1, [pc, #84]	; (8012f38 <xTaskIncrementTick+0x16c>)
 8012ee4:	4613      	mov	r3, r2
 8012ee6:	009b      	lsls	r3, r3, #2
 8012ee8:	4413      	add	r3, r2
 8012eea:	009b      	lsls	r3, r3, #2
 8012eec:	440b      	add	r3, r1
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	2b01      	cmp	r3, #1
 8012ef2:	d907      	bls.n	8012f04 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8012ef4:	2301      	movs	r3, #1
 8012ef6:	617b      	str	r3, [r7, #20]
 8012ef8:	e004      	b.n	8012f04 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8012efa:	4b11      	ldr	r3, [pc, #68]	; (8012f40 <xTaskIncrementTick+0x174>)
 8012efc:	681b      	ldr	r3, [r3, #0]
 8012efe:	3301      	adds	r3, #1
 8012f00:	4a0f      	ldr	r2, [pc, #60]	; (8012f40 <xTaskIncrementTick+0x174>)
 8012f02:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8012f04:	4b0f      	ldr	r3, [pc, #60]	; (8012f44 <xTaskIncrementTick+0x178>)
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d001      	beq.n	8012f10 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8012f0c:	2301      	movs	r3, #1
 8012f0e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8012f10:	697b      	ldr	r3, [r7, #20]
}
 8012f12:	4618      	mov	r0, r3
 8012f14:	3718      	adds	r7, #24
 8012f16:	46bd      	mov	sp, r7
 8012f18:	bd80      	pop	{r7, pc}
 8012f1a:	bf00      	nop
 8012f1c:	20001054 	.word	0x20001054
 8012f20:	20001030 	.word	0x20001030
 8012f24:	20000fe4 	.word	0x20000fe4
 8012f28:	20000fe8 	.word	0x20000fe8
 8012f2c:	20001044 	.word	0x20001044
 8012f30:	2000104c 	.word	0x2000104c
 8012f34:	20001034 	.word	0x20001034
 8012f38:	20000b5c 	.word	0x20000b5c
 8012f3c:	20000b58 	.word	0x20000b58
 8012f40:	2000103c 	.word	0x2000103c
 8012f44:	20001040 	.word	0x20001040

08012f48 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012f48:	b580      	push	{r7, lr}
 8012f4a:	b084      	sub	sp, #16
 8012f4c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012f4e:	4b33      	ldr	r3, [pc, #204]	; (801301c <vTaskSwitchContext+0xd4>)
 8012f50:	681b      	ldr	r3, [r3, #0]
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	d003      	beq.n	8012f5e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8012f56:	4b32      	ldr	r3, [pc, #200]	; (8013020 <vTaskSwitchContext+0xd8>)
 8012f58:	2201      	movs	r2, #1
 8012f5a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012f5c:	e059      	b.n	8013012 <vTaskSwitchContext+0xca>
		xYieldPending = pdFALSE;
 8012f5e:	4b30      	ldr	r3, [pc, #192]	; (8013020 <vTaskSwitchContext+0xd8>)
 8012f60:	2200      	movs	r2, #0
 8012f62:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8012f64:	f7ef f96e 	bl	8002244 <getRunTimeCounterValue>
 8012f68:	4602      	mov	r2, r0
 8012f6a:	4b2e      	ldr	r3, [pc, #184]	; (8013024 <vTaskSwitchContext+0xdc>)
 8012f6c:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 8012f6e:	4b2d      	ldr	r3, [pc, #180]	; (8013024 <vTaskSwitchContext+0xdc>)
 8012f70:	681a      	ldr	r2, [r3, #0]
 8012f72:	4b2d      	ldr	r3, [pc, #180]	; (8013028 <vTaskSwitchContext+0xe0>)
 8012f74:	681b      	ldr	r3, [r3, #0]
 8012f76:	429a      	cmp	r2, r3
 8012f78:	d909      	bls.n	8012f8e <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8012f7a:	4b2c      	ldr	r3, [pc, #176]	; (801302c <vTaskSwitchContext+0xe4>)
 8012f7c:	681b      	ldr	r3, [r3, #0]
 8012f7e:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8012f80:	4a28      	ldr	r2, [pc, #160]	; (8013024 <vTaskSwitchContext+0xdc>)
 8012f82:	6810      	ldr	r0, [r2, #0]
 8012f84:	4a28      	ldr	r2, [pc, #160]	; (8013028 <vTaskSwitchContext+0xe0>)
 8012f86:	6812      	ldr	r2, [r2, #0]
 8012f88:	1a82      	subs	r2, r0, r2
 8012f8a:	440a      	add	r2, r1
 8012f8c:	659a      	str	r2, [r3, #88]	; 0x58
				ulTaskSwitchedInTime = ulTotalRunTime;
 8012f8e:	4b25      	ldr	r3, [pc, #148]	; (8013024 <vTaskSwitchContext+0xdc>)
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	4a25      	ldr	r2, [pc, #148]	; (8013028 <vTaskSwitchContext+0xe0>)
 8012f94:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8012f96:	4b26      	ldr	r3, [pc, #152]	; (8013030 <vTaskSwitchContext+0xe8>)
 8012f98:	681b      	ldr	r3, [r3, #0]
 8012f9a:	60fb      	str	r3, [r7, #12]
 8012f9c:	e00f      	b.n	8012fbe <vTaskSwitchContext+0x76>
 8012f9e:	68fb      	ldr	r3, [r7, #12]
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d109      	bne.n	8012fb8 <vTaskSwitchContext+0x70>
 8012fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fa8:	f383 8811 	msr	BASEPRI, r3
 8012fac:	f3bf 8f6f 	isb	sy
 8012fb0:	f3bf 8f4f 	dsb	sy
 8012fb4:	607b      	str	r3, [r7, #4]
 8012fb6:	e7fe      	b.n	8012fb6 <vTaskSwitchContext+0x6e>
 8012fb8:	68fb      	ldr	r3, [r7, #12]
 8012fba:	3b01      	subs	r3, #1
 8012fbc:	60fb      	str	r3, [r7, #12]
 8012fbe:	491d      	ldr	r1, [pc, #116]	; (8013034 <vTaskSwitchContext+0xec>)
 8012fc0:	68fa      	ldr	r2, [r7, #12]
 8012fc2:	4613      	mov	r3, r2
 8012fc4:	009b      	lsls	r3, r3, #2
 8012fc6:	4413      	add	r3, r2
 8012fc8:	009b      	lsls	r3, r3, #2
 8012fca:	440b      	add	r3, r1
 8012fcc:	681b      	ldr	r3, [r3, #0]
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d0e5      	beq.n	8012f9e <vTaskSwitchContext+0x56>
 8012fd2:	68fa      	ldr	r2, [r7, #12]
 8012fd4:	4613      	mov	r3, r2
 8012fd6:	009b      	lsls	r3, r3, #2
 8012fd8:	4413      	add	r3, r2
 8012fda:	009b      	lsls	r3, r3, #2
 8012fdc:	4a15      	ldr	r2, [pc, #84]	; (8013034 <vTaskSwitchContext+0xec>)
 8012fde:	4413      	add	r3, r2
 8012fe0:	60bb      	str	r3, [r7, #8]
 8012fe2:	68bb      	ldr	r3, [r7, #8]
 8012fe4:	685b      	ldr	r3, [r3, #4]
 8012fe6:	685a      	ldr	r2, [r3, #4]
 8012fe8:	68bb      	ldr	r3, [r7, #8]
 8012fea:	605a      	str	r2, [r3, #4]
 8012fec:	68bb      	ldr	r3, [r7, #8]
 8012fee:	685a      	ldr	r2, [r3, #4]
 8012ff0:	68bb      	ldr	r3, [r7, #8]
 8012ff2:	3308      	adds	r3, #8
 8012ff4:	429a      	cmp	r2, r3
 8012ff6:	d104      	bne.n	8013002 <vTaskSwitchContext+0xba>
 8012ff8:	68bb      	ldr	r3, [r7, #8]
 8012ffa:	685b      	ldr	r3, [r3, #4]
 8012ffc:	685a      	ldr	r2, [r3, #4]
 8012ffe:	68bb      	ldr	r3, [r7, #8]
 8013000:	605a      	str	r2, [r3, #4]
 8013002:	68bb      	ldr	r3, [r7, #8]
 8013004:	685b      	ldr	r3, [r3, #4]
 8013006:	68db      	ldr	r3, [r3, #12]
 8013008:	4a08      	ldr	r2, [pc, #32]	; (801302c <vTaskSwitchContext+0xe4>)
 801300a:	6013      	str	r3, [r2, #0]
 801300c:	4a08      	ldr	r2, [pc, #32]	; (8013030 <vTaskSwitchContext+0xe8>)
 801300e:	68fb      	ldr	r3, [r7, #12]
 8013010:	6013      	str	r3, [r2, #0]
}
 8013012:	bf00      	nop
 8013014:	3710      	adds	r7, #16
 8013016:	46bd      	mov	sp, r7
 8013018:	bd80      	pop	{r7, pc}
 801301a:	bf00      	nop
 801301c:	20001054 	.word	0x20001054
 8013020:	20001040 	.word	0x20001040
 8013024:	2000105c 	.word	0x2000105c
 8013028:	20001058 	.word	0x20001058
 801302c:	20000b58 	.word	0x20000b58
 8013030:	20001034 	.word	0x20001034
 8013034:	20000b5c 	.word	0x20000b5c

08013038 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013038:	b580      	push	{r7, lr}
 801303a:	b084      	sub	sp, #16
 801303c:	af00      	add	r7, sp, #0
 801303e:	6078      	str	r0, [r7, #4]
 8013040:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	2b00      	cmp	r3, #0
 8013046:	d109      	bne.n	801305c <vTaskPlaceOnEventList+0x24>
 8013048:	f04f 0350 	mov.w	r3, #80	; 0x50
 801304c:	f383 8811 	msr	BASEPRI, r3
 8013050:	f3bf 8f6f 	isb	sy
 8013054:	f3bf 8f4f 	dsb	sy
 8013058:	60fb      	str	r3, [r7, #12]
 801305a:	e7fe      	b.n	801305a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801305c:	4b07      	ldr	r3, [pc, #28]	; (801307c <vTaskPlaceOnEventList+0x44>)
 801305e:	681b      	ldr	r3, [r3, #0]
 8013060:	3318      	adds	r3, #24
 8013062:	4619      	mov	r1, r3
 8013064:	6878      	ldr	r0, [r7, #4]
 8013066:	f7fe fbc3 	bl	80117f0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801306a:	2101      	movs	r1, #1
 801306c:	6838      	ldr	r0, [r7, #0]
 801306e:	f000 fb89 	bl	8013784 <prvAddCurrentTaskToDelayedList>
}
 8013072:	bf00      	nop
 8013074:	3710      	adds	r7, #16
 8013076:	46bd      	mov	sp, r7
 8013078:	bd80      	pop	{r7, pc}
 801307a:	bf00      	nop
 801307c:	20000b58 	.word	0x20000b58

08013080 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013080:	b580      	push	{r7, lr}
 8013082:	b086      	sub	sp, #24
 8013084:	af00      	add	r7, sp, #0
 8013086:	60f8      	str	r0, [r7, #12]
 8013088:	60b9      	str	r1, [r7, #8]
 801308a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801308c:	68fb      	ldr	r3, [r7, #12]
 801308e:	2b00      	cmp	r3, #0
 8013090:	d109      	bne.n	80130a6 <vTaskPlaceOnEventListRestricted+0x26>
 8013092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013096:	f383 8811 	msr	BASEPRI, r3
 801309a:	f3bf 8f6f 	isb	sy
 801309e:	f3bf 8f4f 	dsb	sy
 80130a2:	617b      	str	r3, [r7, #20]
 80130a4:	e7fe      	b.n	80130a4 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80130a6:	4b0a      	ldr	r3, [pc, #40]	; (80130d0 <vTaskPlaceOnEventListRestricted+0x50>)
 80130a8:	681b      	ldr	r3, [r3, #0]
 80130aa:	3318      	adds	r3, #24
 80130ac:	4619      	mov	r1, r3
 80130ae:	68f8      	ldr	r0, [r7, #12]
 80130b0:	f7fe fb7b 	bl	80117aa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	d002      	beq.n	80130c0 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80130ba:	f04f 33ff 	mov.w	r3, #4294967295
 80130be:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80130c0:	6879      	ldr	r1, [r7, #4]
 80130c2:	68b8      	ldr	r0, [r7, #8]
 80130c4:	f000 fb5e 	bl	8013784 <prvAddCurrentTaskToDelayedList>
	}
 80130c8:	bf00      	nop
 80130ca:	3718      	adds	r7, #24
 80130cc:	46bd      	mov	sp, r7
 80130ce:	bd80      	pop	{r7, pc}
 80130d0:	20000b58 	.word	0x20000b58

080130d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80130d4:	b580      	push	{r7, lr}
 80130d6:	b086      	sub	sp, #24
 80130d8:	af00      	add	r7, sp, #0
 80130da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	68db      	ldr	r3, [r3, #12]
 80130e0:	68db      	ldr	r3, [r3, #12]
 80130e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80130e4:	693b      	ldr	r3, [r7, #16]
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d109      	bne.n	80130fe <xTaskRemoveFromEventList+0x2a>
 80130ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130ee:	f383 8811 	msr	BASEPRI, r3
 80130f2:	f3bf 8f6f 	isb	sy
 80130f6:	f3bf 8f4f 	dsb	sy
 80130fa:	60fb      	str	r3, [r7, #12]
 80130fc:	e7fe      	b.n	80130fc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80130fe:	693b      	ldr	r3, [r7, #16]
 8013100:	3318      	adds	r3, #24
 8013102:	4618      	mov	r0, r3
 8013104:	f7fe fbac 	bl	8011860 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013108:	4b1d      	ldr	r3, [pc, #116]	; (8013180 <xTaskRemoveFromEventList+0xac>)
 801310a:	681b      	ldr	r3, [r3, #0]
 801310c:	2b00      	cmp	r3, #0
 801310e:	d11d      	bne.n	801314c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013110:	693b      	ldr	r3, [r7, #16]
 8013112:	3304      	adds	r3, #4
 8013114:	4618      	mov	r0, r3
 8013116:	f7fe fba3 	bl	8011860 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801311a:	693b      	ldr	r3, [r7, #16]
 801311c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801311e:	4b19      	ldr	r3, [pc, #100]	; (8013184 <xTaskRemoveFromEventList+0xb0>)
 8013120:	681b      	ldr	r3, [r3, #0]
 8013122:	429a      	cmp	r2, r3
 8013124:	d903      	bls.n	801312e <xTaskRemoveFromEventList+0x5a>
 8013126:	693b      	ldr	r3, [r7, #16]
 8013128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801312a:	4a16      	ldr	r2, [pc, #88]	; (8013184 <xTaskRemoveFromEventList+0xb0>)
 801312c:	6013      	str	r3, [r2, #0]
 801312e:	693b      	ldr	r3, [r7, #16]
 8013130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013132:	4613      	mov	r3, r2
 8013134:	009b      	lsls	r3, r3, #2
 8013136:	4413      	add	r3, r2
 8013138:	009b      	lsls	r3, r3, #2
 801313a:	4a13      	ldr	r2, [pc, #76]	; (8013188 <xTaskRemoveFromEventList+0xb4>)
 801313c:	441a      	add	r2, r3
 801313e:	693b      	ldr	r3, [r7, #16]
 8013140:	3304      	adds	r3, #4
 8013142:	4619      	mov	r1, r3
 8013144:	4610      	mov	r0, r2
 8013146:	f7fe fb30 	bl	80117aa <vListInsertEnd>
 801314a:	e005      	b.n	8013158 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801314c:	693b      	ldr	r3, [r7, #16]
 801314e:	3318      	adds	r3, #24
 8013150:	4619      	mov	r1, r3
 8013152:	480e      	ldr	r0, [pc, #56]	; (801318c <xTaskRemoveFromEventList+0xb8>)
 8013154:	f7fe fb29 	bl	80117aa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013158:	693b      	ldr	r3, [r7, #16]
 801315a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801315c:	4b0c      	ldr	r3, [pc, #48]	; (8013190 <xTaskRemoveFromEventList+0xbc>)
 801315e:	681b      	ldr	r3, [r3, #0]
 8013160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013162:	429a      	cmp	r2, r3
 8013164:	d905      	bls.n	8013172 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013166:	2301      	movs	r3, #1
 8013168:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801316a:	4b0a      	ldr	r3, [pc, #40]	; (8013194 <xTaskRemoveFromEventList+0xc0>)
 801316c:	2201      	movs	r2, #1
 801316e:	601a      	str	r2, [r3, #0]
 8013170:	e001      	b.n	8013176 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8013172:	2300      	movs	r3, #0
 8013174:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8013176:	697b      	ldr	r3, [r7, #20]
}
 8013178:	4618      	mov	r0, r3
 801317a:	3718      	adds	r7, #24
 801317c:	46bd      	mov	sp, r7
 801317e:	bd80      	pop	{r7, pc}
 8013180:	20001054 	.word	0x20001054
 8013184:	20001034 	.word	0x20001034
 8013188:	20000b5c 	.word	0x20000b5c
 801318c:	20000fec 	.word	0x20000fec
 8013190:	20000b58 	.word	0x20000b58
 8013194:	20001040 	.word	0x20001040

08013198 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013198:	b480      	push	{r7}
 801319a:	b083      	sub	sp, #12
 801319c:	af00      	add	r7, sp, #0
 801319e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80131a0:	4b06      	ldr	r3, [pc, #24]	; (80131bc <vTaskInternalSetTimeOutState+0x24>)
 80131a2:	681a      	ldr	r2, [r3, #0]
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80131a8:	4b05      	ldr	r3, [pc, #20]	; (80131c0 <vTaskInternalSetTimeOutState+0x28>)
 80131aa:	681a      	ldr	r2, [r3, #0]
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	605a      	str	r2, [r3, #4]
}
 80131b0:	bf00      	nop
 80131b2:	370c      	adds	r7, #12
 80131b4:	46bd      	mov	sp, r7
 80131b6:	bc80      	pop	{r7}
 80131b8:	4770      	bx	lr
 80131ba:	bf00      	nop
 80131bc:	20001044 	.word	0x20001044
 80131c0:	20001030 	.word	0x20001030

080131c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80131c4:	b580      	push	{r7, lr}
 80131c6:	b088      	sub	sp, #32
 80131c8:	af00      	add	r7, sp, #0
 80131ca:	6078      	str	r0, [r7, #4]
 80131cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d109      	bne.n	80131e8 <xTaskCheckForTimeOut+0x24>
 80131d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131d8:	f383 8811 	msr	BASEPRI, r3
 80131dc:	f3bf 8f6f 	isb	sy
 80131e0:	f3bf 8f4f 	dsb	sy
 80131e4:	613b      	str	r3, [r7, #16]
 80131e6:	e7fe      	b.n	80131e6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80131e8:	683b      	ldr	r3, [r7, #0]
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d109      	bne.n	8013202 <xTaskCheckForTimeOut+0x3e>
 80131ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131f2:	f383 8811 	msr	BASEPRI, r3
 80131f6:	f3bf 8f6f 	isb	sy
 80131fa:	f3bf 8f4f 	dsb	sy
 80131fe:	60fb      	str	r3, [r7, #12]
 8013200:	e7fe      	b.n	8013200 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8013202:	f000 ff09 	bl	8014018 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8013206:	4b1d      	ldr	r3, [pc, #116]	; (801327c <xTaskCheckForTimeOut+0xb8>)
 8013208:	681b      	ldr	r3, [r3, #0]
 801320a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	685b      	ldr	r3, [r3, #4]
 8013210:	69ba      	ldr	r2, [r7, #24]
 8013212:	1ad3      	subs	r3, r2, r3
 8013214:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8013216:	683b      	ldr	r3, [r7, #0]
 8013218:	681b      	ldr	r3, [r3, #0]
 801321a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801321e:	d102      	bne.n	8013226 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8013220:	2300      	movs	r3, #0
 8013222:	61fb      	str	r3, [r7, #28]
 8013224:	e023      	b.n	801326e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	681a      	ldr	r2, [r3, #0]
 801322a:	4b15      	ldr	r3, [pc, #84]	; (8013280 <xTaskCheckForTimeOut+0xbc>)
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	429a      	cmp	r2, r3
 8013230:	d007      	beq.n	8013242 <xTaskCheckForTimeOut+0x7e>
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	685b      	ldr	r3, [r3, #4]
 8013236:	69ba      	ldr	r2, [r7, #24]
 8013238:	429a      	cmp	r2, r3
 801323a:	d302      	bcc.n	8013242 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801323c:	2301      	movs	r3, #1
 801323e:	61fb      	str	r3, [r7, #28]
 8013240:	e015      	b.n	801326e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8013242:	683b      	ldr	r3, [r7, #0]
 8013244:	681b      	ldr	r3, [r3, #0]
 8013246:	697a      	ldr	r2, [r7, #20]
 8013248:	429a      	cmp	r2, r3
 801324a:	d20b      	bcs.n	8013264 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801324c:	683b      	ldr	r3, [r7, #0]
 801324e:	681a      	ldr	r2, [r3, #0]
 8013250:	697b      	ldr	r3, [r7, #20]
 8013252:	1ad2      	subs	r2, r2, r3
 8013254:	683b      	ldr	r3, [r7, #0]
 8013256:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8013258:	6878      	ldr	r0, [r7, #4]
 801325a:	f7ff ff9d 	bl	8013198 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801325e:	2300      	movs	r3, #0
 8013260:	61fb      	str	r3, [r7, #28]
 8013262:	e004      	b.n	801326e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8013264:	683b      	ldr	r3, [r7, #0]
 8013266:	2200      	movs	r2, #0
 8013268:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801326a:	2301      	movs	r3, #1
 801326c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801326e:	f000 ff01 	bl	8014074 <vPortExitCritical>

	return xReturn;
 8013272:	69fb      	ldr	r3, [r7, #28]
}
 8013274:	4618      	mov	r0, r3
 8013276:	3720      	adds	r7, #32
 8013278:	46bd      	mov	sp, r7
 801327a:	bd80      	pop	{r7, pc}
 801327c:	20001030 	.word	0x20001030
 8013280:	20001044 	.word	0x20001044

08013284 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8013284:	b480      	push	{r7}
 8013286:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8013288:	4b03      	ldr	r3, [pc, #12]	; (8013298 <vTaskMissedYield+0x14>)
 801328a:	2201      	movs	r2, #1
 801328c:	601a      	str	r2, [r3, #0]
}
 801328e:	bf00      	nop
 8013290:	46bd      	mov	sp, r7
 8013292:	bc80      	pop	{r7}
 8013294:	4770      	bx	lr
 8013296:	bf00      	nop
 8013298:	20001040 	.word	0x20001040

0801329c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801329c:	b580      	push	{r7, lr}
 801329e:	b082      	sub	sp, #8
 80132a0:	af00      	add	r7, sp, #0
 80132a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80132a4:	f000 f852 	bl	801334c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80132a8:	4b06      	ldr	r3, [pc, #24]	; (80132c4 <prvIdleTask+0x28>)
 80132aa:	681b      	ldr	r3, [r3, #0]
 80132ac:	2b01      	cmp	r3, #1
 80132ae:	d9f9      	bls.n	80132a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80132b0:	4b05      	ldr	r3, [pc, #20]	; (80132c8 <prvIdleTask+0x2c>)
 80132b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80132b6:	601a      	str	r2, [r3, #0]
 80132b8:	f3bf 8f4f 	dsb	sy
 80132bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80132c0:	e7f0      	b.n	80132a4 <prvIdleTask+0x8>
 80132c2:	bf00      	nop
 80132c4:	20000b5c 	.word	0x20000b5c
 80132c8:	e000ed04 	.word	0xe000ed04

080132cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80132cc:	b580      	push	{r7, lr}
 80132ce:	b082      	sub	sp, #8
 80132d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80132d2:	2300      	movs	r3, #0
 80132d4:	607b      	str	r3, [r7, #4]
 80132d6:	e00c      	b.n	80132f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80132d8:	687a      	ldr	r2, [r7, #4]
 80132da:	4613      	mov	r3, r2
 80132dc:	009b      	lsls	r3, r3, #2
 80132de:	4413      	add	r3, r2
 80132e0:	009b      	lsls	r3, r3, #2
 80132e2:	4a12      	ldr	r2, [pc, #72]	; (801332c <prvInitialiseTaskLists+0x60>)
 80132e4:	4413      	add	r3, r2
 80132e6:	4618      	mov	r0, r3
 80132e8:	f7fe fa34 	bl	8011754 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	3301      	adds	r3, #1
 80132f0:	607b      	str	r3, [r7, #4]
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	2b37      	cmp	r3, #55	; 0x37
 80132f6:	d9ef      	bls.n	80132d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80132f8:	480d      	ldr	r0, [pc, #52]	; (8013330 <prvInitialiseTaskLists+0x64>)
 80132fa:	f7fe fa2b 	bl	8011754 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80132fe:	480d      	ldr	r0, [pc, #52]	; (8013334 <prvInitialiseTaskLists+0x68>)
 8013300:	f7fe fa28 	bl	8011754 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013304:	480c      	ldr	r0, [pc, #48]	; (8013338 <prvInitialiseTaskLists+0x6c>)
 8013306:	f7fe fa25 	bl	8011754 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801330a:	480c      	ldr	r0, [pc, #48]	; (801333c <prvInitialiseTaskLists+0x70>)
 801330c:	f7fe fa22 	bl	8011754 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013310:	480b      	ldr	r0, [pc, #44]	; (8013340 <prvInitialiseTaskLists+0x74>)
 8013312:	f7fe fa1f 	bl	8011754 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8013316:	4b0b      	ldr	r3, [pc, #44]	; (8013344 <prvInitialiseTaskLists+0x78>)
 8013318:	4a05      	ldr	r2, [pc, #20]	; (8013330 <prvInitialiseTaskLists+0x64>)
 801331a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801331c:	4b0a      	ldr	r3, [pc, #40]	; (8013348 <prvInitialiseTaskLists+0x7c>)
 801331e:	4a05      	ldr	r2, [pc, #20]	; (8013334 <prvInitialiseTaskLists+0x68>)
 8013320:	601a      	str	r2, [r3, #0]
}
 8013322:	bf00      	nop
 8013324:	3708      	adds	r7, #8
 8013326:	46bd      	mov	sp, r7
 8013328:	bd80      	pop	{r7, pc}
 801332a:	bf00      	nop
 801332c:	20000b5c 	.word	0x20000b5c
 8013330:	20000fbc 	.word	0x20000fbc
 8013334:	20000fd0 	.word	0x20000fd0
 8013338:	20000fec 	.word	0x20000fec
 801333c:	20001000 	.word	0x20001000
 8013340:	20001018 	.word	0x20001018
 8013344:	20000fe4 	.word	0x20000fe4
 8013348:	20000fe8 	.word	0x20000fe8

0801334c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801334c:	b580      	push	{r7, lr}
 801334e:	b082      	sub	sp, #8
 8013350:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013352:	e019      	b.n	8013388 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8013354:	f000 fe60 	bl	8014018 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8013358:	4b0f      	ldr	r3, [pc, #60]	; (8013398 <prvCheckTasksWaitingTermination+0x4c>)
 801335a:	68db      	ldr	r3, [r3, #12]
 801335c:	68db      	ldr	r3, [r3, #12]
 801335e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	3304      	adds	r3, #4
 8013364:	4618      	mov	r0, r3
 8013366:	f7fe fa7b 	bl	8011860 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801336a:	4b0c      	ldr	r3, [pc, #48]	; (801339c <prvCheckTasksWaitingTermination+0x50>)
 801336c:	681b      	ldr	r3, [r3, #0]
 801336e:	3b01      	subs	r3, #1
 8013370:	4a0a      	ldr	r2, [pc, #40]	; (801339c <prvCheckTasksWaitingTermination+0x50>)
 8013372:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013374:	4b0a      	ldr	r3, [pc, #40]	; (80133a0 <prvCheckTasksWaitingTermination+0x54>)
 8013376:	681b      	ldr	r3, [r3, #0]
 8013378:	3b01      	subs	r3, #1
 801337a:	4a09      	ldr	r2, [pc, #36]	; (80133a0 <prvCheckTasksWaitingTermination+0x54>)
 801337c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801337e:	f000 fe79 	bl	8014074 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8013382:	6878      	ldr	r0, [r7, #4]
 8013384:	f000 f80e 	bl	80133a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013388:	4b05      	ldr	r3, [pc, #20]	; (80133a0 <prvCheckTasksWaitingTermination+0x54>)
 801338a:	681b      	ldr	r3, [r3, #0]
 801338c:	2b00      	cmp	r3, #0
 801338e:	d1e1      	bne.n	8013354 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013390:	bf00      	nop
 8013392:	3708      	adds	r7, #8
 8013394:	46bd      	mov	sp, r7
 8013396:	bd80      	pop	{r7, pc}
 8013398:	20001000 	.word	0x20001000
 801339c:	2000102c 	.word	0x2000102c
 80133a0:	20001014 	.word	0x20001014

080133a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80133a4:	b580      	push	{r7, lr}
 80133a6:	b084      	sub	sp, #16
 80133a8:	af00      	add	r7, sp, #0
 80133aa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	d108      	bne.n	80133c8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80133ba:	4618      	mov	r0, r3
 80133bc:	f000 ffe4 	bl	8014388 <vPortFree>
				vPortFree( pxTCB );
 80133c0:	6878      	ldr	r0, [r7, #4]
 80133c2:	f000 ffe1 	bl	8014388 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80133c6:	e017      	b.n	80133f8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80133ce:	2b01      	cmp	r3, #1
 80133d0:	d103      	bne.n	80133da <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80133d2:	6878      	ldr	r0, [r7, #4]
 80133d4:	f000 ffd8 	bl	8014388 <vPortFree>
	}
 80133d8:	e00e      	b.n	80133f8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80133e0:	2b02      	cmp	r3, #2
 80133e2:	d009      	beq.n	80133f8 <prvDeleteTCB+0x54>
 80133e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133e8:	f383 8811 	msr	BASEPRI, r3
 80133ec:	f3bf 8f6f 	isb	sy
 80133f0:	f3bf 8f4f 	dsb	sy
 80133f4:	60fb      	str	r3, [r7, #12]
 80133f6:	e7fe      	b.n	80133f6 <prvDeleteTCB+0x52>
	}
 80133f8:	bf00      	nop
 80133fa:	3710      	adds	r7, #16
 80133fc:	46bd      	mov	sp, r7
 80133fe:	bd80      	pop	{r7, pc}

08013400 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013400:	b480      	push	{r7}
 8013402:	b083      	sub	sp, #12
 8013404:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013406:	4b0e      	ldr	r3, [pc, #56]	; (8013440 <prvResetNextTaskUnblockTime+0x40>)
 8013408:	681b      	ldr	r3, [r3, #0]
 801340a:	681b      	ldr	r3, [r3, #0]
 801340c:	2b00      	cmp	r3, #0
 801340e:	d101      	bne.n	8013414 <prvResetNextTaskUnblockTime+0x14>
 8013410:	2301      	movs	r3, #1
 8013412:	e000      	b.n	8013416 <prvResetNextTaskUnblockTime+0x16>
 8013414:	2300      	movs	r3, #0
 8013416:	2b00      	cmp	r3, #0
 8013418:	d004      	beq.n	8013424 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801341a:	4b0a      	ldr	r3, [pc, #40]	; (8013444 <prvResetNextTaskUnblockTime+0x44>)
 801341c:	f04f 32ff 	mov.w	r2, #4294967295
 8013420:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8013422:	e008      	b.n	8013436 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8013424:	4b06      	ldr	r3, [pc, #24]	; (8013440 <prvResetNextTaskUnblockTime+0x40>)
 8013426:	681b      	ldr	r3, [r3, #0]
 8013428:	68db      	ldr	r3, [r3, #12]
 801342a:	68db      	ldr	r3, [r3, #12]
 801342c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	685b      	ldr	r3, [r3, #4]
 8013432:	4a04      	ldr	r2, [pc, #16]	; (8013444 <prvResetNextTaskUnblockTime+0x44>)
 8013434:	6013      	str	r3, [r2, #0]
}
 8013436:	bf00      	nop
 8013438:	370c      	adds	r7, #12
 801343a:	46bd      	mov	sp, r7
 801343c:	bc80      	pop	{r7}
 801343e:	4770      	bx	lr
 8013440:	20000fe4 	.word	0x20000fe4
 8013444:	2000104c 	.word	0x2000104c

08013448 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8013448:	b480      	push	{r7}
 801344a:	b083      	sub	sp, #12
 801344c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 801344e:	4b04      	ldr	r3, [pc, #16]	; (8013460 <xTaskGetCurrentTaskHandle+0x18>)
 8013450:	681b      	ldr	r3, [r3, #0]
 8013452:	607b      	str	r3, [r7, #4]

		return xReturn;
 8013454:	687b      	ldr	r3, [r7, #4]
	}
 8013456:	4618      	mov	r0, r3
 8013458:	370c      	adds	r7, #12
 801345a:	46bd      	mov	sp, r7
 801345c:	bc80      	pop	{r7}
 801345e:	4770      	bx	lr
 8013460:	20000b58 	.word	0x20000b58

08013464 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8013464:	b480      	push	{r7}
 8013466:	b083      	sub	sp, #12
 8013468:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801346a:	4b0b      	ldr	r3, [pc, #44]	; (8013498 <xTaskGetSchedulerState+0x34>)
 801346c:	681b      	ldr	r3, [r3, #0]
 801346e:	2b00      	cmp	r3, #0
 8013470:	d102      	bne.n	8013478 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8013472:	2301      	movs	r3, #1
 8013474:	607b      	str	r3, [r7, #4]
 8013476:	e008      	b.n	801348a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013478:	4b08      	ldr	r3, [pc, #32]	; (801349c <xTaskGetSchedulerState+0x38>)
 801347a:	681b      	ldr	r3, [r3, #0]
 801347c:	2b00      	cmp	r3, #0
 801347e:	d102      	bne.n	8013486 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8013480:	2302      	movs	r3, #2
 8013482:	607b      	str	r3, [r7, #4]
 8013484:	e001      	b.n	801348a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8013486:	2300      	movs	r3, #0
 8013488:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801348a:	687b      	ldr	r3, [r7, #4]
	}
 801348c:	4618      	mov	r0, r3
 801348e:	370c      	adds	r7, #12
 8013490:	46bd      	mov	sp, r7
 8013492:	bc80      	pop	{r7}
 8013494:	4770      	bx	lr
 8013496:	bf00      	nop
 8013498:	20001038 	.word	0x20001038
 801349c:	20001054 	.word	0x20001054

080134a0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80134a0:	b580      	push	{r7, lr}
 80134a2:	b084      	sub	sp, #16
 80134a4:	af00      	add	r7, sp, #0
 80134a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80134ac:	2300      	movs	r3, #0
 80134ae:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d056      	beq.n	8013564 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80134b6:	68bb      	ldr	r3, [r7, #8]
 80134b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134ba:	4b2d      	ldr	r3, [pc, #180]	; (8013570 <xTaskPriorityInherit+0xd0>)
 80134bc:	681b      	ldr	r3, [r3, #0]
 80134be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134c0:	429a      	cmp	r2, r3
 80134c2:	d246      	bcs.n	8013552 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80134c4:	68bb      	ldr	r3, [r7, #8]
 80134c6:	699b      	ldr	r3, [r3, #24]
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	db06      	blt.n	80134da <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80134cc:	4b28      	ldr	r3, [pc, #160]	; (8013570 <xTaskPriorityInherit+0xd0>)
 80134ce:	681b      	ldr	r3, [r3, #0]
 80134d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134d2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80134d6:	68bb      	ldr	r3, [r7, #8]
 80134d8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80134da:	68bb      	ldr	r3, [r7, #8]
 80134dc:	6959      	ldr	r1, [r3, #20]
 80134de:	68bb      	ldr	r3, [r7, #8]
 80134e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134e2:	4613      	mov	r3, r2
 80134e4:	009b      	lsls	r3, r3, #2
 80134e6:	4413      	add	r3, r2
 80134e8:	009b      	lsls	r3, r3, #2
 80134ea:	4a22      	ldr	r2, [pc, #136]	; (8013574 <xTaskPriorityInherit+0xd4>)
 80134ec:	4413      	add	r3, r2
 80134ee:	4299      	cmp	r1, r3
 80134f0:	d101      	bne.n	80134f6 <xTaskPriorityInherit+0x56>
 80134f2:	2301      	movs	r3, #1
 80134f4:	e000      	b.n	80134f8 <xTaskPriorityInherit+0x58>
 80134f6:	2300      	movs	r3, #0
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d022      	beq.n	8013542 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80134fc:	68bb      	ldr	r3, [r7, #8]
 80134fe:	3304      	adds	r3, #4
 8013500:	4618      	mov	r0, r3
 8013502:	f7fe f9ad 	bl	8011860 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013506:	4b1a      	ldr	r3, [pc, #104]	; (8013570 <xTaskPriorityInherit+0xd0>)
 8013508:	681b      	ldr	r3, [r3, #0]
 801350a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801350c:	68bb      	ldr	r3, [r7, #8]
 801350e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8013510:	68bb      	ldr	r3, [r7, #8]
 8013512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013514:	4b18      	ldr	r3, [pc, #96]	; (8013578 <xTaskPriorityInherit+0xd8>)
 8013516:	681b      	ldr	r3, [r3, #0]
 8013518:	429a      	cmp	r2, r3
 801351a:	d903      	bls.n	8013524 <xTaskPriorityInherit+0x84>
 801351c:	68bb      	ldr	r3, [r7, #8]
 801351e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013520:	4a15      	ldr	r2, [pc, #84]	; (8013578 <xTaskPriorityInherit+0xd8>)
 8013522:	6013      	str	r3, [r2, #0]
 8013524:	68bb      	ldr	r3, [r7, #8]
 8013526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013528:	4613      	mov	r3, r2
 801352a:	009b      	lsls	r3, r3, #2
 801352c:	4413      	add	r3, r2
 801352e:	009b      	lsls	r3, r3, #2
 8013530:	4a10      	ldr	r2, [pc, #64]	; (8013574 <xTaskPriorityInherit+0xd4>)
 8013532:	441a      	add	r2, r3
 8013534:	68bb      	ldr	r3, [r7, #8]
 8013536:	3304      	adds	r3, #4
 8013538:	4619      	mov	r1, r3
 801353a:	4610      	mov	r0, r2
 801353c:	f7fe f935 	bl	80117aa <vListInsertEnd>
 8013540:	e004      	b.n	801354c <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013542:	4b0b      	ldr	r3, [pc, #44]	; (8013570 <xTaskPriorityInherit+0xd0>)
 8013544:	681b      	ldr	r3, [r3, #0]
 8013546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013548:	68bb      	ldr	r3, [r7, #8]
 801354a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801354c:	2301      	movs	r3, #1
 801354e:	60fb      	str	r3, [r7, #12]
 8013550:	e008      	b.n	8013564 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8013552:	68bb      	ldr	r3, [r7, #8]
 8013554:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013556:	4b06      	ldr	r3, [pc, #24]	; (8013570 <xTaskPriorityInherit+0xd0>)
 8013558:	681b      	ldr	r3, [r3, #0]
 801355a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801355c:	429a      	cmp	r2, r3
 801355e:	d201      	bcs.n	8013564 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8013560:	2301      	movs	r3, #1
 8013562:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013564:	68fb      	ldr	r3, [r7, #12]
	}
 8013566:	4618      	mov	r0, r3
 8013568:	3710      	adds	r7, #16
 801356a:	46bd      	mov	sp, r7
 801356c:	bd80      	pop	{r7, pc}
 801356e:	bf00      	nop
 8013570:	20000b58 	.word	0x20000b58
 8013574:	20000b5c 	.word	0x20000b5c
 8013578:	20001034 	.word	0x20001034

0801357c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801357c:	b580      	push	{r7, lr}
 801357e:	b086      	sub	sp, #24
 8013580:	af00      	add	r7, sp, #0
 8013582:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8013588:	2300      	movs	r3, #0
 801358a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	2b00      	cmp	r3, #0
 8013590:	d054      	beq.n	801363c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8013592:	4b2d      	ldr	r3, [pc, #180]	; (8013648 <xTaskPriorityDisinherit+0xcc>)
 8013594:	681b      	ldr	r3, [r3, #0]
 8013596:	693a      	ldr	r2, [r7, #16]
 8013598:	429a      	cmp	r2, r3
 801359a:	d009      	beq.n	80135b0 <xTaskPriorityDisinherit+0x34>
 801359c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135a0:	f383 8811 	msr	BASEPRI, r3
 80135a4:	f3bf 8f6f 	isb	sy
 80135a8:	f3bf 8f4f 	dsb	sy
 80135ac:	60fb      	str	r3, [r7, #12]
 80135ae:	e7fe      	b.n	80135ae <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80135b0:	693b      	ldr	r3, [r7, #16]
 80135b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d109      	bne.n	80135cc <xTaskPriorityDisinherit+0x50>
 80135b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135bc:	f383 8811 	msr	BASEPRI, r3
 80135c0:	f3bf 8f6f 	isb	sy
 80135c4:	f3bf 8f4f 	dsb	sy
 80135c8:	60bb      	str	r3, [r7, #8]
 80135ca:	e7fe      	b.n	80135ca <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80135cc:	693b      	ldr	r3, [r7, #16]
 80135ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80135d0:	1e5a      	subs	r2, r3, #1
 80135d2:	693b      	ldr	r3, [r7, #16]
 80135d4:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80135d6:	693b      	ldr	r3, [r7, #16]
 80135d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80135da:	693b      	ldr	r3, [r7, #16]
 80135dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80135de:	429a      	cmp	r2, r3
 80135e0:	d02c      	beq.n	801363c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80135e2:	693b      	ldr	r3, [r7, #16]
 80135e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	d128      	bne.n	801363c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80135ea:	693b      	ldr	r3, [r7, #16]
 80135ec:	3304      	adds	r3, #4
 80135ee:	4618      	mov	r0, r3
 80135f0:	f7fe f936 	bl	8011860 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80135f4:	693b      	ldr	r3, [r7, #16]
 80135f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80135f8:	693b      	ldr	r3, [r7, #16]
 80135fa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80135fc:	693b      	ldr	r3, [r7, #16]
 80135fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013600:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013604:	693b      	ldr	r3, [r7, #16]
 8013606:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8013608:	693b      	ldr	r3, [r7, #16]
 801360a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801360c:	4b0f      	ldr	r3, [pc, #60]	; (801364c <xTaskPriorityDisinherit+0xd0>)
 801360e:	681b      	ldr	r3, [r3, #0]
 8013610:	429a      	cmp	r2, r3
 8013612:	d903      	bls.n	801361c <xTaskPriorityDisinherit+0xa0>
 8013614:	693b      	ldr	r3, [r7, #16]
 8013616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013618:	4a0c      	ldr	r2, [pc, #48]	; (801364c <xTaskPriorityDisinherit+0xd0>)
 801361a:	6013      	str	r3, [r2, #0]
 801361c:	693b      	ldr	r3, [r7, #16]
 801361e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013620:	4613      	mov	r3, r2
 8013622:	009b      	lsls	r3, r3, #2
 8013624:	4413      	add	r3, r2
 8013626:	009b      	lsls	r3, r3, #2
 8013628:	4a09      	ldr	r2, [pc, #36]	; (8013650 <xTaskPriorityDisinherit+0xd4>)
 801362a:	441a      	add	r2, r3
 801362c:	693b      	ldr	r3, [r7, #16]
 801362e:	3304      	adds	r3, #4
 8013630:	4619      	mov	r1, r3
 8013632:	4610      	mov	r0, r2
 8013634:	f7fe f8b9 	bl	80117aa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8013638:	2301      	movs	r3, #1
 801363a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801363c:	697b      	ldr	r3, [r7, #20]
	}
 801363e:	4618      	mov	r0, r3
 8013640:	3718      	adds	r7, #24
 8013642:	46bd      	mov	sp, r7
 8013644:	bd80      	pop	{r7, pc}
 8013646:	bf00      	nop
 8013648:	20000b58 	.word	0x20000b58
 801364c:	20001034 	.word	0x20001034
 8013650:	20000b5c 	.word	0x20000b5c

08013654 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8013654:	b580      	push	{r7, lr}
 8013656:	b088      	sub	sp, #32
 8013658:	af00      	add	r7, sp, #0
 801365a:	6078      	str	r0, [r7, #4]
 801365c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8013662:	2301      	movs	r3, #1
 8013664:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	2b00      	cmp	r3, #0
 801366a:	d06d      	beq.n	8013748 <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801366c:	69bb      	ldr	r3, [r7, #24]
 801366e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013670:	2b00      	cmp	r3, #0
 8013672:	d109      	bne.n	8013688 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8013674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013678:	f383 8811 	msr	BASEPRI, r3
 801367c:	f3bf 8f6f 	isb	sy
 8013680:	f3bf 8f4f 	dsb	sy
 8013684:	60fb      	str	r3, [r7, #12]
 8013686:	e7fe      	b.n	8013686 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8013688:	69bb      	ldr	r3, [r7, #24]
 801368a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801368c:	683a      	ldr	r2, [r7, #0]
 801368e:	429a      	cmp	r2, r3
 8013690:	d902      	bls.n	8013698 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8013692:	683b      	ldr	r3, [r7, #0]
 8013694:	61fb      	str	r3, [r7, #28]
 8013696:	e002      	b.n	801369e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8013698:	69bb      	ldr	r3, [r7, #24]
 801369a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801369c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801369e:	69bb      	ldr	r3, [r7, #24]
 80136a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136a2:	69fa      	ldr	r2, [r7, #28]
 80136a4:	429a      	cmp	r2, r3
 80136a6:	d04f      	beq.n	8013748 <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80136a8:	69bb      	ldr	r3, [r7, #24]
 80136aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80136ac:	697a      	ldr	r2, [r7, #20]
 80136ae:	429a      	cmp	r2, r3
 80136b0:	d14a      	bne.n	8013748 <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80136b2:	4b27      	ldr	r3, [pc, #156]	; (8013750 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80136b4:	681b      	ldr	r3, [r3, #0]
 80136b6:	69ba      	ldr	r2, [r7, #24]
 80136b8:	429a      	cmp	r2, r3
 80136ba:	d109      	bne.n	80136d0 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 80136bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136c0:	f383 8811 	msr	BASEPRI, r3
 80136c4:	f3bf 8f6f 	isb	sy
 80136c8:	f3bf 8f4f 	dsb	sy
 80136cc:	60bb      	str	r3, [r7, #8]
 80136ce:	e7fe      	b.n	80136ce <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80136d0:	69bb      	ldr	r3, [r7, #24]
 80136d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136d4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80136d6:	69bb      	ldr	r3, [r7, #24]
 80136d8:	69fa      	ldr	r2, [r7, #28]
 80136da:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80136dc:	69bb      	ldr	r3, [r7, #24]
 80136de:	699b      	ldr	r3, [r3, #24]
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	db04      	blt.n	80136ee <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80136e4:	69fb      	ldr	r3, [r7, #28]
 80136e6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80136ea:	69bb      	ldr	r3, [r7, #24]
 80136ec:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80136ee:	69bb      	ldr	r3, [r7, #24]
 80136f0:	6959      	ldr	r1, [r3, #20]
 80136f2:	693a      	ldr	r2, [r7, #16]
 80136f4:	4613      	mov	r3, r2
 80136f6:	009b      	lsls	r3, r3, #2
 80136f8:	4413      	add	r3, r2
 80136fa:	009b      	lsls	r3, r3, #2
 80136fc:	4a15      	ldr	r2, [pc, #84]	; (8013754 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80136fe:	4413      	add	r3, r2
 8013700:	4299      	cmp	r1, r3
 8013702:	d101      	bne.n	8013708 <vTaskPriorityDisinheritAfterTimeout+0xb4>
 8013704:	2301      	movs	r3, #1
 8013706:	e000      	b.n	801370a <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8013708:	2300      	movs	r3, #0
 801370a:	2b00      	cmp	r3, #0
 801370c:	d01c      	beq.n	8013748 <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801370e:	69bb      	ldr	r3, [r7, #24]
 8013710:	3304      	adds	r3, #4
 8013712:	4618      	mov	r0, r3
 8013714:	f7fe f8a4 	bl	8011860 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8013718:	69bb      	ldr	r3, [r7, #24]
 801371a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801371c:	4b0e      	ldr	r3, [pc, #56]	; (8013758 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 801371e:	681b      	ldr	r3, [r3, #0]
 8013720:	429a      	cmp	r2, r3
 8013722:	d903      	bls.n	801372c <vTaskPriorityDisinheritAfterTimeout+0xd8>
 8013724:	69bb      	ldr	r3, [r7, #24]
 8013726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013728:	4a0b      	ldr	r2, [pc, #44]	; (8013758 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 801372a:	6013      	str	r3, [r2, #0]
 801372c:	69bb      	ldr	r3, [r7, #24]
 801372e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013730:	4613      	mov	r3, r2
 8013732:	009b      	lsls	r3, r3, #2
 8013734:	4413      	add	r3, r2
 8013736:	009b      	lsls	r3, r3, #2
 8013738:	4a06      	ldr	r2, [pc, #24]	; (8013754 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801373a:	441a      	add	r2, r3
 801373c:	69bb      	ldr	r3, [r7, #24]
 801373e:	3304      	adds	r3, #4
 8013740:	4619      	mov	r1, r3
 8013742:	4610      	mov	r0, r2
 8013744:	f7fe f831 	bl	80117aa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013748:	bf00      	nop
 801374a:	3720      	adds	r7, #32
 801374c:	46bd      	mov	sp, r7
 801374e:	bd80      	pop	{r7, pc}
 8013750:	20000b58 	.word	0x20000b58
 8013754:	20000b5c 	.word	0x20000b5c
 8013758:	20001034 	.word	0x20001034

0801375c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 801375c:	b480      	push	{r7}
 801375e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8013760:	4b07      	ldr	r3, [pc, #28]	; (8013780 <pvTaskIncrementMutexHeldCount+0x24>)
 8013762:	681b      	ldr	r3, [r3, #0]
 8013764:	2b00      	cmp	r3, #0
 8013766:	d004      	beq.n	8013772 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8013768:	4b05      	ldr	r3, [pc, #20]	; (8013780 <pvTaskIncrementMutexHeldCount+0x24>)
 801376a:	681b      	ldr	r3, [r3, #0]
 801376c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801376e:	3201      	adds	r2, #1
 8013770:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 8013772:	4b03      	ldr	r3, [pc, #12]	; (8013780 <pvTaskIncrementMutexHeldCount+0x24>)
 8013774:	681b      	ldr	r3, [r3, #0]
	}
 8013776:	4618      	mov	r0, r3
 8013778:	46bd      	mov	sp, r7
 801377a:	bc80      	pop	{r7}
 801377c:	4770      	bx	lr
 801377e:	bf00      	nop
 8013780:	20000b58 	.word	0x20000b58

08013784 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013784:	b580      	push	{r7, lr}
 8013786:	b084      	sub	sp, #16
 8013788:	af00      	add	r7, sp, #0
 801378a:	6078      	str	r0, [r7, #4]
 801378c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801378e:	4b21      	ldr	r3, [pc, #132]	; (8013814 <prvAddCurrentTaskToDelayedList+0x90>)
 8013790:	681b      	ldr	r3, [r3, #0]
 8013792:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013794:	4b20      	ldr	r3, [pc, #128]	; (8013818 <prvAddCurrentTaskToDelayedList+0x94>)
 8013796:	681b      	ldr	r3, [r3, #0]
 8013798:	3304      	adds	r3, #4
 801379a:	4618      	mov	r0, r3
 801379c:	f7fe f860 	bl	8011860 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80137a6:	d10a      	bne.n	80137be <prvAddCurrentTaskToDelayedList+0x3a>
 80137a8:	683b      	ldr	r3, [r7, #0]
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d007      	beq.n	80137be <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80137ae:	4b1a      	ldr	r3, [pc, #104]	; (8013818 <prvAddCurrentTaskToDelayedList+0x94>)
 80137b0:	681b      	ldr	r3, [r3, #0]
 80137b2:	3304      	adds	r3, #4
 80137b4:	4619      	mov	r1, r3
 80137b6:	4819      	ldr	r0, [pc, #100]	; (801381c <prvAddCurrentTaskToDelayedList+0x98>)
 80137b8:	f7fd fff7 	bl	80117aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80137bc:	e026      	b.n	801380c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80137be:	68fa      	ldr	r2, [r7, #12]
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	4413      	add	r3, r2
 80137c4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80137c6:	4b14      	ldr	r3, [pc, #80]	; (8013818 <prvAddCurrentTaskToDelayedList+0x94>)
 80137c8:	681b      	ldr	r3, [r3, #0]
 80137ca:	68ba      	ldr	r2, [r7, #8]
 80137cc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80137ce:	68ba      	ldr	r2, [r7, #8]
 80137d0:	68fb      	ldr	r3, [r7, #12]
 80137d2:	429a      	cmp	r2, r3
 80137d4:	d209      	bcs.n	80137ea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80137d6:	4b12      	ldr	r3, [pc, #72]	; (8013820 <prvAddCurrentTaskToDelayedList+0x9c>)
 80137d8:	681a      	ldr	r2, [r3, #0]
 80137da:	4b0f      	ldr	r3, [pc, #60]	; (8013818 <prvAddCurrentTaskToDelayedList+0x94>)
 80137dc:	681b      	ldr	r3, [r3, #0]
 80137de:	3304      	adds	r3, #4
 80137e0:	4619      	mov	r1, r3
 80137e2:	4610      	mov	r0, r2
 80137e4:	f7fe f804 	bl	80117f0 <vListInsert>
}
 80137e8:	e010      	b.n	801380c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80137ea:	4b0e      	ldr	r3, [pc, #56]	; (8013824 <prvAddCurrentTaskToDelayedList+0xa0>)
 80137ec:	681a      	ldr	r2, [r3, #0]
 80137ee:	4b0a      	ldr	r3, [pc, #40]	; (8013818 <prvAddCurrentTaskToDelayedList+0x94>)
 80137f0:	681b      	ldr	r3, [r3, #0]
 80137f2:	3304      	adds	r3, #4
 80137f4:	4619      	mov	r1, r3
 80137f6:	4610      	mov	r0, r2
 80137f8:	f7fd fffa 	bl	80117f0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80137fc:	4b0a      	ldr	r3, [pc, #40]	; (8013828 <prvAddCurrentTaskToDelayedList+0xa4>)
 80137fe:	681b      	ldr	r3, [r3, #0]
 8013800:	68ba      	ldr	r2, [r7, #8]
 8013802:	429a      	cmp	r2, r3
 8013804:	d202      	bcs.n	801380c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8013806:	4a08      	ldr	r2, [pc, #32]	; (8013828 <prvAddCurrentTaskToDelayedList+0xa4>)
 8013808:	68bb      	ldr	r3, [r7, #8]
 801380a:	6013      	str	r3, [r2, #0]
}
 801380c:	bf00      	nop
 801380e:	3710      	adds	r7, #16
 8013810:	46bd      	mov	sp, r7
 8013812:	bd80      	pop	{r7, pc}
 8013814:	20001030 	.word	0x20001030
 8013818:	20000b58 	.word	0x20000b58
 801381c:	20001018 	.word	0x20001018
 8013820:	20000fe8 	.word	0x20000fe8
 8013824:	20000fe4 	.word	0x20000fe4
 8013828:	2000104c 	.word	0x2000104c

0801382c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801382c:	b580      	push	{r7, lr}
 801382e:	b08a      	sub	sp, #40	; 0x28
 8013830:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8013832:	2300      	movs	r3, #0
 8013834:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8013836:	f000 fac3 	bl	8013dc0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801383a:	4b1c      	ldr	r3, [pc, #112]	; (80138ac <xTimerCreateTimerTask+0x80>)
 801383c:	681b      	ldr	r3, [r3, #0]
 801383e:	2b00      	cmp	r3, #0
 8013840:	d021      	beq.n	8013886 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8013842:	2300      	movs	r3, #0
 8013844:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8013846:	2300      	movs	r3, #0
 8013848:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801384a:	1d3a      	adds	r2, r7, #4
 801384c:	f107 0108 	add.w	r1, r7, #8
 8013850:	f107 030c 	add.w	r3, r7, #12
 8013854:	4618      	mov	r0, r3
 8013856:	f7fd ff63 	bl	8011720 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801385a:	6879      	ldr	r1, [r7, #4]
 801385c:	68bb      	ldr	r3, [r7, #8]
 801385e:	68fa      	ldr	r2, [r7, #12]
 8013860:	9202      	str	r2, [sp, #8]
 8013862:	9301      	str	r3, [sp, #4]
 8013864:	2302      	movs	r3, #2
 8013866:	9300      	str	r3, [sp, #0]
 8013868:	2300      	movs	r3, #0
 801386a:	460a      	mov	r2, r1
 801386c:	4910      	ldr	r1, [pc, #64]	; (80138b0 <xTimerCreateTimerTask+0x84>)
 801386e:	4811      	ldr	r0, [pc, #68]	; (80138b4 <xTimerCreateTimerTask+0x88>)
 8013870:	f7fe ffc0 	bl	80127f4 <xTaskCreateStatic>
 8013874:	4602      	mov	r2, r0
 8013876:	4b10      	ldr	r3, [pc, #64]	; (80138b8 <xTimerCreateTimerTask+0x8c>)
 8013878:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801387a:	4b0f      	ldr	r3, [pc, #60]	; (80138b8 <xTimerCreateTimerTask+0x8c>)
 801387c:	681b      	ldr	r3, [r3, #0]
 801387e:	2b00      	cmp	r3, #0
 8013880:	d001      	beq.n	8013886 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8013882:	2301      	movs	r3, #1
 8013884:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8013886:	697b      	ldr	r3, [r7, #20]
 8013888:	2b00      	cmp	r3, #0
 801388a:	d109      	bne.n	80138a0 <xTimerCreateTimerTask+0x74>
 801388c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013890:	f383 8811 	msr	BASEPRI, r3
 8013894:	f3bf 8f6f 	isb	sy
 8013898:	f3bf 8f4f 	dsb	sy
 801389c:	613b      	str	r3, [r7, #16]
 801389e:	e7fe      	b.n	801389e <xTimerCreateTimerTask+0x72>
	return xReturn;
 80138a0:	697b      	ldr	r3, [r7, #20]
}
 80138a2:	4618      	mov	r0, r3
 80138a4:	3718      	adds	r7, #24
 80138a6:	46bd      	mov	sp, r7
 80138a8:	bd80      	pop	{r7, pc}
 80138aa:	bf00      	nop
 80138ac:	20001090 	.word	0x20001090
 80138b0:	0801a960 	.word	0x0801a960
 80138b4:	080139d5 	.word	0x080139d5
 80138b8:	20001094 	.word	0x20001094

080138bc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80138bc:	b580      	push	{r7, lr}
 80138be:	b08a      	sub	sp, #40	; 0x28
 80138c0:	af00      	add	r7, sp, #0
 80138c2:	60f8      	str	r0, [r7, #12]
 80138c4:	60b9      	str	r1, [r7, #8]
 80138c6:	607a      	str	r2, [r7, #4]
 80138c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80138ca:	2300      	movs	r3, #0
 80138cc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80138ce:	68fb      	ldr	r3, [r7, #12]
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d109      	bne.n	80138e8 <xTimerGenericCommand+0x2c>
 80138d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138d8:	f383 8811 	msr	BASEPRI, r3
 80138dc:	f3bf 8f6f 	isb	sy
 80138e0:	f3bf 8f4f 	dsb	sy
 80138e4:	623b      	str	r3, [r7, #32]
 80138e6:	e7fe      	b.n	80138e6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80138e8:	4b19      	ldr	r3, [pc, #100]	; (8013950 <xTimerGenericCommand+0x94>)
 80138ea:	681b      	ldr	r3, [r3, #0]
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d02a      	beq.n	8013946 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80138f0:	68bb      	ldr	r3, [r7, #8]
 80138f2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80138f8:	68fb      	ldr	r3, [r7, #12]
 80138fa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80138fc:	68bb      	ldr	r3, [r7, #8]
 80138fe:	2b05      	cmp	r3, #5
 8013900:	dc18      	bgt.n	8013934 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8013902:	f7ff fdaf 	bl	8013464 <xTaskGetSchedulerState>
 8013906:	4603      	mov	r3, r0
 8013908:	2b02      	cmp	r3, #2
 801390a:	d109      	bne.n	8013920 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801390c:	4b10      	ldr	r3, [pc, #64]	; (8013950 <xTimerGenericCommand+0x94>)
 801390e:	6818      	ldr	r0, [r3, #0]
 8013910:	f107 0110 	add.w	r1, r7, #16
 8013914:	2300      	movs	r3, #0
 8013916:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013918:	f7fe f9ec 	bl	8011cf4 <xQueueGenericSend>
 801391c:	6278      	str	r0, [r7, #36]	; 0x24
 801391e:	e012      	b.n	8013946 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8013920:	4b0b      	ldr	r3, [pc, #44]	; (8013950 <xTimerGenericCommand+0x94>)
 8013922:	6818      	ldr	r0, [r3, #0]
 8013924:	f107 0110 	add.w	r1, r7, #16
 8013928:	2300      	movs	r3, #0
 801392a:	2200      	movs	r2, #0
 801392c:	f7fe f9e2 	bl	8011cf4 <xQueueGenericSend>
 8013930:	6278      	str	r0, [r7, #36]	; 0x24
 8013932:	e008      	b.n	8013946 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8013934:	4b06      	ldr	r3, [pc, #24]	; (8013950 <xTimerGenericCommand+0x94>)
 8013936:	6818      	ldr	r0, [r3, #0]
 8013938:	f107 0110 	add.w	r1, r7, #16
 801393c:	2300      	movs	r3, #0
 801393e:	683a      	ldr	r2, [r7, #0]
 8013940:	f7fe fad2 	bl	8011ee8 <xQueueGenericSendFromISR>
 8013944:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8013946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013948:	4618      	mov	r0, r3
 801394a:	3728      	adds	r7, #40	; 0x28
 801394c:	46bd      	mov	sp, r7
 801394e:	bd80      	pop	{r7, pc}
 8013950:	20001090 	.word	0x20001090

08013954 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8013954:	b580      	push	{r7, lr}
 8013956:	b088      	sub	sp, #32
 8013958:	af02      	add	r7, sp, #8
 801395a:	6078      	str	r0, [r7, #4]
 801395c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 801395e:	4b1c      	ldr	r3, [pc, #112]	; (80139d0 <prvProcessExpiredTimer+0x7c>)
 8013960:	681b      	ldr	r3, [r3, #0]
 8013962:	68db      	ldr	r3, [r3, #12]
 8013964:	68db      	ldr	r3, [r3, #12]
 8013966:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013968:	697b      	ldr	r3, [r7, #20]
 801396a:	3304      	adds	r3, #4
 801396c:	4618      	mov	r0, r3
 801396e:	f7fd ff77 	bl	8011860 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8013972:	697b      	ldr	r3, [r7, #20]
 8013974:	69db      	ldr	r3, [r3, #28]
 8013976:	2b01      	cmp	r3, #1
 8013978:	d121      	bne.n	80139be <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801397a:	697b      	ldr	r3, [r7, #20]
 801397c:	699a      	ldr	r2, [r3, #24]
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	18d1      	adds	r1, r2, r3
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	683a      	ldr	r2, [r7, #0]
 8013986:	6978      	ldr	r0, [r7, #20]
 8013988:	f000 f8c8 	bl	8013b1c <prvInsertTimerInActiveList>
 801398c:	4603      	mov	r3, r0
 801398e:	2b00      	cmp	r3, #0
 8013990:	d015      	beq.n	80139be <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013992:	2300      	movs	r3, #0
 8013994:	9300      	str	r3, [sp, #0]
 8013996:	2300      	movs	r3, #0
 8013998:	687a      	ldr	r2, [r7, #4]
 801399a:	2100      	movs	r1, #0
 801399c:	6978      	ldr	r0, [r7, #20]
 801399e:	f7ff ff8d 	bl	80138bc <xTimerGenericCommand>
 80139a2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80139a4:	693b      	ldr	r3, [r7, #16]
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	d109      	bne.n	80139be <prvProcessExpiredTimer+0x6a>
 80139aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139ae:	f383 8811 	msr	BASEPRI, r3
 80139b2:	f3bf 8f6f 	isb	sy
 80139b6:	f3bf 8f4f 	dsb	sy
 80139ba:	60fb      	str	r3, [r7, #12]
 80139bc:	e7fe      	b.n	80139bc <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80139be:	697b      	ldr	r3, [r7, #20]
 80139c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139c2:	6978      	ldr	r0, [r7, #20]
 80139c4:	4798      	blx	r3
}
 80139c6:	bf00      	nop
 80139c8:	3718      	adds	r7, #24
 80139ca:	46bd      	mov	sp, r7
 80139cc:	bd80      	pop	{r7, pc}
 80139ce:	bf00      	nop
 80139d0:	20001088 	.word	0x20001088

080139d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80139d4:	b580      	push	{r7, lr}
 80139d6:	b084      	sub	sp, #16
 80139d8:	af00      	add	r7, sp, #0
 80139da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80139dc:	f107 0308 	add.w	r3, r7, #8
 80139e0:	4618      	mov	r0, r3
 80139e2:	f000 f857 	bl	8013a94 <prvGetNextExpireTime>
 80139e6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80139e8:	68bb      	ldr	r3, [r7, #8]
 80139ea:	4619      	mov	r1, r3
 80139ec:	68f8      	ldr	r0, [r7, #12]
 80139ee:	f000 f803 	bl	80139f8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80139f2:	f000 f8d5 	bl	8013ba0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80139f6:	e7f1      	b.n	80139dc <prvTimerTask+0x8>

080139f8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80139f8:	b580      	push	{r7, lr}
 80139fa:	b084      	sub	sp, #16
 80139fc:	af00      	add	r7, sp, #0
 80139fe:	6078      	str	r0, [r7, #4]
 8013a00:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8013a02:	f7ff f92b 	bl	8012c5c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013a06:	f107 0308 	add.w	r3, r7, #8
 8013a0a:	4618      	mov	r0, r3
 8013a0c:	f000 f866 	bl	8013adc <prvSampleTimeNow>
 8013a10:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8013a12:	68bb      	ldr	r3, [r7, #8]
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	d130      	bne.n	8013a7a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8013a18:	683b      	ldr	r3, [r7, #0]
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d10a      	bne.n	8013a34 <prvProcessTimerOrBlockTask+0x3c>
 8013a1e:	687a      	ldr	r2, [r7, #4]
 8013a20:	68fb      	ldr	r3, [r7, #12]
 8013a22:	429a      	cmp	r2, r3
 8013a24:	d806      	bhi.n	8013a34 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8013a26:	f7ff f927 	bl	8012c78 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8013a2a:	68f9      	ldr	r1, [r7, #12]
 8013a2c:	6878      	ldr	r0, [r7, #4]
 8013a2e:	f7ff ff91 	bl	8013954 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8013a32:	e024      	b.n	8013a7e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8013a34:	683b      	ldr	r3, [r7, #0]
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	d008      	beq.n	8013a4c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8013a3a:	4b13      	ldr	r3, [pc, #76]	; (8013a88 <prvProcessTimerOrBlockTask+0x90>)
 8013a3c:	681b      	ldr	r3, [r3, #0]
 8013a3e:	681b      	ldr	r3, [r3, #0]
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	bf0c      	ite	eq
 8013a44:	2301      	moveq	r3, #1
 8013a46:	2300      	movne	r3, #0
 8013a48:	b2db      	uxtb	r3, r3
 8013a4a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8013a4c:	4b0f      	ldr	r3, [pc, #60]	; (8013a8c <prvProcessTimerOrBlockTask+0x94>)
 8013a4e:	6818      	ldr	r0, [r3, #0]
 8013a50:	687a      	ldr	r2, [r7, #4]
 8013a52:	68fb      	ldr	r3, [r7, #12]
 8013a54:	1ad3      	subs	r3, r2, r3
 8013a56:	683a      	ldr	r2, [r7, #0]
 8013a58:	4619      	mov	r1, r3
 8013a5a:	f7fe fe97 	bl	801278c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8013a5e:	f7ff f90b 	bl	8012c78 <xTaskResumeAll>
 8013a62:	4603      	mov	r3, r0
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	d10a      	bne.n	8013a7e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8013a68:	4b09      	ldr	r3, [pc, #36]	; (8013a90 <prvProcessTimerOrBlockTask+0x98>)
 8013a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013a6e:	601a      	str	r2, [r3, #0]
 8013a70:	f3bf 8f4f 	dsb	sy
 8013a74:	f3bf 8f6f 	isb	sy
}
 8013a78:	e001      	b.n	8013a7e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8013a7a:	f7ff f8fd 	bl	8012c78 <xTaskResumeAll>
}
 8013a7e:	bf00      	nop
 8013a80:	3710      	adds	r7, #16
 8013a82:	46bd      	mov	sp, r7
 8013a84:	bd80      	pop	{r7, pc}
 8013a86:	bf00      	nop
 8013a88:	2000108c 	.word	0x2000108c
 8013a8c:	20001090 	.word	0x20001090
 8013a90:	e000ed04 	.word	0xe000ed04

08013a94 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8013a94:	b480      	push	{r7}
 8013a96:	b085      	sub	sp, #20
 8013a98:	af00      	add	r7, sp, #0
 8013a9a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8013a9c:	4b0e      	ldr	r3, [pc, #56]	; (8013ad8 <prvGetNextExpireTime+0x44>)
 8013a9e:	681b      	ldr	r3, [r3, #0]
 8013aa0:	681b      	ldr	r3, [r3, #0]
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	bf0c      	ite	eq
 8013aa6:	2301      	moveq	r3, #1
 8013aa8:	2300      	movne	r3, #0
 8013aaa:	b2db      	uxtb	r3, r3
 8013aac:	461a      	mov	r2, r3
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	681b      	ldr	r3, [r3, #0]
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	d105      	bne.n	8013ac6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013aba:	4b07      	ldr	r3, [pc, #28]	; (8013ad8 <prvGetNextExpireTime+0x44>)
 8013abc:	681b      	ldr	r3, [r3, #0]
 8013abe:	68db      	ldr	r3, [r3, #12]
 8013ac0:	681b      	ldr	r3, [r3, #0]
 8013ac2:	60fb      	str	r3, [r7, #12]
 8013ac4:	e001      	b.n	8013aca <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8013ac6:	2300      	movs	r3, #0
 8013ac8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8013aca:	68fb      	ldr	r3, [r7, #12]
}
 8013acc:	4618      	mov	r0, r3
 8013ace:	3714      	adds	r7, #20
 8013ad0:	46bd      	mov	sp, r7
 8013ad2:	bc80      	pop	{r7}
 8013ad4:	4770      	bx	lr
 8013ad6:	bf00      	nop
 8013ad8:	20001088 	.word	0x20001088

08013adc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8013adc:	b580      	push	{r7, lr}
 8013ade:	b084      	sub	sp, #16
 8013ae0:	af00      	add	r7, sp, #0
 8013ae2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8013ae4:	f7ff f964 	bl	8012db0 <xTaskGetTickCount>
 8013ae8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8013aea:	4b0b      	ldr	r3, [pc, #44]	; (8013b18 <prvSampleTimeNow+0x3c>)
 8013aec:	681b      	ldr	r3, [r3, #0]
 8013aee:	68fa      	ldr	r2, [r7, #12]
 8013af0:	429a      	cmp	r2, r3
 8013af2:	d205      	bcs.n	8013b00 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8013af4:	f000 f904 	bl	8013d00 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	2201      	movs	r2, #1
 8013afc:	601a      	str	r2, [r3, #0]
 8013afe:	e002      	b.n	8013b06 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	2200      	movs	r2, #0
 8013b04:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8013b06:	4a04      	ldr	r2, [pc, #16]	; (8013b18 <prvSampleTimeNow+0x3c>)
 8013b08:	68fb      	ldr	r3, [r7, #12]
 8013b0a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8013b0c:	68fb      	ldr	r3, [r7, #12]
}
 8013b0e:	4618      	mov	r0, r3
 8013b10:	3710      	adds	r7, #16
 8013b12:	46bd      	mov	sp, r7
 8013b14:	bd80      	pop	{r7, pc}
 8013b16:	bf00      	nop
 8013b18:	20001098 	.word	0x20001098

08013b1c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8013b1c:	b580      	push	{r7, lr}
 8013b1e:	b086      	sub	sp, #24
 8013b20:	af00      	add	r7, sp, #0
 8013b22:	60f8      	str	r0, [r7, #12]
 8013b24:	60b9      	str	r1, [r7, #8]
 8013b26:	607a      	str	r2, [r7, #4]
 8013b28:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8013b2a:	2300      	movs	r3, #0
 8013b2c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8013b2e:	68fb      	ldr	r3, [r7, #12]
 8013b30:	68ba      	ldr	r2, [r7, #8]
 8013b32:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013b34:	68fb      	ldr	r3, [r7, #12]
 8013b36:	68fa      	ldr	r2, [r7, #12]
 8013b38:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8013b3a:	68ba      	ldr	r2, [r7, #8]
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	429a      	cmp	r2, r3
 8013b40:	d812      	bhi.n	8013b68 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013b42:	687a      	ldr	r2, [r7, #4]
 8013b44:	683b      	ldr	r3, [r7, #0]
 8013b46:	1ad2      	subs	r2, r2, r3
 8013b48:	68fb      	ldr	r3, [r7, #12]
 8013b4a:	699b      	ldr	r3, [r3, #24]
 8013b4c:	429a      	cmp	r2, r3
 8013b4e:	d302      	bcc.n	8013b56 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8013b50:	2301      	movs	r3, #1
 8013b52:	617b      	str	r3, [r7, #20]
 8013b54:	e01b      	b.n	8013b8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8013b56:	4b10      	ldr	r3, [pc, #64]	; (8013b98 <prvInsertTimerInActiveList+0x7c>)
 8013b58:	681a      	ldr	r2, [r3, #0]
 8013b5a:	68fb      	ldr	r3, [r7, #12]
 8013b5c:	3304      	adds	r3, #4
 8013b5e:	4619      	mov	r1, r3
 8013b60:	4610      	mov	r0, r2
 8013b62:	f7fd fe45 	bl	80117f0 <vListInsert>
 8013b66:	e012      	b.n	8013b8e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8013b68:	687a      	ldr	r2, [r7, #4]
 8013b6a:	683b      	ldr	r3, [r7, #0]
 8013b6c:	429a      	cmp	r2, r3
 8013b6e:	d206      	bcs.n	8013b7e <prvInsertTimerInActiveList+0x62>
 8013b70:	68ba      	ldr	r2, [r7, #8]
 8013b72:	683b      	ldr	r3, [r7, #0]
 8013b74:	429a      	cmp	r2, r3
 8013b76:	d302      	bcc.n	8013b7e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8013b78:	2301      	movs	r3, #1
 8013b7a:	617b      	str	r3, [r7, #20]
 8013b7c:	e007      	b.n	8013b8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013b7e:	4b07      	ldr	r3, [pc, #28]	; (8013b9c <prvInsertTimerInActiveList+0x80>)
 8013b80:	681a      	ldr	r2, [r3, #0]
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	3304      	adds	r3, #4
 8013b86:	4619      	mov	r1, r3
 8013b88:	4610      	mov	r0, r2
 8013b8a:	f7fd fe31 	bl	80117f0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8013b8e:	697b      	ldr	r3, [r7, #20]
}
 8013b90:	4618      	mov	r0, r3
 8013b92:	3718      	adds	r7, #24
 8013b94:	46bd      	mov	sp, r7
 8013b96:	bd80      	pop	{r7, pc}
 8013b98:	2000108c 	.word	0x2000108c
 8013b9c:	20001088 	.word	0x20001088

08013ba0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8013ba0:	b580      	push	{r7, lr}
 8013ba2:	b08e      	sub	sp, #56	; 0x38
 8013ba4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013ba6:	e099      	b.n	8013cdc <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	da17      	bge.n	8013bde <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8013bae:	1d3b      	adds	r3, r7, #4
 8013bb0:	3304      	adds	r3, #4
 8013bb2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8013bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d109      	bne.n	8013bce <prvProcessReceivedCommands+0x2e>
 8013bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bbe:	f383 8811 	msr	BASEPRI, r3
 8013bc2:	f3bf 8f6f 	isb	sy
 8013bc6:	f3bf 8f4f 	dsb	sy
 8013bca:	61fb      	str	r3, [r7, #28]
 8013bcc:	e7fe      	b.n	8013bcc <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8013bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bd0:	681b      	ldr	r3, [r3, #0]
 8013bd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013bd4:	6850      	ldr	r0, [r2, #4]
 8013bd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013bd8:	6892      	ldr	r2, [r2, #8]
 8013bda:	4611      	mov	r1, r2
 8013bdc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	db7a      	blt.n	8013cda <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8013be4:	68fb      	ldr	r3, [r7, #12]
 8013be6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8013be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bea:	695b      	ldr	r3, [r3, #20]
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	d004      	beq.n	8013bfa <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bf2:	3304      	adds	r3, #4
 8013bf4:	4618      	mov	r0, r3
 8013bf6:	f7fd fe33 	bl	8011860 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013bfa:	463b      	mov	r3, r7
 8013bfc:	4618      	mov	r0, r3
 8013bfe:	f7ff ff6d 	bl	8013adc <prvSampleTimeNow>
 8013c02:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	2b09      	cmp	r3, #9
 8013c08:	d868      	bhi.n	8013cdc <prvProcessReceivedCommands+0x13c>
 8013c0a:	a201      	add	r2, pc, #4	; (adr r2, 8013c10 <prvProcessReceivedCommands+0x70>)
 8013c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c10:	08013c39 	.word	0x08013c39
 8013c14:	08013c39 	.word	0x08013c39
 8013c18:	08013c39 	.word	0x08013c39
 8013c1c:	08013cdd 	.word	0x08013cdd
 8013c20:	08013c93 	.word	0x08013c93
 8013c24:	08013cc9 	.word	0x08013cc9
 8013c28:	08013c39 	.word	0x08013c39
 8013c2c:	08013c39 	.word	0x08013c39
 8013c30:	08013cdd 	.word	0x08013cdd
 8013c34:	08013c93 	.word	0x08013c93
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8013c38:	68ba      	ldr	r2, [r7, #8]
 8013c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c3c:	699b      	ldr	r3, [r3, #24]
 8013c3e:	18d1      	adds	r1, r2, r3
 8013c40:	68bb      	ldr	r3, [r7, #8]
 8013c42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013c44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013c46:	f7ff ff69 	bl	8013b1c <prvInsertTimerInActiveList>
 8013c4a:	4603      	mov	r3, r0
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d045      	beq.n	8013cdc <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013c56:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8013c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c5a:	69db      	ldr	r3, [r3, #28]
 8013c5c:	2b01      	cmp	r3, #1
 8013c5e:	d13d      	bne.n	8013cdc <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8013c60:	68ba      	ldr	r2, [r7, #8]
 8013c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c64:	699b      	ldr	r3, [r3, #24]
 8013c66:	441a      	add	r2, r3
 8013c68:	2300      	movs	r3, #0
 8013c6a:	9300      	str	r3, [sp, #0]
 8013c6c:	2300      	movs	r3, #0
 8013c6e:	2100      	movs	r1, #0
 8013c70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013c72:	f7ff fe23 	bl	80138bc <xTimerGenericCommand>
 8013c76:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8013c78:	6a3b      	ldr	r3, [r7, #32]
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	d12e      	bne.n	8013cdc <prvProcessReceivedCommands+0x13c>
 8013c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c82:	f383 8811 	msr	BASEPRI, r3
 8013c86:	f3bf 8f6f 	isb	sy
 8013c8a:	f3bf 8f4f 	dsb	sy
 8013c8e:	61bb      	str	r3, [r7, #24]
 8013c90:	e7fe      	b.n	8013c90 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8013c92:	68ba      	ldr	r2, [r7, #8]
 8013c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c96:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8013c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c9a:	699b      	ldr	r3, [r3, #24]
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d109      	bne.n	8013cb4 <prvProcessReceivedCommands+0x114>
 8013ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ca4:	f383 8811 	msr	BASEPRI, r3
 8013ca8:	f3bf 8f6f 	isb	sy
 8013cac:	f3bf 8f4f 	dsb	sy
 8013cb0:	617b      	str	r3, [r7, #20]
 8013cb2:	e7fe      	b.n	8013cb2 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8013cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cb6:	699a      	ldr	r2, [r3, #24]
 8013cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cba:	18d1      	adds	r1, r2, r3
 8013cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013cc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013cc2:	f7ff ff2b 	bl	8013b1c <prvInsertTimerInActiveList>
					break;
 8013cc6:	e009      	b.n	8013cdc <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8013cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d104      	bne.n	8013cdc <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8013cd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013cd4:	f000 fb58 	bl	8014388 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8013cd8:	e000      	b.n	8013cdc <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8013cda:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013cdc:	4b07      	ldr	r3, [pc, #28]	; (8013cfc <prvProcessReceivedCommands+0x15c>)
 8013cde:	681b      	ldr	r3, [r3, #0]
 8013ce0:	1d39      	adds	r1, r7, #4
 8013ce2:	2200      	movs	r2, #0
 8013ce4:	4618      	mov	r0, r3
 8013ce6:	f7fe fa1d 	bl	8012124 <xQueueReceive>
 8013cea:	4603      	mov	r3, r0
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	f47f af5b 	bne.w	8013ba8 <prvProcessReceivedCommands+0x8>
	}
}
 8013cf2:	bf00      	nop
 8013cf4:	3730      	adds	r7, #48	; 0x30
 8013cf6:	46bd      	mov	sp, r7
 8013cf8:	bd80      	pop	{r7, pc}
 8013cfa:	bf00      	nop
 8013cfc:	20001090 	.word	0x20001090

08013d00 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8013d00:	b580      	push	{r7, lr}
 8013d02:	b088      	sub	sp, #32
 8013d04:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013d06:	e044      	b.n	8013d92 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013d08:	4b2b      	ldr	r3, [pc, #172]	; (8013db8 <prvSwitchTimerLists+0xb8>)
 8013d0a:	681b      	ldr	r3, [r3, #0]
 8013d0c:	68db      	ldr	r3, [r3, #12]
 8013d0e:	681b      	ldr	r3, [r3, #0]
 8013d10:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013d12:	4b29      	ldr	r3, [pc, #164]	; (8013db8 <prvSwitchTimerLists+0xb8>)
 8013d14:	681b      	ldr	r3, [r3, #0]
 8013d16:	68db      	ldr	r3, [r3, #12]
 8013d18:	68db      	ldr	r3, [r3, #12]
 8013d1a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013d1c:	68fb      	ldr	r3, [r7, #12]
 8013d1e:	3304      	adds	r3, #4
 8013d20:	4618      	mov	r0, r3
 8013d22:	f7fd fd9d 	bl	8011860 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013d26:	68fb      	ldr	r3, [r7, #12]
 8013d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d2a:	68f8      	ldr	r0, [r7, #12]
 8013d2c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8013d2e:	68fb      	ldr	r3, [r7, #12]
 8013d30:	69db      	ldr	r3, [r3, #28]
 8013d32:	2b01      	cmp	r3, #1
 8013d34:	d12d      	bne.n	8013d92 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8013d36:	68fb      	ldr	r3, [r7, #12]
 8013d38:	699b      	ldr	r3, [r3, #24]
 8013d3a:	693a      	ldr	r2, [r7, #16]
 8013d3c:	4413      	add	r3, r2
 8013d3e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8013d40:	68ba      	ldr	r2, [r7, #8]
 8013d42:	693b      	ldr	r3, [r7, #16]
 8013d44:	429a      	cmp	r2, r3
 8013d46:	d90e      	bls.n	8013d66 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8013d48:	68fb      	ldr	r3, [r7, #12]
 8013d4a:	68ba      	ldr	r2, [r7, #8]
 8013d4c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013d4e:	68fb      	ldr	r3, [r7, #12]
 8013d50:	68fa      	ldr	r2, [r7, #12]
 8013d52:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013d54:	4b18      	ldr	r3, [pc, #96]	; (8013db8 <prvSwitchTimerLists+0xb8>)
 8013d56:	681a      	ldr	r2, [r3, #0]
 8013d58:	68fb      	ldr	r3, [r7, #12]
 8013d5a:	3304      	adds	r3, #4
 8013d5c:	4619      	mov	r1, r3
 8013d5e:	4610      	mov	r0, r2
 8013d60:	f7fd fd46 	bl	80117f0 <vListInsert>
 8013d64:	e015      	b.n	8013d92 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013d66:	2300      	movs	r3, #0
 8013d68:	9300      	str	r3, [sp, #0]
 8013d6a:	2300      	movs	r3, #0
 8013d6c:	693a      	ldr	r2, [r7, #16]
 8013d6e:	2100      	movs	r1, #0
 8013d70:	68f8      	ldr	r0, [r7, #12]
 8013d72:	f7ff fda3 	bl	80138bc <xTimerGenericCommand>
 8013d76:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d109      	bne.n	8013d92 <prvSwitchTimerLists+0x92>
 8013d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d82:	f383 8811 	msr	BASEPRI, r3
 8013d86:	f3bf 8f6f 	isb	sy
 8013d8a:	f3bf 8f4f 	dsb	sy
 8013d8e:	603b      	str	r3, [r7, #0]
 8013d90:	e7fe      	b.n	8013d90 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013d92:	4b09      	ldr	r3, [pc, #36]	; (8013db8 <prvSwitchTimerLists+0xb8>)
 8013d94:	681b      	ldr	r3, [r3, #0]
 8013d96:	681b      	ldr	r3, [r3, #0]
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d1b5      	bne.n	8013d08 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8013d9c:	4b06      	ldr	r3, [pc, #24]	; (8013db8 <prvSwitchTimerLists+0xb8>)
 8013d9e:	681b      	ldr	r3, [r3, #0]
 8013da0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8013da2:	4b06      	ldr	r3, [pc, #24]	; (8013dbc <prvSwitchTimerLists+0xbc>)
 8013da4:	681b      	ldr	r3, [r3, #0]
 8013da6:	4a04      	ldr	r2, [pc, #16]	; (8013db8 <prvSwitchTimerLists+0xb8>)
 8013da8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8013daa:	4a04      	ldr	r2, [pc, #16]	; (8013dbc <prvSwitchTimerLists+0xbc>)
 8013dac:	697b      	ldr	r3, [r7, #20]
 8013dae:	6013      	str	r3, [r2, #0]
}
 8013db0:	bf00      	nop
 8013db2:	3718      	adds	r7, #24
 8013db4:	46bd      	mov	sp, r7
 8013db6:	bd80      	pop	{r7, pc}
 8013db8:	20001088 	.word	0x20001088
 8013dbc:	2000108c 	.word	0x2000108c

08013dc0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8013dc0:	b580      	push	{r7, lr}
 8013dc2:	b082      	sub	sp, #8
 8013dc4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8013dc6:	f000 f927 	bl	8014018 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8013dca:	4b15      	ldr	r3, [pc, #84]	; (8013e20 <prvCheckForValidListAndQueue+0x60>)
 8013dcc:	681b      	ldr	r3, [r3, #0]
 8013dce:	2b00      	cmp	r3, #0
 8013dd0:	d120      	bne.n	8013e14 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8013dd2:	4814      	ldr	r0, [pc, #80]	; (8013e24 <prvCheckForValidListAndQueue+0x64>)
 8013dd4:	f7fd fcbe 	bl	8011754 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8013dd8:	4813      	ldr	r0, [pc, #76]	; (8013e28 <prvCheckForValidListAndQueue+0x68>)
 8013dda:	f7fd fcbb 	bl	8011754 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8013dde:	4b13      	ldr	r3, [pc, #76]	; (8013e2c <prvCheckForValidListAndQueue+0x6c>)
 8013de0:	4a10      	ldr	r2, [pc, #64]	; (8013e24 <prvCheckForValidListAndQueue+0x64>)
 8013de2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8013de4:	4b12      	ldr	r3, [pc, #72]	; (8013e30 <prvCheckForValidListAndQueue+0x70>)
 8013de6:	4a10      	ldr	r2, [pc, #64]	; (8013e28 <prvCheckForValidListAndQueue+0x68>)
 8013de8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8013dea:	2300      	movs	r3, #0
 8013dec:	9300      	str	r3, [sp, #0]
 8013dee:	4b11      	ldr	r3, [pc, #68]	; (8013e34 <prvCheckForValidListAndQueue+0x74>)
 8013df0:	4a11      	ldr	r2, [pc, #68]	; (8013e38 <prvCheckForValidListAndQueue+0x78>)
 8013df2:	2110      	movs	r1, #16
 8013df4:	200a      	movs	r0, #10
 8013df6:	f7fd fdc5 	bl	8011984 <xQueueGenericCreateStatic>
 8013dfa:	4602      	mov	r2, r0
 8013dfc:	4b08      	ldr	r3, [pc, #32]	; (8013e20 <prvCheckForValidListAndQueue+0x60>)
 8013dfe:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8013e00:	4b07      	ldr	r3, [pc, #28]	; (8013e20 <prvCheckForValidListAndQueue+0x60>)
 8013e02:	681b      	ldr	r3, [r3, #0]
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	d005      	beq.n	8013e14 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8013e08:	4b05      	ldr	r3, [pc, #20]	; (8013e20 <prvCheckForValidListAndQueue+0x60>)
 8013e0a:	681b      	ldr	r3, [r3, #0]
 8013e0c:	490b      	ldr	r1, [pc, #44]	; (8013e3c <prvCheckForValidListAndQueue+0x7c>)
 8013e0e:	4618      	mov	r0, r3
 8013e10:	f7fe fc94 	bl	801273c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013e14:	f000 f92e 	bl	8014074 <vPortExitCritical>
}
 8013e18:	bf00      	nop
 8013e1a:	46bd      	mov	sp, r7
 8013e1c:	bd80      	pop	{r7, pc}
 8013e1e:	bf00      	nop
 8013e20:	20001090 	.word	0x20001090
 8013e24:	20001060 	.word	0x20001060
 8013e28:	20001074 	.word	0x20001074
 8013e2c:	20001088 	.word	0x20001088
 8013e30:	2000108c 	.word	0x2000108c
 8013e34:	2000113c 	.word	0x2000113c
 8013e38:	2000109c 	.word	0x2000109c
 8013e3c:	0801a968 	.word	0x0801a968

08013e40 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8013e40:	b480      	push	{r7}
 8013e42:	b085      	sub	sp, #20
 8013e44:	af00      	add	r7, sp, #0
 8013e46:	60f8      	str	r0, [r7, #12]
 8013e48:	60b9      	str	r1, [r7, #8]
 8013e4a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8013e4c:	68fb      	ldr	r3, [r7, #12]
 8013e4e:	3b04      	subs	r3, #4
 8013e50:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8013e52:	68fb      	ldr	r3, [r7, #12]
 8013e54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8013e58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013e5a:	68fb      	ldr	r3, [r7, #12]
 8013e5c:	3b04      	subs	r3, #4
 8013e5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013e60:	68bb      	ldr	r3, [r7, #8]
 8013e62:	f023 0201 	bic.w	r2, r3, #1
 8013e66:	68fb      	ldr	r3, [r7, #12]
 8013e68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013e6a:	68fb      	ldr	r3, [r7, #12]
 8013e6c:	3b04      	subs	r3, #4
 8013e6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013e70:	4a08      	ldr	r2, [pc, #32]	; (8013e94 <pxPortInitialiseStack+0x54>)
 8013e72:	68fb      	ldr	r3, [r7, #12]
 8013e74:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8013e76:	68fb      	ldr	r3, [r7, #12]
 8013e78:	3b14      	subs	r3, #20
 8013e7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8013e7c:	687a      	ldr	r2, [r7, #4]
 8013e7e:	68fb      	ldr	r3, [r7, #12]
 8013e80:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8013e82:	68fb      	ldr	r3, [r7, #12]
 8013e84:	3b20      	subs	r3, #32
 8013e86:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8013e88:	68fb      	ldr	r3, [r7, #12]
}
 8013e8a:	4618      	mov	r0, r3
 8013e8c:	3714      	adds	r7, #20
 8013e8e:	46bd      	mov	sp, r7
 8013e90:	bc80      	pop	{r7}
 8013e92:	4770      	bx	lr
 8013e94:	08013e99 	.word	0x08013e99

08013e98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8013e98:	b480      	push	{r7}
 8013e9a:	b085      	sub	sp, #20
 8013e9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8013e9e:	2300      	movs	r3, #0
 8013ea0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8013ea2:	4b10      	ldr	r3, [pc, #64]	; (8013ee4 <prvTaskExitError+0x4c>)
 8013ea4:	681b      	ldr	r3, [r3, #0]
 8013ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013eaa:	d009      	beq.n	8013ec0 <prvTaskExitError+0x28>
 8013eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013eb0:	f383 8811 	msr	BASEPRI, r3
 8013eb4:	f3bf 8f6f 	isb	sy
 8013eb8:	f3bf 8f4f 	dsb	sy
 8013ebc:	60fb      	str	r3, [r7, #12]
 8013ebe:	e7fe      	b.n	8013ebe <prvTaskExitError+0x26>
 8013ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ec4:	f383 8811 	msr	BASEPRI, r3
 8013ec8:	f3bf 8f6f 	isb	sy
 8013ecc:	f3bf 8f4f 	dsb	sy
 8013ed0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8013ed2:	bf00      	nop
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	d0fc      	beq.n	8013ed4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8013eda:	bf00      	nop
 8013edc:	3714      	adds	r7, #20
 8013ede:	46bd      	mov	sp, r7
 8013ee0:	bc80      	pop	{r7}
 8013ee2:	4770      	bx	lr
 8013ee4:	200000d4 	.word	0x200000d4
	...

08013ef0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013ef0:	4b07      	ldr	r3, [pc, #28]	; (8013f10 <pxCurrentTCBConst2>)
 8013ef2:	6819      	ldr	r1, [r3, #0]
 8013ef4:	6808      	ldr	r0, [r1, #0]
 8013ef6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8013efa:	f380 8809 	msr	PSP, r0
 8013efe:	f3bf 8f6f 	isb	sy
 8013f02:	f04f 0000 	mov.w	r0, #0
 8013f06:	f380 8811 	msr	BASEPRI, r0
 8013f0a:	f04e 0e0d 	orr.w	lr, lr, #13
 8013f0e:	4770      	bx	lr

08013f10 <pxCurrentTCBConst2>:
 8013f10:	20000b58 	.word	0x20000b58
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013f14:	bf00      	nop
 8013f16:	bf00      	nop

08013f18 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8013f18:	4806      	ldr	r0, [pc, #24]	; (8013f34 <prvPortStartFirstTask+0x1c>)
 8013f1a:	6800      	ldr	r0, [r0, #0]
 8013f1c:	6800      	ldr	r0, [r0, #0]
 8013f1e:	f380 8808 	msr	MSP, r0
 8013f22:	b662      	cpsie	i
 8013f24:	b661      	cpsie	f
 8013f26:	f3bf 8f4f 	dsb	sy
 8013f2a:	f3bf 8f6f 	isb	sy
 8013f2e:	df00      	svc	0
 8013f30:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8013f32:	bf00      	nop
 8013f34:	e000ed08 	.word	0xe000ed08

08013f38 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013f38:	b580      	push	{r7, lr}
 8013f3a:	b084      	sub	sp, #16
 8013f3c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8013f3e:	4b31      	ldr	r3, [pc, #196]	; (8014004 <xPortStartScheduler+0xcc>)
 8013f40:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	781b      	ldrb	r3, [r3, #0]
 8013f46:	b2db      	uxtb	r3, r3
 8013f48:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8013f4a:	68fb      	ldr	r3, [r7, #12]
 8013f4c:	22ff      	movs	r2, #255	; 0xff
 8013f4e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013f50:	68fb      	ldr	r3, [r7, #12]
 8013f52:	781b      	ldrb	r3, [r3, #0]
 8013f54:	b2db      	uxtb	r3, r3
 8013f56:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013f58:	78fb      	ldrb	r3, [r7, #3]
 8013f5a:	b2db      	uxtb	r3, r3
 8013f5c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8013f60:	b2da      	uxtb	r2, r3
 8013f62:	4b29      	ldr	r3, [pc, #164]	; (8014008 <xPortStartScheduler+0xd0>)
 8013f64:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8013f66:	4b29      	ldr	r3, [pc, #164]	; (801400c <xPortStartScheduler+0xd4>)
 8013f68:	2207      	movs	r2, #7
 8013f6a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013f6c:	e009      	b.n	8013f82 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8013f6e:	4b27      	ldr	r3, [pc, #156]	; (801400c <xPortStartScheduler+0xd4>)
 8013f70:	681b      	ldr	r3, [r3, #0]
 8013f72:	3b01      	subs	r3, #1
 8013f74:	4a25      	ldr	r2, [pc, #148]	; (801400c <xPortStartScheduler+0xd4>)
 8013f76:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013f78:	78fb      	ldrb	r3, [r7, #3]
 8013f7a:	b2db      	uxtb	r3, r3
 8013f7c:	005b      	lsls	r3, r3, #1
 8013f7e:	b2db      	uxtb	r3, r3
 8013f80:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013f82:	78fb      	ldrb	r3, [r7, #3]
 8013f84:	b2db      	uxtb	r3, r3
 8013f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013f8a:	2b80      	cmp	r3, #128	; 0x80
 8013f8c:	d0ef      	beq.n	8013f6e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8013f8e:	4b1f      	ldr	r3, [pc, #124]	; (801400c <xPortStartScheduler+0xd4>)
 8013f90:	681b      	ldr	r3, [r3, #0]
 8013f92:	f1c3 0307 	rsb	r3, r3, #7
 8013f96:	2b04      	cmp	r3, #4
 8013f98:	d009      	beq.n	8013fae <xPortStartScheduler+0x76>
 8013f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f9e:	f383 8811 	msr	BASEPRI, r3
 8013fa2:	f3bf 8f6f 	isb	sy
 8013fa6:	f3bf 8f4f 	dsb	sy
 8013faa:	60bb      	str	r3, [r7, #8]
 8013fac:	e7fe      	b.n	8013fac <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8013fae:	4b17      	ldr	r3, [pc, #92]	; (801400c <xPortStartScheduler+0xd4>)
 8013fb0:	681b      	ldr	r3, [r3, #0]
 8013fb2:	021b      	lsls	r3, r3, #8
 8013fb4:	4a15      	ldr	r2, [pc, #84]	; (801400c <xPortStartScheduler+0xd4>)
 8013fb6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013fb8:	4b14      	ldr	r3, [pc, #80]	; (801400c <xPortStartScheduler+0xd4>)
 8013fba:	681b      	ldr	r3, [r3, #0]
 8013fbc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8013fc0:	4a12      	ldr	r2, [pc, #72]	; (801400c <xPortStartScheduler+0xd4>)
 8013fc2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	b2da      	uxtb	r2, r3
 8013fc8:	68fb      	ldr	r3, [r7, #12]
 8013fca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8013fcc:	4b10      	ldr	r3, [pc, #64]	; (8014010 <xPortStartScheduler+0xd8>)
 8013fce:	681b      	ldr	r3, [r3, #0]
 8013fd0:	4a0f      	ldr	r2, [pc, #60]	; (8014010 <xPortStartScheduler+0xd8>)
 8013fd2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8013fd6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8013fd8:	4b0d      	ldr	r3, [pc, #52]	; (8014010 <xPortStartScheduler+0xd8>)
 8013fda:	681b      	ldr	r3, [r3, #0]
 8013fdc:	4a0c      	ldr	r2, [pc, #48]	; (8014010 <xPortStartScheduler+0xd8>)
 8013fde:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8013fe2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8013fe4:	f000 f8b0 	bl	8014148 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8013fe8:	4b0a      	ldr	r3, [pc, #40]	; (8014014 <xPortStartScheduler+0xdc>)
 8013fea:	2200      	movs	r2, #0
 8013fec:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8013fee:	f7ff ff93 	bl	8013f18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8013ff2:	f7fe ffa9 	bl	8012f48 <vTaskSwitchContext>
	prvTaskExitError();
 8013ff6:	f7ff ff4f 	bl	8013e98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8013ffa:	2300      	movs	r3, #0
}
 8013ffc:	4618      	mov	r0, r3
 8013ffe:	3710      	adds	r7, #16
 8014000:	46bd      	mov	sp, r7
 8014002:	bd80      	pop	{r7, pc}
 8014004:	e000e400 	.word	0xe000e400
 8014008:	2000118c 	.word	0x2000118c
 801400c:	20001190 	.word	0x20001190
 8014010:	e000ed20 	.word	0xe000ed20
 8014014:	200000d4 	.word	0x200000d4

08014018 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014018:	b480      	push	{r7}
 801401a:	b083      	sub	sp, #12
 801401c:	af00      	add	r7, sp, #0
 801401e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014022:	f383 8811 	msr	BASEPRI, r3
 8014026:	f3bf 8f6f 	isb	sy
 801402a:	f3bf 8f4f 	dsb	sy
 801402e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014030:	4b0e      	ldr	r3, [pc, #56]	; (801406c <vPortEnterCritical+0x54>)
 8014032:	681b      	ldr	r3, [r3, #0]
 8014034:	3301      	adds	r3, #1
 8014036:	4a0d      	ldr	r2, [pc, #52]	; (801406c <vPortEnterCritical+0x54>)
 8014038:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801403a:	4b0c      	ldr	r3, [pc, #48]	; (801406c <vPortEnterCritical+0x54>)
 801403c:	681b      	ldr	r3, [r3, #0]
 801403e:	2b01      	cmp	r3, #1
 8014040:	d10e      	bne.n	8014060 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014042:	4b0b      	ldr	r3, [pc, #44]	; (8014070 <vPortEnterCritical+0x58>)
 8014044:	681b      	ldr	r3, [r3, #0]
 8014046:	b2db      	uxtb	r3, r3
 8014048:	2b00      	cmp	r3, #0
 801404a:	d009      	beq.n	8014060 <vPortEnterCritical+0x48>
 801404c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014050:	f383 8811 	msr	BASEPRI, r3
 8014054:	f3bf 8f6f 	isb	sy
 8014058:	f3bf 8f4f 	dsb	sy
 801405c:	603b      	str	r3, [r7, #0]
 801405e:	e7fe      	b.n	801405e <vPortEnterCritical+0x46>
	}
}
 8014060:	bf00      	nop
 8014062:	370c      	adds	r7, #12
 8014064:	46bd      	mov	sp, r7
 8014066:	bc80      	pop	{r7}
 8014068:	4770      	bx	lr
 801406a:	bf00      	nop
 801406c:	200000d4 	.word	0x200000d4
 8014070:	e000ed04 	.word	0xe000ed04

08014074 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014074:	b480      	push	{r7}
 8014076:	b083      	sub	sp, #12
 8014078:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801407a:	4b10      	ldr	r3, [pc, #64]	; (80140bc <vPortExitCritical+0x48>)
 801407c:	681b      	ldr	r3, [r3, #0]
 801407e:	2b00      	cmp	r3, #0
 8014080:	d109      	bne.n	8014096 <vPortExitCritical+0x22>
 8014082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014086:	f383 8811 	msr	BASEPRI, r3
 801408a:	f3bf 8f6f 	isb	sy
 801408e:	f3bf 8f4f 	dsb	sy
 8014092:	607b      	str	r3, [r7, #4]
 8014094:	e7fe      	b.n	8014094 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8014096:	4b09      	ldr	r3, [pc, #36]	; (80140bc <vPortExitCritical+0x48>)
 8014098:	681b      	ldr	r3, [r3, #0]
 801409a:	3b01      	subs	r3, #1
 801409c:	4a07      	ldr	r2, [pc, #28]	; (80140bc <vPortExitCritical+0x48>)
 801409e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80140a0:	4b06      	ldr	r3, [pc, #24]	; (80140bc <vPortExitCritical+0x48>)
 80140a2:	681b      	ldr	r3, [r3, #0]
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d104      	bne.n	80140b2 <vPortExitCritical+0x3e>
 80140a8:	2300      	movs	r3, #0
 80140aa:	603b      	str	r3, [r7, #0]
	__asm volatile
 80140ac:	683b      	ldr	r3, [r7, #0]
 80140ae:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80140b2:	bf00      	nop
 80140b4:	370c      	adds	r7, #12
 80140b6:	46bd      	mov	sp, r7
 80140b8:	bc80      	pop	{r7}
 80140ba:	4770      	bx	lr
 80140bc:	200000d4 	.word	0x200000d4

080140c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80140c0:	f3ef 8009 	mrs	r0, PSP
 80140c4:	f3bf 8f6f 	isb	sy
 80140c8:	4b0d      	ldr	r3, [pc, #52]	; (8014100 <pxCurrentTCBConst>)
 80140ca:	681a      	ldr	r2, [r3, #0]
 80140cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80140d0:	6010      	str	r0, [r2, #0]
 80140d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80140d6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80140da:	f380 8811 	msr	BASEPRI, r0
 80140de:	f7fe ff33 	bl	8012f48 <vTaskSwitchContext>
 80140e2:	f04f 0000 	mov.w	r0, #0
 80140e6:	f380 8811 	msr	BASEPRI, r0
 80140ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80140ee:	6819      	ldr	r1, [r3, #0]
 80140f0:	6808      	ldr	r0, [r1, #0]
 80140f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80140f6:	f380 8809 	msr	PSP, r0
 80140fa:	f3bf 8f6f 	isb	sy
 80140fe:	4770      	bx	lr

08014100 <pxCurrentTCBConst>:
 8014100:	20000b58 	.word	0x20000b58
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014104:	bf00      	nop
 8014106:	bf00      	nop

08014108 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014108:	b580      	push	{r7, lr}
 801410a:	b082      	sub	sp, #8
 801410c:	af00      	add	r7, sp, #0
	__asm volatile
 801410e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014112:	f383 8811 	msr	BASEPRI, r3
 8014116:	f3bf 8f6f 	isb	sy
 801411a:	f3bf 8f4f 	dsb	sy
 801411e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014120:	f7fe fe54 	bl	8012dcc <xTaskIncrementTick>
 8014124:	4603      	mov	r3, r0
 8014126:	2b00      	cmp	r3, #0
 8014128:	d003      	beq.n	8014132 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801412a:	4b06      	ldr	r3, [pc, #24]	; (8014144 <SysTick_Handler+0x3c>)
 801412c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014130:	601a      	str	r2, [r3, #0]
 8014132:	2300      	movs	r3, #0
 8014134:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014136:	683b      	ldr	r3, [r7, #0]
 8014138:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 801413c:	bf00      	nop
 801413e:	3708      	adds	r7, #8
 8014140:	46bd      	mov	sp, r7
 8014142:	bd80      	pop	{r7, pc}
 8014144:	e000ed04 	.word	0xe000ed04

08014148 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8014148:	b480      	push	{r7}
 801414a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801414c:	4b0a      	ldr	r3, [pc, #40]	; (8014178 <vPortSetupTimerInterrupt+0x30>)
 801414e:	2200      	movs	r2, #0
 8014150:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014152:	4b0a      	ldr	r3, [pc, #40]	; (801417c <vPortSetupTimerInterrupt+0x34>)
 8014154:	2200      	movs	r2, #0
 8014156:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014158:	4b09      	ldr	r3, [pc, #36]	; (8014180 <vPortSetupTimerInterrupt+0x38>)
 801415a:	681b      	ldr	r3, [r3, #0]
 801415c:	4a09      	ldr	r2, [pc, #36]	; (8014184 <vPortSetupTimerInterrupt+0x3c>)
 801415e:	fba2 2303 	umull	r2, r3, r2, r3
 8014162:	099b      	lsrs	r3, r3, #6
 8014164:	4a08      	ldr	r2, [pc, #32]	; (8014188 <vPortSetupTimerInterrupt+0x40>)
 8014166:	3b01      	subs	r3, #1
 8014168:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801416a:	4b03      	ldr	r3, [pc, #12]	; (8014178 <vPortSetupTimerInterrupt+0x30>)
 801416c:	2207      	movs	r2, #7
 801416e:	601a      	str	r2, [r3, #0]
}
 8014170:	bf00      	nop
 8014172:	46bd      	mov	sp, r7
 8014174:	bc80      	pop	{r7}
 8014176:	4770      	bx	lr
 8014178:	e000e010 	.word	0xe000e010
 801417c:	e000e018 	.word	0xe000e018
 8014180:	20000000 	.word	0x20000000
 8014184:	10624dd3 	.word	0x10624dd3
 8014188:	e000e014 	.word	0xe000e014

0801418c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801418c:	b480      	push	{r7}
 801418e:	b085      	sub	sp, #20
 8014190:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8014192:	f3ef 8305 	mrs	r3, IPSR
 8014196:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014198:	68fb      	ldr	r3, [r7, #12]
 801419a:	2b0f      	cmp	r3, #15
 801419c:	d913      	bls.n	80141c6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801419e:	4a15      	ldr	r2, [pc, #84]	; (80141f4 <vPortValidateInterruptPriority+0x68>)
 80141a0:	68fb      	ldr	r3, [r7, #12]
 80141a2:	4413      	add	r3, r2
 80141a4:	781b      	ldrb	r3, [r3, #0]
 80141a6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80141a8:	4b13      	ldr	r3, [pc, #76]	; (80141f8 <vPortValidateInterruptPriority+0x6c>)
 80141aa:	781b      	ldrb	r3, [r3, #0]
 80141ac:	7afa      	ldrb	r2, [r7, #11]
 80141ae:	429a      	cmp	r2, r3
 80141b0:	d209      	bcs.n	80141c6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80141b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141b6:	f383 8811 	msr	BASEPRI, r3
 80141ba:	f3bf 8f6f 	isb	sy
 80141be:	f3bf 8f4f 	dsb	sy
 80141c2:	607b      	str	r3, [r7, #4]
 80141c4:	e7fe      	b.n	80141c4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80141c6:	4b0d      	ldr	r3, [pc, #52]	; (80141fc <vPortValidateInterruptPriority+0x70>)
 80141c8:	681b      	ldr	r3, [r3, #0]
 80141ca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80141ce:	4b0c      	ldr	r3, [pc, #48]	; (8014200 <vPortValidateInterruptPriority+0x74>)
 80141d0:	681b      	ldr	r3, [r3, #0]
 80141d2:	429a      	cmp	r2, r3
 80141d4:	d909      	bls.n	80141ea <vPortValidateInterruptPriority+0x5e>
 80141d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141da:	f383 8811 	msr	BASEPRI, r3
 80141de:	f3bf 8f6f 	isb	sy
 80141e2:	f3bf 8f4f 	dsb	sy
 80141e6:	603b      	str	r3, [r7, #0]
 80141e8:	e7fe      	b.n	80141e8 <vPortValidateInterruptPriority+0x5c>
	}
 80141ea:	bf00      	nop
 80141ec:	3714      	adds	r7, #20
 80141ee:	46bd      	mov	sp, r7
 80141f0:	bc80      	pop	{r7}
 80141f2:	4770      	bx	lr
 80141f4:	e000e3f0 	.word	0xe000e3f0
 80141f8:	2000118c 	.word	0x2000118c
 80141fc:	e000ed0c 	.word	0xe000ed0c
 8014200:	20001190 	.word	0x20001190

08014204 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014204:	b580      	push	{r7, lr}
 8014206:	b08a      	sub	sp, #40	; 0x28
 8014208:	af00      	add	r7, sp, #0
 801420a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801420c:	2300      	movs	r3, #0
 801420e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014210:	f7fe fd24 	bl	8012c5c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014214:	4b57      	ldr	r3, [pc, #348]	; (8014374 <pvPortMalloc+0x170>)
 8014216:	681b      	ldr	r3, [r3, #0]
 8014218:	2b00      	cmp	r3, #0
 801421a:	d101      	bne.n	8014220 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801421c:	f000 f90c 	bl	8014438 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014220:	4b55      	ldr	r3, [pc, #340]	; (8014378 <pvPortMalloc+0x174>)
 8014222:	681a      	ldr	r2, [r3, #0]
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	4013      	ands	r3, r2
 8014228:	2b00      	cmp	r3, #0
 801422a:	f040 808c 	bne.w	8014346 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	2b00      	cmp	r3, #0
 8014232:	d01c      	beq.n	801426e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8014234:	2208      	movs	r2, #8
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	4413      	add	r3, r2
 801423a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	f003 0307 	and.w	r3, r3, #7
 8014242:	2b00      	cmp	r3, #0
 8014244:	d013      	beq.n	801426e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	f023 0307 	bic.w	r3, r3, #7
 801424c:	3308      	adds	r3, #8
 801424e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	f003 0307 	and.w	r3, r3, #7
 8014256:	2b00      	cmp	r3, #0
 8014258:	d009      	beq.n	801426e <pvPortMalloc+0x6a>
 801425a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801425e:	f383 8811 	msr	BASEPRI, r3
 8014262:	f3bf 8f6f 	isb	sy
 8014266:	f3bf 8f4f 	dsb	sy
 801426a:	617b      	str	r3, [r7, #20]
 801426c:	e7fe      	b.n	801426c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	2b00      	cmp	r3, #0
 8014272:	d068      	beq.n	8014346 <pvPortMalloc+0x142>
 8014274:	4b41      	ldr	r3, [pc, #260]	; (801437c <pvPortMalloc+0x178>)
 8014276:	681b      	ldr	r3, [r3, #0]
 8014278:	687a      	ldr	r2, [r7, #4]
 801427a:	429a      	cmp	r2, r3
 801427c:	d863      	bhi.n	8014346 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801427e:	4b40      	ldr	r3, [pc, #256]	; (8014380 <pvPortMalloc+0x17c>)
 8014280:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8014282:	4b3f      	ldr	r3, [pc, #252]	; (8014380 <pvPortMalloc+0x17c>)
 8014284:	681b      	ldr	r3, [r3, #0]
 8014286:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014288:	e004      	b.n	8014294 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 801428a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801428c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801428e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014290:	681b      	ldr	r3, [r3, #0]
 8014292:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014296:	685b      	ldr	r3, [r3, #4]
 8014298:	687a      	ldr	r2, [r7, #4]
 801429a:	429a      	cmp	r2, r3
 801429c:	d903      	bls.n	80142a6 <pvPortMalloc+0xa2>
 801429e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142a0:	681b      	ldr	r3, [r3, #0]
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d1f1      	bne.n	801428a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80142a6:	4b33      	ldr	r3, [pc, #204]	; (8014374 <pvPortMalloc+0x170>)
 80142a8:	681b      	ldr	r3, [r3, #0]
 80142aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80142ac:	429a      	cmp	r2, r3
 80142ae:	d04a      	beq.n	8014346 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80142b0:	6a3b      	ldr	r3, [r7, #32]
 80142b2:	681b      	ldr	r3, [r3, #0]
 80142b4:	2208      	movs	r2, #8
 80142b6:	4413      	add	r3, r2
 80142b8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80142ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142bc:	681a      	ldr	r2, [r3, #0]
 80142be:	6a3b      	ldr	r3, [r7, #32]
 80142c0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80142c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142c4:	685a      	ldr	r2, [r3, #4]
 80142c6:	687b      	ldr	r3, [r7, #4]
 80142c8:	1ad2      	subs	r2, r2, r3
 80142ca:	2308      	movs	r3, #8
 80142cc:	005b      	lsls	r3, r3, #1
 80142ce:	429a      	cmp	r2, r3
 80142d0:	d91e      	bls.n	8014310 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80142d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	4413      	add	r3, r2
 80142d8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80142da:	69bb      	ldr	r3, [r7, #24]
 80142dc:	f003 0307 	and.w	r3, r3, #7
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d009      	beq.n	80142f8 <pvPortMalloc+0xf4>
 80142e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142e8:	f383 8811 	msr	BASEPRI, r3
 80142ec:	f3bf 8f6f 	isb	sy
 80142f0:	f3bf 8f4f 	dsb	sy
 80142f4:	613b      	str	r3, [r7, #16]
 80142f6:	e7fe      	b.n	80142f6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80142f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142fa:	685a      	ldr	r2, [r3, #4]
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	1ad2      	subs	r2, r2, r3
 8014300:	69bb      	ldr	r3, [r7, #24]
 8014302:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8014304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014306:	687a      	ldr	r2, [r7, #4]
 8014308:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801430a:	69b8      	ldr	r0, [r7, #24]
 801430c:	f000 f8f6 	bl	80144fc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014310:	4b1a      	ldr	r3, [pc, #104]	; (801437c <pvPortMalloc+0x178>)
 8014312:	681a      	ldr	r2, [r3, #0]
 8014314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014316:	685b      	ldr	r3, [r3, #4]
 8014318:	1ad3      	subs	r3, r2, r3
 801431a:	4a18      	ldr	r2, [pc, #96]	; (801437c <pvPortMalloc+0x178>)
 801431c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801431e:	4b17      	ldr	r3, [pc, #92]	; (801437c <pvPortMalloc+0x178>)
 8014320:	681a      	ldr	r2, [r3, #0]
 8014322:	4b18      	ldr	r3, [pc, #96]	; (8014384 <pvPortMalloc+0x180>)
 8014324:	681b      	ldr	r3, [r3, #0]
 8014326:	429a      	cmp	r2, r3
 8014328:	d203      	bcs.n	8014332 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801432a:	4b14      	ldr	r3, [pc, #80]	; (801437c <pvPortMalloc+0x178>)
 801432c:	681b      	ldr	r3, [r3, #0]
 801432e:	4a15      	ldr	r2, [pc, #84]	; (8014384 <pvPortMalloc+0x180>)
 8014330:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8014332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014334:	685a      	ldr	r2, [r3, #4]
 8014336:	4b10      	ldr	r3, [pc, #64]	; (8014378 <pvPortMalloc+0x174>)
 8014338:	681b      	ldr	r3, [r3, #0]
 801433a:	431a      	orrs	r2, r3
 801433c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801433e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8014340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014342:	2200      	movs	r2, #0
 8014344:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014346:	f7fe fc97 	bl	8012c78 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801434a:	69fb      	ldr	r3, [r7, #28]
 801434c:	f003 0307 	and.w	r3, r3, #7
 8014350:	2b00      	cmp	r3, #0
 8014352:	d009      	beq.n	8014368 <pvPortMalloc+0x164>
 8014354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014358:	f383 8811 	msr	BASEPRI, r3
 801435c:	f3bf 8f6f 	isb	sy
 8014360:	f3bf 8f4f 	dsb	sy
 8014364:	60fb      	str	r3, [r7, #12]
 8014366:	e7fe      	b.n	8014366 <pvPortMalloc+0x162>
	return pvReturn;
 8014368:	69fb      	ldr	r3, [r7, #28]
}
 801436a:	4618      	mov	r0, r3
 801436c:	3728      	adds	r7, #40	; 0x28
 801436e:	46bd      	mov	sp, r7
 8014370:	bd80      	pop	{r7, pc}
 8014372:	bf00      	nop
 8014374:	200086cc 	.word	0x200086cc
 8014378:	200086d8 	.word	0x200086d8
 801437c:	200086d0 	.word	0x200086d0
 8014380:	200086c4 	.word	0x200086c4
 8014384:	200086d4 	.word	0x200086d4

08014388 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8014388:	b580      	push	{r7, lr}
 801438a:	b086      	sub	sp, #24
 801438c:	af00      	add	r7, sp, #0
 801438e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	2b00      	cmp	r3, #0
 8014398:	d046      	beq.n	8014428 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801439a:	2308      	movs	r3, #8
 801439c:	425b      	negs	r3, r3
 801439e:	697a      	ldr	r2, [r7, #20]
 80143a0:	4413      	add	r3, r2
 80143a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80143a4:	697b      	ldr	r3, [r7, #20]
 80143a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80143a8:	693b      	ldr	r3, [r7, #16]
 80143aa:	685a      	ldr	r2, [r3, #4]
 80143ac:	4b20      	ldr	r3, [pc, #128]	; (8014430 <vPortFree+0xa8>)
 80143ae:	681b      	ldr	r3, [r3, #0]
 80143b0:	4013      	ands	r3, r2
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	d109      	bne.n	80143ca <vPortFree+0x42>
 80143b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143ba:	f383 8811 	msr	BASEPRI, r3
 80143be:	f3bf 8f6f 	isb	sy
 80143c2:	f3bf 8f4f 	dsb	sy
 80143c6:	60fb      	str	r3, [r7, #12]
 80143c8:	e7fe      	b.n	80143c8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80143ca:	693b      	ldr	r3, [r7, #16]
 80143cc:	681b      	ldr	r3, [r3, #0]
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d009      	beq.n	80143e6 <vPortFree+0x5e>
 80143d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143d6:	f383 8811 	msr	BASEPRI, r3
 80143da:	f3bf 8f6f 	isb	sy
 80143de:	f3bf 8f4f 	dsb	sy
 80143e2:	60bb      	str	r3, [r7, #8]
 80143e4:	e7fe      	b.n	80143e4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80143e6:	693b      	ldr	r3, [r7, #16]
 80143e8:	685a      	ldr	r2, [r3, #4]
 80143ea:	4b11      	ldr	r3, [pc, #68]	; (8014430 <vPortFree+0xa8>)
 80143ec:	681b      	ldr	r3, [r3, #0]
 80143ee:	4013      	ands	r3, r2
 80143f0:	2b00      	cmp	r3, #0
 80143f2:	d019      	beq.n	8014428 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80143f4:	693b      	ldr	r3, [r7, #16]
 80143f6:	681b      	ldr	r3, [r3, #0]
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d115      	bne.n	8014428 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80143fc:	693b      	ldr	r3, [r7, #16]
 80143fe:	685a      	ldr	r2, [r3, #4]
 8014400:	4b0b      	ldr	r3, [pc, #44]	; (8014430 <vPortFree+0xa8>)
 8014402:	681b      	ldr	r3, [r3, #0]
 8014404:	43db      	mvns	r3, r3
 8014406:	401a      	ands	r2, r3
 8014408:	693b      	ldr	r3, [r7, #16]
 801440a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801440c:	f7fe fc26 	bl	8012c5c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8014410:	693b      	ldr	r3, [r7, #16]
 8014412:	685a      	ldr	r2, [r3, #4]
 8014414:	4b07      	ldr	r3, [pc, #28]	; (8014434 <vPortFree+0xac>)
 8014416:	681b      	ldr	r3, [r3, #0]
 8014418:	4413      	add	r3, r2
 801441a:	4a06      	ldr	r2, [pc, #24]	; (8014434 <vPortFree+0xac>)
 801441c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801441e:	6938      	ldr	r0, [r7, #16]
 8014420:	f000 f86c 	bl	80144fc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8014424:	f7fe fc28 	bl	8012c78 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8014428:	bf00      	nop
 801442a:	3718      	adds	r7, #24
 801442c:	46bd      	mov	sp, r7
 801442e:	bd80      	pop	{r7, pc}
 8014430:	200086d8 	.word	0x200086d8
 8014434:	200086d0 	.word	0x200086d0

08014438 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8014438:	b480      	push	{r7}
 801443a:	b085      	sub	sp, #20
 801443c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801443e:	f247 5330 	movw	r3, #30000	; 0x7530
 8014442:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8014444:	4b27      	ldr	r3, [pc, #156]	; (80144e4 <prvHeapInit+0xac>)
 8014446:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014448:	68fb      	ldr	r3, [r7, #12]
 801444a:	f003 0307 	and.w	r3, r3, #7
 801444e:	2b00      	cmp	r3, #0
 8014450:	d00c      	beq.n	801446c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8014452:	68fb      	ldr	r3, [r7, #12]
 8014454:	3307      	adds	r3, #7
 8014456:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014458:	68fb      	ldr	r3, [r7, #12]
 801445a:	f023 0307 	bic.w	r3, r3, #7
 801445e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8014460:	68ba      	ldr	r2, [r7, #8]
 8014462:	68fb      	ldr	r3, [r7, #12]
 8014464:	1ad3      	subs	r3, r2, r3
 8014466:	4a1f      	ldr	r2, [pc, #124]	; (80144e4 <prvHeapInit+0xac>)
 8014468:	4413      	add	r3, r2
 801446a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801446c:	68fb      	ldr	r3, [r7, #12]
 801446e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8014470:	4a1d      	ldr	r2, [pc, #116]	; (80144e8 <prvHeapInit+0xb0>)
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8014476:	4b1c      	ldr	r3, [pc, #112]	; (80144e8 <prvHeapInit+0xb0>)
 8014478:	2200      	movs	r2, #0
 801447a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	68ba      	ldr	r2, [r7, #8]
 8014480:	4413      	add	r3, r2
 8014482:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8014484:	2208      	movs	r2, #8
 8014486:	68fb      	ldr	r3, [r7, #12]
 8014488:	1a9b      	subs	r3, r3, r2
 801448a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801448c:	68fb      	ldr	r3, [r7, #12]
 801448e:	f023 0307 	bic.w	r3, r3, #7
 8014492:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8014494:	68fb      	ldr	r3, [r7, #12]
 8014496:	4a15      	ldr	r2, [pc, #84]	; (80144ec <prvHeapInit+0xb4>)
 8014498:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801449a:	4b14      	ldr	r3, [pc, #80]	; (80144ec <prvHeapInit+0xb4>)
 801449c:	681b      	ldr	r3, [r3, #0]
 801449e:	2200      	movs	r2, #0
 80144a0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80144a2:	4b12      	ldr	r3, [pc, #72]	; (80144ec <prvHeapInit+0xb4>)
 80144a4:	681b      	ldr	r3, [r3, #0]
 80144a6:	2200      	movs	r2, #0
 80144a8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80144ae:	683b      	ldr	r3, [r7, #0]
 80144b0:	68fa      	ldr	r2, [r7, #12]
 80144b2:	1ad2      	subs	r2, r2, r3
 80144b4:	683b      	ldr	r3, [r7, #0]
 80144b6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80144b8:	4b0c      	ldr	r3, [pc, #48]	; (80144ec <prvHeapInit+0xb4>)
 80144ba:	681a      	ldr	r2, [r3, #0]
 80144bc:	683b      	ldr	r3, [r7, #0]
 80144be:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80144c0:	683b      	ldr	r3, [r7, #0]
 80144c2:	685b      	ldr	r3, [r3, #4]
 80144c4:	4a0a      	ldr	r2, [pc, #40]	; (80144f0 <prvHeapInit+0xb8>)
 80144c6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80144c8:	683b      	ldr	r3, [r7, #0]
 80144ca:	685b      	ldr	r3, [r3, #4]
 80144cc:	4a09      	ldr	r2, [pc, #36]	; (80144f4 <prvHeapInit+0xbc>)
 80144ce:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80144d0:	4b09      	ldr	r3, [pc, #36]	; (80144f8 <prvHeapInit+0xc0>)
 80144d2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80144d6:	601a      	str	r2, [r3, #0]
}
 80144d8:	bf00      	nop
 80144da:	3714      	adds	r7, #20
 80144dc:	46bd      	mov	sp, r7
 80144de:	bc80      	pop	{r7}
 80144e0:	4770      	bx	lr
 80144e2:	bf00      	nop
 80144e4:	20001194 	.word	0x20001194
 80144e8:	200086c4 	.word	0x200086c4
 80144ec:	200086cc 	.word	0x200086cc
 80144f0:	200086d4 	.word	0x200086d4
 80144f4:	200086d0 	.word	0x200086d0
 80144f8:	200086d8 	.word	0x200086d8

080144fc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80144fc:	b480      	push	{r7}
 80144fe:	b085      	sub	sp, #20
 8014500:	af00      	add	r7, sp, #0
 8014502:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014504:	4b27      	ldr	r3, [pc, #156]	; (80145a4 <prvInsertBlockIntoFreeList+0xa8>)
 8014506:	60fb      	str	r3, [r7, #12]
 8014508:	e002      	b.n	8014510 <prvInsertBlockIntoFreeList+0x14>
 801450a:	68fb      	ldr	r3, [r7, #12]
 801450c:	681b      	ldr	r3, [r3, #0]
 801450e:	60fb      	str	r3, [r7, #12]
 8014510:	68fb      	ldr	r3, [r7, #12]
 8014512:	681b      	ldr	r3, [r3, #0]
 8014514:	687a      	ldr	r2, [r7, #4]
 8014516:	429a      	cmp	r2, r3
 8014518:	d8f7      	bhi.n	801450a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801451a:	68fb      	ldr	r3, [r7, #12]
 801451c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801451e:	68fb      	ldr	r3, [r7, #12]
 8014520:	685b      	ldr	r3, [r3, #4]
 8014522:	68ba      	ldr	r2, [r7, #8]
 8014524:	4413      	add	r3, r2
 8014526:	687a      	ldr	r2, [r7, #4]
 8014528:	429a      	cmp	r2, r3
 801452a:	d108      	bne.n	801453e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801452c:	68fb      	ldr	r3, [r7, #12]
 801452e:	685a      	ldr	r2, [r3, #4]
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	685b      	ldr	r3, [r3, #4]
 8014534:	441a      	add	r2, r3
 8014536:	68fb      	ldr	r3, [r7, #12]
 8014538:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801453a:	68fb      	ldr	r3, [r7, #12]
 801453c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	685b      	ldr	r3, [r3, #4]
 8014546:	68ba      	ldr	r2, [r7, #8]
 8014548:	441a      	add	r2, r3
 801454a:	68fb      	ldr	r3, [r7, #12]
 801454c:	681b      	ldr	r3, [r3, #0]
 801454e:	429a      	cmp	r2, r3
 8014550:	d118      	bne.n	8014584 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8014552:	68fb      	ldr	r3, [r7, #12]
 8014554:	681a      	ldr	r2, [r3, #0]
 8014556:	4b14      	ldr	r3, [pc, #80]	; (80145a8 <prvInsertBlockIntoFreeList+0xac>)
 8014558:	681b      	ldr	r3, [r3, #0]
 801455a:	429a      	cmp	r2, r3
 801455c:	d00d      	beq.n	801457a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	685a      	ldr	r2, [r3, #4]
 8014562:	68fb      	ldr	r3, [r7, #12]
 8014564:	681b      	ldr	r3, [r3, #0]
 8014566:	685b      	ldr	r3, [r3, #4]
 8014568:	441a      	add	r2, r3
 801456a:	687b      	ldr	r3, [r7, #4]
 801456c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801456e:	68fb      	ldr	r3, [r7, #12]
 8014570:	681b      	ldr	r3, [r3, #0]
 8014572:	681a      	ldr	r2, [r3, #0]
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	601a      	str	r2, [r3, #0]
 8014578:	e008      	b.n	801458c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801457a:	4b0b      	ldr	r3, [pc, #44]	; (80145a8 <prvInsertBlockIntoFreeList+0xac>)
 801457c:	681a      	ldr	r2, [r3, #0]
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	601a      	str	r2, [r3, #0]
 8014582:	e003      	b.n	801458c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014584:	68fb      	ldr	r3, [r7, #12]
 8014586:	681a      	ldr	r2, [r3, #0]
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801458c:	68fa      	ldr	r2, [r7, #12]
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	429a      	cmp	r2, r3
 8014592:	d002      	beq.n	801459a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014594:	68fb      	ldr	r3, [r7, #12]
 8014596:	687a      	ldr	r2, [r7, #4]
 8014598:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801459a:	bf00      	nop
 801459c:	3714      	adds	r7, #20
 801459e:	46bd      	mov	sp, r7
 80145a0:	bc80      	pop	{r7}
 80145a2:	4770      	bx	lr
 80145a4:	200086c4 	.word	0x200086c4
 80145a8:	200086cc 	.word	0x200086cc

080145ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80145ac:	b580      	push	{r7, lr}
 80145ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80145b0:	2200      	movs	r2, #0
 80145b2:	4914      	ldr	r1, [pc, #80]	; (8014604 <MX_USB_DEVICE_Init+0x58>)
 80145b4:	4814      	ldr	r0, [pc, #80]	; (8014608 <MX_USB_DEVICE_Init+0x5c>)
 80145b6:	f7fb fd3b 	bl	8010030 <USBD_Init>
 80145ba:	4603      	mov	r3, r0
 80145bc:	2b00      	cmp	r3, #0
 80145be:	d002      	beq.n	80145c6 <MX_USB_DEVICE_Init+0x1a>
  {
    Error_Handler(1);
 80145c0:	2001      	movs	r0, #1
 80145c2:	f7ef fa33 	bl	8003a2c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 80145c6:	4911      	ldr	r1, [pc, #68]	; (801460c <MX_USB_DEVICE_Init+0x60>)
 80145c8:	480f      	ldr	r0, [pc, #60]	; (8014608 <MX_USB_DEVICE_Init+0x5c>)
 80145ca:	f7fb fd5c 	bl	8010086 <USBD_RegisterClass>
 80145ce:	4603      	mov	r3, r0
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	d002      	beq.n	80145da <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler(1);
 80145d4:	2001      	movs	r0, #1
 80145d6:	f7ef fa29 	bl	8003a2c <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 80145da:	490d      	ldr	r1, [pc, #52]	; (8014610 <MX_USB_DEVICE_Init+0x64>)
 80145dc:	480a      	ldr	r0, [pc, #40]	; (8014608 <MX_USB_DEVICE_Init+0x5c>)
 80145de:	f7fa fd09 	bl	800eff4 <USBD_MSC_RegisterStorage>
 80145e2:	4603      	mov	r3, r0
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d002      	beq.n	80145ee <MX_USB_DEVICE_Init+0x42>
  {
    Error_Handler(1);
 80145e8:	2001      	movs	r0, #1
 80145ea:	f7ef fa1f 	bl	8003a2c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80145ee:	4806      	ldr	r0, [pc, #24]	; (8014608 <MX_USB_DEVICE_Init+0x5c>)
 80145f0:	f7fb fd62 	bl	80100b8 <USBD_Start>
 80145f4:	4603      	mov	r3, r0
 80145f6:	2b00      	cmp	r3, #0
 80145f8:	d002      	beq.n	8014600 <MX_USB_DEVICE_Init+0x54>
  {
    Error_Handler(1);
 80145fa:	2001      	movs	r0, #1
 80145fc:	f7ef fa16 	bl	8003a2c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8014600:	bf00      	nop
 8014602:	bd80      	pop	{r7, pc}
 8014604:	200000d8 	.word	0x200000d8
 8014608:	200096a4 	.word	0x200096a4
 801460c:	20000030 	.word	0x20000030
 8014610:	20000128 	.word	0x20000128

08014614 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014614:	b480      	push	{r7}
 8014616:	b083      	sub	sp, #12
 8014618:	af00      	add	r7, sp, #0
 801461a:	4603      	mov	r3, r0
 801461c:	6039      	str	r1, [r7, #0]
 801461e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8014620:	683b      	ldr	r3, [r7, #0]
 8014622:	2212      	movs	r2, #18
 8014624:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8014626:	4b03      	ldr	r3, [pc, #12]	; (8014634 <USBD_FS_DeviceDescriptor+0x20>)
}
 8014628:	4618      	mov	r0, r3
 801462a:	370c      	adds	r7, #12
 801462c:	46bd      	mov	sp, r7
 801462e:	bc80      	pop	{r7}
 8014630:	4770      	bx	lr
 8014632:	bf00      	nop
 8014634:	200000f4 	.word	0x200000f4

08014638 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014638:	b480      	push	{r7}
 801463a:	b083      	sub	sp, #12
 801463c:	af00      	add	r7, sp, #0
 801463e:	4603      	mov	r3, r0
 8014640:	6039      	str	r1, [r7, #0]
 8014642:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8014644:	683b      	ldr	r3, [r7, #0]
 8014646:	2204      	movs	r2, #4
 8014648:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801464a:	4b03      	ldr	r3, [pc, #12]	; (8014658 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801464c:	4618      	mov	r0, r3
 801464e:	370c      	adds	r7, #12
 8014650:	46bd      	mov	sp, r7
 8014652:	bc80      	pop	{r7}
 8014654:	4770      	bx	lr
 8014656:	bf00      	nop
 8014658:	20000108 	.word	0x20000108

0801465c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801465c:	b580      	push	{r7, lr}
 801465e:	b082      	sub	sp, #8
 8014660:	af00      	add	r7, sp, #0
 8014662:	4603      	mov	r3, r0
 8014664:	6039      	str	r1, [r7, #0]
 8014666:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014668:	79fb      	ldrb	r3, [r7, #7]
 801466a:	2b00      	cmp	r3, #0
 801466c:	d105      	bne.n	801467a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801466e:	683a      	ldr	r2, [r7, #0]
 8014670:	4907      	ldr	r1, [pc, #28]	; (8014690 <USBD_FS_ProductStrDescriptor+0x34>)
 8014672:	4808      	ldr	r0, [pc, #32]	; (8014694 <USBD_FS_ProductStrDescriptor+0x38>)
 8014674:	f7fc fc17 	bl	8010ea6 <USBD_GetString>
 8014678:	e004      	b.n	8014684 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801467a:	683a      	ldr	r2, [r7, #0]
 801467c:	4904      	ldr	r1, [pc, #16]	; (8014690 <USBD_FS_ProductStrDescriptor+0x34>)
 801467e:	4805      	ldr	r0, [pc, #20]	; (8014694 <USBD_FS_ProductStrDescriptor+0x38>)
 8014680:	f7fc fc11 	bl	8010ea6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014684:	4b02      	ldr	r3, [pc, #8]	; (8014690 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8014686:	4618      	mov	r0, r3
 8014688:	3708      	adds	r7, #8
 801468a:	46bd      	mov	sp, r7
 801468c:	bd80      	pop	{r7, pc}
 801468e:	bf00      	nop
 8014690:	20009940 	.word	0x20009940
 8014694:	0801a970 	.word	0x0801a970

08014698 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014698:	b580      	push	{r7, lr}
 801469a:	b082      	sub	sp, #8
 801469c:	af00      	add	r7, sp, #0
 801469e:	4603      	mov	r3, r0
 80146a0:	6039      	str	r1, [r7, #0]
 80146a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80146a4:	683a      	ldr	r2, [r7, #0]
 80146a6:	4904      	ldr	r1, [pc, #16]	; (80146b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80146a8:	4804      	ldr	r0, [pc, #16]	; (80146bc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80146aa:	f7fc fbfc 	bl	8010ea6 <USBD_GetString>
  return USBD_StrDesc;
 80146ae:	4b02      	ldr	r3, [pc, #8]	; (80146b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80146b0:	4618      	mov	r0, r3
 80146b2:	3708      	adds	r7, #8
 80146b4:	46bd      	mov	sp, r7
 80146b6:	bd80      	pop	{r7, pc}
 80146b8:	20009940 	.word	0x20009940
 80146bc:	0801a984 	.word	0x0801a984

080146c0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80146c0:	b580      	push	{r7, lr}
 80146c2:	b082      	sub	sp, #8
 80146c4:	af00      	add	r7, sp, #0
 80146c6:	4603      	mov	r3, r0
 80146c8:	6039      	str	r1, [r7, #0]
 80146ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80146cc:	683b      	ldr	r3, [r7, #0]
 80146ce:	221a      	movs	r2, #26
 80146d0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80146d2:	f000 f843 	bl	801475c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80146d6:	4b02      	ldr	r3, [pc, #8]	; (80146e0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80146d8:	4618      	mov	r0, r3
 80146da:	3708      	adds	r7, #8
 80146dc:	46bd      	mov	sp, r7
 80146de:	bd80      	pop	{r7, pc}
 80146e0:	2000010c 	.word	0x2000010c

080146e4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80146e4:	b580      	push	{r7, lr}
 80146e6:	b082      	sub	sp, #8
 80146e8:	af00      	add	r7, sp, #0
 80146ea:	4603      	mov	r3, r0
 80146ec:	6039      	str	r1, [r7, #0]
 80146ee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80146f0:	79fb      	ldrb	r3, [r7, #7]
 80146f2:	2b00      	cmp	r3, #0
 80146f4:	d105      	bne.n	8014702 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80146f6:	683a      	ldr	r2, [r7, #0]
 80146f8:	4907      	ldr	r1, [pc, #28]	; (8014718 <USBD_FS_ConfigStrDescriptor+0x34>)
 80146fa:	4808      	ldr	r0, [pc, #32]	; (801471c <USBD_FS_ConfigStrDescriptor+0x38>)
 80146fc:	f7fc fbd3 	bl	8010ea6 <USBD_GetString>
 8014700:	e004      	b.n	801470c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8014702:	683a      	ldr	r2, [r7, #0]
 8014704:	4904      	ldr	r1, [pc, #16]	; (8014718 <USBD_FS_ConfigStrDescriptor+0x34>)
 8014706:	4805      	ldr	r0, [pc, #20]	; (801471c <USBD_FS_ConfigStrDescriptor+0x38>)
 8014708:	f7fc fbcd 	bl	8010ea6 <USBD_GetString>
  }
  return USBD_StrDesc;
 801470c:	4b02      	ldr	r3, [pc, #8]	; (8014718 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801470e:	4618      	mov	r0, r3
 8014710:	3708      	adds	r7, #8
 8014712:	46bd      	mov	sp, r7
 8014714:	bd80      	pop	{r7, pc}
 8014716:	bf00      	nop
 8014718:	20009940 	.word	0x20009940
 801471c:	0801a998 	.word	0x0801a998

08014720 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014720:	b580      	push	{r7, lr}
 8014722:	b082      	sub	sp, #8
 8014724:	af00      	add	r7, sp, #0
 8014726:	4603      	mov	r3, r0
 8014728:	6039      	str	r1, [r7, #0]
 801472a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801472c:	79fb      	ldrb	r3, [r7, #7]
 801472e:	2b00      	cmp	r3, #0
 8014730:	d105      	bne.n	801473e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8014732:	683a      	ldr	r2, [r7, #0]
 8014734:	4907      	ldr	r1, [pc, #28]	; (8014754 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8014736:	4808      	ldr	r0, [pc, #32]	; (8014758 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014738:	f7fc fbb5 	bl	8010ea6 <USBD_GetString>
 801473c:	e004      	b.n	8014748 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801473e:	683a      	ldr	r2, [r7, #0]
 8014740:	4904      	ldr	r1, [pc, #16]	; (8014754 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8014742:	4805      	ldr	r0, [pc, #20]	; (8014758 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014744:	f7fc fbaf 	bl	8010ea6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014748:	4b02      	ldr	r3, [pc, #8]	; (8014754 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801474a:	4618      	mov	r0, r3
 801474c:	3708      	adds	r7, #8
 801474e:	46bd      	mov	sp, r7
 8014750:	bd80      	pop	{r7, pc}
 8014752:	bf00      	nop
 8014754:	20009940 	.word	0x20009940
 8014758:	0801a9a4 	.word	0x0801a9a4

0801475c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801475c:	b580      	push	{r7, lr}
 801475e:	b084      	sub	sp, #16
 8014760:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8014762:	4b0f      	ldr	r3, [pc, #60]	; (80147a0 <Get_SerialNum+0x44>)
 8014764:	681b      	ldr	r3, [r3, #0]
 8014766:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8014768:	4b0e      	ldr	r3, [pc, #56]	; (80147a4 <Get_SerialNum+0x48>)
 801476a:	681b      	ldr	r3, [r3, #0]
 801476c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801476e:	4b0e      	ldr	r3, [pc, #56]	; (80147a8 <Get_SerialNum+0x4c>)
 8014770:	681b      	ldr	r3, [r3, #0]
 8014772:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8014774:	68fa      	ldr	r2, [r7, #12]
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	4413      	add	r3, r2
 801477a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801477c:	68fb      	ldr	r3, [r7, #12]
 801477e:	2b00      	cmp	r3, #0
 8014780:	d009      	beq.n	8014796 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8014782:	2208      	movs	r2, #8
 8014784:	4909      	ldr	r1, [pc, #36]	; (80147ac <Get_SerialNum+0x50>)
 8014786:	68f8      	ldr	r0, [r7, #12]
 8014788:	f000 f814 	bl	80147b4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801478c:	2204      	movs	r2, #4
 801478e:	4908      	ldr	r1, [pc, #32]	; (80147b0 <Get_SerialNum+0x54>)
 8014790:	68b8      	ldr	r0, [r7, #8]
 8014792:	f000 f80f 	bl	80147b4 <IntToUnicode>
  }
}
 8014796:	bf00      	nop
 8014798:	3710      	adds	r7, #16
 801479a:	46bd      	mov	sp, r7
 801479c:	bd80      	pop	{r7, pc}
 801479e:	bf00      	nop
 80147a0:	1ff800d0 	.word	0x1ff800d0
 80147a4:	1ff800d4 	.word	0x1ff800d4
 80147a8:	1ff800d8 	.word	0x1ff800d8
 80147ac:	2000010e 	.word	0x2000010e
 80147b0:	2000011e 	.word	0x2000011e

080147b4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80147b4:	b480      	push	{r7}
 80147b6:	b087      	sub	sp, #28
 80147b8:	af00      	add	r7, sp, #0
 80147ba:	60f8      	str	r0, [r7, #12]
 80147bc:	60b9      	str	r1, [r7, #8]
 80147be:	4613      	mov	r3, r2
 80147c0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80147c2:	2300      	movs	r3, #0
 80147c4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80147c6:	2300      	movs	r3, #0
 80147c8:	75fb      	strb	r3, [r7, #23]
 80147ca:	e027      	b.n	801481c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80147cc:	68fb      	ldr	r3, [r7, #12]
 80147ce:	0f1b      	lsrs	r3, r3, #28
 80147d0:	2b09      	cmp	r3, #9
 80147d2:	d80b      	bhi.n	80147ec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80147d4:	68fb      	ldr	r3, [r7, #12]
 80147d6:	0f1b      	lsrs	r3, r3, #28
 80147d8:	b2da      	uxtb	r2, r3
 80147da:	7dfb      	ldrb	r3, [r7, #23]
 80147dc:	005b      	lsls	r3, r3, #1
 80147de:	4619      	mov	r1, r3
 80147e0:	68bb      	ldr	r3, [r7, #8]
 80147e2:	440b      	add	r3, r1
 80147e4:	3230      	adds	r2, #48	; 0x30
 80147e6:	b2d2      	uxtb	r2, r2
 80147e8:	701a      	strb	r2, [r3, #0]
 80147ea:	e00a      	b.n	8014802 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80147ec:	68fb      	ldr	r3, [r7, #12]
 80147ee:	0f1b      	lsrs	r3, r3, #28
 80147f0:	b2da      	uxtb	r2, r3
 80147f2:	7dfb      	ldrb	r3, [r7, #23]
 80147f4:	005b      	lsls	r3, r3, #1
 80147f6:	4619      	mov	r1, r3
 80147f8:	68bb      	ldr	r3, [r7, #8]
 80147fa:	440b      	add	r3, r1
 80147fc:	3237      	adds	r2, #55	; 0x37
 80147fe:	b2d2      	uxtb	r2, r2
 8014800:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8014802:	68fb      	ldr	r3, [r7, #12]
 8014804:	011b      	lsls	r3, r3, #4
 8014806:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8014808:	7dfb      	ldrb	r3, [r7, #23]
 801480a:	005b      	lsls	r3, r3, #1
 801480c:	3301      	adds	r3, #1
 801480e:	68ba      	ldr	r2, [r7, #8]
 8014810:	4413      	add	r3, r2
 8014812:	2200      	movs	r2, #0
 8014814:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8014816:	7dfb      	ldrb	r3, [r7, #23]
 8014818:	3301      	adds	r3, #1
 801481a:	75fb      	strb	r3, [r7, #23]
 801481c:	7dfa      	ldrb	r2, [r7, #23]
 801481e:	79fb      	ldrb	r3, [r7, #7]
 8014820:	429a      	cmp	r2, r3
 8014822:	d3d3      	bcc.n	80147cc <IntToUnicode+0x18>
  }
}
 8014824:	bf00      	nop
 8014826:	371c      	adds	r7, #28
 8014828:	46bd      	mov	sp, r7
 801482a:	bc80      	pop	{r7}
 801482c:	4770      	bx	lr

0801482e <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 801482e:	b480      	push	{r7}
 8014830:	b083      	sub	sp, #12
 8014832:	af00      	add	r7, sp, #0
 8014834:	4603      	mov	r3, r0
 8014836:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8014838:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 801483a:	4618      	mov	r0, r3
 801483c:	370c      	adds	r7, #12
 801483e:	46bd      	mov	sp, r7
 8014840:	bc80      	pop	{r7}
 8014842:	4770      	bx	lr

08014844 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8014844:	b480      	push	{r7}
 8014846:	b085      	sub	sp, #20
 8014848:	af00      	add	r7, sp, #0
 801484a:	4603      	mov	r3, r0
 801484c:	60b9      	str	r1, [r7, #8]
 801484e:	607a      	str	r2, [r7, #4]
 8014850:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 8014852:	68bb      	ldr	r3, [r7, #8]
 8014854:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8014858:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014860:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 8014862:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8014864:	4618      	mov	r0, r3
 8014866:	3714      	adds	r7, #20
 8014868:	46bd      	mov	sp, r7
 801486a:	bc80      	pop	{r7}
 801486c:	4770      	bx	lr

0801486e <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 801486e:	b480      	push	{r7}
 8014870:	b083      	sub	sp, #12
 8014872:	af00      	add	r7, sp, #0
 8014874:	4603      	mov	r3, r0
 8014876:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8014878:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801487a:	4618      	mov	r0, r3
 801487c:	370c      	adds	r7, #12
 801487e:	46bd      	mov	sp, r7
 8014880:	bc80      	pop	{r7}
 8014882:	4770      	bx	lr

08014884 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8014884:	b480      	push	{r7}
 8014886:	b083      	sub	sp, #12
 8014888:	af00      	add	r7, sp, #0
 801488a:	4603      	mov	r3, r0
 801488c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 801488e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8014890:	4618      	mov	r0, r3
 8014892:	370c      	adds	r7, #12
 8014894:	46bd      	mov	sp, r7
 8014896:	bc80      	pop	{r7}
 8014898:	4770      	bx	lr

0801489a <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801489a:	b480      	push	{r7}
 801489c:	b085      	sub	sp, #20
 801489e:	af00      	add	r7, sp, #0
 80148a0:	60b9      	str	r1, [r7, #8]
 80148a2:	607a      	str	r2, [r7, #4]
 80148a4:	461a      	mov	r2, r3
 80148a6:	4603      	mov	r3, r0
 80148a8:	73fb      	strb	r3, [r7, #15]
 80148aa:	4613      	mov	r3, r2
 80148ac:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 80148ae:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80148b0:	4618      	mov	r0, r3
 80148b2:	3714      	adds	r7, #20
 80148b4:	46bd      	mov	sp, r7
 80148b6:	bc80      	pop	{r7}
 80148b8:	4770      	bx	lr

080148ba <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80148ba:	b480      	push	{r7}
 80148bc:	b085      	sub	sp, #20
 80148be:	af00      	add	r7, sp, #0
 80148c0:	60b9      	str	r1, [r7, #8]
 80148c2:	607a      	str	r2, [r7, #4]
 80148c4:	461a      	mov	r2, r3
 80148c6:	4603      	mov	r3, r0
 80148c8:	73fb      	strb	r3, [r7, #15]
 80148ca:	4613      	mov	r3, r2
 80148cc:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  return (USBD_OK);
 80148ce:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 80148d0:	4618      	mov	r0, r3
 80148d2:	3714      	adds	r7, #20
 80148d4:	46bd      	mov	sp, r7
 80148d6:	bc80      	pop	{r7}
 80148d8:	4770      	bx	lr

080148da <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 80148da:	b480      	push	{r7}
 80148dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 80148de:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80148e0:	4618      	mov	r0, r3
 80148e2:	46bd      	mov	sp, r7
 80148e4:	bc80      	pop	{r7}
 80148e6:	4770      	bx	lr

080148e8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80148e8:	b580      	push	{r7, lr}
 80148ea:	b084      	sub	sp, #16
 80148ec:	af00      	add	r7, sp, #0
 80148ee:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	681b      	ldr	r3, [r3, #0]
 80148f4:	4a0d      	ldr	r2, [pc, #52]	; (801492c <HAL_PCD_MspInit+0x44>)
 80148f6:	4293      	cmp	r3, r2
 80148f8:	d113      	bne.n	8014922 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80148fa:	4b0d      	ldr	r3, [pc, #52]	; (8014930 <HAL_PCD_MspInit+0x48>)
 80148fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148fe:	4a0c      	ldr	r2, [pc, #48]	; (8014930 <HAL_PCD_MspInit+0x48>)
 8014900:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8014904:	6253      	str	r3, [r2, #36]	; 0x24
 8014906:	4b0a      	ldr	r3, [pc, #40]	; (8014930 <HAL_PCD_MspInit+0x48>)
 8014908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801490a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801490e:	60fb      	str	r3, [r7, #12]
 8014910:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8014912:	2200      	movs	r2, #0
 8014914:	2100      	movs	r1, #0
 8014916:	2014      	movs	r0, #20
 8014918:	f7f2 ffb1 	bl	800787e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 801491c:	2014      	movs	r0, #20
 801491e:	f7f2 ffca 	bl	80078b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8014922:	bf00      	nop
 8014924:	3710      	adds	r7, #16
 8014926:	46bd      	mov	sp, r7
 8014928:	bd80      	pop	{r7, pc}
 801492a:	bf00      	nop
 801492c:	40005c00 	.word	0x40005c00
 8014930:	40023800 	.word	0x40023800

08014934 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014934:	b580      	push	{r7, lr}
 8014936:	b082      	sub	sp, #8
 8014938:	af00      	add	r7, sp, #0
 801493a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8014948:	4619      	mov	r1, r3
 801494a:	4610      	mov	r0, r2
 801494c:	f7fb fbfc 	bl	8010148 <USBD_LL_SetupStage>
}
 8014950:	bf00      	nop
 8014952:	3708      	adds	r7, #8
 8014954:	46bd      	mov	sp, r7
 8014956:	bd80      	pop	{r7, pc}

08014958 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014958:	b580      	push	{r7, lr}
 801495a:	b082      	sub	sp, #8
 801495c:	af00      	add	r7, sp, #0
 801495e:	6078      	str	r0, [r7, #4]
 8014960:	460b      	mov	r3, r1
 8014962:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 801496a:	78fa      	ldrb	r2, [r7, #3]
 801496c:	6879      	ldr	r1, [r7, #4]
 801496e:	4613      	mov	r3, r2
 8014970:	009b      	lsls	r3, r3, #2
 8014972:	4413      	add	r3, r2
 8014974:	00db      	lsls	r3, r3, #3
 8014976:	440b      	add	r3, r1
 8014978:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 801497c:	681a      	ldr	r2, [r3, #0]
 801497e:	78fb      	ldrb	r3, [r7, #3]
 8014980:	4619      	mov	r1, r3
 8014982:	f7fb fc2c 	bl	80101de <USBD_LL_DataOutStage>
}
 8014986:	bf00      	nop
 8014988:	3708      	adds	r7, #8
 801498a:	46bd      	mov	sp, r7
 801498c:	bd80      	pop	{r7, pc}

0801498e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801498e:	b580      	push	{r7, lr}
 8014990:	b082      	sub	sp, #8
 8014992:	af00      	add	r7, sp, #0
 8014994:	6078      	str	r0, [r7, #4]
 8014996:	460b      	mov	r3, r1
 8014998:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80149a0:	78fa      	ldrb	r2, [r7, #3]
 80149a2:	6879      	ldr	r1, [r7, #4]
 80149a4:	4613      	mov	r3, r2
 80149a6:	009b      	lsls	r3, r3, #2
 80149a8:	4413      	add	r3, r2
 80149aa:	00db      	lsls	r3, r3, #3
 80149ac:	440b      	add	r3, r1
 80149ae:	333c      	adds	r3, #60	; 0x3c
 80149b0:	681a      	ldr	r2, [r3, #0]
 80149b2:	78fb      	ldrb	r3, [r7, #3]
 80149b4:	4619      	mov	r1, r3
 80149b6:	f7fb fc83 	bl	80102c0 <USBD_LL_DataInStage>
}
 80149ba:	bf00      	nop
 80149bc:	3708      	adds	r7, #8
 80149be:	46bd      	mov	sp, r7
 80149c0:	bd80      	pop	{r7, pc}

080149c2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80149c2:	b580      	push	{r7, lr}
 80149c4:	b082      	sub	sp, #8
 80149c6:	af00      	add	r7, sp, #0
 80149c8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80149d0:	4618      	mov	r0, r3
 80149d2:	f7fb fd8e 	bl	80104f2 <USBD_LL_SOF>
}
 80149d6:	bf00      	nop
 80149d8:	3708      	adds	r7, #8
 80149da:	46bd      	mov	sp, r7
 80149dc:	bd80      	pop	{r7, pc}

080149de <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80149de:	b580      	push	{r7, lr}
 80149e0:	b084      	sub	sp, #16
 80149e2:	af00      	add	r7, sp, #0
 80149e4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80149e6:	2301      	movs	r3, #1
 80149e8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80149ea:	687b      	ldr	r3, [r7, #4]
 80149ec:	689b      	ldr	r3, [r3, #8]
 80149ee:	2b02      	cmp	r3, #2
 80149f0:	d002      	beq.n	80149f8 <HAL_PCD_ResetCallback+0x1a>
  {
    Error_Handler(1);
 80149f2:	2001      	movs	r0, #1
 80149f4:	f7ef f81a 	bl	8003a2c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80149fe:	7bfa      	ldrb	r2, [r7, #15]
 8014a00:	4611      	mov	r1, r2
 8014a02:	4618      	mov	r0, r3
 8014a04:	f7fb fd42 	bl	801048c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8014a0e:	4618      	mov	r0, r3
 8014a10:	f7fb fcfb 	bl	801040a <USBD_LL_Reset>
}
 8014a14:	bf00      	nop
 8014a16:	3710      	adds	r7, #16
 8014a18:	46bd      	mov	sp, r7
 8014a1a:	bd80      	pop	{r7, pc}

08014a1c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014a1c:	b580      	push	{r7, lr}
 8014a1e:	b082      	sub	sp, #8
 8014a20:	af00      	add	r7, sp, #0
 8014a22:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8014a2a:	4618      	mov	r0, r3
 8014a2c:	f7fb fd3d 	bl	80104aa <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	699b      	ldr	r3, [r3, #24]
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	d005      	beq.n	8014a44 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014a38:	4b04      	ldr	r3, [pc, #16]	; (8014a4c <HAL_PCD_SuspendCallback+0x30>)
 8014a3a:	691b      	ldr	r3, [r3, #16]
 8014a3c:	4a03      	ldr	r2, [pc, #12]	; (8014a4c <HAL_PCD_SuspendCallback+0x30>)
 8014a3e:	f043 0306 	orr.w	r3, r3, #6
 8014a42:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8014a44:	bf00      	nop
 8014a46:	3708      	adds	r7, #8
 8014a48:	46bd      	mov	sp, r7
 8014a4a:	bd80      	pop	{r7, pc}
 8014a4c:	e000ed00 	.word	0xe000ed00

08014a50 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014a50:	b580      	push	{r7, lr}
 8014a52:	b082      	sub	sp, #8
 8014a54:	af00      	add	r7, sp, #0
 8014a56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8014a5e:	4618      	mov	r0, r3
 8014a60:	f7fb fd37 	bl	80104d2 <USBD_LL_Resume>
}
 8014a64:	bf00      	nop
 8014a66:	3708      	adds	r7, #8
 8014a68:	46bd      	mov	sp, r7
 8014a6a:	bd80      	pop	{r7, pc}

08014a6c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8014a6c:	b580      	push	{r7, lr}
 8014a6e:	b082      	sub	sp, #8
 8014a70:	af00      	add	r7, sp, #0
 8014a72:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8014a74:	4a23      	ldr	r2, [pc, #140]	; (8014b04 <USBD_LL_Init+0x98>)
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	4a21      	ldr	r2, [pc, #132]	; (8014b04 <USBD_LL_Init+0x98>)
 8014a80:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 8014a84:	4b1f      	ldr	r3, [pc, #124]	; (8014b04 <USBD_LL_Init+0x98>)
 8014a86:	4a20      	ldr	r2, [pc, #128]	; (8014b08 <USBD_LL_Init+0x9c>)
 8014a88:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8014a8a:	4b1e      	ldr	r3, [pc, #120]	; (8014b04 <USBD_LL_Init+0x98>)
 8014a8c:	2208      	movs	r2, #8
 8014a8e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8014a90:	4b1c      	ldr	r3, [pc, #112]	; (8014b04 <USBD_LL_Init+0x98>)
 8014a92:	2202      	movs	r2, #2
 8014a94:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8014a96:	4b1b      	ldr	r3, [pc, #108]	; (8014b04 <USBD_LL_Init+0x98>)
 8014a98:	2202      	movs	r2, #2
 8014a9a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8014a9c:	4b19      	ldr	r3, [pc, #100]	; (8014b04 <USBD_LL_Init+0x98>)
 8014a9e:	2200      	movs	r2, #0
 8014aa0:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8014aa2:	4b18      	ldr	r3, [pc, #96]	; (8014b04 <USBD_LL_Init+0x98>)
 8014aa4:	2200      	movs	r2, #0
 8014aa6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8014aa8:	4816      	ldr	r0, [pc, #88]	; (8014b04 <USBD_LL_Init+0x98>)
 8014aaa:	f7f3 fc6f 	bl	800838c <HAL_PCD_Init>
 8014aae:	4603      	mov	r3, r0
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	d002      	beq.n	8014aba <USBD_LL_Init+0x4e>
  {
    Error_Handler(1);
 8014ab4:	2001      	movs	r0, #1
 8014ab6:	f7ee ffb9 	bl	8003a2c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8014ac0:	2318      	movs	r3, #24
 8014ac2:	2200      	movs	r2, #0
 8014ac4:	2100      	movs	r1, #0
 8014ac6:	f7f4 ff23 	bl	8009910 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8014ad0:	2358      	movs	r3, #88	; 0x58
 8014ad2:	2200      	movs	r2, #0
 8014ad4:	2180      	movs	r1, #128	; 0x80
 8014ad6:	f7f4 ff1b 	bl	8009910 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_MSC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x98);
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8014ae0:	2398      	movs	r3, #152	; 0x98
 8014ae2:	2200      	movs	r2, #0
 8014ae4:	2181      	movs	r1, #129	; 0x81
 8014ae6:	f7f4 ff13 	bl	8009910 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0xD8);
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8014af0:	23d8      	movs	r3, #216	; 0xd8
 8014af2:	2200      	movs	r2, #0
 8014af4:	2101      	movs	r1, #1
 8014af6:	f7f4 ff0b 	bl	8009910 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_MSC */
  return USBD_OK;
 8014afa:	2300      	movs	r3, #0
}
 8014afc:	4618      	mov	r0, r3
 8014afe:	3708      	adds	r7, #8
 8014b00:	46bd      	mov	sp, r7
 8014b02:	bd80      	pop	{r7, pc}
 8014b04:	20009b40 	.word	0x20009b40
 8014b08:	40005c00 	.word	0x40005c00

08014b0c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8014b0c:	b580      	push	{r7, lr}
 8014b0e:	b084      	sub	sp, #16
 8014b10:	af00      	add	r7, sp, #0
 8014b12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014b14:	2300      	movs	r3, #0
 8014b16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014b18:	2300      	movs	r3, #0
 8014b1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8014b22:	4618      	mov	r0, r3
 8014b24:	f7f3 fd10 	bl	8008548 <HAL_PCD_Start>
 8014b28:	4603      	mov	r3, r0
 8014b2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014b2c:	7bfb      	ldrb	r3, [r7, #15]
 8014b2e:	4618      	mov	r0, r3
 8014b30:	f000 f964 	bl	8014dfc <USBD_Get_USB_Status>
 8014b34:	4603      	mov	r3, r0
 8014b36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014b38:	7bbb      	ldrb	r3, [r7, #14]
}
 8014b3a:	4618      	mov	r0, r3
 8014b3c:	3710      	adds	r7, #16
 8014b3e:	46bd      	mov	sp, r7
 8014b40:	bd80      	pop	{r7, pc}

08014b42 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8014b42:	b580      	push	{r7, lr}
 8014b44:	b084      	sub	sp, #16
 8014b46:	af00      	add	r7, sp, #0
 8014b48:	6078      	str	r0, [r7, #4]
 8014b4a:	4608      	mov	r0, r1
 8014b4c:	4611      	mov	r1, r2
 8014b4e:	461a      	mov	r2, r3
 8014b50:	4603      	mov	r3, r0
 8014b52:	70fb      	strb	r3, [r7, #3]
 8014b54:	460b      	mov	r3, r1
 8014b56:	70bb      	strb	r3, [r7, #2]
 8014b58:	4613      	mov	r3, r2
 8014b5a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014b5c:	2300      	movs	r3, #0
 8014b5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014b60:	2300      	movs	r3, #0
 8014b62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8014b6a:	78bb      	ldrb	r3, [r7, #2]
 8014b6c:	883a      	ldrh	r2, [r7, #0]
 8014b6e:	78f9      	ldrb	r1, [r7, #3]
 8014b70:	f7f3 fe2c 	bl	80087cc <HAL_PCD_EP_Open>
 8014b74:	4603      	mov	r3, r0
 8014b76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014b78:	7bfb      	ldrb	r3, [r7, #15]
 8014b7a:	4618      	mov	r0, r3
 8014b7c:	f000 f93e 	bl	8014dfc <USBD_Get_USB_Status>
 8014b80:	4603      	mov	r3, r0
 8014b82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014b84:	7bbb      	ldrb	r3, [r7, #14]
}
 8014b86:	4618      	mov	r0, r3
 8014b88:	3710      	adds	r7, #16
 8014b8a:	46bd      	mov	sp, r7
 8014b8c:	bd80      	pop	{r7, pc}

08014b8e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014b8e:	b580      	push	{r7, lr}
 8014b90:	b084      	sub	sp, #16
 8014b92:	af00      	add	r7, sp, #0
 8014b94:	6078      	str	r0, [r7, #4]
 8014b96:	460b      	mov	r3, r1
 8014b98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014b9a:	2300      	movs	r3, #0
 8014b9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014b9e:	2300      	movs	r3, #0
 8014ba0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8014ba8:	78fa      	ldrb	r2, [r7, #3]
 8014baa:	4611      	mov	r1, r2
 8014bac:	4618      	mov	r0, r3
 8014bae:	f7f3 fe73 	bl	8008898 <HAL_PCD_EP_Close>
 8014bb2:	4603      	mov	r3, r0
 8014bb4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014bb6:	7bfb      	ldrb	r3, [r7, #15]
 8014bb8:	4618      	mov	r0, r3
 8014bba:	f000 f91f 	bl	8014dfc <USBD_Get_USB_Status>
 8014bbe:	4603      	mov	r3, r0
 8014bc0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014bc2:	7bbb      	ldrb	r3, [r7, #14]
}
 8014bc4:	4618      	mov	r0, r3
 8014bc6:	3710      	adds	r7, #16
 8014bc8:	46bd      	mov	sp, r7
 8014bca:	bd80      	pop	{r7, pc}

08014bcc <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014bcc:	b580      	push	{r7, lr}
 8014bce:	b084      	sub	sp, #16
 8014bd0:	af00      	add	r7, sp, #0
 8014bd2:	6078      	str	r0, [r7, #4]
 8014bd4:	460b      	mov	r3, r1
 8014bd6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014bd8:	2300      	movs	r3, #0
 8014bda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014bdc:	2300      	movs	r3, #0
 8014bde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8014be6:	78fa      	ldrb	r2, [r7, #3]
 8014be8:	4611      	mov	r1, r2
 8014bea:	4618      	mov	r0, r3
 8014bec:	f7f3 ffe7 	bl	8008bbe <HAL_PCD_EP_Flush>
 8014bf0:	4603      	mov	r3, r0
 8014bf2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014bf4:	7bfb      	ldrb	r3, [r7, #15]
 8014bf6:	4618      	mov	r0, r3
 8014bf8:	f000 f900 	bl	8014dfc <USBD_Get_USB_Status>
 8014bfc:	4603      	mov	r3, r0
 8014bfe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014c00:	7bbb      	ldrb	r3, [r7, #14]
}
 8014c02:	4618      	mov	r0, r3
 8014c04:	3710      	adds	r7, #16
 8014c06:	46bd      	mov	sp, r7
 8014c08:	bd80      	pop	{r7, pc}

08014c0a <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014c0a:	b580      	push	{r7, lr}
 8014c0c:	b084      	sub	sp, #16
 8014c0e:	af00      	add	r7, sp, #0
 8014c10:	6078      	str	r0, [r7, #4]
 8014c12:	460b      	mov	r3, r1
 8014c14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014c16:	2300      	movs	r3, #0
 8014c18:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014c1a:	2300      	movs	r3, #0
 8014c1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8014c24:	78fa      	ldrb	r2, [r7, #3]
 8014c26:	4611      	mov	r1, r2
 8014c28:	4618      	mov	r0, r3
 8014c2a:	f7f3 ff14 	bl	8008a56 <HAL_PCD_EP_SetStall>
 8014c2e:	4603      	mov	r3, r0
 8014c30:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014c32:	7bfb      	ldrb	r3, [r7, #15]
 8014c34:	4618      	mov	r0, r3
 8014c36:	f000 f8e1 	bl	8014dfc <USBD_Get_USB_Status>
 8014c3a:	4603      	mov	r3, r0
 8014c3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014c3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8014c40:	4618      	mov	r0, r3
 8014c42:	3710      	adds	r7, #16
 8014c44:	46bd      	mov	sp, r7
 8014c46:	bd80      	pop	{r7, pc}

08014c48 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014c48:	b580      	push	{r7, lr}
 8014c4a:	b084      	sub	sp, #16
 8014c4c:	af00      	add	r7, sp, #0
 8014c4e:	6078      	str	r0, [r7, #4]
 8014c50:	460b      	mov	r3, r1
 8014c52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014c54:	2300      	movs	r3, #0
 8014c56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014c58:	2300      	movs	r3, #0
 8014c5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8014c62:	78fa      	ldrb	r2, [r7, #3]
 8014c64:	4611      	mov	r1, r2
 8014c66:	4618      	mov	r0, r3
 8014c68:	f7f3 ff55 	bl	8008b16 <HAL_PCD_EP_ClrStall>
 8014c6c:	4603      	mov	r3, r0
 8014c6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014c70:	7bfb      	ldrb	r3, [r7, #15]
 8014c72:	4618      	mov	r0, r3
 8014c74:	f000 f8c2 	bl	8014dfc <USBD_Get_USB_Status>
 8014c78:	4603      	mov	r3, r0
 8014c7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014c7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8014c7e:	4618      	mov	r0, r3
 8014c80:	3710      	adds	r7, #16
 8014c82:	46bd      	mov	sp, r7
 8014c84:	bd80      	pop	{r7, pc}

08014c86 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014c86:	b480      	push	{r7}
 8014c88:	b085      	sub	sp, #20
 8014c8a:	af00      	add	r7, sp, #0
 8014c8c:	6078      	str	r0, [r7, #4]
 8014c8e:	460b      	mov	r3, r1
 8014c90:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8014c98:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8014c9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	da0c      	bge.n	8014cbc <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8014ca2:	78fb      	ldrb	r3, [r7, #3]
 8014ca4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014ca8:	68f9      	ldr	r1, [r7, #12]
 8014caa:	1c5a      	adds	r2, r3, #1
 8014cac:	4613      	mov	r3, r2
 8014cae:	009b      	lsls	r3, r3, #2
 8014cb0:	4413      	add	r3, r2
 8014cb2:	00db      	lsls	r3, r3, #3
 8014cb4:	440b      	add	r3, r1
 8014cb6:	3302      	adds	r3, #2
 8014cb8:	781b      	ldrb	r3, [r3, #0]
 8014cba:	e00b      	b.n	8014cd4 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8014cbc:	78fb      	ldrb	r3, [r7, #3]
 8014cbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014cc2:	68f9      	ldr	r1, [r7, #12]
 8014cc4:	4613      	mov	r3, r2
 8014cc6:	009b      	lsls	r3, r3, #2
 8014cc8:	4413      	add	r3, r2
 8014cca:	00db      	lsls	r3, r3, #3
 8014ccc:	440b      	add	r3, r1
 8014cce:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8014cd2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014cd4:	4618      	mov	r0, r3
 8014cd6:	3714      	adds	r7, #20
 8014cd8:	46bd      	mov	sp, r7
 8014cda:	bc80      	pop	{r7}
 8014cdc:	4770      	bx	lr

08014cde <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8014cde:	b580      	push	{r7, lr}
 8014ce0:	b084      	sub	sp, #16
 8014ce2:	af00      	add	r7, sp, #0
 8014ce4:	6078      	str	r0, [r7, #4]
 8014ce6:	460b      	mov	r3, r1
 8014ce8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014cea:	2300      	movs	r3, #0
 8014cec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014cee:	2300      	movs	r3, #0
 8014cf0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8014cf8:	78fa      	ldrb	r2, [r7, #3]
 8014cfa:	4611      	mov	r1, r2
 8014cfc:	4618      	mov	r0, r3
 8014cfe:	f7f3 fd40 	bl	8008782 <HAL_PCD_SetAddress>
 8014d02:	4603      	mov	r3, r0
 8014d04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014d06:	7bfb      	ldrb	r3, [r7, #15]
 8014d08:	4618      	mov	r0, r3
 8014d0a:	f000 f877 	bl	8014dfc <USBD_Get_USB_Status>
 8014d0e:	4603      	mov	r3, r0
 8014d10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014d12:	7bbb      	ldrb	r3, [r7, #14]
}
 8014d14:	4618      	mov	r0, r3
 8014d16:	3710      	adds	r7, #16
 8014d18:	46bd      	mov	sp, r7
 8014d1a:	bd80      	pop	{r7, pc}

08014d1c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8014d1c:	b580      	push	{r7, lr}
 8014d1e:	b086      	sub	sp, #24
 8014d20:	af00      	add	r7, sp, #0
 8014d22:	60f8      	str	r0, [r7, #12]
 8014d24:	607a      	str	r2, [r7, #4]
 8014d26:	461a      	mov	r2, r3
 8014d28:	460b      	mov	r3, r1
 8014d2a:	72fb      	strb	r3, [r7, #11]
 8014d2c:	4613      	mov	r3, r2
 8014d2e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014d30:	2300      	movs	r3, #0
 8014d32:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014d34:	2300      	movs	r3, #0
 8014d36:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8014d38:	68fb      	ldr	r3, [r7, #12]
 8014d3a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8014d3e:	893b      	ldrh	r3, [r7, #8]
 8014d40:	7af9      	ldrb	r1, [r7, #11]
 8014d42:	687a      	ldr	r2, [r7, #4]
 8014d44:	f7f3 fe44 	bl	80089d0 <HAL_PCD_EP_Transmit>
 8014d48:	4603      	mov	r3, r0
 8014d4a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014d4c:	7dfb      	ldrb	r3, [r7, #23]
 8014d4e:	4618      	mov	r0, r3
 8014d50:	f000 f854 	bl	8014dfc <USBD_Get_USB_Status>
 8014d54:	4603      	mov	r3, r0
 8014d56:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8014d58:	7dbb      	ldrb	r3, [r7, #22]
}
 8014d5a:	4618      	mov	r0, r3
 8014d5c:	3718      	adds	r7, #24
 8014d5e:	46bd      	mov	sp, r7
 8014d60:	bd80      	pop	{r7, pc}

08014d62 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8014d62:	b580      	push	{r7, lr}
 8014d64:	b086      	sub	sp, #24
 8014d66:	af00      	add	r7, sp, #0
 8014d68:	60f8      	str	r0, [r7, #12]
 8014d6a:	607a      	str	r2, [r7, #4]
 8014d6c:	461a      	mov	r2, r3
 8014d6e:	460b      	mov	r3, r1
 8014d70:	72fb      	strb	r3, [r7, #11]
 8014d72:	4613      	mov	r3, r2
 8014d74:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014d76:	2300      	movs	r3, #0
 8014d78:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014d7a:	2300      	movs	r3, #0
 8014d7c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8014d7e:	68fb      	ldr	r3, [r7, #12]
 8014d80:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8014d84:	893b      	ldrh	r3, [r7, #8]
 8014d86:	7af9      	ldrb	r1, [r7, #11]
 8014d88:	687a      	ldr	r2, [r7, #4]
 8014d8a:	f7f3 fdcd 	bl	8008928 <HAL_PCD_EP_Receive>
 8014d8e:	4603      	mov	r3, r0
 8014d90:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014d92:	7dfb      	ldrb	r3, [r7, #23]
 8014d94:	4618      	mov	r0, r3
 8014d96:	f000 f831 	bl	8014dfc <USBD_Get_USB_Status>
 8014d9a:	4603      	mov	r3, r0
 8014d9c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8014d9e:	7dbb      	ldrb	r3, [r7, #22]
}
 8014da0:	4618      	mov	r0, r3
 8014da2:	3718      	adds	r7, #24
 8014da4:	46bd      	mov	sp, r7
 8014da6:	bd80      	pop	{r7, pc}

08014da8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014da8:	b580      	push	{r7, lr}
 8014daa:	b082      	sub	sp, #8
 8014dac:	af00      	add	r7, sp, #0
 8014dae:	6078      	str	r0, [r7, #4]
 8014db0:	460b      	mov	r3, r1
 8014db2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8014dba:	78fa      	ldrb	r2, [r7, #3]
 8014dbc:	4611      	mov	r1, r2
 8014dbe:	4618      	mov	r0, r3
 8014dc0:	f7f3 fdef 	bl	80089a2 <HAL_PCD_EP_GetRxCount>
 8014dc4:	4603      	mov	r3, r0
}
 8014dc6:	4618      	mov	r0, r3
 8014dc8:	3708      	adds	r7, #8
 8014dca:	46bd      	mov	sp, r7
 8014dcc:	bd80      	pop	{r7, pc}
	...

08014dd0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8014dd0:	b480      	push	{r7}
 8014dd2:	b083      	sub	sp, #12
 8014dd4:	af00      	add	r7, sp, #0
 8014dd6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8014dd8:	4b02      	ldr	r3, [pc, #8]	; (8014de4 <USBD_static_malloc+0x14>)
}
 8014dda:	4618      	mov	r0, r3
 8014ddc:	370c      	adds	r7, #12
 8014dde:	46bd      	mov	sp, r7
 8014de0:	bc80      	pop	{r7}
 8014de2:	4770      	bx	lr
 8014de4:	200086dc 	.word	0x200086dc

08014de8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8014de8:	b480      	push	{r7}
 8014dea:	b083      	sub	sp, #12
 8014dec:	af00      	add	r7, sp, #0
 8014dee:	6078      	str	r0, [r7, #4]

}
 8014df0:	bf00      	nop
 8014df2:	370c      	adds	r7, #12
 8014df4:	46bd      	mov	sp, r7
 8014df6:	bc80      	pop	{r7}
 8014df8:	4770      	bx	lr
	...

08014dfc <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8014dfc:	b480      	push	{r7}
 8014dfe:	b085      	sub	sp, #20
 8014e00:	af00      	add	r7, sp, #0
 8014e02:	4603      	mov	r3, r0
 8014e04:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014e06:	2300      	movs	r3, #0
 8014e08:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8014e0a:	79fb      	ldrb	r3, [r7, #7]
 8014e0c:	2b03      	cmp	r3, #3
 8014e0e:	d817      	bhi.n	8014e40 <USBD_Get_USB_Status+0x44>
 8014e10:	a201      	add	r2, pc, #4	; (adr r2, 8014e18 <USBD_Get_USB_Status+0x1c>)
 8014e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e16:	bf00      	nop
 8014e18:	08014e29 	.word	0x08014e29
 8014e1c:	08014e2f 	.word	0x08014e2f
 8014e20:	08014e35 	.word	0x08014e35
 8014e24:	08014e3b 	.word	0x08014e3b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8014e28:	2300      	movs	r3, #0
 8014e2a:	73fb      	strb	r3, [r7, #15]
    break;
 8014e2c:	e00b      	b.n	8014e46 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014e2e:	2302      	movs	r3, #2
 8014e30:	73fb      	strb	r3, [r7, #15]
    break;
 8014e32:	e008      	b.n	8014e46 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014e34:	2301      	movs	r3, #1
 8014e36:	73fb      	strb	r3, [r7, #15]
    break;
 8014e38:	e005      	b.n	8014e46 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014e3a:	2302      	movs	r3, #2
 8014e3c:	73fb      	strb	r3, [r7, #15]
    break;
 8014e3e:	e002      	b.n	8014e46 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8014e40:	2302      	movs	r3, #2
 8014e42:	73fb      	strb	r3, [r7, #15]
    break;
 8014e44:	bf00      	nop
  }
  return usb_status;
 8014e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8014e48:	4618      	mov	r0, r3
 8014e4a:	3714      	adds	r7, #20
 8014e4c:	46bd      	mov	sp, r7
 8014e4e:	bc80      	pop	{r7}
 8014e50:	4770      	bx	lr
 8014e52:	bf00      	nop

08014e54 <__libc_init_array>:
 8014e54:	b570      	push	{r4, r5, r6, lr}
 8014e56:	2500      	movs	r5, #0
 8014e58:	4e0c      	ldr	r6, [pc, #48]	; (8014e8c <__libc_init_array+0x38>)
 8014e5a:	4c0d      	ldr	r4, [pc, #52]	; (8014e90 <__libc_init_array+0x3c>)
 8014e5c:	1ba4      	subs	r4, r4, r6
 8014e5e:	10a4      	asrs	r4, r4, #2
 8014e60:	42a5      	cmp	r5, r4
 8014e62:	d109      	bne.n	8014e78 <__libc_init_array+0x24>
 8014e64:	f004 fec6 	bl	8019bf4 <_init>
 8014e68:	2500      	movs	r5, #0
 8014e6a:	4e0a      	ldr	r6, [pc, #40]	; (8014e94 <__libc_init_array+0x40>)
 8014e6c:	4c0a      	ldr	r4, [pc, #40]	; (8014e98 <__libc_init_array+0x44>)
 8014e6e:	1ba4      	subs	r4, r4, r6
 8014e70:	10a4      	asrs	r4, r4, #2
 8014e72:	42a5      	cmp	r5, r4
 8014e74:	d105      	bne.n	8014e82 <__libc_init_array+0x2e>
 8014e76:	bd70      	pop	{r4, r5, r6, pc}
 8014e78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014e7c:	4798      	blx	r3
 8014e7e:	3501      	adds	r5, #1
 8014e80:	e7ee      	b.n	8014e60 <__libc_init_array+0xc>
 8014e82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014e86:	4798      	blx	r3
 8014e88:	3501      	adds	r5, #1
 8014e8a:	e7f2      	b.n	8014e72 <__libc_init_array+0x1e>
 8014e8c:	0801e96c 	.word	0x0801e96c
 8014e90:	0801e96c 	.word	0x0801e96c
 8014e94:	0801e96c 	.word	0x0801e96c
 8014e98:	0801e970 	.word	0x0801e970

08014e9c <memcpy>:
 8014e9c:	b510      	push	{r4, lr}
 8014e9e:	1e43      	subs	r3, r0, #1
 8014ea0:	440a      	add	r2, r1
 8014ea2:	4291      	cmp	r1, r2
 8014ea4:	d100      	bne.n	8014ea8 <memcpy+0xc>
 8014ea6:	bd10      	pop	{r4, pc}
 8014ea8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014eac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014eb0:	e7f7      	b.n	8014ea2 <memcpy+0x6>

08014eb2 <memmove>:
 8014eb2:	4288      	cmp	r0, r1
 8014eb4:	b510      	push	{r4, lr}
 8014eb6:	eb01 0302 	add.w	r3, r1, r2
 8014eba:	d807      	bhi.n	8014ecc <memmove+0x1a>
 8014ebc:	1e42      	subs	r2, r0, #1
 8014ebe:	4299      	cmp	r1, r3
 8014ec0:	d00a      	beq.n	8014ed8 <memmove+0x26>
 8014ec2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014ec6:	f802 4f01 	strb.w	r4, [r2, #1]!
 8014eca:	e7f8      	b.n	8014ebe <memmove+0xc>
 8014ecc:	4283      	cmp	r3, r0
 8014ece:	d9f5      	bls.n	8014ebc <memmove+0xa>
 8014ed0:	1881      	adds	r1, r0, r2
 8014ed2:	1ad2      	subs	r2, r2, r3
 8014ed4:	42d3      	cmn	r3, r2
 8014ed6:	d100      	bne.n	8014eda <memmove+0x28>
 8014ed8:	bd10      	pop	{r4, pc}
 8014eda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014ede:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8014ee2:	e7f7      	b.n	8014ed4 <memmove+0x22>

08014ee4 <memset>:
 8014ee4:	4603      	mov	r3, r0
 8014ee6:	4402      	add	r2, r0
 8014ee8:	4293      	cmp	r3, r2
 8014eea:	d100      	bne.n	8014eee <memset+0xa>
 8014eec:	4770      	bx	lr
 8014eee:	f803 1b01 	strb.w	r1, [r3], #1
 8014ef2:	e7f9      	b.n	8014ee8 <memset+0x4>

08014ef4 <__cvt>:
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014efa:	461e      	mov	r6, r3
 8014efc:	bfbb      	ittet	lt
 8014efe:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8014f02:	461e      	movlt	r6, r3
 8014f04:	2300      	movge	r3, #0
 8014f06:	232d      	movlt	r3, #45	; 0x2d
 8014f08:	b088      	sub	sp, #32
 8014f0a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8014f0c:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8014f10:	f027 0720 	bic.w	r7, r7, #32
 8014f14:	2f46      	cmp	r7, #70	; 0x46
 8014f16:	4614      	mov	r4, r2
 8014f18:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8014f1a:	700b      	strb	r3, [r1, #0]
 8014f1c:	d004      	beq.n	8014f28 <__cvt+0x34>
 8014f1e:	2f45      	cmp	r7, #69	; 0x45
 8014f20:	d100      	bne.n	8014f24 <__cvt+0x30>
 8014f22:	3501      	adds	r5, #1
 8014f24:	2302      	movs	r3, #2
 8014f26:	e000      	b.n	8014f2a <__cvt+0x36>
 8014f28:	2303      	movs	r3, #3
 8014f2a:	aa07      	add	r2, sp, #28
 8014f2c:	9204      	str	r2, [sp, #16]
 8014f2e:	aa06      	add	r2, sp, #24
 8014f30:	e9cd a202 	strd	sl, r2, [sp, #8]
 8014f34:	e9cd 3500 	strd	r3, r5, [sp]
 8014f38:	4622      	mov	r2, r4
 8014f3a:	4633      	mov	r3, r6
 8014f3c:	f001 ff80 	bl	8016e40 <_dtoa_r>
 8014f40:	2f47      	cmp	r7, #71	; 0x47
 8014f42:	4680      	mov	r8, r0
 8014f44:	d102      	bne.n	8014f4c <__cvt+0x58>
 8014f46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014f48:	07db      	lsls	r3, r3, #31
 8014f4a:	d526      	bpl.n	8014f9a <__cvt+0xa6>
 8014f4c:	2f46      	cmp	r7, #70	; 0x46
 8014f4e:	eb08 0905 	add.w	r9, r8, r5
 8014f52:	d111      	bne.n	8014f78 <__cvt+0x84>
 8014f54:	f898 3000 	ldrb.w	r3, [r8]
 8014f58:	2b30      	cmp	r3, #48	; 0x30
 8014f5a:	d10a      	bne.n	8014f72 <__cvt+0x7e>
 8014f5c:	2200      	movs	r2, #0
 8014f5e:	2300      	movs	r3, #0
 8014f60:	4620      	mov	r0, r4
 8014f62:	4631      	mov	r1, r6
 8014f64:	f7eb fd42 	bl	80009ec <__aeabi_dcmpeq>
 8014f68:	b918      	cbnz	r0, 8014f72 <__cvt+0x7e>
 8014f6a:	f1c5 0501 	rsb	r5, r5, #1
 8014f6e:	f8ca 5000 	str.w	r5, [sl]
 8014f72:	f8da 3000 	ldr.w	r3, [sl]
 8014f76:	4499      	add	r9, r3
 8014f78:	2200      	movs	r2, #0
 8014f7a:	2300      	movs	r3, #0
 8014f7c:	4620      	mov	r0, r4
 8014f7e:	4631      	mov	r1, r6
 8014f80:	f7eb fd34 	bl	80009ec <__aeabi_dcmpeq>
 8014f84:	b938      	cbnz	r0, 8014f96 <__cvt+0xa2>
 8014f86:	2230      	movs	r2, #48	; 0x30
 8014f88:	9b07      	ldr	r3, [sp, #28]
 8014f8a:	454b      	cmp	r3, r9
 8014f8c:	d205      	bcs.n	8014f9a <__cvt+0xa6>
 8014f8e:	1c59      	adds	r1, r3, #1
 8014f90:	9107      	str	r1, [sp, #28]
 8014f92:	701a      	strb	r2, [r3, #0]
 8014f94:	e7f8      	b.n	8014f88 <__cvt+0x94>
 8014f96:	f8cd 901c 	str.w	r9, [sp, #28]
 8014f9a:	4640      	mov	r0, r8
 8014f9c:	9b07      	ldr	r3, [sp, #28]
 8014f9e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014fa0:	eba3 0308 	sub.w	r3, r3, r8
 8014fa4:	6013      	str	r3, [r2, #0]
 8014fa6:	b008      	add	sp, #32
 8014fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08014fac <__exponent>:
 8014fac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014fae:	2900      	cmp	r1, #0
 8014fb0:	bfb4      	ite	lt
 8014fb2:	232d      	movlt	r3, #45	; 0x2d
 8014fb4:	232b      	movge	r3, #43	; 0x2b
 8014fb6:	4604      	mov	r4, r0
 8014fb8:	bfb8      	it	lt
 8014fba:	4249      	neglt	r1, r1
 8014fbc:	2909      	cmp	r1, #9
 8014fbe:	f804 2b02 	strb.w	r2, [r4], #2
 8014fc2:	7043      	strb	r3, [r0, #1]
 8014fc4:	dd21      	ble.n	801500a <__exponent+0x5e>
 8014fc6:	f10d 0307 	add.w	r3, sp, #7
 8014fca:	461f      	mov	r7, r3
 8014fcc:	260a      	movs	r6, #10
 8014fce:	fb91 f5f6 	sdiv	r5, r1, r6
 8014fd2:	fb06 1115 	mls	r1, r6, r5, r1
 8014fd6:	2d09      	cmp	r5, #9
 8014fd8:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8014fdc:	f803 1c01 	strb.w	r1, [r3, #-1]
 8014fe0:	f103 32ff 	add.w	r2, r3, #4294967295
 8014fe4:	4629      	mov	r1, r5
 8014fe6:	dc09      	bgt.n	8014ffc <__exponent+0x50>
 8014fe8:	3130      	adds	r1, #48	; 0x30
 8014fea:	3b02      	subs	r3, #2
 8014fec:	f802 1c01 	strb.w	r1, [r2, #-1]
 8014ff0:	42bb      	cmp	r3, r7
 8014ff2:	4622      	mov	r2, r4
 8014ff4:	d304      	bcc.n	8015000 <__exponent+0x54>
 8014ff6:	1a10      	subs	r0, r2, r0
 8014ff8:	b003      	add	sp, #12
 8014ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ffc:	4613      	mov	r3, r2
 8014ffe:	e7e6      	b.n	8014fce <__exponent+0x22>
 8015000:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015004:	f804 2b01 	strb.w	r2, [r4], #1
 8015008:	e7f2      	b.n	8014ff0 <__exponent+0x44>
 801500a:	2330      	movs	r3, #48	; 0x30
 801500c:	4419      	add	r1, r3
 801500e:	7083      	strb	r3, [r0, #2]
 8015010:	1d02      	adds	r2, r0, #4
 8015012:	70c1      	strb	r1, [r0, #3]
 8015014:	e7ef      	b.n	8014ff6 <__exponent+0x4a>
	...

08015018 <_printf_float>:
 8015018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801501c:	b091      	sub	sp, #68	; 0x44
 801501e:	460c      	mov	r4, r1
 8015020:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8015022:	4693      	mov	fp, r2
 8015024:	461e      	mov	r6, r3
 8015026:	4605      	mov	r5, r0
 8015028:	f003 f974 	bl	8018314 <_localeconv_r>
 801502c:	6803      	ldr	r3, [r0, #0]
 801502e:	4618      	mov	r0, r3
 8015030:	9309      	str	r3, [sp, #36]	; 0x24
 8015032:	f7eb f8af 	bl	8000194 <strlen>
 8015036:	2300      	movs	r3, #0
 8015038:	930e      	str	r3, [sp, #56]	; 0x38
 801503a:	683b      	ldr	r3, [r7, #0]
 801503c:	900a      	str	r0, [sp, #40]	; 0x28
 801503e:	3307      	adds	r3, #7
 8015040:	f023 0307 	bic.w	r3, r3, #7
 8015044:	f103 0208 	add.w	r2, r3, #8
 8015048:	f894 8018 	ldrb.w	r8, [r4, #24]
 801504c:	f8d4 a000 	ldr.w	sl, [r4]
 8015050:	603a      	str	r2, [r7, #0]
 8015052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015056:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801505a:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 801505e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015062:	930b      	str	r3, [sp, #44]	; 0x2c
 8015064:	f04f 32ff 	mov.w	r2, #4294967295
 8015068:	4ba6      	ldr	r3, [pc, #664]	; (8015304 <_printf_float+0x2ec>)
 801506a:	4638      	mov	r0, r7
 801506c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801506e:	f7eb fcef 	bl	8000a50 <__aeabi_dcmpun>
 8015072:	bb68      	cbnz	r0, 80150d0 <_printf_float+0xb8>
 8015074:	f04f 32ff 	mov.w	r2, #4294967295
 8015078:	4ba2      	ldr	r3, [pc, #648]	; (8015304 <_printf_float+0x2ec>)
 801507a:	4638      	mov	r0, r7
 801507c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801507e:	f7eb fcc9 	bl	8000a14 <__aeabi_dcmple>
 8015082:	bb28      	cbnz	r0, 80150d0 <_printf_float+0xb8>
 8015084:	2200      	movs	r2, #0
 8015086:	2300      	movs	r3, #0
 8015088:	4638      	mov	r0, r7
 801508a:	4649      	mov	r1, r9
 801508c:	f7eb fcb8 	bl	8000a00 <__aeabi_dcmplt>
 8015090:	b110      	cbz	r0, 8015098 <_printf_float+0x80>
 8015092:	232d      	movs	r3, #45	; 0x2d
 8015094:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015098:	4f9b      	ldr	r7, [pc, #620]	; (8015308 <_printf_float+0x2f0>)
 801509a:	4b9c      	ldr	r3, [pc, #624]	; (801530c <_printf_float+0x2f4>)
 801509c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80150a0:	bf98      	it	ls
 80150a2:	461f      	movls	r7, r3
 80150a4:	2303      	movs	r3, #3
 80150a6:	f04f 0900 	mov.w	r9, #0
 80150aa:	6123      	str	r3, [r4, #16]
 80150ac:	f02a 0304 	bic.w	r3, sl, #4
 80150b0:	6023      	str	r3, [r4, #0]
 80150b2:	9600      	str	r6, [sp, #0]
 80150b4:	465b      	mov	r3, fp
 80150b6:	aa0f      	add	r2, sp, #60	; 0x3c
 80150b8:	4621      	mov	r1, r4
 80150ba:	4628      	mov	r0, r5
 80150bc:	f000 f9e2 	bl	8015484 <_printf_common>
 80150c0:	3001      	adds	r0, #1
 80150c2:	f040 8090 	bne.w	80151e6 <_printf_float+0x1ce>
 80150c6:	f04f 30ff 	mov.w	r0, #4294967295
 80150ca:	b011      	add	sp, #68	; 0x44
 80150cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150d0:	463a      	mov	r2, r7
 80150d2:	464b      	mov	r3, r9
 80150d4:	4638      	mov	r0, r7
 80150d6:	4649      	mov	r1, r9
 80150d8:	f7eb fcba 	bl	8000a50 <__aeabi_dcmpun>
 80150dc:	b110      	cbz	r0, 80150e4 <_printf_float+0xcc>
 80150de:	4f8c      	ldr	r7, [pc, #560]	; (8015310 <_printf_float+0x2f8>)
 80150e0:	4b8c      	ldr	r3, [pc, #560]	; (8015314 <_printf_float+0x2fc>)
 80150e2:	e7db      	b.n	801509c <_printf_float+0x84>
 80150e4:	6863      	ldr	r3, [r4, #4]
 80150e6:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 80150ea:	1c59      	adds	r1, r3, #1
 80150ec:	a80d      	add	r0, sp, #52	; 0x34
 80150ee:	a90e      	add	r1, sp, #56	; 0x38
 80150f0:	d140      	bne.n	8015174 <_printf_float+0x15c>
 80150f2:	2306      	movs	r3, #6
 80150f4:	6063      	str	r3, [r4, #4]
 80150f6:	f04f 0c00 	mov.w	ip, #0
 80150fa:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 80150fe:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8015102:	6863      	ldr	r3, [r4, #4]
 8015104:	6022      	str	r2, [r4, #0]
 8015106:	e9cd 0803 	strd	r0, r8, [sp, #12]
 801510a:	9300      	str	r3, [sp, #0]
 801510c:	463a      	mov	r2, r7
 801510e:	464b      	mov	r3, r9
 8015110:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8015114:	4628      	mov	r0, r5
 8015116:	f7ff feed 	bl	8014ef4 <__cvt>
 801511a:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 801511e:	2b47      	cmp	r3, #71	; 0x47
 8015120:	4607      	mov	r7, r0
 8015122:	d109      	bne.n	8015138 <_printf_float+0x120>
 8015124:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015126:	1cd8      	adds	r0, r3, #3
 8015128:	db02      	blt.n	8015130 <_printf_float+0x118>
 801512a:	6862      	ldr	r2, [r4, #4]
 801512c:	4293      	cmp	r3, r2
 801512e:	dd47      	ble.n	80151c0 <_printf_float+0x1a8>
 8015130:	f1a8 0802 	sub.w	r8, r8, #2
 8015134:	fa5f f888 	uxtb.w	r8, r8
 8015138:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 801513c:	990d      	ldr	r1, [sp, #52]	; 0x34
 801513e:	d824      	bhi.n	801518a <_printf_float+0x172>
 8015140:	3901      	subs	r1, #1
 8015142:	4642      	mov	r2, r8
 8015144:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015148:	910d      	str	r1, [sp, #52]	; 0x34
 801514a:	f7ff ff2f 	bl	8014fac <__exponent>
 801514e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015150:	4681      	mov	r9, r0
 8015152:	1813      	adds	r3, r2, r0
 8015154:	2a01      	cmp	r2, #1
 8015156:	6123      	str	r3, [r4, #16]
 8015158:	dc02      	bgt.n	8015160 <_printf_float+0x148>
 801515a:	6822      	ldr	r2, [r4, #0]
 801515c:	07d1      	lsls	r1, r2, #31
 801515e:	d501      	bpl.n	8015164 <_printf_float+0x14c>
 8015160:	3301      	adds	r3, #1
 8015162:	6123      	str	r3, [r4, #16]
 8015164:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8015168:	2b00      	cmp	r3, #0
 801516a:	d0a2      	beq.n	80150b2 <_printf_float+0x9a>
 801516c:	232d      	movs	r3, #45	; 0x2d
 801516e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015172:	e79e      	b.n	80150b2 <_printf_float+0x9a>
 8015174:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8015178:	f000 816e 	beq.w	8015458 <_printf_float+0x440>
 801517c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8015180:	d1b9      	bne.n	80150f6 <_printf_float+0xde>
 8015182:	2b00      	cmp	r3, #0
 8015184:	d1b7      	bne.n	80150f6 <_printf_float+0xde>
 8015186:	2301      	movs	r3, #1
 8015188:	e7b4      	b.n	80150f4 <_printf_float+0xdc>
 801518a:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 801518e:	d119      	bne.n	80151c4 <_printf_float+0x1ac>
 8015190:	2900      	cmp	r1, #0
 8015192:	6863      	ldr	r3, [r4, #4]
 8015194:	dd0c      	ble.n	80151b0 <_printf_float+0x198>
 8015196:	6121      	str	r1, [r4, #16]
 8015198:	b913      	cbnz	r3, 80151a0 <_printf_float+0x188>
 801519a:	6822      	ldr	r2, [r4, #0]
 801519c:	07d2      	lsls	r2, r2, #31
 801519e:	d502      	bpl.n	80151a6 <_printf_float+0x18e>
 80151a0:	3301      	adds	r3, #1
 80151a2:	440b      	add	r3, r1
 80151a4:	6123      	str	r3, [r4, #16]
 80151a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80151a8:	f04f 0900 	mov.w	r9, #0
 80151ac:	65a3      	str	r3, [r4, #88]	; 0x58
 80151ae:	e7d9      	b.n	8015164 <_printf_float+0x14c>
 80151b0:	b913      	cbnz	r3, 80151b8 <_printf_float+0x1a0>
 80151b2:	6822      	ldr	r2, [r4, #0]
 80151b4:	07d0      	lsls	r0, r2, #31
 80151b6:	d501      	bpl.n	80151bc <_printf_float+0x1a4>
 80151b8:	3302      	adds	r3, #2
 80151ba:	e7f3      	b.n	80151a4 <_printf_float+0x18c>
 80151bc:	2301      	movs	r3, #1
 80151be:	e7f1      	b.n	80151a4 <_printf_float+0x18c>
 80151c0:	f04f 0867 	mov.w	r8, #103	; 0x67
 80151c4:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80151c8:	4293      	cmp	r3, r2
 80151ca:	db05      	blt.n	80151d8 <_printf_float+0x1c0>
 80151cc:	6822      	ldr	r2, [r4, #0]
 80151ce:	6123      	str	r3, [r4, #16]
 80151d0:	07d1      	lsls	r1, r2, #31
 80151d2:	d5e8      	bpl.n	80151a6 <_printf_float+0x18e>
 80151d4:	3301      	adds	r3, #1
 80151d6:	e7e5      	b.n	80151a4 <_printf_float+0x18c>
 80151d8:	2b00      	cmp	r3, #0
 80151da:	bfcc      	ite	gt
 80151dc:	2301      	movgt	r3, #1
 80151de:	f1c3 0302 	rsble	r3, r3, #2
 80151e2:	4413      	add	r3, r2
 80151e4:	e7de      	b.n	80151a4 <_printf_float+0x18c>
 80151e6:	6823      	ldr	r3, [r4, #0]
 80151e8:	055a      	lsls	r2, r3, #21
 80151ea:	d407      	bmi.n	80151fc <_printf_float+0x1e4>
 80151ec:	6923      	ldr	r3, [r4, #16]
 80151ee:	463a      	mov	r2, r7
 80151f0:	4659      	mov	r1, fp
 80151f2:	4628      	mov	r0, r5
 80151f4:	47b0      	blx	r6
 80151f6:	3001      	adds	r0, #1
 80151f8:	d129      	bne.n	801524e <_printf_float+0x236>
 80151fa:	e764      	b.n	80150c6 <_printf_float+0xae>
 80151fc:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8015200:	f240 80d7 	bls.w	80153b2 <_printf_float+0x39a>
 8015204:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015208:	2200      	movs	r2, #0
 801520a:	2300      	movs	r3, #0
 801520c:	f7eb fbee 	bl	80009ec <__aeabi_dcmpeq>
 8015210:	b388      	cbz	r0, 8015276 <_printf_float+0x25e>
 8015212:	2301      	movs	r3, #1
 8015214:	4a40      	ldr	r2, [pc, #256]	; (8015318 <_printf_float+0x300>)
 8015216:	4659      	mov	r1, fp
 8015218:	4628      	mov	r0, r5
 801521a:	47b0      	blx	r6
 801521c:	3001      	adds	r0, #1
 801521e:	f43f af52 	beq.w	80150c6 <_printf_float+0xae>
 8015222:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8015226:	429a      	cmp	r2, r3
 8015228:	db02      	blt.n	8015230 <_printf_float+0x218>
 801522a:	6823      	ldr	r3, [r4, #0]
 801522c:	07d8      	lsls	r0, r3, #31
 801522e:	d50e      	bpl.n	801524e <_printf_float+0x236>
 8015230:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015234:	4659      	mov	r1, fp
 8015236:	4628      	mov	r0, r5
 8015238:	47b0      	blx	r6
 801523a:	3001      	adds	r0, #1
 801523c:	f43f af43 	beq.w	80150c6 <_printf_float+0xae>
 8015240:	2700      	movs	r7, #0
 8015242:	f104 081a 	add.w	r8, r4, #26
 8015246:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015248:	3b01      	subs	r3, #1
 801524a:	42bb      	cmp	r3, r7
 801524c:	dc09      	bgt.n	8015262 <_printf_float+0x24a>
 801524e:	6823      	ldr	r3, [r4, #0]
 8015250:	079f      	lsls	r7, r3, #30
 8015252:	f100 80fd 	bmi.w	8015450 <_printf_float+0x438>
 8015256:	68e0      	ldr	r0, [r4, #12]
 8015258:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801525a:	4298      	cmp	r0, r3
 801525c:	bfb8      	it	lt
 801525e:	4618      	movlt	r0, r3
 8015260:	e733      	b.n	80150ca <_printf_float+0xb2>
 8015262:	2301      	movs	r3, #1
 8015264:	4642      	mov	r2, r8
 8015266:	4659      	mov	r1, fp
 8015268:	4628      	mov	r0, r5
 801526a:	47b0      	blx	r6
 801526c:	3001      	adds	r0, #1
 801526e:	f43f af2a 	beq.w	80150c6 <_printf_float+0xae>
 8015272:	3701      	adds	r7, #1
 8015274:	e7e7      	b.n	8015246 <_printf_float+0x22e>
 8015276:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015278:	2b00      	cmp	r3, #0
 801527a:	dc2b      	bgt.n	80152d4 <_printf_float+0x2bc>
 801527c:	2301      	movs	r3, #1
 801527e:	4a26      	ldr	r2, [pc, #152]	; (8015318 <_printf_float+0x300>)
 8015280:	4659      	mov	r1, fp
 8015282:	4628      	mov	r0, r5
 8015284:	47b0      	blx	r6
 8015286:	3001      	adds	r0, #1
 8015288:	f43f af1d 	beq.w	80150c6 <_printf_float+0xae>
 801528c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801528e:	b923      	cbnz	r3, 801529a <_printf_float+0x282>
 8015290:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015292:	b913      	cbnz	r3, 801529a <_printf_float+0x282>
 8015294:	6823      	ldr	r3, [r4, #0]
 8015296:	07d9      	lsls	r1, r3, #31
 8015298:	d5d9      	bpl.n	801524e <_printf_float+0x236>
 801529a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801529e:	4659      	mov	r1, fp
 80152a0:	4628      	mov	r0, r5
 80152a2:	47b0      	blx	r6
 80152a4:	3001      	adds	r0, #1
 80152a6:	f43f af0e 	beq.w	80150c6 <_printf_float+0xae>
 80152aa:	f04f 0800 	mov.w	r8, #0
 80152ae:	f104 091a 	add.w	r9, r4, #26
 80152b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80152b4:	425b      	negs	r3, r3
 80152b6:	4543      	cmp	r3, r8
 80152b8:	dc01      	bgt.n	80152be <_printf_float+0x2a6>
 80152ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80152bc:	e797      	b.n	80151ee <_printf_float+0x1d6>
 80152be:	2301      	movs	r3, #1
 80152c0:	464a      	mov	r2, r9
 80152c2:	4659      	mov	r1, fp
 80152c4:	4628      	mov	r0, r5
 80152c6:	47b0      	blx	r6
 80152c8:	3001      	adds	r0, #1
 80152ca:	f43f aefc 	beq.w	80150c6 <_printf_float+0xae>
 80152ce:	f108 0801 	add.w	r8, r8, #1
 80152d2:	e7ee      	b.n	80152b2 <_printf_float+0x29a>
 80152d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80152d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80152d8:	429a      	cmp	r2, r3
 80152da:	bfa8      	it	ge
 80152dc:	461a      	movge	r2, r3
 80152de:	2a00      	cmp	r2, #0
 80152e0:	4690      	mov	r8, r2
 80152e2:	dd07      	ble.n	80152f4 <_printf_float+0x2dc>
 80152e4:	4613      	mov	r3, r2
 80152e6:	4659      	mov	r1, fp
 80152e8:	463a      	mov	r2, r7
 80152ea:	4628      	mov	r0, r5
 80152ec:	47b0      	blx	r6
 80152ee:	3001      	adds	r0, #1
 80152f0:	f43f aee9 	beq.w	80150c6 <_printf_float+0xae>
 80152f4:	f104 031a 	add.w	r3, r4, #26
 80152f8:	f04f 0a00 	mov.w	sl, #0
 80152fc:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8015300:	930b      	str	r3, [sp, #44]	; 0x2c
 8015302:	e015      	b.n	8015330 <_printf_float+0x318>
 8015304:	7fefffff 	.word	0x7fefffff
 8015308:	0801e630 	.word	0x0801e630
 801530c:	0801e62c 	.word	0x0801e62c
 8015310:	0801e638 	.word	0x0801e638
 8015314:	0801e634 	.word	0x0801e634
 8015318:	0801e85b 	.word	0x0801e85b
 801531c:	2301      	movs	r3, #1
 801531e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015320:	4659      	mov	r1, fp
 8015322:	4628      	mov	r0, r5
 8015324:	47b0      	blx	r6
 8015326:	3001      	adds	r0, #1
 8015328:	f43f aecd 	beq.w	80150c6 <_printf_float+0xae>
 801532c:	f10a 0a01 	add.w	sl, sl, #1
 8015330:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8015334:	eba9 0308 	sub.w	r3, r9, r8
 8015338:	4553      	cmp	r3, sl
 801533a:	dcef      	bgt.n	801531c <_printf_float+0x304>
 801533c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8015340:	429a      	cmp	r2, r3
 8015342:	444f      	add	r7, r9
 8015344:	db14      	blt.n	8015370 <_printf_float+0x358>
 8015346:	6823      	ldr	r3, [r4, #0]
 8015348:	07da      	lsls	r2, r3, #31
 801534a:	d411      	bmi.n	8015370 <_printf_float+0x358>
 801534c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801534e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015350:	eba3 0209 	sub.w	r2, r3, r9
 8015354:	eba3 0901 	sub.w	r9, r3, r1
 8015358:	4591      	cmp	r9, r2
 801535a:	bfa8      	it	ge
 801535c:	4691      	movge	r9, r2
 801535e:	f1b9 0f00 	cmp.w	r9, #0
 8015362:	dc0d      	bgt.n	8015380 <_printf_float+0x368>
 8015364:	2700      	movs	r7, #0
 8015366:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801536a:	f104 081a 	add.w	r8, r4, #26
 801536e:	e018      	b.n	80153a2 <_printf_float+0x38a>
 8015370:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015374:	4659      	mov	r1, fp
 8015376:	4628      	mov	r0, r5
 8015378:	47b0      	blx	r6
 801537a:	3001      	adds	r0, #1
 801537c:	d1e6      	bne.n	801534c <_printf_float+0x334>
 801537e:	e6a2      	b.n	80150c6 <_printf_float+0xae>
 8015380:	464b      	mov	r3, r9
 8015382:	463a      	mov	r2, r7
 8015384:	4659      	mov	r1, fp
 8015386:	4628      	mov	r0, r5
 8015388:	47b0      	blx	r6
 801538a:	3001      	adds	r0, #1
 801538c:	d1ea      	bne.n	8015364 <_printf_float+0x34c>
 801538e:	e69a      	b.n	80150c6 <_printf_float+0xae>
 8015390:	2301      	movs	r3, #1
 8015392:	4642      	mov	r2, r8
 8015394:	4659      	mov	r1, fp
 8015396:	4628      	mov	r0, r5
 8015398:	47b0      	blx	r6
 801539a:	3001      	adds	r0, #1
 801539c:	f43f ae93 	beq.w	80150c6 <_printf_float+0xae>
 80153a0:	3701      	adds	r7, #1
 80153a2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80153a6:	1a9b      	subs	r3, r3, r2
 80153a8:	eba3 0309 	sub.w	r3, r3, r9
 80153ac:	42bb      	cmp	r3, r7
 80153ae:	dcef      	bgt.n	8015390 <_printf_float+0x378>
 80153b0:	e74d      	b.n	801524e <_printf_float+0x236>
 80153b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80153b4:	2a01      	cmp	r2, #1
 80153b6:	dc01      	bgt.n	80153bc <_printf_float+0x3a4>
 80153b8:	07db      	lsls	r3, r3, #31
 80153ba:	d538      	bpl.n	801542e <_printf_float+0x416>
 80153bc:	2301      	movs	r3, #1
 80153be:	463a      	mov	r2, r7
 80153c0:	4659      	mov	r1, fp
 80153c2:	4628      	mov	r0, r5
 80153c4:	47b0      	blx	r6
 80153c6:	3001      	adds	r0, #1
 80153c8:	f43f ae7d 	beq.w	80150c6 <_printf_float+0xae>
 80153cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80153d0:	4659      	mov	r1, fp
 80153d2:	4628      	mov	r0, r5
 80153d4:	47b0      	blx	r6
 80153d6:	3001      	adds	r0, #1
 80153d8:	f107 0701 	add.w	r7, r7, #1
 80153dc:	f43f ae73 	beq.w	80150c6 <_printf_float+0xae>
 80153e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80153e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80153e6:	2200      	movs	r2, #0
 80153e8:	f103 38ff 	add.w	r8, r3, #4294967295
 80153ec:	2300      	movs	r3, #0
 80153ee:	f7eb fafd 	bl	80009ec <__aeabi_dcmpeq>
 80153f2:	b9c0      	cbnz	r0, 8015426 <_printf_float+0x40e>
 80153f4:	4643      	mov	r3, r8
 80153f6:	463a      	mov	r2, r7
 80153f8:	4659      	mov	r1, fp
 80153fa:	4628      	mov	r0, r5
 80153fc:	47b0      	blx	r6
 80153fe:	3001      	adds	r0, #1
 8015400:	d10d      	bne.n	801541e <_printf_float+0x406>
 8015402:	e660      	b.n	80150c6 <_printf_float+0xae>
 8015404:	2301      	movs	r3, #1
 8015406:	4642      	mov	r2, r8
 8015408:	4659      	mov	r1, fp
 801540a:	4628      	mov	r0, r5
 801540c:	47b0      	blx	r6
 801540e:	3001      	adds	r0, #1
 8015410:	f43f ae59 	beq.w	80150c6 <_printf_float+0xae>
 8015414:	3701      	adds	r7, #1
 8015416:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015418:	3b01      	subs	r3, #1
 801541a:	42bb      	cmp	r3, r7
 801541c:	dcf2      	bgt.n	8015404 <_printf_float+0x3ec>
 801541e:	464b      	mov	r3, r9
 8015420:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015424:	e6e4      	b.n	80151f0 <_printf_float+0x1d8>
 8015426:	2700      	movs	r7, #0
 8015428:	f104 081a 	add.w	r8, r4, #26
 801542c:	e7f3      	b.n	8015416 <_printf_float+0x3fe>
 801542e:	2301      	movs	r3, #1
 8015430:	e7e1      	b.n	80153f6 <_printf_float+0x3de>
 8015432:	2301      	movs	r3, #1
 8015434:	4642      	mov	r2, r8
 8015436:	4659      	mov	r1, fp
 8015438:	4628      	mov	r0, r5
 801543a:	47b0      	blx	r6
 801543c:	3001      	adds	r0, #1
 801543e:	f43f ae42 	beq.w	80150c6 <_printf_float+0xae>
 8015442:	3701      	adds	r7, #1
 8015444:	68e3      	ldr	r3, [r4, #12]
 8015446:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015448:	1a9b      	subs	r3, r3, r2
 801544a:	42bb      	cmp	r3, r7
 801544c:	dcf1      	bgt.n	8015432 <_printf_float+0x41a>
 801544e:	e702      	b.n	8015256 <_printf_float+0x23e>
 8015450:	2700      	movs	r7, #0
 8015452:	f104 0819 	add.w	r8, r4, #25
 8015456:	e7f5      	b.n	8015444 <_printf_float+0x42c>
 8015458:	2b00      	cmp	r3, #0
 801545a:	f43f ae94 	beq.w	8015186 <_printf_float+0x16e>
 801545e:	f04f 0c00 	mov.w	ip, #0
 8015462:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8015466:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 801546a:	6022      	str	r2, [r4, #0]
 801546c:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8015470:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8015474:	9300      	str	r3, [sp, #0]
 8015476:	463a      	mov	r2, r7
 8015478:	464b      	mov	r3, r9
 801547a:	4628      	mov	r0, r5
 801547c:	f7ff fd3a 	bl	8014ef4 <__cvt>
 8015480:	4607      	mov	r7, r0
 8015482:	e64f      	b.n	8015124 <_printf_float+0x10c>

08015484 <_printf_common>:
 8015484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015488:	4691      	mov	r9, r2
 801548a:	461f      	mov	r7, r3
 801548c:	688a      	ldr	r2, [r1, #8]
 801548e:	690b      	ldr	r3, [r1, #16]
 8015490:	4606      	mov	r6, r0
 8015492:	4293      	cmp	r3, r2
 8015494:	bfb8      	it	lt
 8015496:	4613      	movlt	r3, r2
 8015498:	f8c9 3000 	str.w	r3, [r9]
 801549c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80154a0:	460c      	mov	r4, r1
 80154a2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80154a6:	b112      	cbz	r2, 80154ae <_printf_common+0x2a>
 80154a8:	3301      	adds	r3, #1
 80154aa:	f8c9 3000 	str.w	r3, [r9]
 80154ae:	6823      	ldr	r3, [r4, #0]
 80154b0:	0699      	lsls	r1, r3, #26
 80154b2:	bf42      	ittt	mi
 80154b4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80154b8:	3302      	addmi	r3, #2
 80154ba:	f8c9 3000 	strmi.w	r3, [r9]
 80154be:	6825      	ldr	r5, [r4, #0]
 80154c0:	f015 0506 	ands.w	r5, r5, #6
 80154c4:	d107      	bne.n	80154d6 <_printf_common+0x52>
 80154c6:	f104 0a19 	add.w	sl, r4, #25
 80154ca:	68e3      	ldr	r3, [r4, #12]
 80154cc:	f8d9 2000 	ldr.w	r2, [r9]
 80154d0:	1a9b      	subs	r3, r3, r2
 80154d2:	42ab      	cmp	r3, r5
 80154d4:	dc29      	bgt.n	801552a <_printf_common+0xa6>
 80154d6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80154da:	6822      	ldr	r2, [r4, #0]
 80154dc:	3300      	adds	r3, #0
 80154de:	bf18      	it	ne
 80154e0:	2301      	movne	r3, #1
 80154e2:	0692      	lsls	r2, r2, #26
 80154e4:	d42e      	bmi.n	8015544 <_printf_common+0xc0>
 80154e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80154ea:	4639      	mov	r1, r7
 80154ec:	4630      	mov	r0, r6
 80154ee:	47c0      	blx	r8
 80154f0:	3001      	adds	r0, #1
 80154f2:	d021      	beq.n	8015538 <_printf_common+0xb4>
 80154f4:	6823      	ldr	r3, [r4, #0]
 80154f6:	68e5      	ldr	r5, [r4, #12]
 80154f8:	f003 0306 	and.w	r3, r3, #6
 80154fc:	2b04      	cmp	r3, #4
 80154fe:	bf18      	it	ne
 8015500:	2500      	movne	r5, #0
 8015502:	f8d9 2000 	ldr.w	r2, [r9]
 8015506:	f04f 0900 	mov.w	r9, #0
 801550a:	bf08      	it	eq
 801550c:	1aad      	subeq	r5, r5, r2
 801550e:	68a3      	ldr	r3, [r4, #8]
 8015510:	6922      	ldr	r2, [r4, #16]
 8015512:	bf08      	it	eq
 8015514:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015518:	4293      	cmp	r3, r2
 801551a:	bfc4      	itt	gt
 801551c:	1a9b      	subgt	r3, r3, r2
 801551e:	18ed      	addgt	r5, r5, r3
 8015520:	341a      	adds	r4, #26
 8015522:	454d      	cmp	r5, r9
 8015524:	d11a      	bne.n	801555c <_printf_common+0xd8>
 8015526:	2000      	movs	r0, #0
 8015528:	e008      	b.n	801553c <_printf_common+0xb8>
 801552a:	2301      	movs	r3, #1
 801552c:	4652      	mov	r2, sl
 801552e:	4639      	mov	r1, r7
 8015530:	4630      	mov	r0, r6
 8015532:	47c0      	blx	r8
 8015534:	3001      	adds	r0, #1
 8015536:	d103      	bne.n	8015540 <_printf_common+0xbc>
 8015538:	f04f 30ff 	mov.w	r0, #4294967295
 801553c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015540:	3501      	adds	r5, #1
 8015542:	e7c2      	b.n	80154ca <_printf_common+0x46>
 8015544:	2030      	movs	r0, #48	; 0x30
 8015546:	18e1      	adds	r1, r4, r3
 8015548:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801554c:	1c5a      	adds	r2, r3, #1
 801554e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015552:	4422      	add	r2, r4
 8015554:	3302      	adds	r3, #2
 8015556:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801555a:	e7c4      	b.n	80154e6 <_printf_common+0x62>
 801555c:	2301      	movs	r3, #1
 801555e:	4622      	mov	r2, r4
 8015560:	4639      	mov	r1, r7
 8015562:	4630      	mov	r0, r6
 8015564:	47c0      	blx	r8
 8015566:	3001      	adds	r0, #1
 8015568:	d0e6      	beq.n	8015538 <_printf_common+0xb4>
 801556a:	f109 0901 	add.w	r9, r9, #1
 801556e:	e7d8      	b.n	8015522 <_printf_common+0x9e>

08015570 <_printf_i>:
 8015570:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015574:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8015578:	460c      	mov	r4, r1
 801557a:	7e09      	ldrb	r1, [r1, #24]
 801557c:	b085      	sub	sp, #20
 801557e:	296e      	cmp	r1, #110	; 0x6e
 8015580:	4617      	mov	r7, r2
 8015582:	4606      	mov	r6, r0
 8015584:	4698      	mov	r8, r3
 8015586:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015588:	f000 80b3 	beq.w	80156f2 <_printf_i+0x182>
 801558c:	d822      	bhi.n	80155d4 <_printf_i+0x64>
 801558e:	2963      	cmp	r1, #99	; 0x63
 8015590:	d036      	beq.n	8015600 <_printf_i+0x90>
 8015592:	d80a      	bhi.n	80155aa <_printf_i+0x3a>
 8015594:	2900      	cmp	r1, #0
 8015596:	f000 80b9 	beq.w	801570c <_printf_i+0x19c>
 801559a:	2958      	cmp	r1, #88	; 0x58
 801559c:	f000 8083 	beq.w	80156a6 <_printf_i+0x136>
 80155a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80155a4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80155a8:	e032      	b.n	8015610 <_printf_i+0xa0>
 80155aa:	2964      	cmp	r1, #100	; 0x64
 80155ac:	d001      	beq.n	80155b2 <_printf_i+0x42>
 80155ae:	2969      	cmp	r1, #105	; 0x69
 80155b0:	d1f6      	bne.n	80155a0 <_printf_i+0x30>
 80155b2:	6820      	ldr	r0, [r4, #0]
 80155b4:	6813      	ldr	r3, [r2, #0]
 80155b6:	0605      	lsls	r5, r0, #24
 80155b8:	f103 0104 	add.w	r1, r3, #4
 80155bc:	d52a      	bpl.n	8015614 <_printf_i+0xa4>
 80155be:	681b      	ldr	r3, [r3, #0]
 80155c0:	6011      	str	r1, [r2, #0]
 80155c2:	2b00      	cmp	r3, #0
 80155c4:	da03      	bge.n	80155ce <_printf_i+0x5e>
 80155c6:	222d      	movs	r2, #45	; 0x2d
 80155c8:	425b      	negs	r3, r3
 80155ca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80155ce:	486f      	ldr	r0, [pc, #444]	; (801578c <_printf_i+0x21c>)
 80155d0:	220a      	movs	r2, #10
 80155d2:	e039      	b.n	8015648 <_printf_i+0xd8>
 80155d4:	2973      	cmp	r1, #115	; 0x73
 80155d6:	f000 809d 	beq.w	8015714 <_printf_i+0x1a4>
 80155da:	d808      	bhi.n	80155ee <_printf_i+0x7e>
 80155dc:	296f      	cmp	r1, #111	; 0x6f
 80155de:	d020      	beq.n	8015622 <_printf_i+0xb2>
 80155e0:	2970      	cmp	r1, #112	; 0x70
 80155e2:	d1dd      	bne.n	80155a0 <_printf_i+0x30>
 80155e4:	6823      	ldr	r3, [r4, #0]
 80155e6:	f043 0320 	orr.w	r3, r3, #32
 80155ea:	6023      	str	r3, [r4, #0]
 80155ec:	e003      	b.n	80155f6 <_printf_i+0x86>
 80155ee:	2975      	cmp	r1, #117	; 0x75
 80155f0:	d017      	beq.n	8015622 <_printf_i+0xb2>
 80155f2:	2978      	cmp	r1, #120	; 0x78
 80155f4:	d1d4      	bne.n	80155a0 <_printf_i+0x30>
 80155f6:	2378      	movs	r3, #120	; 0x78
 80155f8:	4865      	ldr	r0, [pc, #404]	; (8015790 <_printf_i+0x220>)
 80155fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80155fe:	e055      	b.n	80156ac <_printf_i+0x13c>
 8015600:	6813      	ldr	r3, [r2, #0]
 8015602:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015606:	1d19      	adds	r1, r3, #4
 8015608:	681b      	ldr	r3, [r3, #0]
 801560a:	6011      	str	r1, [r2, #0]
 801560c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015610:	2301      	movs	r3, #1
 8015612:	e08c      	b.n	801572e <_printf_i+0x1be>
 8015614:	681b      	ldr	r3, [r3, #0]
 8015616:	f010 0f40 	tst.w	r0, #64	; 0x40
 801561a:	6011      	str	r1, [r2, #0]
 801561c:	bf18      	it	ne
 801561e:	b21b      	sxthne	r3, r3
 8015620:	e7cf      	b.n	80155c2 <_printf_i+0x52>
 8015622:	6813      	ldr	r3, [r2, #0]
 8015624:	6825      	ldr	r5, [r4, #0]
 8015626:	1d18      	adds	r0, r3, #4
 8015628:	6010      	str	r0, [r2, #0]
 801562a:	0628      	lsls	r0, r5, #24
 801562c:	d501      	bpl.n	8015632 <_printf_i+0xc2>
 801562e:	681b      	ldr	r3, [r3, #0]
 8015630:	e002      	b.n	8015638 <_printf_i+0xc8>
 8015632:	0668      	lsls	r0, r5, #25
 8015634:	d5fb      	bpl.n	801562e <_printf_i+0xbe>
 8015636:	881b      	ldrh	r3, [r3, #0]
 8015638:	296f      	cmp	r1, #111	; 0x6f
 801563a:	bf14      	ite	ne
 801563c:	220a      	movne	r2, #10
 801563e:	2208      	moveq	r2, #8
 8015640:	4852      	ldr	r0, [pc, #328]	; (801578c <_printf_i+0x21c>)
 8015642:	2100      	movs	r1, #0
 8015644:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015648:	6865      	ldr	r5, [r4, #4]
 801564a:	2d00      	cmp	r5, #0
 801564c:	60a5      	str	r5, [r4, #8]
 801564e:	f2c0 8095 	blt.w	801577c <_printf_i+0x20c>
 8015652:	6821      	ldr	r1, [r4, #0]
 8015654:	f021 0104 	bic.w	r1, r1, #4
 8015658:	6021      	str	r1, [r4, #0]
 801565a:	2b00      	cmp	r3, #0
 801565c:	d13d      	bne.n	80156da <_printf_i+0x16a>
 801565e:	2d00      	cmp	r5, #0
 8015660:	f040 808e 	bne.w	8015780 <_printf_i+0x210>
 8015664:	4665      	mov	r5, ip
 8015666:	2a08      	cmp	r2, #8
 8015668:	d10b      	bne.n	8015682 <_printf_i+0x112>
 801566a:	6823      	ldr	r3, [r4, #0]
 801566c:	07db      	lsls	r3, r3, #31
 801566e:	d508      	bpl.n	8015682 <_printf_i+0x112>
 8015670:	6923      	ldr	r3, [r4, #16]
 8015672:	6862      	ldr	r2, [r4, #4]
 8015674:	429a      	cmp	r2, r3
 8015676:	bfde      	ittt	le
 8015678:	2330      	movle	r3, #48	; 0x30
 801567a:	f805 3c01 	strble.w	r3, [r5, #-1]
 801567e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015682:	ebac 0305 	sub.w	r3, ip, r5
 8015686:	6123      	str	r3, [r4, #16]
 8015688:	f8cd 8000 	str.w	r8, [sp]
 801568c:	463b      	mov	r3, r7
 801568e:	aa03      	add	r2, sp, #12
 8015690:	4621      	mov	r1, r4
 8015692:	4630      	mov	r0, r6
 8015694:	f7ff fef6 	bl	8015484 <_printf_common>
 8015698:	3001      	adds	r0, #1
 801569a:	d14d      	bne.n	8015738 <_printf_i+0x1c8>
 801569c:	f04f 30ff 	mov.w	r0, #4294967295
 80156a0:	b005      	add	sp, #20
 80156a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80156a6:	4839      	ldr	r0, [pc, #228]	; (801578c <_printf_i+0x21c>)
 80156a8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80156ac:	6813      	ldr	r3, [r2, #0]
 80156ae:	6821      	ldr	r1, [r4, #0]
 80156b0:	1d1d      	adds	r5, r3, #4
 80156b2:	681b      	ldr	r3, [r3, #0]
 80156b4:	6015      	str	r5, [r2, #0]
 80156b6:	060a      	lsls	r2, r1, #24
 80156b8:	d50b      	bpl.n	80156d2 <_printf_i+0x162>
 80156ba:	07ca      	lsls	r2, r1, #31
 80156bc:	bf44      	itt	mi
 80156be:	f041 0120 	orrmi.w	r1, r1, #32
 80156c2:	6021      	strmi	r1, [r4, #0]
 80156c4:	b91b      	cbnz	r3, 80156ce <_printf_i+0x15e>
 80156c6:	6822      	ldr	r2, [r4, #0]
 80156c8:	f022 0220 	bic.w	r2, r2, #32
 80156cc:	6022      	str	r2, [r4, #0]
 80156ce:	2210      	movs	r2, #16
 80156d0:	e7b7      	b.n	8015642 <_printf_i+0xd2>
 80156d2:	064d      	lsls	r5, r1, #25
 80156d4:	bf48      	it	mi
 80156d6:	b29b      	uxthmi	r3, r3
 80156d8:	e7ef      	b.n	80156ba <_printf_i+0x14a>
 80156da:	4665      	mov	r5, ip
 80156dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80156e0:	fb02 3311 	mls	r3, r2, r1, r3
 80156e4:	5cc3      	ldrb	r3, [r0, r3]
 80156e6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80156ea:	460b      	mov	r3, r1
 80156ec:	2900      	cmp	r1, #0
 80156ee:	d1f5      	bne.n	80156dc <_printf_i+0x16c>
 80156f0:	e7b9      	b.n	8015666 <_printf_i+0xf6>
 80156f2:	6813      	ldr	r3, [r2, #0]
 80156f4:	6825      	ldr	r5, [r4, #0]
 80156f6:	1d18      	adds	r0, r3, #4
 80156f8:	6961      	ldr	r1, [r4, #20]
 80156fa:	6010      	str	r0, [r2, #0]
 80156fc:	0628      	lsls	r0, r5, #24
 80156fe:	681b      	ldr	r3, [r3, #0]
 8015700:	d501      	bpl.n	8015706 <_printf_i+0x196>
 8015702:	6019      	str	r1, [r3, #0]
 8015704:	e002      	b.n	801570c <_printf_i+0x19c>
 8015706:	066a      	lsls	r2, r5, #25
 8015708:	d5fb      	bpl.n	8015702 <_printf_i+0x192>
 801570a:	8019      	strh	r1, [r3, #0]
 801570c:	2300      	movs	r3, #0
 801570e:	4665      	mov	r5, ip
 8015710:	6123      	str	r3, [r4, #16]
 8015712:	e7b9      	b.n	8015688 <_printf_i+0x118>
 8015714:	6813      	ldr	r3, [r2, #0]
 8015716:	1d19      	adds	r1, r3, #4
 8015718:	6011      	str	r1, [r2, #0]
 801571a:	681d      	ldr	r5, [r3, #0]
 801571c:	6862      	ldr	r2, [r4, #4]
 801571e:	2100      	movs	r1, #0
 8015720:	4628      	mov	r0, r5
 8015722:	f002 fe95 	bl	8018450 <memchr>
 8015726:	b108      	cbz	r0, 801572c <_printf_i+0x1bc>
 8015728:	1b40      	subs	r0, r0, r5
 801572a:	6060      	str	r0, [r4, #4]
 801572c:	6863      	ldr	r3, [r4, #4]
 801572e:	6123      	str	r3, [r4, #16]
 8015730:	2300      	movs	r3, #0
 8015732:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015736:	e7a7      	b.n	8015688 <_printf_i+0x118>
 8015738:	6923      	ldr	r3, [r4, #16]
 801573a:	462a      	mov	r2, r5
 801573c:	4639      	mov	r1, r7
 801573e:	4630      	mov	r0, r6
 8015740:	47c0      	blx	r8
 8015742:	3001      	adds	r0, #1
 8015744:	d0aa      	beq.n	801569c <_printf_i+0x12c>
 8015746:	6823      	ldr	r3, [r4, #0]
 8015748:	079b      	lsls	r3, r3, #30
 801574a:	d413      	bmi.n	8015774 <_printf_i+0x204>
 801574c:	68e0      	ldr	r0, [r4, #12]
 801574e:	9b03      	ldr	r3, [sp, #12]
 8015750:	4298      	cmp	r0, r3
 8015752:	bfb8      	it	lt
 8015754:	4618      	movlt	r0, r3
 8015756:	e7a3      	b.n	80156a0 <_printf_i+0x130>
 8015758:	2301      	movs	r3, #1
 801575a:	464a      	mov	r2, r9
 801575c:	4639      	mov	r1, r7
 801575e:	4630      	mov	r0, r6
 8015760:	47c0      	blx	r8
 8015762:	3001      	adds	r0, #1
 8015764:	d09a      	beq.n	801569c <_printf_i+0x12c>
 8015766:	3501      	adds	r5, #1
 8015768:	68e3      	ldr	r3, [r4, #12]
 801576a:	9a03      	ldr	r2, [sp, #12]
 801576c:	1a9b      	subs	r3, r3, r2
 801576e:	42ab      	cmp	r3, r5
 8015770:	dcf2      	bgt.n	8015758 <_printf_i+0x1e8>
 8015772:	e7eb      	b.n	801574c <_printf_i+0x1dc>
 8015774:	2500      	movs	r5, #0
 8015776:	f104 0919 	add.w	r9, r4, #25
 801577a:	e7f5      	b.n	8015768 <_printf_i+0x1f8>
 801577c:	2b00      	cmp	r3, #0
 801577e:	d1ac      	bne.n	80156da <_printf_i+0x16a>
 8015780:	7803      	ldrb	r3, [r0, #0]
 8015782:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015786:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801578a:	e76c      	b.n	8015666 <_printf_i+0xf6>
 801578c:	0801e63c 	.word	0x0801e63c
 8015790:	0801e64d 	.word	0x0801e64d

08015794 <_scanf_float>:
 8015794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015798:	469a      	mov	sl, r3
 801579a:	688b      	ldr	r3, [r1, #8]
 801579c:	4616      	mov	r6, r2
 801579e:	1e5a      	subs	r2, r3, #1
 80157a0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80157a4:	bf88      	it	hi
 80157a6:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80157aa:	b087      	sub	sp, #28
 80157ac:	bf85      	ittet	hi
 80157ae:	189b      	addhi	r3, r3, r2
 80157b0:	9301      	strhi	r3, [sp, #4]
 80157b2:	2300      	movls	r3, #0
 80157b4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80157b8:	4688      	mov	r8, r1
 80157ba:	f04f 0b00 	mov.w	fp, #0
 80157be:	bf8c      	ite	hi
 80157c0:	608b      	strhi	r3, [r1, #8]
 80157c2:	9301      	strls	r3, [sp, #4]
 80157c4:	680b      	ldr	r3, [r1, #0]
 80157c6:	4607      	mov	r7, r0
 80157c8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80157cc:	f848 3b1c 	str.w	r3, [r8], #28
 80157d0:	460c      	mov	r4, r1
 80157d2:	4645      	mov	r5, r8
 80157d4:	465a      	mov	r2, fp
 80157d6:	46d9      	mov	r9, fp
 80157d8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80157dc:	f8cd b008 	str.w	fp, [sp, #8]
 80157e0:	68a1      	ldr	r1, [r4, #8]
 80157e2:	b181      	cbz	r1, 8015806 <_scanf_float+0x72>
 80157e4:	6833      	ldr	r3, [r6, #0]
 80157e6:	781b      	ldrb	r3, [r3, #0]
 80157e8:	2b49      	cmp	r3, #73	; 0x49
 80157ea:	d071      	beq.n	80158d0 <_scanf_float+0x13c>
 80157ec:	d84d      	bhi.n	801588a <_scanf_float+0xf6>
 80157ee:	2b39      	cmp	r3, #57	; 0x39
 80157f0:	d840      	bhi.n	8015874 <_scanf_float+0xe0>
 80157f2:	2b31      	cmp	r3, #49	; 0x31
 80157f4:	f080 8088 	bcs.w	8015908 <_scanf_float+0x174>
 80157f8:	2b2d      	cmp	r3, #45	; 0x2d
 80157fa:	f000 8090 	beq.w	801591e <_scanf_float+0x18a>
 80157fe:	d815      	bhi.n	801582c <_scanf_float+0x98>
 8015800:	2b2b      	cmp	r3, #43	; 0x2b
 8015802:	f000 808c 	beq.w	801591e <_scanf_float+0x18a>
 8015806:	f1b9 0f00 	cmp.w	r9, #0
 801580a:	d003      	beq.n	8015814 <_scanf_float+0x80>
 801580c:	6823      	ldr	r3, [r4, #0]
 801580e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015812:	6023      	str	r3, [r4, #0]
 8015814:	3a01      	subs	r2, #1
 8015816:	2a01      	cmp	r2, #1
 8015818:	f200 80ea 	bhi.w	80159f0 <_scanf_float+0x25c>
 801581c:	4545      	cmp	r5, r8
 801581e:	f200 80dc 	bhi.w	80159da <_scanf_float+0x246>
 8015822:	2601      	movs	r6, #1
 8015824:	4630      	mov	r0, r6
 8015826:	b007      	add	sp, #28
 8015828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801582c:	2b2e      	cmp	r3, #46	; 0x2e
 801582e:	f000 809f 	beq.w	8015970 <_scanf_float+0x1dc>
 8015832:	2b30      	cmp	r3, #48	; 0x30
 8015834:	d1e7      	bne.n	8015806 <_scanf_float+0x72>
 8015836:	6820      	ldr	r0, [r4, #0]
 8015838:	f410 7f80 	tst.w	r0, #256	; 0x100
 801583c:	d064      	beq.n	8015908 <_scanf_float+0x174>
 801583e:	9b01      	ldr	r3, [sp, #4]
 8015840:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8015844:	6020      	str	r0, [r4, #0]
 8015846:	f109 0901 	add.w	r9, r9, #1
 801584a:	b11b      	cbz	r3, 8015854 <_scanf_float+0xc0>
 801584c:	3b01      	subs	r3, #1
 801584e:	3101      	adds	r1, #1
 8015850:	9301      	str	r3, [sp, #4]
 8015852:	60a1      	str	r1, [r4, #8]
 8015854:	68a3      	ldr	r3, [r4, #8]
 8015856:	3b01      	subs	r3, #1
 8015858:	60a3      	str	r3, [r4, #8]
 801585a:	6923      	ldr	r3, [r4, #16]
 801585c:	3301      	adds	r3, #1
 801585e:	6123      	str	r3, [r4, #16]
 8015860:	6873      	ldr	r3, [r6, #4]
 8015862:	3b01      	subs	r3, #1
 8015864:	2b00      	cmp	r3, #0
 8015866:	6073      	str	r3, [r6, #4]
 8015868:	f340 80ac 	ble.w	80159c4 <_scanf_float+0x230>
 801586c:	6833      	ldr	r3, [r6, #0]
 801586e:	3301      	adds	r3, #1
 8015870:	6033      	str	r3, [r6, #0]
 8015872:	e7b5      	b.n	80157e0 <_scanf_float+0x4c>
 8015874:	2b45      	cmp	r3, #69	; 0x45
 8015876:	f000 8085 	beq.w	8015984 <_scanf_float+0x1f0>
 801587a:	2b46      	cmp	r3, #70	; 0x46
 801587c:	d06a      	beq.n	8015954 <_scanf_float+0x1c0>
 801587e:	2b41      	cmp	r3, #65	; 0x41
 8015880:	d1c1      	bne.n	8015806 <_scanf_float+0x72>
 8015882:	2a01      	cmp	r2, #1
 8015884:	d1bf      	bne.n	8015806 <_scanf_float+0x72>
 8015886:	2202      	movs	r2, #2
 8015888:	e046      	b.n	8015918 <_scanf_float+0x184>
 801588a:	2b65      	cmp	r3, #101	; 0x65
 801588c:	d07a      	beq.n	8015984 <_scanf_float+0x1f0>
 801588e:	d818      	bhi.n	80158c2 <_scanf_float+0x12e>
 8015890:	2b54      	cmp	r3, #84	; 0x54
 8015892:	d066      	beq.n	8015962 <_scanf_float+0x1ce>
 8015894:	d811      	bhi.n	80158ba <_scanf_float+0x126>
 8015896:	2b4e      	cmp	r3, #78	; 0x4e
 8015898:	d1b5      	bne.n	8015806 <_scanf_float+0x72>
 801589a:	2a00      	cmp	r2, #0
 801589c:	d146      	bne.n	801592c <_scanf_float+0x198>
 801589e:	f1b9 0f00 	cmp.w	r9, #0
 80158a2:	d145      	bne.n	8015930 <_scanf_float+0x19c>
 80158a4:	6821      	ldr	r1, [r4, #0]
 80158a6:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80158aa:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80158ae:	d13f      	bne.n	8015930 <_scanf_float+0x19c>
 80158b0:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80158b4:	6021      	str	r1, [r4, #0]
 80158b6:	2201      	movs	r2, #1
 80158b8:	e02e      	b.n	8015918 <_scanf_float+0x184>
 80158ba:	2b59      	cmp	r3, #89	; 0x59
 80158bc:	d01e      	beq.n	80158fc <_scanf_float+0x168>
 80158be:	2b61      	cmp	r3, #97	; 0x61
 80158c0:	e7de      	b.n	8015880 <_scanf_float+0xec>
 80158c2:	2b6e      	cmp	r3, #110	; 0x6e
 80158c4:	d0e9      	beq.n	801589a <_scanf_float+0x106>
 80158c6:	d815      	bhi.n	80158f4 <_scanf_float+0x160>
 80158c8:	2b66      	cmp	r3, #102	; 0x66
 80158ca:	d043      	beq.n	8015954 <_scanf_float+0x1c0>
 80158cc:	2b69      	cmp	r3, #105	; 0x69
 80158ce:	d19a      	bne.n	8015806 <_scanf_float+0x72>
 80158d0:	f1bb 0f00 	cmp.w	fp, #0
 80158d4:	d138      	bne.n	8015948 <_scanf_float+0x1b4>
 80158d6:	f1b9 0f00 	cmp.w	r9, #0
 80158da:	d197      	bne.n	801580c <_scanf_float+0x78>
 80158dc:	6821      	ldr	r1, [r4, #0]
 80158de:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80158e2:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80158e6:	d195      	bne.n	8015814 <_scanf_float+0x80>
 80158e8:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80158ec:	6021      	str	r1, [r4, #0]
 80158ee:	f04f 0b01 	mov.w	fp, #1
 80158f2:	e011      	b.n	8015918 <_scanf_float+0x184>
 80158f4:	2b74      	cmp	r3, #116	; 0x74
 80158f6:	d034      	beq.n	8015962 <_scanf_float+0x1ce>
 80158f8:	2b79      	cmp	r3, #121	; 0x79
 80158fa:	d184      	bne.n	8015806 <_scanf_float+0x72>
 80158fc:	f1bb 0f07 	cmp.w	fp, #7
 8015900:	d181      	bne.n	8015806 <_scanf_float+0x72>
 8015902:	f04f 0b08 	mov.w	fp, #8
 8015906:	e007      	b.n	8015918 <_scanf_float+0x184>
 8015908:	eb12 0f0b 	cmn.w	r2, fp
 801590c:	f47f af7b 	bne.w	8015806 <_scanf_float+0x72>
 8015910:	6821      	ldr	r1, [r4, #0]
 8015912:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8015916:	6021      	str	r1, [r4, #0]
 8015918:	702b      	strb	r3, [r5, #0]
 801591a:	3501      	adds	r5, #1
 801591c:	e79a      	b.n	8015854 <_scanf_float+0xc0>
 801591e:	6821      	ldr	r1, [r4, #0]
 8015920:	0608      	lsls	r0, r1, #24
 8015922:	f57f af70 	bpl.w	8015806 <_scanf_float+0x72>
 8015926:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801592a:	e7f4      	b.n	8015916 <_scanf_float+0x182>
 801592c:	2a02      	cmp	r2, #2
 801592e:	d047      	beq.n	80159c0 <_scanf_float+0x22c>
 8015930:	f1bb 0f01 	cmp.w	fp, #1
 8015934:	d003      	beq.n	801593e <_scanf_float+0x1aa>
 8015936:	f1bb 0f04 	cmp.w	fp, #4
 801593a:	f47f af64 	bne.w	8015806 <_scanf_float+0x72>
 801593e:	f10b 0b01 	add.w	fp, fp, #1
 8015942:	fa5f fb8b 	uxtb.w	fp, fp
 8015946:	e7e7      	b.n	8015918 <_scanf_float+0x184>
 8015948:	f1bb 0f03 	cmp.w	fp, #3
 801594c:	d0f7      	beq.n	801593e <_scanf_float+0x1aa>
 801594e:	f1bb 0f05 	cmp.w	fp, #5
 8015952:	e7f2      	b.n	801593a <_scanf_float+0x1a6>
 8015954:	f1bb 0f02 	cmp.w	fp, #2
 8015958:	f47f af55 	bne.w	8015806 <_scanf_float+0x72>
 801595c:	f04f 0b03 	mov.w	fp, #3
 8015960:	e7da      	b.n	8015918 <_scanf_float+0x184>
 8015962:	f1bb 0f06 	cmp.w	fp, #6
 8015966:	f47f af4e 	bne.w	8015806 <_scanf_float+0x72>
 801596a:	f04f 0b07 	mov.w	fp, #7
 801596e:	e7d3      	b.n	8015918 <_scanf_float+0x184>
 8015970:	6821      	ldr	r1, [r4, #0]
 8015972:	0588      	lsls	r0, r1, #22
 8015974:	f57f af47 	bpl.w	8015806 <_scanf_float+0x72>
 8015978:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 801597c:	6021      	str	r1, [r4, #0]
 801597e:	f8cd 9008 	str.w	r9, [sp, #8]
 8015982:	e7c9      	b.n	8015918 <_scanf_float+0x184>
 8015984:	6821      	ldr	r1, [r4, #0]
 8015986:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 801598a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 801598e:	d006      	beq.n	801599e <_scanf_float+0x20a>
 8015990:	0548      	lsls	r0, r1, #21
 8015992:	f57f af38 	bpl.w	8015806 <_scanf_float+0x72>
 8015996:	f1b9 0f00 	cmp.w	r9, #0
 801599a:	f43f af3b 	beq.w	8015814 <_scanf_float+0x80>
 801599e:	0588      	lsls	r0, r1, #22
 80159a0:	bf58      	it	pl
 80159a2:	9802      	ldrpl	r0, [sp, #8]
 80159a4:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80159a8:	bf58      	it	pl
 80159aa:	eba9 0000 	subpl.w	r0, r9, r0
 80159ae:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80159b2:	bf58      	it	pl
 80159b4:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80159b8:	6021      	str	r1, [r4, #0]
 80159ba:	f04f 0900 	mov.w	r9, #0
 80159be:	e7ab      	b.n	8015918 <_scanf_float+0x184>
 80159c0:	2203      	movs	r2, #3
 80159c2:	e7a9      	b.n	8015918 <_scanf_float+0x184>
 80159c4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80159c8:	4631      	mov	r1, r6
 80159ca:	4638      	mov	r0, r7
 80159cc:	9205      	str	r2, [sp, #20]
 80159ce:	4798      	blx	r3
 80159d0:	9a05      	ldr	r2, [sp, #20]
 80159d2:	2800      	cmp	r0, #0
 80159d4:	f43f af04 	beq.w	80157e0 <_scanf_float+0x4c>
 80159d8:	e715      	b.n	8015806 <_scanf_float+0x72>
 80159da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80159de:	4632      	mov	r2, r6
 80159e0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80159e4:	4638      	mov	r0, r7
 80159e6:	4798      	blx	r3
 80159e8:	6923      	ldr	r3, [r4, #16]
 80159ea:	3b01      	subs	r3, #1
 80159ec:	6123      	str	r3, [r4, #16]
 80159ee:	e715      	b.n	801581c <_scanf_float+0x88>
 80159f0:	f10b 33ff 	add.w	r3, fp, #4294967295
 80159f4:	2b06      	cmp	r3, #6
 80159f6:	d80a      	bhi.n	8015a0e <_scanf_float+0x27a>
 80159f8:	f1bb 0f02 	cmp.w	fp, #2
 80159fc:	d967      	bls.n	8015ace <_scanf_float+0x33a>
 80159fe:	f1ab 0b03 	sub.w	fp, fp, #3
 8015a02:	fa5f fb8b 	uxtb.w	fp, fp
 8015a06:	eba5 0b0b 	sub.w	fp, r5, fp
 8015a0a:	455d      	cmp	r5, fp
 8015a0c:	d14a      	bne.n	8015aa4 <_scanf_float+0x310>
 8015a0e:	6823      	ldr	r3, [r4, #0]
 8015a10:	05da      	lsls	r2, r3, #23
 8015a12:	d51f      	bpl.n	8015a54 <_scanf_float+0x2c0>
 8015a14:	055b      	lsls	r3, r3, #21
 8015a16:	d467      	bmi.n	8015ae8 <_scanf_float+0x354>
 8015a18:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8015a1c:	6923      	ldr	r3, [r4, #16]
 8015a1e:	2965      	cmp	r1, #101	; 0x65
 8015a20:	f103 33ff 	add.w	r3, r3, #4294967295
 8015a24:	f105 3bff 	add.w	fp, r5, #4294967295
 8015a28:	6123      	str	r3, [r4, #16]
 8015a2a:	d00d      	beq.n	8015a48 <_scanf_float+0x2b4>
 8015a2c:	2945      	cmp	r1, #69	; 0x45
 8015a2e:	d00b      	beq.n	8015a48 <_scanf_float+0x2b4>
 8015a30:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015a34:	4632      	mov	r2, r6
 8015a36:	4638      	mov	r0, r7
 8015a38:	4798      	blx	r3
 8015a3a:	6923      	ldr	r3, [r4, #16]
 8015a3c:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8015a40:	3b01      	subs	r3, #1
 8015a42:	f1a5 0b02 	sub.w	fp, r5, #2
 8015a46:	6123      	str	r3, [r4, #16]
 8015a48:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015a4c:	4632      	mov	r2, r6
 8015a4e:	4638      	mov	r0, r7
 8015a50:	4798      	blx	r3
 8015a52:	465d      	mov	r5, fp
 8015a54:	6826      	ldr	r6, [r4, #0]
 8015a56:	f016 0610 	ands.w	r6, r6, #16
 8015a5a:	d176      	bne.n	8015b4a <_scanf_float+0x3b6>
 8015a5c:	702e      	strb	r6, [r5, #0]
 8015a5e:	6823      	ldr	r3, [r4, #0]
 8015a60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8015a64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015a68:	d141      	bne.n	8015aee <_scanf_float+0x35a>
 8015a6a:	9b02      	ldr	r3, [sp, #8]
 8015a6c:	eba9 0303 	sub.w	r3, r9, r3
 8015a70:	425a      	negs	r2, r3
 8015a72:	2b00      	cmp	r3, #0
 8015a74:	d148      	bne.n	8015b08 <_scanf_float+0x374>
 8015a76:	4641      	mov	r1, r8
 8015a78:	2200      	movs	r2, #0
 8015a7a:	4638      	mov	r0, r7
 8015a7c:	f000 ffd0 	bl	8016a20 <_strtod_r>
 8015a80:	6825      	ldr	r5, [r4, #0]
 8015a82:	4680      	mov	r8, r0
 8015a84:	f015 0f02 	tst.w	r5, #2
 8015a88:	4689      	mov	r9, r1
 8015a8a:	f8da 3000 	ldr.w	r3, [sl]
 8015a8e:	d046      	beq.n	8015b1e <_scanf_float+0x38a>
 8015a90:	1d1a      	adds	r2, r3, #4
 8015a92:	f8ca 2000 	str.w	r2, [sl]
 8015a96:	681b      	ldr	r3, [r3, #0]
 8015a98:	e9c3 8900 	strd	r8, r9, [r3]
 8015a9c:	68e3      	ldr	r3, [r4, #12]
 8015a9e:	3301      	adds	r3, #1
 8015aa0:	60e3      	str	r3, [r4, #12]
 8015aa2:	e6bf      	b.n	8015824 <_scanf_float+0x90>
 8015aa4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015aa8:	4632      	mov	r2, r6
 8015aaa:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015aae:	4638      	mov	r0, r7
 8015ab0:	4798      	blx	r3
 8015ab2:	6923      	ldr	r3, [r4, #16]
 8015ab4:	3b01      	subs	r3, #1
 8015ab6:	6123      	str	r3, [r4, #16]
 8015ab8:	e7a7      	b.n	8015a0a <_scanf_float+0x276>
 8015aba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015abe:	4632      	mov	r2, r6
 8015ac0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015ac4:	4638      	mov	r0, r7
 8015ac6:	4798      	blx	r3
 8015ac8:	6923      	ldr	r3, [r4, #16]
 8015aca:	3b01      	subs	r3, #1
 8015acc:	6123      	str	r3, [r4, #16]
 8015ace:	4545      	cmp	r5, r8
 8015ad0:	d8f3      	bhi.n	8015aba <_scanf_float+0x326>
 8015ad2:	e6a6      	b.n	8015822 <_scanf_float+0x8e>
 8015ad4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015ad8:	4632      	mov	r2, r6
 8015ada:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015ade:	4638      	mov	r0, r7
 8015ae0:	4798      	blx	r3
 8015ae2:	6923      	ldr	r3, [r4, #16]
 8015ae4:	3b01      	subs	r3, #1
 8015ae6:	6123      	str	r3, [r4, #16]
 8015ae8:	4545      	cmp	r5, r8
 8015aea:	d8f3      	bhi.n	8015ad4 <_scanf_float+0x340>
 8015aec:	e699      	b.n	8015822 <_scanf_float+0x8e>
 8015aee:	9b03      	ldr	r3, [sp, #12]
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	d0c0      	beq.n	8015a76 <_scanf_float+0x2e2>
 8015af4:	9904      	ldr	r1, [sp, #16]
 8015af6:	230a      	movs	r3, #10
 8015af8:	4632      	mov	r2, r6
 8015afa:	3101      	adds	r1, #1
 8015afc:	4638      	mov	r0, r7
 8015afe:	f001 f81b 	bl	8016b38 <_strtol_r>
 8015b02:	9b03      	ldr	r3, [sp, #12]
 8015b04:	9d04      	ldr	r5, [sp, #16]
 8015b06:	1ac2      	subs	r2, r0, r3
 8015b08:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8015b0c:	429d      	cmp	r5, r3
 8015b0e:	bf28      	it	cs
 8015b10:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8015b14:	490e      	ldr	r1, [pc, #56]	; (8015b50 <_scanf_float+0x3bc>)
 8015b16:	4628      	mov	r0, r5
 8015b18:	f000 f89c 	bl	8015c54 <siprintf>
 8015b1c:	e7ab      	b.n	8015a76 <_scanf_float+0x2e2>
 8015b1e:	1d1f      	adds	r7, r3, #4
 8015b20:	f015 0504 	ands.w	r5, r5, #4
 8015b24:	f8ca 7000 	str.w	r7, [sl]
 8015b28:	d1b5      	bne.n	8015a96 <_scanf_float+0x302>
 8015b2a:	681f      	ldr	r7, [r3, #0]
 8015b2c:	4602      	mov	r2, r0
 8015b2e:	460b      	mov	r3, r1
 8015b30:	f7ea ff8e 	bl	8000a50 <__aeabi_dcmpun>
 8015b34:	b120      	cbz	r0, 8015b40 <_scanf_float+0x3ac>
 8015b36:	4628      	mov	r0, r5
 8015b38:	f000 f888 	bl	8015c4c <nanf>
 8015b3c:	6038      	str	r0, [r7, #0]
 8015b3e:	e7ad      	b.n	8015a9c <_scanf_float+0x308>
 8015b40:	4640      	mov	r0, r8
 8015b42:	4649      	mov	r1, r9
 8015b44:	f7ea ffe2 	bl	8000b0c <__aeabi_d2f>
 8015b48:	e7f8      	b.n	8015b3c <_scanf_float+0x3a8>
 8015b4a:	2600      	movs	r6, #0
 8015b4c:	e66a      	b.n	8015824 <_scanf_float+0x90>
 8015b4e:	bf00      	nop
 8015b50:	0801e65e 	.word	0x0801e65e

08015b54 <iprintf>:
 8015b54:	b40f      	push	{r0, r1, r2, r3}
 8015b56:	4b0a      	ldr	r3, [pc, #40]	; (8015b80 <iprintf+0x2c>)
 8015b58:	b513      	push	{r0, r1, r4, lr}
 8015b5a:	681c      	ldr	r4, [r3, #0]
 8015b5c:	b124      	cbz	r4, 8015b68 <iprintf+0x14>
 8015b5e:	69a3      	ldr	r3, [r4, #24]
 8015b60:	b913      	cbnz	r3, 8015b68 <iprintf+0x14>
 8015b62:	4620      	mov	r0, r4
 8015b64:	f002 f810 	bl	8017b88 <__sinit>
 8015b68:	ab05      	add	r3, sp, #20
 8015b6a:	9a04      	ldr	r2, [sp, #16]
 8015b6c:	68a1      	ldr	r1, [r4, #8]
 8015b6e:	4620      	mov	r0, r4
 8015b70:	9301      	str	r3, [sp, #4]
 8015b72:	f003 fc4b 	bl	801940c <_vfiprintf_r>
 8015b76:	b002      	add	sp, #8
 8015b78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015b7c:	b004      	add	sp, #16
 8015b7e:	4770      	bx	lr
 8015b80:	20000148 	.word	0x20000148

08015b84 <_puts_r>:
 8015b84:	b570      	push	{r4, r5, r6, lr}
 8015b86:	460e      	mov	r6, r1
 8015b88:	4605      	mov	r5, r0
 8015b8a:	b118      	cbz	r0, 8015b94 <_puts_r+0x10>
 8015b8c:	6983      	ldr	r3, [r0, #24]
 8015b8e:	b90b      	cbnz	r3, 8015b94 <_puts_r+0x10>
 8015b90:	f001 fffa 	bl	8017b88 <__sinit>
 8015b94:	69ab      	ldr	r3, [r5, #24]
 8015b96:	68ac      	ldr	r4, [r5, #8]
 8015b98:	b913      	cbnz	r3, 8015ba0 <_puts_r+0x1c>
 8015b9a:	4628      	mov	r0, r5
 8015b9c:	f001 fff4 	bl	8017b88 <__sinit>
 8015ba0:	4b23      	ldr	r3, [pc, #140]	; (8015c30 <_puts_r+0xac>)
 8015ba2:	429c      	cmp	r4, r3
 8015ba4:	d117      	bne.n	8015bd6 <_puts_r+0x52>
 8015ba6:	686c      	ldr	r4, [r5, #4]
 8015ba8:	89a3      	ldrh	r3, [r4, #12]
 8015baa:	071b      	lsls	r3, r3, #28
 8015bac:	d51d      	bpl.n	8015bea <_puts_r+0x66>
 8015bae:	6923      	ldr	r3, [r4, #16]
 8015bb0:	b1db      	cbz	r3, 8015bea <_puts_r+0x66>
 8015bb2:	3e01      	subs	r6, #1
 8015bb4:	68a3      	ldr	r3, [r4, #8]
 8015bb6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8015bba:	3b01      	subs	r3, #1
 8015bbc:	60a3      	str	r3, [r4, #8]
 8015bbe:	b9e9      	cbnz	r1, 8015bfc <_puts_r+0x78>
 8015bc0:	2b00      	cmp	r3, #0
 8015bc2:	da2e      	bge.n	8015c22 <_puts_r+0x9e>
 8015bc4:	4622      	mov	r2, r4
 8015bc6:	210a      	movs	r1, #10
 8015bc8:	4628      	mov	r0, r5
 8015bca:	f000 ffc7 	bl	8016b5c <__swbuf_r>
 8015bce:	3001      	adds	r0, #1
 8015bd0:	d011      	beq.n	8015bf6 <_puts_r+0x72>
 8015bd2:	200a      	movs	r0, #10
 8015bd4:	e011      	b.n	8015bfa <_puts_r+0x76>
 8015bd6:	4b17      	ldr	r3, [pc, #92]	; (8015c34 <_puts_r+0xb0>)
 8015bd8:	429c      	cmp	r4, r3
 8015bda:	d101      	bne.n	8015be0 <_puts_r+0x5c>
 8015bdc:	68ac      	ldr	r4, [r5, #8]
 8015bde:	e7e3      	b.n	8015ba8 <_puts_r+0x24>
 8015be0:	4b15      	ldr	r3, [pc, #84]	; (8015c38 <_puts_r+0xb4>)
 8015be2:	429c      	cmp	r4, r3
 8015be4:	bf08      	it	eq
 8015be6:	68ec      	ldreq	r4, [r5, #12]
 8015be8:	e7de      	b.n	8015ba8 <_puts_r+0x24>
 8015bea:	4621      	mov	r1, r4
 8015bec:	4628      	mov	r0, r5
 8015bee:	f001 f819 	bl	8016c24 <__swsetup_r>
 8015bf2:	2800      	cmp	r0, #0
 8015bf4:	d0dd      	beq.n	8015bb2 <_puts_r+0x2e>
 8015bf6:	f04f 30ff 	mov.w	r0, #4294967295
 8015bfa:	bd70      	pop	{r4, r5, r6, pc}
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	da04      	bge.n	8015c0a <_puts_r+0x86>
 8015c00:	69a2      	ldr	r2, [r4, #24]
 8015c02:	429a      	cmp	r2, r3
 8015c04:	dc06      	bgt.n	8015c14 <_puts_r+0x90>
 8015c06:	290a      	cmp	r1, #10
 8015c08:	d004      	beq.n	8015c14 <_puts_r+0x90>
 8015c0a:	6823      	ldr	r3, [r4, #0]
 8015c0c:	1c5a      	adds	r2, r3, #1
 8015c0e:	6022      	str	r2, [r4, #0]
 8015c10:	7019      	strb	r1, [r3, #0]
 8015c12:	e7cf      	b.n	8015bb4 <_puts_r+0x30>
 8015c14:	4622      	mov	r2, r4
 8015c16:	4628      	mov	r0, r5
 8015c18:	f000 ffa0 	bl	8016b5c <__swbuf_r>
 8015c1c:	3001      	adds	r0, #1
 8015c1e:	d1c9      	bne.n	8015bb4 <_puts_r+0x30>
 8015c20:	e7e9      	b.n	8015bf6 <_puts_r+0x72>
 8015c22:	200a      	movs	r0, #10
 8015c24:	6823      	ldr	r3, [r4, #0]
 8015c26:	1c5a      	adds	r2, r3, #1
 8015c28:	6022      	str	r2, [r4, #0]
 8015c2a:	7018      	strb	r0, [r3, #0]
 8015c2c:	e7e5      	b.n	8015bfa <_puts_r+0x76>
 8015c2e:	bf00      	nop
 8015c30:	0801e6e8 	.word	0x0801e6e8
 8015c34:	0801e708 	.word	0x0801e708
 8015c38:	0801e6c8 	.word	0x0801e6c8

08015c3c <puts>:
 8015c3c:	4b02      	ldr	r3, [pc, #8]	; (8015c48 <puts+0xc>)
 8015c3e:	4601      	mov	r1, r0
 8015c40:	6818      	ldr	r0, [r3, #0]
 8015c42:	f7ff bf9f 	b.w	8015b84 <_puts_r>
 8015c46:	bf00      	nop
 8015c48:	20000148 	.word	0x20000148

08015c4c <nanf>:
 8015c4c:	4800      	ldr	r0, [pc, #0]	; (8015c50 <nanf+0x4>)
 8015c4e:	4770      	bx	lr
 8015c50:	7fc00000 	.word	0x7fc00000

08015c54 <siprintf>:
 8015c54:	b40e      	push	{r1, r2, r3}
 8015c56:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015c5a:	b500      	push	{lr}
 8015c5c:	b09c      	sub	sp, #112	; 0x70
 8015c5e:	ab1d      	add	r3, sp, #116	; 0x74
 8015c60:	9002      	str	r0, [sp, #8]
 8015c62:	9006      	str	r0, [sp, #24]
 8015c64:	9107      	str	r1, [sp, #28]
 8015c66:	9104      	str	r1, [sp, #16]
 8015c68:	4808      	ldr	r0, [pc, #32]	; (8015c8c <siprintf+0x38>)
 8015c6a:	4909      	ldr	r1, [pc, #36]	; (8015c90 <siprintf+0x3c>)
 8015c6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015c70:	9105      	str	r1, [sp, #20]
 8015c72:	6800      	ldr	r0, [r0, #0]
 8015c74:	a902      	add	r1, sp, #8
 8015c76:	9301      	str	r3, [sp, #4]
 8015c78:	f003 f8fe 	bl	8018e78 <_svfiprintf_r>
 8015c7c:	2200      	movs	r2, #0
 8015c7e:	9b02      	ldr	r3, [sp, #8]
 8015c80:	701a      	strb	r2, [r3, #0]
 8015c82:	b01c      	add	sp, #112	; 0x70
 8015c84:	f85d eb04 	ldr.w	lr, [sp], #4
 8015c88:	b003      	add	sp, #12
 8015c8a:	4770      	bx	lr
 8015c8c:	20000148 	.word	0x20000148
 8015c90:	ffff0208 	.word	0xffff0208

08015c94 <siscanf>:
 8015c94:	b40e      	push	{r1, r2, r3}
 8015c96:	f44f 7201 	mov.w	r2, #516	; 0x204
 8015c9a:	b530      	push	{r4, r5, lr}
 8015c9c:	b09c      	sub	sp, #112	; 0x70
 8015c9e:	ac1f      	add	r4, sp, #124	; 0x7c
 8015ca0:	f854 5b04 	ldr.w	r5, [r4], #4
 8015ca4:	f8ad 2014 	strh.w	r2, [sp, #20]
 8015ca8:	9002      	str	r0, [sp, #8]
 8015caa:	9006      	str	r0, [sp, #24]
 8015cac:	f7ea fa72 	bl	8000194 <strlen>
 8015cb0:	4b0b      	ldr	r3, [pc, #44]	; (8015ce0 <siscanf+0x4c>)
 8015cb2:	9003      	str	r0, [sp, #12]
 8015cb4:	930b      	str	r3, [sp, #44]	; 0x2c
 8015cb6:	2300      	movs	r3, #0
 8015cb8:	930f      	str	r3, [sp, #60]	; 0x3c
 8015cba:	9314      	str	r3, [sp, #80]	; 0x50
 8015cbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015cc0:	9007      	str	r0, [sp, #28]
 8015cc2:	4808      	ldr	r0, [pc, #32]	; (8015ce4 <siscanf+0x50>)
 8015cc4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015cc8:	462a      	mov	r2, r5
 8015cca:	4623      	mov	r3, r4
 8015ccc:	a902      	add	r1, sp, #8
 8015cce:	6800      	ldr	r0, [r0, #0]
 8015cd0:	9401      	str	r4, [sp, #4]
 8015cd2:	f003 fa23 	bl	801911c <__ssvfiscanf_r>
 8015cd6:	b01c      	add	sp, #112	; 0x70
 8015cd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015cdc:	b003      	add	sp, #12
 8015cde:	4770      	bx	lr
 8015ce0:	08015d0b 	.word	0x08015d0b
 8015ce4:	20000148 	.word	0x20000148

08015ce8 <__sread>:
 8015ce8:	b510      	push	{r4, lr}
 8015cea:	460c      	mov	r4, r1
 8015cec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015cf0:	f003 fdfa 	bl	80198e8 <_read_r>
 8015cf4:	2800      	cmp	r0, #0
 8015cf6:	bfab      	itete	ge
 8015cf8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015cfa:	89a3      	ldrhlt	r3, [r4, #12]
 8015cfc:	181b      	addge	r3, r3, r0
 8015cfe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015d02:	bfac      	ite	ge
 8015d04:	6563      	strge	r3, [r4, #84]	; 0x54
 8015d06:	81a3      	strhlt	r3, [r4, #12]
 8015d08:	bd10      	pop	{r4, pc}

08015d0a <__seofread>:
 8015d0a:	2000      	movs	r0, #0
 8015d0c:	4770      	bx	lr

08015d0e <__swrite>:
 8015d0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d12:	461f      	mov	r7, r3
 8015d14:	898b      	ldrh	r3, [r1, #12]
 8015d16:	4605      	mov	r5, r0
 8015d18:	05db      	lsls	r3, r3, #23
 8015d1a:	460c      	mov	r4, r1
 8015d1c:	4616      	mov	r6, r2
 8015d1e:	d505      	bpl.n	8015d2c <__swrite+0x1e>
 8015d20:	2302      	movs	r3, #2
 8015d22:	2200      	movs	r2, #0
 8015d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015d28:	f002 fb02 	bl	8018330 <_lseek_r>
 8015d2c:	89a3      	ldrh	r3, [r4, #12]
 8015d2e:	4632      	mov	r2, r6
 8015d30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015d34:	81a3      	strh	r3, [r4, #12]
 8015d36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015d3a:	463b      	mov	r3, r7
 8015d3c:	4628      	mov	r0, r5
 8015d3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015d42:	f000 bf5d 	b.w	8016c00 <_write_r>

08015d46 <__sseek>:
 8015d46:	b510      	push	{r4, lr}
 8015d48:	460c      	mov	r4, r1
 8015d4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015d4e:	f002 faef 	bl	8018330 <_lseek_r>
 8015d52:	1c43      	adds	r3, r0, #1
 8015d54:	89a3      	ldrh	r3, [r4, #12]
 8015d56:	bf15      	itete	ne
 8015d58:	6560      	strne	r0, [r4, #84]	; 0x54
 8015d5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015d5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015d62:	81a3      	strheq	r3, [r4, #12]
 8015d64:	bf18      	it	ne
 8015d66:	81a3      	strhne	r3, [r4, #12]
 8015d68:	bd10      	pop	{r4, pc}

08015d6a <__sclose>:
 8015d6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015d6e:	f000 bfc7 	b.w	8016d00 <_close_r>

08015d72 <strcpy>:
 8015d72:	4603      	mov	r3, r0
 8015d74:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015d78:	f803 2b01 	strb.w	r2, [r3], #1
 8015d7c:	2a00      	cmp	r2, #0
 8015d7e:	d1f9      	bne.n	8015d74 <strcpy+0x2>
 8015d80:	4770      	bx	lr

08015d82 <strncmp>:
 8015d82:	b510      	push	{r4, lr}
 8015d84:	b16a      	cbz	r2, 8015da2 <strncmp+0x20>
 8015d86:	3901      	subs	r1, #1
 8015d88:	1884      	adds	r4, r0, r2
 8015d8a:	f810 3b01 	ldrb.w	r3, [r0], #1
 8015d8e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8015d92:	4293      	cmp	r3, r2
 8015d94:	d103      	bne.n	8015d9e <strncmp+0x1c>
 8015d96:	42a0      	cmp	r0, r4
 8015d98:	d001      	beq.n	8015d9e <strncmp+0x1c>
 8015d9a:	2b00      	cmp	r3, #0
 8015d9c:	d1f5      	bne.n	8015d8a <strncmp+0x8>
 8015d9e:	1a98      	subs	r0, r3, r2
 8015da0:	bd10      	pop	{r4, pc}
 8015da2:	4610      	mov	r0, r2
 8015da4:	e7fc      	b.n	8015da0 <strncmp+0x1e>

08015da6 <strstr>:
 8015da6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015da8:	7803      	ldrb	r3, [r0, #0]
 8015daa:	b17b      	cbz	r3, 8015dcc <strstr+0x26>
 8015dac:	4604      	mov	r4, r0
 8015dae:	7823      	ldrb	r3, [r4, #0]
 8015db0:	4620      	mov	r0, r4
 8015db2:	1c66      	adds	r6, r4, #1
 8015db4:	b17b      	cbz	r3, 8015dd6 <strstr+0x30>
 8015db6:	1e4a      	subs	r2, r1, #1
 8015db8:	1e63      	subs	r3, r4, #1
 8015dba:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8015dbe:	b14d      	cbz	r5, 8015dd4 <strstr+0x2e>
 8015dc0:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8015dc4:	4634      	mov	r4, r6
 8015dc6:	42af      	cmp	r7, r5
 8015dc8:	d0f7      	beq.n	8015dba <strstr+0x14>
 8015dca:	e7f0      	b.n	8015dae <strstr+0x8>
 8015dcc:	780b      	ldrb	r3, [r1, #0]
 8015dce:	2b00      	cmp	r3, #0
 8015dd0:	bf18      	it	ne
 8015dd2:	2000      	movne	r0, #0
 8015dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015dd6:	4618      	mov	r0, r3
 8015dd8:	e7fc      	b.n	8015dd4 <strstr+0x2e>

08015dda <sulp>:
 8015dda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015dde:	460f      	mov	r7, r1
 8015de0:	4690      	mov	r8, r2
 8015de2:	f002 fe0d 	bl	8018a00 <__ulp>
 8015de6:	4604      	mov	r4, r0
 8015de8:	460d      	mov	r5, r1
 8015dea:	f1b8 0f00 	cmp.w	r8, #0
 8015dee:	d011      	beq.n	8015e14 <sulp+0x3a>
 8015df0:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8015df4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	dd0b      	ble.n	8015e14 <sulp+0x3a>
 8015dfc:	2400      	movs	r4, #0
 8015dfe:	051b      	lsls	r3, r3, #20
 8015e00:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8015e04:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8015e08:	4622      	mov	r2, r4
 8015e0a:	462b      	mov	r3, r5
 8015e0c:	f7ea fb86 	bl	800051c <__aeabi_dmul>
 8015e10:	4604      	mov	r4, r0
 8015e12:	460d      	mov	r5, r1
 8015e14:	4620      	mov	r0, r4
 8015e16:	4629      	mov	r1, r5
 8015e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e1c:	0000      	movs	r0, r0
	...

08015e20 <_strtod_l>:
 8015e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e24:	461f      	mov	r7, r3
 8015e26:	2300      	movs	r3, #0
 8015e28:	b0a1      	sub	sp, #132	; 0x84
 8015e2a:	4683      	mov	fp, r0
 8015e2c:	4638      	mov	r0, r7
 8015e2e:	460e      	mov	r6, r1
 8015e30:	9217      	str	r2, [sp, #92]	; 0x5c
 8015e32:	931c      	str	r3, [sp, #112]	; 0x70
 8015e34:	f002 fa6c 	bl	8018310 <__localeconv_l>
 8015e38:	4680      	mov	r8, r0
 8015e3a:	6800      	ldr	r0, [r0, #0]
 8015e3c:	f7ea f9aa 	bl	8000194 <strlen>
 8015e40:	f04f 0900 	mov.w	r9, #0
 8015e44:	4604      	mov	r4, r0
 8015e46:	f04f 0a00 	mov.w	sl, #0
 8015e4a:	961b      	str	r6, [sp, #108]	; 0x6c
 8015e4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015e4e:	781a      	ldrb	r2, [r3, #0]
 8015e50:	2a0d      	cmp	r2, #13
 8015e52:	d832      	bhi.n	8015eba <_strtod_l+0x9a>
 8015e54:	2a09      	cmp	r2, #9
 8015e56:	d236      	bcs.n	8015ec6 <_strtod_l+0xa6>
 8015e58:	2a00      	cmp	r2, #0
 8015e5a:	d03e      	beq.n	8015eda <_strtod_l+0xba>
 8015e5c:	2300      	movs	r3, #0
 8015e5e:	930d      	str	r3, [sp, #52]	; 0x34
 8015e60:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8015e62:	782b      	ldrb	r3, [r5, #0]
 8015e64:	2b30      	cmp	r3, #48	; 0x30
 8015e66:	f040 80ac 	bne.w	8015fc2 <_strtod_l+0x1a2>
 8015e6a:	786b      	ldrb	r3, [r5, #1]
 8015e6c:	2b58      	cmp	r3, #88	; 0x58
 8015e6e:	d001      	beq.n	8015e74 <_strtod_l+0x54>
 8015e70:	2b78      	cmp	r3, #120	; 0x78
 8015e72:	d167      	bne.n	8015f44 <_strtod_l+0x124>
 8015e74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015e76:	9702      	str	r7, [sp, #8]
 8015e78:	9301      	str	r3, [sp, #4]
 8015e7a:	ab1c      	add	r3, sp, #112	; 0x70
 8015e7c:	9300      	str	r3, [sp, #0]
 8015e7e:	4a89      	ldr	r2, [pc, #548]	; (80160a4 <_strtod_l+0x284>)
 8015e80:	ab1d      	add	r3, sp, #116	; 0x74
 8015e82:	a91b      	add	r1, sp, #108	; 0x6c
 8015e84:	4658      	mov	r0, fp
 8015e86:	f001 ff59 	bl	8017d3c <__gethex>
 8015e8a:	f010 0407 	ands.w	r4, r0, #7
 8015e8e:	4606      	mov	r6, r0
 8015e90:	d005      	beq.n	8015e9e <_strtod_l+0x7e>
 8015e92:	2c06      	cmp	r4, #6
 8015e94:	d12b      	bne.n	8015eee <_strtod_l+0xce>
 8015e96:	2300      	movs	r3, #0
 8015e98:	3501      	adds	r5, #1
 8015e9a:	951b      	str	r5, [sp, #108]	; 0x6c
 8015e9c:	930d      	str	r3, [sp, #52]	; 0x34
 8015e9e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015ea0:	2b00      	cmp	r3, #0
 8015ea2:	f040 85a6 	bne.w	80169f2 <_strtod_l+0xbd2>
 8015ea6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015ea8:	b1e3      	cbz	r3, 8015ee4 <_strtod_l+0xc4>
 8015eaa:	464a      	mov	r2, r9
 8015eac:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8015eb0:	4610      	mov	r0, r2
 8015eb2:	4619      	mov	r1, r3
 8015eb4:	b021      	add	sp, #132	; 0x84
 8015eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015eba:	2a2b      	cmp	r2, #43	; 0x2b
 8015ebc:	d015      	beq.n	8015eea <_strtod_l+0xca>
 8015ebe:	2a2d      	cmp	r2, #45	; 0x2d
 8015ec0:	d004      	beq.n	8015ecc <_strtod_l+0xac>
 8015ec2:	2a20      	cmp	r2, #32
 8015ec4:	d1ca      	bne.n	8015e5c <_strtod_l+0x3c>
 8015ec6:	3301      	adds	r3, #1
 8015ec8:	931b      	str	r3, [sp, #108]	; 0x6c
 8015eca:	e7bf      	b.n	8015e4c <_strtod_l+0x2c>
 8015ecc:	2201      	movs	r2, #1
 8015ece:	920d      	str	r2, [sp, #52]	; 0x34
 8015ed0:	1c5a      	adds	r2, r3, #1
 8015ed2:	921b      	str	r2, [sp, #108]	; 0x6c
 8015ed4:	785b      	ldrb	r3, [r3, #1]
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	d1c2      	bne.n	8015e60 <_strtod_l+0x40>
 8015eda:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015edc:	961b      	str	r6, [sp, #108]	; 0x6c
 8015ede:	2b00      	cmp	r3, #0
 8015ee0:	f040 8585 	bne.w	80169ee <_strtod_l+0xbce>
 8015ee4:	464a      	mov	r2, r9
 8015ee6:	4653      	mov	r3, sl
 8015ee8:	e7e2      	b.n	8015eb0 <_strtod_l+0x90>
 8015eea:	2200      	movs	r2, #0
 8015eec:	e7ef      	b.n	8015ece <_strtod_l+0xae>
 8015eee:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015ef0:	b13a      	cbz	r2, 8015f02 <_strtod_l+0xe2>
 8015ef2:	2135      	movs	r1, #53	; 0x35
 8015ef4:	a81e      	add	r0, sp, #120	; 0x78
 8015ef6:	f002 fe76 	bl	8018be6 <__copybits>
 8015efa:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015efc:	4658      	mov	r0, fp
 8015efe:	f002 fae9 	bl	80184d4 <_Bfree>
 8015f02:	3c01      	subs	r4, #1
 8015f04:	2c04      	cmp	r4, #4
 8015f06:	d806      	bhi.n	8015f16 <_strtod_l+0xf6>
 8015f08:	e8df f004 	tbb	[pc, r4]
 8015f0c:	1714030a 	.word	0x1714030a
 8015f10:	0a          	.byte	0x0a
 8015f11:	00          	.byte	0x00
 8015f12:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 8015f16:	0731      	lsls	r1, r6, #28
 8015f18:	d5c1      	bpl.n	8015e9e <_strtod_l+0x7e>
 8015f1a:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8015f1e:	e7be      	b.n	8015e9e <_strtod_l+0x7e>
 8015f20:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8015f22:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 8015f26:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8015f2a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8015f2e:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 8015f32:	e7f0      	b.n	8015f16 <_strtod_l+0xf6>
 8015f34:	f8df a170 	ldr.w	sl, [pc, #368]	; 80160a8 <_strtod_l+0x288>
 8015f38:	e7ed      	b.n	8015f16 <_strtod_l+0xf6>
 8015f3a:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8015f3e:	f04f 39ff 	mov.w	r9, #4294967295
 8015f42:	e7e8      	b.n	8015f16 <_strtod_l+0xf6>
 8015f44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015f46:	1c5a      	adds	r2, r3, #1
 8015f48:	921b      	str	r2, [sp, #108]	; 0x6c
 8015f4a:	785b      	ldrb	r3, [r3, #1]
 8015f4c:	2b30      	cmp	r3, #48	; 0x30
 8015f4e:	d0f9      	beq.n	8015f44 <_strtod_l+0x124>
 8015f50:	2b00      	cmp	r3, #0
 8015f52:	d0a4      	beq.n	8015e9e <_strtod_l+0x7e>
 8015f54:	2301      	movs	r3, #1
 8015f56:	2500      	movs	r5, #0
 8015f58:	220a      	movs	r2, #10
 8015f5a:	9307      	str	r3, [sp, #28]
 8015f5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015f5e:	9506      	str	r5, [sp, #24]
 8015f60:	9308      	str	r3, [sp, #32]
 8015f62:	9504      	str	r5, [sp, #16]
 8015f64:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8015f66:	7807      	ldrb	r7, [r0, #0]
 8015f68:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8015f6c:	b2d9      	uxtb	r1, r3
 8015f6e:	2909      	cmp	r1, #9
 8015f70:	d929      	bls.n	8015fc6 <_strtod_l+0x1a6>
 8015f72:	4622      	mov	r2, r4
 8015f74:	f8d8 1000 	ldr.w	r1, [r8]
 8015f78:	f7ff ff03 	bl	8015d82 <strncmp>
 8015f7c:	2800      	cmp	r0, #0
 8015f7e:	d031      	beq.n	8015fe4 <_strtod_l+0x1c4>
 8015f80:	2000      	movs	r0, #0
 8015f82:	463b      	mov	r3, r7
 8015f84:	4602      	mov	r2, r0
 8015f86:	9c04      	ldr	r4, [sp, #16]
 8015f88:	9005      	str	r0, [sp, #20]
 8015f8a:	2b65      	cmp	r3, #101	; 0x65
 8015f8c:	d001      	beq.n	8015f92 <_strtod_l+0x172>
 8015f8e:	2b45      	cmp	r3, #69	; 0x45
 8015f90:	d114      	bne.n	8015fbc <_strtod_l+0x19c>
 8015f92:	b924      	cbnz	r4, 8015f9e <_strtod_l+0x17e>
 8015f94:	b910      	cbnz	r0, 8015f9c <_strtod_l+0x17c>
 8015f96:	9b07      	ldr	r3, [sp, #28]
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d09e      	beq.n	8015eda <_strtod_l+0xba>
 8015f9c:	2400      	movs	r4, #0
 8015f9e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8015fa0:	1c73      	adds	r3, r6, #1
 8015fa2:	931b      	str	r3, [sp, #108]	; 0x6c
 8015fa4:	7873      	ldrb	r3, [r6, #1]
 8015fa6:	2b2b      	cmp	r3, #43	; 0x2b
 8015fa8:	d078      	beq.n	801609c <_strtod_l+0x27c>
 8015faa:	2b2d      	cmp	r3, #45	; 0x2d
 8015fac:	d070      	beq.n	8016090 <_strtod_l+0x270>
 8015fae:	f04f 0c00 	mov.w	ip, #0
 8015fb2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8015fb6:	2f09      	cmp	r7, #9
 8015fb8:	d97c      	bls.n	80160b4 <_strtod_l+0x294>
 8015fba:	961b      	str	r6, [sp, #108]	; 0x6c
 8015fbc:	f04f 0e00 	mov.w	lr, #0
 8015fc0:	e09a      	b.n	80160f8 <_strtod_l+0x2d8>
 8015fc2:	2300      	movs	r3, #0
 8015fc4:	e7c7      	b.n	8015f56 <_strtod_l+0x136>
 8015fc6:	9904      	ldr	r1, [sp, #16]
 8015fc8:	3001      	adds	r0, #1
 8015fca:	2908      	cmp	r1, #8
 8015fcc:	bfd7      	itett	le
 8015fce:	9906      	ldrle	r1, [sp, #24]
 8015fd0:	fb02 3505 	mlagt	r5, r2, r5, r3
 8015fd4:	fb02 3301 	mlale	r3, r2, r1, r3
 8015fd8:	9306      	strle	r3, [sp, #24]
 8015fda:	9b04      	ldr	r3, [sp, #16]
 8015fdc:	901b      	str	r0, [sp, #108]	; 0x6c
 8015fde:	3301      	adds	r3, #1
 8015fe0:	9304      	str	r3, [sp, #16]
 8015fe2:	e7bf      	b.n	8015f64 <_strtod_l+0x144>
 8015fe4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015fe6:	191a      	adds	r2, r3, r4
 8015fe8:	921b      	str	r2, [sp, #108]	; 0x6c
 8015fea:	9a04      	ldr	r2, [sp, #16]
 8015fec:	5d1b      	ldrb	r3, [r3, r4]
 8015fee:	2a00      	cmp	r2, #0
 8015ff0:	d037      	beq.n	8016062 <_strtod_l+0x242>
 8015ff2:	4602      	mov	r2, r0
 8015ff4:	9c04      	ldr	r4, [sp, #16]
 8015ff6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8015ffa:	2909      	cmp	r1, #9
 8015ffc:	d913      	bls.n	8016026 <_strtod_l+0x206>
 8015ffe:	2101      	movs	r1, #1
 8016000:	9105      	str	r1, [sp, #20]
 8016002:	e7c2      	b.n	8015f8a <_strtod_l+0x16a>
 8016004:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016006:	3001      	adds	r0, #1
 8016008:	1c5a      	adds	r2, r3, #1
 801600a:	921b      	str	r2, [sp, #108]	; 0x6c
 801600c:	785b      	ldrb	r3, [r3, #1]
 801600e:	2b30      	cmp	r3, #48	; 0x30
 8016010:	d0f8      	beq.n	8016004 <_strtod_l+0x1e4>
 8016012:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8016016:	2a08      	cmp	r2, #8
 8016018:	f200 84f0 	bhi.w	80169fc <_strtod_l+0xbdc>
 801601c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801601e:	9208      	str	r2, [sp, #32]
 8016020:	4602      	mov	r2, r0
 8016022:	2000      	movs	r0, #0
 8016024:	4604      	mov	r4, r0
 8016026:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 801602a:	f100 0101 	add.w	r1, r0, #1
 801602e:	d012      	beq.n	8016056 <_strtod_l+0x236>
 8016030:	440a      	add	r2, r1
 8016032:	270a      	movs	r7, #10
 8016034:	4621      	mov	r1, r4
 8016036:	eb00 0c04 	add.w	ip, r0, r4
 801603a:	458c      	cmp	ip, r1
 801603c:	d113      	bne.n	8016066 <_strtod_l+0x246>
 801603e:	1821      	adds	r1, r4, r0
 8016040:	2908      	cmp	r1, #8
 8016042:	f104 0401 	add.w	r4, r4, #1
 8016046:	4404      	add	r4, r0
 8016048:	dc19      	bgt.n	801607e <_strtod_l+0x25e>
 801604a:	210a      	movs	r1, #10
 801604c:	9b06      	ldr	r3, [sp, #24]
 801604e:	fb01 e303 	mla	r3, r1, r3, lr
 8016052:	9306      	str	r3, [sp, #24]
 8016054:	2100      	movs	r1, #0
 8016056:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016058:	1c58      	adds	r0, r3, #1
 801605a:	901b      	str	r0, [sp, #108]	; 0x6c
 801605c:	785b      	ldrb	r3, [r3, #1]
 801605e:	4608      	mov	r0, r1
 8016060:	e7c9      	b.n	8015ff6 <_strtod_l+0x1d6>
 8016062:	9804      	ldr	r0, [sp, #16]
 8016064:	e7d3      	b.n	801600e <_strtod_l+0x1ee>
 8016066:	2908      	cmp	r1, #8
 8016068:	f101 0101 	add.w	r1, r1, #1
 801606c:	dc03      	bgt.n	8016076 <_strtod_l+0x256>
 801606e:	9b06      	ldr	r3, [sp, #24]
 8016070:	437b      	muls	r3, r7
 8016072:	9306      	str	r3, [sp, #24]
 8016074:	e7e1      	b.n	801603a <_strtod_l+0x21a>
 8016076:	2910      	cmp	r1, #16
 8016078:	bfd8      	it	le
 801607a:	437d      	mulle	r5, r7
 801607c:	e7dd      	b.n	801603a <_strtod_l+0x21a>
 801607e:	2c10      	cmp	r4, #16
 8016080:	bfdc      	itt	le
 8016082:	210a      	movle	r1, #10
 8016084:	fb01 e505 	mlale	r5, r1, r5, lr
 8016088:	e7e4      	b.n	8016054 <_strtod_l+0x234>
 801608a:	2301      	movs	r3, #1
 801608c:	9305      	str	r3, [sp, #20]
 801608e:	e781      	b.n	8015f94 <_strtod_l+0x174>
 8016090:	f04f 0c01 	mov.w	ip, #1
 8016094:	1cb3      	adds	r3, r6, #2
 8016096:	931b      	str	r3, [sp, #108]	; 0x6c
 8016098:	78b3      	ldrb	r3, [r6, #2]
 801609a:	e78a      	b.n	8015fb2 <_strtod_l+0x192>
 801609c:	f04f 0c00 	mov.w	ip, #0
 80160a0:	e7f8      	b.n	8016094 <_strtod_l+0x274>
 80160a2:	bf00      	nop
 80160a4:	0801e664 	.word	0x0801e664
 80160a8:	7ff00000 	.word	0x7ff00000
 80160ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80160ae:	1c5f      	adds	r7, r3, #1
 80160b0:	971b      	str	r7, [sp, #108]	; 0x6c
 80160b2:	785b      	ldrb	r3, [r3, #1]
 80160b4:	2b30      	cmp	r3, #48	; 0x30
 80160b6:	d0f9      	beq.n	80160ac <_strtod_l+0x28c>
 80160b8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80160bc:	2f08      	cmp	r7, #8
 80160be:	f63f af7d 	bhi.w	8015fbc <_strtod_l+0x19c>
 80160c2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80160c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80160c8:	9309      	str	r3, [sp, #36]	; 0x24
 80160ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80160cc:	1c5f      	adds	r7, r3, #1
 80160ce:	971b      	str	r7, [sp, #108]	; 0x6c
 80160d0:	785b      	ldrb	r3, [r3, #1]
 80160d2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80160d6:	f1b8 0f09 	cmp.w	r8, #9
 80160da:	d937      	bls.n	801614c <_strtod_l+0x32c>
 80160dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80160de:	1a7f      	subs	r7, r7, r1
 80160e0:	2f08      	cmp	r7, #8
 80160e2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80160e6:	dc37      	bgt.n	8016158 <_strtod_l+0x338>
 80160e8:	45be      	cmp	lr, r7
 80160ea:	bfa8      	it	ge
 80160ec:	46be      	movge	lr, r7
 80160ee:	f1bc 0f00 	cmp.w	ip, #0
 80160f2:	d001      	beq.n	80160f8 <_strtod_l+0x2d8>
 80160f4:	f1ce 0e00 	rsb	lr, lr, #0
 80160f8:	2c00      	cmp	r4, #0
 80160fa:	d151      	bne.n	80161a0 <_strtod_l+0x380>
 80160fc:	2800      	cmp	r0, #0
 80160fe:	f47f aece 	bne.w	8015e9e <_strtod_l+0x7e>
 8016102:	9a07      	ldr	r2, [sp, #28]
 8016104:	2a00      	cmp	r2, #0
 8016106:	f47f aeca 	bne.w	8015e9e <_strtod_l+0x7e>
 801610a:	9a05      	ldr	r2, [sp, #20]
 801610c:	2a00      	cmp	r2, #0
 801610e:	f47f aee4 	bne.w	8015eda <_strtod_l+0xba>
 8016112:	2b4e      	cmp	r3, #78	; 0x4e
 8016114:	d027      	beq.n	8016166 <_strtod_l+0x346>
 8016116:	dc21      	bgt.n	801615c <_strtod_l+0x33c>
 8016118:	2b49      	cmp	r3, #73	; 0x49
 801611a:	f47f aede 	bne.w	8015eda <_strtod_l+0xba>
 801611e:	49a4      	ldr	r1, [pc, #656]	; (80163b0 <_strtod_l+0x590>)
 8016120:	a81b      	add	r0, sp, #108	; 0x6c
 8016122:	f002 f83f 	bl	80181a4 <__match>
 8016126:	2800      	cmp	r0, #0
 8016128:	f43f aed7 	beq.w	8015eda <_strtod_l+0xba>
 801612c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801612e:	49a1      	ldr	r1, [pc, #644]	; (80163b4 <_strtod_l+0x594>)
 8016130:	3b01      	subs	r3, #1
 8016132:	a81b      	add	r0, sp, #108	; 0x6c
 8016134:	931b      	str	r3, [sp, #108]	; 0x6c
 8016136:	f002 f835 	bl	80181a4 <__match>
 801613a:	b910      	cbnz	r0, 8016142 <_strtod_l+0x322>
 801613c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801613e:	3301      	adds	r3, #1
 8016140:	931b      	str	r3, [sp, #108]	; 0x6c
 8016142:	f8df a284 	ldr.w	sl, [pc, #644]	; 80163c8 <_strtod_l+0x5a8>
 8016146:	f04f 0900 	mov.w	r9, #0
 801614a:	e6a8      	b.n	8015e9e <_strtod_l+0x7e>
 801614c:	210a      	movs	r1, #10
 801614e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8016152:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8016156:	e7b8      	b.n	80160ca <_strtod_l+0x2aa>
 8016158:	46be      	mov	lr, r7
 801615a:	e7c8      	b.n	80160ee <_strtod_l+0x2ce>
 801615c:	2b69      	cmp	r3, #105	; 0x69
 801615e:	d0de      	beq.n	801611e <_strtod_l+0x2fe>
 8016160:	2b6e      	cmp	r3, #110	; 0x6e
 8016162:	f47f aeba 	bne.w	8015eda <_strtod_l+0xba>
 8016166:	4994      	ldr	r1, [pc, #592]	; (80163b8 <_strtod_l+0x598>)
 8016168:	a81b      	add	r0, sp, #108	; 0x6c
 801616a:	f002 f81b 	bl	80181a4 <__match>
 801616e:	2800      	cmp	r0, #0
 8016170:	f43f aeb3 	beq.w	8015eda <_strtod_l+0xba>
 8016174:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016176:	781b      	ldrb	r3, [r3, #0]
 8016178:	2b28      	cmp	r3, #40	; 0x28
 801617a:	d10e      	bne.n	801619a <_strtod_l+0x37a>
 801617c:	aa1e      	add	r2, sp, #120	; 0x78
 801617e:	498f      	ldr	r1, [pc, #572]	; (80163bc <_strtod_l+0x59c>)
 8016180:	a81b      	add	r0, sp, #108	; 0x6c
 8016182:	f002 f823 	bl	80181cc <__hexnan>
 8016186:	2805      	cmp	r0, #5
 8016188:	d107      	bne.n	801619a <_strtod_l+0x37a>
 801618a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801618c:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8016190:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 8016194:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8016198:	e681      	b.n	8015e9e <_strtod_l+0x7e>
 801619a:	f8df a234 	ldr.w	sl, [pc, #564]	; 80163d0 <_strtod_l+0x5b0>
 801619e:	e7d2      	b.n	8016146 <_strtod_l+0x326>
 80161a0:	ebae 0302 	sub.w	r3, lr, r2
 80161a4:	9307      	str	r3, [sp, #28]
 80161a6:	9b04      	ldr	r3, [sp, #16]
 80161a8:	9806      	ldr	r0, [sp, #24]
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	bf08      	it	eq
 80161ae:	4623      	moveq	r3, r4
 80161b0:	2c10      	cmp	r4, #16
 80161b2:	9304      	str	r3, [sp, #16]
 80161b4:	46a0      	mov	r8, r4
 80161b6:	bfa8      	it	ge
 80161b8:	f04f 0810 	movge.w	r8, #16
 80161bc:	f7ea f934 	bl	8000428 <__aeabi_ui2d>
 80161c0:	2c09      	cmp	r4, #9
 80161c2:	4681      	mov	r9, r0
 80161c4:	468a      	mov	sl, r1
 80161c6:	dc13      	bgt.n	80161f0 <_strtod_l+0x3d0>
 80161c8:	9b07      	ldr	r3, [sp, #28]
 80161ca:	2b00      	cmp	r3, #0
 80161cc:	f43f ae67 	beq.w	8015e9e <_strtod_l+0x7e>
 80161d0:	9b07      	ldr	r3, [sp, #28]
 80161d2:	dd7e      	ble.n	80162d2 <_strtod_l+0x4b2>
 80161d4:	2b16      	cmp	r3, #22
 80161d6:	dc65      	bgt.n	80162a4 <_strtod_l+0x484>
 80161d8:	4a79      	ldr	r2, [pc, #484]	; (80163c0 <_strtod_l+0x5a0>)
 80161da:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80161de:	464a      	mov	r2, r9
 80161e0:	e9de 0100 	ldrd	r0, r1, [lr]
 80161e4:	4653      	mov	r3, sl
 80161e6:	f7ea f999 	bl	800051c <__aeabi_dmul>
 80161ea:	4681      	mov	r9, r0
 80161ec:	468a      	mov	sl, r1
 80161ee:	e656      	b.n	8015e9e <_strtod_l+0x7e>
 80161f0:	4b73      	ldr	r3, [pc, #460]	; (80163c0 <_strtod_l+0x5a0>)
 80161f2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80161f6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80161fa:	f7ea f98f 	bl	800051c <__aeabi_dmul>
 80161fe:	4606      	mov	r6, r0
 8016200:	4628      	mov	r0, r5
 8016202:	460f      	mov	r7, r1
 8016204:	f7ea f910 	bl	8000428 <__aeabi_ui2d>
 8016208:	4602      	mov	r2, r0
 801620a:	460b      	mov	r3, r1
 801620c:	4630      	mov	r0, r6
 801620e:	4639      	mov	r1, r7
 8016210:	f7e9 ffce 	bl	80001b0 <__adddf3>
 8016214:	2c0f      	cmp	r4, #15
 8016216:	4681      	mov	r9, r0
 8016218:	468a      	mov	sl, r1
 801621a:	ddd5      	ble.n	80161c8 <_strtod_l+0x3a8>
 801621c:	9b07      	ldr	r3, [sp, #28]
 801621e:	eba4 0808 	sub.w	r8, r4, r8
 8016222:	4498      	add	r8, r3
 8016224:	f1b8 0f00 	cmp.w	r8, #0
 8016228:	f340 809a 	ble.w	8016360 <_strtod_l+0x540>
 801622c:	f018 030f 	ands.w	r3, r8, #15
 8016230:	d00a      	beq.n	8016248 <_strtod_l+0x428>
 8016232:	4963      	ldr	r1, [pc, #396]	; (80163c0 <_strtod_l+0x5a0>)
 8016234:	464a      	mov	r2, r9
 8016236:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801623a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801623e:	4653      	mov	r3, sl
 8016240:	f7ea f96c 	bl	800051c <__aeabi_dmul>
 8016244:	4681      	mov	r9, r0
 8016246:	468a      	mov	sl, r1
 8016248:	f038 080f 	bics.w	r8, r8, #15
 801624c:	d077      	beq.n	801633e <_strtod_l+0x51e>
 801624e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8016252:	dd4b      	ble.n	80162ec <_strtod_l+0x4cc>
 8016254:	f04f 0800 	mov.w	r8, #0
 8016258:	f8cd 8010 	str.w	r8, [sp, #16]
 801625c:	f8cd 8020 	str.w	r8, [sp, #32]
 8016260:	f8cd 8018 	str.w	r8, [sp, #24]
 8016264:	2322      	movs	r3, #34	; 0x22
 8016266:	f04f 0900 	mov.w	r9, #0
 801626a:	f8df a15c 	ldr.w	sl, [pc, #348]	; 80163c8 <_strtod_l+0x5a8>
 801626e:	f8cb 3000 	str.w	r3, [fp]
 8016272:	9b08      	ldr	r3, [sp, #32]
 8016274:	2b00      	cmp	r3, #0
 8016276:	f43f ae12 	beq.w	8015e9e <_strtod_l+0x7e>
 801627a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801627c:	4658      	mov	r0, fp
 801627e:	f002 f929 	bl	80184d4 <_Bfree>
 8016282:	9906      	ldr	r1, [sp, #24]
 8016284:	4658      	mov	r0, fp
 8016286:	f002 f925 	bl	80184d4 <_Bfree>
 801628a:	9904      	ldr	r1, [sp, #16]
 801628c:	4658      	mov	r0, fp
 801628e:	f002 f921 	bl	80184d4 <_Bfree>
 8016292:	9908      	ldr	r1, [sp, #32]
 8016294:	4658      	mov	r0, fp
 8016296:	f002 f91d 	bl	80184d4 <_Bfree>
 801629a:	4641      	mov	r1, r8
 801629c:	4658      	mov	r0, fp
 801629e:	f002 f919 	bl	80184d4 <_Bfree>
 80162a2:	e5fc      	b.n	8015e9e <_strtod_l+0x7e>
 80162a4:	9a07      	ldr	r2, [sp, #28]
 80162a6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80162aa:	4293      	cmp	r3, r2
 80162ac:	dbb6      	blt.n	801621c <_strtod_l+0x3fc>
 80162ae:	4d44      	ldr	r5, [pc, #272]	; (80163c0 <_strtod_l+0x5a0>)
 80162b0:	f1c4 040f 	rsb	r4, r4, #15
 80162b4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80162b8:	464a      	mov	r2, r9
 80162ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80162be:	4653      	mov	r3, sl
 80162c0:	f7ea f92c 	bl	800051c <__aeabi_dmul>
 80162c4:	9b07      	ldr	r3, [sp, #28]
 80162c6:	1b1c      	subs	r4, r3, r4
 80162c8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80162cc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80162d0:	e789      	b.n	80161e6 <_strtod_l+0x3c6>
 80162d2:	f113 0f16 	cmn.w	r3, #22
 80162d6:	dba1      	blt.n	801621c <_strtod_l+0x3fc>
 80162d8:	4a39      	ldr	r2, [pc, #228]	; (80163c0 <_strtod_l+0x5a0>)
 80162da:	4648      	mov	r0, r9
 80162dc:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80162e0:	e9d2 2300 	ldrd	r2, r3, [r2]
 80162e4:	4651      	mov	r1, sl
 80162e6:	f7ea fa43 	bl	8000770 <__aeabi_ddiv>
 80162ea:	e77e      	b.n	80161ea <_strtod_l+0x3ca>
 80162ec:	2300      	movs	r3, #0
 80162ee:	4648      	mov	r0, r9
 80162f0:	4651      	mov	r1, sl
 80162f2:	461d      	mov	r5, r3
 80162f4:	4e33      	ldr	r6, [pc, #204]	; (80163c4 <_strtod_l+0x5a4>)
 80162f6:	ea4f 1828 	mov.w	r8, r8, asr #4
 80162fa:	f1b8 0f01 	cmp.w	r8, #1
 80162fe:	dc21      	bgt.n	8016344 <_strtod_l+0x524>
 8016300:	b10b      	cbz	r3, 8016306 <_strtod_l+0x4e6>
 8016302:	4681      	mov	r9, r0
 8016304:	468a      	mov	sl, r1
 8016306:	4b2f      	ldr	r3, [pc, #188]	; (80163c4 <_strtod_l+0x5a4>)
 8016308:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 801630c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8016310:	464a      	mov	r2, r9
 8016312:	e9d5 0100 	ldrd	r0, r1, [r5]
 8016316:	4653      	mov	r3, sl
 8016318:	f7ea f900 	bl	800051c <__aeabi_dmul>
 801631c:	4b2a      	ldr	r3, [pc, #168]	; (80163c8 <_strtod_l+0x5a8>)
 801631e:	460a      	mov	r2, r1
 8016320:	400b      	ands	r3, r1
 8016322:	492a      	ldr	r1, [pc, #168]	; (80163cc <_strtod_l+0x5ac>)
 8016324:	4681      	mov	r9, r0
 8016326:	428b      	cmp	r3, r1
 8016328:	d894      	bhi.n	8016254 <_strtod_l+0x434>
 801632a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801632e:	428b      	cmp	r3, r1
 8016330:	bf86      	itte	hi
 8016332:	f04f 39ff 	movhi.w	r9, #4294967295
 8016336:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 80163d4 <_strtod_l+0x5b4>
 801633a:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 801633e:	2300      	movs	r3, #0
 8016340:	9305      	str	r3, [sp, #20]
 8016342:	e07b      	b.n	801643c <_strtod_l+0x61c>
 8016344:	f018 0f01 	tst.w	r8, #1
 8016348:	d006      	beq.n	8016358 <_strtod_l+0x538>
 801634a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 801634e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016352:	f7ea f8e3 	bl	800051c <__aeabi_dmul>
 8016356:	2301      	movs	r3, #1
 8016358:	3501      	adds	r5, #1
 801635a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801635e:	e7cc      	b.n	80162fa <_strtod_l+0x4da>
 8016360:	d0ed      	beq.n	801633e <_strtod_l+0x51e>
 8016362:	f1c8 0800 	rsb	r8, r8, #0
 8016366:	f018 020f 	ands.w	r2, r8, #15
 801636a:	d00a      	beq.n	8016382 <_strtod_l+0x562>
 801636c:	4b14      	ldr	r3, [pc, #80]	; (80163c0 <_strtod_l+0x5a0>)
 801636e:	4648      	mov	r0, r9
 8016370:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016374:	4651      	mov	r1, sl
 8016376:	e9d3 2300 	ldrd	r2, r3, [r3]
 801637a:	f7ea f9f9 	bl	8000770 <__aeabi_ddiv>
 801637e:	4681      	mov	r9, r0
 8016380:	468a      	mov	sl, r1
 8016382:	ea5f 1828 	movs.w	r8, r8, asr #4
 8016386:	d0da      	beq.n	801633e <_strtod_l+0x51e>
 8016388:	f1b8 0f1f 	cmp.w	r8, #31
 801638c:	dd24      	ble.n	80163d8 <_strtod_l+0x5b8>
 801638e:	f04f 0800 	mov.w	r8, #0
 8016392:	f8cd 8010 	str.w	r8, [sp, #16]
 8016396:	f8cd 8020 	str.w	r8, [sp, #32]
 801639a:	f8cd 8018 	str.w	r8, [sp, #24]
 801639e:	2322      	movs	r3, #34	; 0x22
 80163a0:	f04f 0900 	mov.w	r9, #0
 80163a4:	f04f 0a00 	mov.w	sl, #0
 80163a8:	f8cb 3000 	str.w	r3, [fp]
 80163ac:	e761      	b.n	8016272 <_strtod_l+0x452>
 80163ae:	bf00      	nop
 80163b0:	0801e631 	.word	0x0801e631
 80163b4:	0801e6bb 	.word	0x0801e6bb
 80163b8:	0801e639 	.word	0x0801e639
 80163bc:	0801e678 	.word	0x0801e678
 80163c0:	0801e760 	.word	0x0801e760
 80163c4:	0801e738 	.word	0x0801e738
 80163c8:	7ff00000 	.word	0x7ff00000
 80163cc:	7ca00000 	.word	0x7ca00000
 80163d0:	fff80000 	.word	0xfff80000
 80163d4:	7fefffff 	.word	0x7fefffff
 80163d8:	f018 0310 	ands.w	r3, r8, #16
 80163dc:	bf18      	it	ne
 80163de:	236a      	movne	r3, #106	; 0x6a
 80163e0:	4648      	mov	r0, r9
 80163e2:	9305      	str	r3, [sp, #20]
 80163e4:	4651      	mov	r1, sl
 80163e6:	2300      	movs	r3, #0
 80163e8:	4da1      	ldr	r5, [pc, #644]	; (8016670 <_strtod_l+0x850>)
 80163ea:	f1b8 0f00 	cmp.w	r8, #0
 80163ee:	f300 8113 	bgt.w	8016618 <_strtod_l+0x7f8>
 80163f2:	b10b      	cbz	r3, 80163f8 <_strtod_l+0x5d8>
 80163f4:	4681      	mov	r9, r0
 80163f6:	468a      	mov	sl, r1
 80163f8:	9b05      	ldr	r3, [sp, #20]
 80163fa:	b1bb      	cbz	r3, 801642c <_strtod_l+0x60c>
 80163fc:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8016400:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016404:	2b00      	cmp	r3, #0
 8016406:	4651      	mov	r1, sl
 8016408:	dd10      	ble.n	801642c <_strtod_l+0x60c>
 801640a:	2b1f      	cmp	r3, #31
 801640c:	f340 8110 	ble.w	8016630 <_strtod_l+0x810>
 8016410:	2b34      	cmp	r3, #52	; 0x34
 8016412:	bfd8      	it	le
 8016414:	f04f 32ff 	movle.w	r2, #4294967295
 8016418:	f04f 0900 	mov.w	r9, #0
 801641c:	bfcf      	iteee	gt
 801641e:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 8016422:	3b20      	suble	r3, #32
 8016424:	fa02 f303 	lslle.w	r3, r2, r3
 8016428:	ea03 0a01 	andle.w	sl, r3, r1
 801642c:	2200      	movs	r2, #0
 801642e:	2300      	movs	r3, #0
 8016430:	4648      	mov	r0, r9
 8016432:	4651      	mov	r1, sl
 8016434:	f7ea fada 	bl	80009ec <__aeabi_dcmpeq>
 8016438:	2800      	cmp	r0, #0
 801643a:	d1a8      	bne.n	801638e <_strtod_l+0x56e>
 801643c:	9b06      	ldr	r3, [sp, #24]
 801643e:	9a04      	ldr	r2, [sp, #16]
 8016440:	9300      	str	r3, [sp, #0]
 8016442:	9908      	ldr	r1, [sp, #32]
 8016444:	4623      	mov	r3, r4
 8016446:	4658      	mov	r0, fp
 8016448:	f002 f896 	bl	8018578 <__s2b>
 801644c:	9008      	str	r0, [sp, #32]
 801644e:	2800      	cmp	r0, #0
 8016450:	f43f af00 	beq.w	8016254 <_strtod_l+0x434>
 8016454:	9a07      	ldr	r2, [sp, #28]
 8016456:	9b07      	ldr	r3, [sp, #28]
 8016458:	2a00      	cmp	r2, #0
 801645a:	f1c3 0300 	rsb	r3, r3, #0
 801645e:	bfa8      	it	ge
 8016460:	2300      	movge	r3, #0
 8016462:	f04f 0800 	mov.w	r8, #0
 8016466:	930e      	str	r3, [sp, #56]	; 0x38
 8016468:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801646c:	9316      	str	r3, [sp, #88]	; 0x58
 801646e:	f8cd 8010 	str.w	r8, [sp, #16]
 8016472:	9b08      	ldr	r3, [sp, #32]
 8016474:	4658      	mov	r0, fp
 8016476:	6859      	ldr	r1, [r3, #4]
 8016478:	f001 fff8 	bl	801846c <_Balloc>
 801647c:	9006      	str	r0, [sp, #24]
 801647e:	2800      	cmp	r0, #0
 8016480:	f43f aef0 	beq.w	8016264 <_strtod_l+0x444>
 8016484:	9b08      	ldr	r3, [sp, #32]
 8016486:	300c      	adds	r0, #12
 8016488:	691a      	ldr	r2, [r3, #16]
 801648a:	f103 010c 	add.w	r1, r3, #12
 801648e:	3202      	adds	r2, #2
 8016490:	0092      	lsls	r2, r2, #2
 8016492:	f7fe fd03 	bl	8014e9c <memcpy>
 8016496:	ab1e      	add	r3, sp, #120	; 0x78
 8016498:	9301      	str	r3, [sp, #4]
 801649a:	ab1d      	add	r3, sp, #116	; 0x74
 801649c:	9300      	str	r3, [sp, #0]
 801649e:	464a      	mov	r2, r9
 80164a0:	4653      	mov	r3, sl
 80164a2:	4658      	mov	r0, fp
 80164a4:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 80164a8:	f002 fb20 	bl	8018aec <__d2b>
 80164ac:	901c      	str	r0, [sp, #112]	; 0x70
 80164ae:	2800      	cmp	r0, #0
 80164b0:	f43f aed8 	beq.w	8016264 <_strtod_l+0x444>
 80164b4:	2101      	movs	r1, #1
 80164b6:	4658      	mov	r0, fp
 80164b8:	f002 f8ea 	bl	8018690 <__i2b>
 80164bc:	9004      	str	r0, [sp, #16]
 80164be:	4603      	mov	r3, r0
 80164c0:	2800      	cmp	r0, #0
 80164c2:	f43f aecf 	beq.w	8016264 <_strtod_l+0x444>
 80164c6:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80164c8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80164ca:	2d00      	cmp	r5, #0
 80164cc:	bfab      	itete	ge
 80164ce:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80164d0:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80164d2:	18ee      	addge	r6, r5, r3
 80164d4:	1b5c      	sublt	r4, r3, r5
 80164d6:	9b05      	ldr	r3, [sp, #20]
 80164d8:	bfa8      	it	ge
 80164da:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 80164dc:	eba5 0503 	sub.w	r5, r5, r3
 80164e0:	4415      	add	r5, r2
 80164e2:	4b64      	ldr	r3, [pc, #400]	; (8016674 <_strtod_l+0x854>)
 80164e4:	f105 35ff 	add.w	r5, r5, #4294967295
 80164e8:	bfb8      	it	lt
 80164ea:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80164ec:	429d      	cmp	r5, r3
 80164ee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80164f2:	f280 80af 	bge.w	8016654 <_strtod_l+0x834>
 80164f6:	1b5b      	subs	r3, r3, r5
 80164f8:	2b1f      	cmp	r3, #31
 80164fa:	eba2 0203 	sub.w	r2, r2, r3
 80164fe:	f04f 0701 	mov.w	r7, #1
 8016502:	f300 809c 	bgt.w	801663e <_strtod_l+0x81e>
 8016506:	2500      	movs	r5, #0
 8016508:	fa07 f303 	lsl.w	r3, r7, r3
 801650c:	930f      	str	r3, [sp, #60]	; 0x3c
 801650e:	18b7      	adds	r7, r6, r2
 8016510:	9b05      	ldr	r3, [sp, #20]
 8016512:	42be      	cmp	r6, r7
 8016514:	4414      	add	r4, r2
 8016516:	441c      	add	r4, r3
 8016518:	4633      	mov	r3, r6
 801651a:	bfa8      	it	ge
 801651c:	463b      	movge	r3, r7
 801651e:	42a3      	cmp	r3, r4
 8016520:	bfa8      	it	ge
 8016522:	4623      	movge	r3, r4
 8016524:	2b00      	cmp	r3, #0
 8016526:	bfc2      	ittt	gt
 8016528:	1aff      	subgt	r7, r7, r3
 801652a:	1ae4      	subgt	r4, r4, r3
 801652c:	1af6      	subgt	r6, r6, r3
 801652e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016530:	b1bb      	cbz	r3, 8016562 <_strtod_l+0x742>
 8016532:	461a      	mov	r2, r3
 8016534:	9904      	ldr	r1, [sp, #16]
 8016536:	4658      	mov	r0, fp
 8016538:	f002 f948 	bl	80187cc <__pow5mult>
 801653c:	9004      	str	r0, [sp, #16]
 801653e:	2800      	cmp	r0, #0
 8016540:	f43f ae90 	beq.w	8016264 <_strtod_l+0x444>
 8016544:	4601      	mov	r1, r0
 8016546:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016548:	4658      	mov	r0, fp
 801654a:	f002 f8aa 	bl	80186a2 <__multiply>
 801654e:	9009      	str	r0, [sp, #36]	; 0x24
 8016550:	2800      	cmp	r0, #0
 8016552:	f43f ae87 	beq.w	8016264 <_strtod_l+0x444>
 8016556:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016558:	4658      	mov	r0, fp
 801655a:	f001 ffbb 	bl	80184d4 <_Bfree>
 801655e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016560:	931c      	str	r3, [sp, #112]	; 0x70
 8016562:	2f00      	cmp	r7, #0
 8016564:	dc7a      	bgt.n	801665c <_strtod_l+0x83c>
 8016566:	9b07      	ldr	r3, [sp, #28]
 8016568:	2b00      	cmp	r3, #0
 801656a:	dd08      	ble.n	801657e <_strtod_l+0x75e>
 801656c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801656e:	9906      	ldr	r1, [sp, #24]
 8016570:	4658      	mov	r0, fp
 8016572:	f002 f92b 	bl	80187cc <__pow5mult>
 8016576:	9006      	str	r0, [sp, #24]
 8016578:	2800      	cmp	r0, #0
 801657a:	f43f ae73 	beq.w	8016264 <_strtod_l+0x444>
 801657e:	2c00      	cmp	r4, #0
 8016580:	dd08      	ble.n	8016594 <_strtod_l+0x774>
 8016582:	4622      	mov	r2, r4
 8016584:	9906      	ldr	r1, [sp, #24]
 8016586:	4658      	mov	r0, fp
 8016588:	f002 f96e 	bl	8018868 <__lshift>
 801658c:	9006      	str	r0, [sp, #24]
 801658e:	2800      	cmp	r0, #0
 8016590:	f43f ae68 	beq.w	8016264 <_strtod_l+0x444>
 8016594:	2e00      	cmp	r6, #0
 8016596:	dd08      	ble.n	80165aa <_strtod_l+0x78a>
 8016598:	4632      	mov	r2, r6
 801659a:	9904      	ldr	r1, [sp, #16]
 801659c:	4658      	mov	r0, fp
 801659e:	f002 f963 	bl	8018868 <__lshift>
 80165a2:	9004      	str	r0, [sp, #16]
 80165a4:	2800      	cmp	r0, #0
 80165a6:	f43f ae5d 	beq.w	8016264 <_strtod_l+0x444>
 80165aa:	9a06      	ldr	r2, [sp, #24]
 80165ac:	991c      	ldr	r1, [sp, #112]	; 0x70
 80165ae:	4658      	mov	r0, fp
 80165b0:	f002 f9c8 	bl	8018944 <__mdiff>
 80165b4:	4680      	mov	r8, r0
 80165b6:	2800      	cmp	r0, #0
 80165b8:	f43f ae54 	beq.w	8016264 <_strtod_l+0x444>
 80165bc:	2400      	movs	r4, #0
 80165be:	68c3      	ldr	r3, [r0, #12]
 80165c0:	9904      	ldr	r1, [sp, #16]
 80165c2:	60c4      	str	r4, [r0, #12]
 80165c4:	930c      	str	r3, [sp, #48]	; 0x30
 80165c6:	f002 f9a3 	bl	8018910 <__mcmp>
 80165ca:	42a0      	cmp	r0, r4
 80165cc:	da54      	bge.n	8016678 <_strtod_l+0x858>
 80165ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80165d0:	b9f3      	cbnz	r3, 8016610 <_strtod_l+0x7f0>
 80165d2:	f1b9 0f00 	cmp.w	r9, #0
 80165d6:	d11b      	bne.n	8016610 <_strtod_l+0x7f0>
 80165d8:	f3ca 0313 	ubfx	r3, sl, #0, #20
 80165dc:	b9c3      	cbnz	r3, 8016610 <_strtod_l+0x7f0>
 80165de:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80165e2:	0d1b      	lsrs	r3, r3, #20
 80165e4:	051b      	lsls	r3, r3, #20
 80165e6:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80165ea:	d911      	bls.n	8016610 <_strtod_l+0x7f0>
 80165ec:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80165f0:	b91b      	cbnz	r3, 80165fa <_strtod_l+0x7da>
 80165f2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80165f6:	2b01      	cmp	r3, #1
 80165f8:	dd0a      	ble.n	8016610 <_strtod_l+0x7f0>
 80165fa:	4641      	mov	r1, r8
 80165fc:	2201      	movs	r2, #1
 80165fe:	4658      	mov	r0, fp
 8016600:	f002 f932 	bl	8018868 <__lshift>
 8016604:	9904      	ldr	r1, [sp, #16]
 8016606:	4680      	mov	r8, r0
 8016608:	f002 f982 	bl	8018910 <__mcmp>
 801660c:	2800      	cmp	r0, #0
 801660e:	dc68      	bgt.n	80166e2 <_strtod_l+0x8c2>
 8016610:	9b05      	ldr	r3, [sp, #20]
 8016612:	2b00      	cmp	r3, #0
 8016614:	d172      	bne.n	80166fc <_strtod_l+0x8dc>
 8016616:	e630      	b.n	801627a <_strtod_l+0x45a>
 8016618:	f018 0f01 	tst.w	r8, #1
 801661c:	d004      	beq.n	8016628 <_strtod_l+0x808>
 801661e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016622:	f7e9 ff7b 	bl	800051c <__aeabi_dmul>
 8016626:	2301      	movs	r3, #1
 8016628:	ea4f 0868 	mov.w	r8, r8, asr #1
 801662c:	3508      	adds	r5, #8
 801662e:	e6dc      	b.n	80163ea <_strtod_l+0x5ca>
 8016630:	f04f 32ff 	mov.w	r2, #4294967295
 8016634:	fa02 f303 	lsl.w	r3, r2, r3
 8016638:	ea03 0909 	and.w	r9, r3, r9
 801663c:	e6f6      	b.n	801642c <_strtod_l+0x60c>
 801663e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8016642:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8016646:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 801664a:	35e2      	adds	r5, #226	; 0xe2
 801664c:	fa07 f505 	lsl.w	r5, r7, r5
 8016650:	970f      	str	r7, [sp, #60]	; 0x3c
 8016652:	e75c      	b.n	801650e <_strtod_l+0x6ee>
 8016654:	2301      	movs	r3, #1
 8016656:	2500      	movs	r5, #0
 8016658:	930f      	str	r3, [sp, #60]	; 0x3c
 801665a:	e758      	b.n	801650e <_strtod_l+0x6ee>
 801665c:	463a      	mov	r2, r7
 801665e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016660:	4658      	mov	r0, fp
 8016662:	f002 f901 	bl	8018868 <__lshift>
 8016666:	901c      	str	r0, [sp, #112]	; 0x70
 8016668:	2800      	cmp	r0, #0
 801666a:	f47f af7c 	bne.w	8016566 <_strtod_l+0x746>
 801666e:	e5f9      	b.n	8016264 <_strtod_l+0x444>
 8016670:	0801e690 	.word	0x0801e690
 8016674:	fffffc02 	.word	0xfffffc02
 8016678:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801667c:	f040 8089 	bne.w	8016792 <_strtod_l+0x972>
 8016680:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016682:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8016686:	b342      	cbz	r2, 80166da <_strtod_l+0x8ba>
 8016688:	4aaf      	ldr	r2, [pc, #700]	; (8016948 <_strtod_l+0xb28>)
 801668a:	4293      	cmp	r3, r2
 801668c:	d156      	bne.n	801673c <_strtod_l+0x91c>
 801668e:	9b05      	ldr	r3, [sp, #20]
 8016690:	4648      	mov	r0, r9
 8016692:	b1eb      	cbz	r3, 80166d0 <_strtod_l+0x8b0>
 8016694:	4653      	mov	r3, sl
 8016696:	4aad      	ldr	r2, [pc, #692]	; (801694c <_strtod_l+0xb2c>)
 8016698:	f04f 31ff 	mov.w	r1, #4294967295
 801669c:	401a      	ands	r2, r3
 801669e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80166a2:	d818      	bhi.n	80166d6 <_strtod_l+0x8b6>
 80166a4:	0d12      	lsrs	r2, r2, #20
 80166a6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80166aa:	fa01 f303 	lsl.w	r3, r1, r3
 80166ae:	4298      	cmp	r0, r3
 80166b0:	d144      	bne.n	801673c <_strtod_l+0x91c>
 80166b2:	4ba7      	ldr	r3, [pc, #668]	; (8016950 <_strtod_l+0xb30>)
 80166b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80166b6:	429a      	cmp	r2, r3
 80166b8:	d102      	bne.n	80166c0 <_strtod_l+0x8a0>
 80166ba:	3001      	adds	r0, #1
 80166bc:	f43f add2 	beq.w	8016264 <_strtod_l+0x444>
 80166c0:	4ba2      	ldr	r3, [pc, #648]	; (801694c <_strtod_l+0xb2c>)
 80166c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80166c4:	f04f 0900 	mov.w	r9, #0
 80166c8:	401a      	ands	r2, r3
 80166ca:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 80166ce:	e79f      	b.n	8016610 <_strtod_l+0x7f0>
 80166d0:	f04f 33ff 	mov.w	r3, #4294967295
 80166d4:	e7eb      	b.n	80166ae <_strtod_l+0x88e>
 80166d6:	460b      	mov	r3, r1
 80166d8:	e7e9      	b.n	80166ae <_strtod_l+0x88e>
 80166da:	bb7b      	cbnz	r3, 801673c <_strtod_l+0x91c>
 80166dc:	f1b9 0f00 	cmp.w	r9, #0
 80166e0:	d12c      	bne.n	801673c <_strtod_l+0x91c>
 80166e2:	9905      	ldr	r1, [sp, #20]
 80166e4:	4653      	mov	r3, sl
 80166e6:	4a99      	ldr	r2, [pc, #612]	; (801694c <_strtod_l+0xb2c>)
 80166e8:	b1f1      	cbz	r1, 8016728 <_strtod_l+0x908>
 80166ea:	ea02 010a 	and.w	r1, r2, sl
 80166ee:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80166f2:	dc19      	bgt.n	8016728 <_strtod_l+0x908>
 80166f4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80166f8:	f77f ae51 	ble.w	801639e <_strtod_l+0x57e>
 80166fc:	2300      	movs	r3, #0
 80166fe:	4a95      	ldr	r2, [pc, #596]	; (8016954 <_strtod_l+0xb34>)
 8016700:	4648      	mov	r0, r9
 8016702:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8016706:	4651      	mov	r1, sl
 8016708:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801670c:	f7e9 ff06 	bl	800051c <__aeabi_dmul>
 8016710:	4681      	mov	r9, r0
 8016712:	468a      	mov	sl, r1
 8016714:	2900      	cmp	r1, #0
 8016716:	f47f adb0 	bne.w	801627a <_strtod_l+0x45a>
 801671a:	2800      	cmp	r0, #0
 801671c:	f47f adad 	bne.w	801627a <_strtod_l+0x45a>
 8016720:	2322      	movs	r3, #34	; 0x22
 8016722:	f8cb 3000 	str.w	r3, [fp]
 8016726:	e5a8      	b.n	801627a <_strtod_l+0x45a>
 8016728:	4013      	ands	r3, r2
 801672a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801672e:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 8016732:	f04f 39ff 	mov.w	r9, #4294967295
 8016736:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 801673a:	e769      	b.n	8016610 <_strtod_l+0x7f0>
 801673c:	b19d      	cbz	r5, 8016766 <_strtod_l+0x946>
 801673e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016740:	421d      	tst	r5, r3
 8016742:	f43f af65 	beq.w	8016610 <_strtod_l+0x7f0>
 8016746:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016748:	9a05      	ldr	r2, [sp, #20]
 801674a:	4648      	mov	r0, r9
 801674c:	4651      	mov	r1, sl
 801674e:	b173      	cbz	r3, 801676e <_strtod_l+0x94e>
 8016750:	f7ff fb43 	bl	8015dda <sulp>
 8016754:	4602      	mov	r2, r0
 8016756:	460b      	mov	r3, r1
 8016758:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801675c:	f7e9 fd28 	bl	80001b0 <__adddf3>
 8016760:	4681      	mov	r9, r0
 8016762:	468a      	mov	sl, r1
 8016764:	e754      	b.n	8016610 <_strtod_l+0x7f0>
 8016766:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016768:	ea13 0f09 	tst.w	r3, r9
 801676c:	e7e9      	b.n	8016742 <_strtod_l+0x922>
 801676e:	f7ff fb34 	bl	8015dda <sulp>
 8016772:	4602      	mov	r2, r0
 8016774:	460b      	mov	r3, r1
 8016776:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801677a:	f7e9 fd17 	bl	80001ac <__aeabi_dsub>
 801677e:	2200      	movs	r2, #0
 8016780:	2300      	movs	r3, #0
 8016782:	4681      	mov	r9, r0
 8016784:	468a      	mov	sl, r1
 8016786:	f7ea f931 	bl	80009ec <__aeabi_dcmpeq>
 801678a:	2800      	cmp	r0, #0
 801678c:	f47f ae07 	bne.w	801639e <_strtod_l+0x57e>
 8016790:	e73e      	b.n	8016610 <_strtod_l+0x7f0>
 8016792:	9904      	ldr	r1, [sp, #16]
 8016794:	4640      	mov	r0, r8
 8016796:	f002 f9f8 	bl	8018b8a <__ratio>
 801679a:	2200      	movs	r2, #0
 801679c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80167a0:	4606      	mov	r6, r0
 80167a2:	460f      	mov	r7, r1
 80167a4:	f7ea f936 	bl	8000a14 <__aeabi_dcmple>
 80167a8:	2800      	cmp	r0, #0
 80167aa:	d075      	beq.n	8016898 <_strtod_l+0xa78>
 80167ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80167ae:	2b00      	cmp	r3, #0
 80167b0:	d047      	beq.n	8016842 <_strtod_l+0xa22>
 80167b2:	2600      	movs	r6, #0
 80167b4:	4f68      	ldr	r7, [pc, #416]	; (8016958 <_strtod_l+0xb38>)
 80167b6:	4d68      	ldr	r5, [pc, #416]	; (8016958 <_strtod_l+0xb38>)
 80167b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80167ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80167be:	0d1b      	lsrs	r3, r3, #20
 80167c0:	051b      	lsls	r3, r3, #20
 80167c2:	930f      	str	r3, [sp, #60]	; 0x3c
 80167c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80167c6:	4b65      	ldr	r3, [pc, #404]	; (801695c <_strtod_l+0xb3c>)
 80167c8:	429a      	cmp	r2, r3
 80167ca:	f040 80cf 	bne.w	801696c <_strtod_l+0xb4c>
 80167ce:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80167d2:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80167d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80167d8:	4648      	mov	r0, r9
 80167da:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 80167de:	4651      	mov	r1, sl
 80167e0:	f002 f90e 	bl	8018a00 <__ulp>
 80167e4:	4602      	mov	r2, r0
 80167e6:	460b      	mov	r3, r1
 80167e8:	4630      	mov	r0, r6
 80167ea:	4639      	mov	r1, r7
 80167ec:	f7e9 fe96 	bl	800051c <__aeabi_dmul>
 80167f0:	464a      	mov	r2, r9
 80167f2:	4653      	mov	r3, sl
 80167f4:	f7e9 fcdc 	bl	80001b0 <__adddf3>
 80167f8:	460b      	mov	r3, r1
 80167fa:	4954      	ldr	r1, [pc, #336]	; (801694c <_strtod_l+0xb2c>)
 80167fc:	4a58      	ldr	r2, [pc, #352]	; (8016960 <_strtod_l+0xb40>)
 80167fe:	4019      	ands	r1, r3
 8016800:	4291      	cmp	r1, r2
 8016802:	4681      	mov	r9, r0
 8016804:	d95e      	bls.n	80168c4 <_strtod_l+0xaa4>
 8016806:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016808:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801680c:	4293      	cmp	r3, r2
 801680e:	d103      	bne.n	8016818 <_strtod_l+0x9f8>
 8016810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016812:	3301      	adds	r3, #1
 8016814:	f43f ad26 	beq.w	8016264 <_strtod_l+0x444>
 8016818:	f04f 39ff 	mov.w	r9, #4294967295
 801681c:	f8df a130 	ldr.w	sl, [pc, #304]	; 8016950 <_strtod_l+0xb30>
 8016820:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016822:	4658      	mov	r0, fp
 8016824:	f001 fe56 	bl	80184d4 <_Bfree>
 8016828:	9906      	ldr	r1, [sp, #24]
 801682a:	4658      	mov	r0, fp
 801682c:	f001 fe52 	bl	80184d4 <_Bfree>
 8016830:	9904      	ldr	r1, [sp, #16]
 8016832:	4658      	mov	r0, fp
 8016834:	f001 fe4e 	bl	80184d4 <_Bfree>
 8016838:	4641      	mov	r1, r8
 801683a:	4658      	mov	r0, fp
 801683c:	f001 fe4a 	bl	80184d4 <_Bfree>
 8016840:	e617      	b.n	8016472 <_strtod_l+0x652>
 8016842:	f1b9 0f00 	cmp.w	r9, #0
 8016846:	d119      	bne.n	801687c <_strtod_l+0xa5c>
 8016848:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801684a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801684e:	b9e3      	cbnz	r3, 801688a <_strtod_l+0xa6a>
 8016850:	2200      	movs	r2, #0
 8016852:	4b41      	ldr	r3, [pc, #260]	; (8016958 <_strtod_l+0xb38>)
 8016854:	4630      	mov	r0, r6
 8016856:	4639      	mov	r1, r7
 8016858:	f7ea f8d2 	bl	8000a00 <__aeabi_dcmplt>
 801685c:	b9c8      	cbnz	r0, 8016892 <_strtod_l+0xa72>
 801685e:	2200      	movs	r2, #0
 8016860:	4b40      	ldr	r3, [pc, #256]	; (8016964 <_strtod_l+0xb44>)
 8016862:	4630      	mov	r0, r6
 8016864:	4639      	mov	r1, r7
 8016866:	f7e9 fe59 	bl	800051c <__aeabi_dmul>
 801686a:	4604      	mov	r4, r0
 801686c:	460d      	mov	r5, r1
 801686e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8016872:	9418      	str	r4, [sp, #96]	; 0x60
 8016874:	9319      	str	r3, [sp, #100]	; 0x64
 8016876:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 801687a:	e79d      	b.n	80167b8 <_strtod_l+0x998>
 801687c:	f1b9 0f01 	cmp.w	r9, #1
 8016880:	d103      	bne.n	801688a <_strtod_l+0xa6a>
 8016882:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016884:	2b00      	cmp	r3, #0
 8016886:	f43f ad8a 	beq.w	801639e <_strtod_l+0x57e>
 801688a:	2600      	movs	r6, #0
 801688c:	4f36      	ldr	r7, [pc, #216]	; (8016968 <_strtod_l+0xb48>)
 801688e:	2400      	movs	r4, #0
 8016890:	e791      	b.n	80167b6 <_strtod_l+0x996>
 8016892:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8016894:	4d33      	ldr	r5, [pc, #204]	; (8016964 <_strtod_l+0xb44>)
 8016896:	e7ea      	b.n	801686e <_strtod_l+0xa4e>
 8016898:	4b32      	ldr	r3, [pc, #200]	; (8016964 <_strtod_l+0xb44>)
 801689a:	2200      	movs	r2, #0
 801689c:	4630      	mov	r0, r6
 801689e:	4639      	mov	r1, r7
 80168a0:	f7e9 fe3c 	bl	800051c <__aeabi_dmul>
 80168a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80168a6:	4604      	mov	r4, r0
 80168a8:	460d      	mov	r5, r1
 80168aa:	b933      	cbnz	r3, 80168ba <_strtod_l+0xa9a>
 80168ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80168b0:	9010      	str	r0, [sp, #64]	; 0x40
 80168b2:	9311      	str	r3, [sp, #68]	; 0x44
 80168b4:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80168b8:	e77e      	b.n	80167b8 <_strtod_l+0x998>
 80168ba:	4602      	mov	r2, r0
 80168bc:	460b      	mov	r3, r1
 80168be:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80168c2:	e7f7      	b.n	80168b4 <_strtod_l+0xa94>
 80168c4:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 80168c8:	9b05      	ldr	r3, [sp, #20]
 80168ca:	2b00      	cmp	r3, #0
 80168cc:	d1a8      	bne.n	8016820 <_strtod_l+0xa00>
 80168ce:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80168d2:	0d1b      	lsrs	r3, r3, #20
 80168d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80168d6:	051b      	lsls	r3, r3, #20
 80168d8:	429a      	cmp	r2, r3
 80168da:	4656      	mov	r6, sl
 80168dc:	d1a0      	bne.n	8016820 <_strtod_l+0xa00>
 80168de:	4629      	mov	r1, r5
 80168e0:	4620      	mov	r0, r4
 80168e2:	f7ea f8cb 	bl	8000a7c <__aeabi_d2iz>
 80168e6:	f7e9 fdaf 	bl	8000448 <__aeabi_i2d>
 80168ea:	460b      	mov	r3, r1
 80168ec:	4602      	mov	r2, r0
 80168ee:	4629      	mov	r1, r5
 80168f0:	4620      	mov	r0, r4
 80168f2:	f7e9 fc5b 	bl	80001ac <__aeabi_dsub>
 80168f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80168f8:	4604      	mov	r4, r0
 80168fa:	460d      	mov	r5, r1
 80168fc:	b933      	cbnz	r3, 801690c <_strtod_l+0xaec>
 80168fe:	f1b9 0f00 	cmp.w	r9, #0
 8016902:	d103      	bne.n	801690c <_strtod_l+0xaec>
 8016904:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8016908:	2e00      	cmp	r6, #0
 801690a:	d06a      	beq.n	80169e2 <_strtod_l+0xbc2>
 801690c:	a30a      	add	r3, pc, #40	; (adr r3, 8016938 <_strtod_l+0xb18>)
 801690e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016912:	4620      	mov	r0, r4
 8016914:	4629      	mov	r1, r5
 8016916:	f7ea f873 	bl	8000a00 <__aeabi_dcmplt>
 801691a:	2800      	cmp	r0, #0
 801691c:	f47f acad 	bne.w	801627a <_strtod_l+0x45a>
 8016920:	a307      	add	r3, pc, #28	; (adr r3, 8016940 <_strtod_l+0xb20>)
 8016922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016926:	4620      	mov	r0, r4
 8016928:	4629      	mov	r1, r5
 801692a:	f7ea f887 	bl	8000a3c <__aeabi_dcmpgt>
 801692e:	2800      	cmp	r0, #0
 8016930:	f43f af76 	beq.w	8016820 <_strtod_l+0xa00>
 8016934:	e4a1      	b.n	801627a <_strtod_l+0x45a>
 8016936:	bf00      	nop
 8016938:	94a03595 	.word	0x94a03595
 801693c:	3fdfffff 	.word	0x3fdfffff
 8016940:	35afe535 	.word	0x35afe535
 8016944:	3fe00000 	.word	0x3fe00000
 8016948:	000fffff 	.word	0x000fffff
 801694c:	7ff00000 	.word	0x7ff00000
 8016950:	7fefffff 	.word	0x7fefffff
 8016954:	39500000 	.word	0x39500000
 8016958:	3ff00000 	.word	0x3ff00000
 801695c:	7fe00000 	.word	0x7fe00000
 8016960:	7c9fffff 	.word	0x7c9fffff
 8016964:	3fe00000 	.word	0x3fe00000
 8016968:	bff00000 	.word	0xbff00000
 801696c:	9b05      	ldr	r3, [sp, #20]
 801696e:	b313      	cbz	r3, 80169b6 <_strtod_l+0xb96>
 8016970:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016972:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8016976:	d81e      	bhi.n	80169b6 <_strtod_l+0xb96>
 8016978:	a325      	add	r3, pc, #148	; (adr r3, 8016a10 <_strtod_l+0xbf0>)
 801697a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801697e:	4620      	mov	r0, r4
 8016980:	4629      	mov	r1, r5
 8016982:	f7ea f847 	bl	8000a14 <__aeabi_dcmple>
 8016986:	b190      	cbz	r0, 80169ae <_strtod_l+0xb8e>
 8016988:	4629      	mov	r1, r5
 801698a:	4620      	mov	r0, r4
 801698c:	f7ea f89e 	bl	8000acc <__aeabi_d2uiz>
 8016990:	2800      	cmp	r0, #0
 8016992:	bf08      	it	eq
 8016994:	2001      	moveq	r0, #1
 8016996:	f7e9 fd47 	bl	8000428 <__aeabi_ui2d>
 801699a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801699c:	4604      	mov	r4, r0
 801699e:	460d      	mov	r5, r1
 80169a0:	b9d3      	cbnz	r3, 80169d8 <_strtod_l+0xbb8>
 80169a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80169a6:	9012      	str	r0, [sp, #72]	; 0x48
 80169a8:	9313      	str	r3, [sp, #76]	; 0x4c
 80169aa:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80169ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80169b0:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80169b4:	1a9f      	subs	r7, r3, r2
 80169b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80169ba:	f002 f821 	bl	8018a00 <__ulp>
 80169be:	4602      	mov	r2, r0
 80169c0:	460b      	mov	r3, r1
 80169c2:	4630      	mov	r0, r6
 80169c4:	4639      	mov	r1, r7
 80169c6:	f7e9 fda9 	bl	800051c <__aeabi_dmul>
 80169ca:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80169ce:	f7e9 fbef 	bl	80001b0 <__adddf3>
 80169d2:	4681      	mov	r9, r0
 80169d4:	468a      	mov	sl, r1
 80169d6:	e777      	b.n	80168c8 <_strtod_l+0xaa8>
 80169d8:	4602      	mov	r2, r0
 80169da:	460b      	mov	r3, r1
 80169dc:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80169e0:	e7e3      	b.n	80169aa <_strtod_l+0xb8a>
 80169e2:	a30d      	add	r3, pc, #52	; (adr r3, 8016a18 <_strtod_l+0xbf8>)
 80169e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169e8:	f7ea f80a 	bl	8000a00 <__aeabi_dcmplt>
 80169ec:	e79f      	b.n	801692e <_strtod_l+0xb0e>
 80169ee:	2300      	movs	r3, #0
 80169f0:	930d      	str	r3, [sp, #52]	; 0x34
 80169f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80169f4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80169f6:	6013      	str	r3, [r2, #0]
 80169f8:	f7ff ba55 	b.w	8015ea6 <_strtod_l+0x86>
 80169fc:	2b65      	cmp	r3, #101	; 0x65
 80169fe:	f04f 0200 	mov.w	r2, #0
 8016a02:	f43f ab42 	beq.w	801608a <_strtod_l+0x26a>
 8016a06:	2101      	movs	r1, #1
 8016a08:	4614      	mov	r4, r2
 8016a0a:	9105      	str	r1, [sp, #20]
 8016a0c:	f7ff babf 	b.w	8015f8e <_strtod_l+0x16e>
 8016a10:	ffc00000 	.word	0xffc00000
 8016a14:	41dfffff 	.word	0x41dfffff
 8016a18:	94a03595 	.word	0x94a03595
 8016a1c:	3fcfffff 	.word	0x3fcfffff

08016a20 <_strtod_r>:
 8016a20:	4b05      	ldr	r3, [pc, #20]	; (8016a38 <_strtod_r+0x18>)
 8016a22:	b410      	push	{r4}
 8016a24:	681b      	ldr	r3, [r3, #0]
 8016a26:	4c05      	ldr	r4, [pc, #20]	; (8016a3c <_strtod_r+0x1c>)
 8016a28:	6a1b      	ldr	r3, [r3, #32]
 8016a2a:	2b00      	cmp	r3, #0
 8016a2c:	bf08      	it	eq
 8016a2e:	4623      	moveq	r3, r4
 8016a30:	bc10      	pop	{r4}
 8016a32:	f7ff b9f5 	b.w	8015e20 <_strtod_l>
 8016a36:	bf00      	nop
 8016a38:	20000148 	.word	0x20000148
 8016a3c:	200001ac 	.word	0x200001ac

08016a40 <_strtol_l.isra.0>:
 8016a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016a44:	4680      	mov	r8, r0
 8016a46:	4689      	mov	r9, r1
 8016a48:	4692      	mov	sl, r2
 8016a4a:	461e      	mov	r6, r3
 8016a4c:	460f      	mov	r7, r1
 8016a4e:	463d      	mov	r5, r7
 8016a50:	9808      	ldr	r0, [sp, #32]
 8016a52:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016a56:	f001 fc49 	bl	80182ec <__locale_ctype_ptr_l>
 8016a5a:	4420      	add	r0, r4
 8016a5c:	7843      	ldrb	r3, [r0, #1]
 8016a5e:	f013 0308 	ands.w	r3, r3, #8
 8016a62:	d132      	bne.n	8016aca <_strtol_l.isra.0+0x8a>
 8016a64:	2c2d      	cmp	r4, #45	; 0x2d
 8016a66:	d132      	bne.n	8016ace <_strtol_l.isra.0+0x8e>
 8016a68:	2201      	movs	r2, #1
 8016a6a:	787c      	ldrb	r4, [r7, #1]
 8016a6c:	1cbd      	adds	r5, r7, #2
 8016a6e:	2e00      	cmp	r6, #0
 8016a70:	d05d      	beq.n	8016b2e <_strtol_l.isra.0+0xee>
 8016a72:	2e10      	cmp	r6, #16
 8016a74:	d109      	bne.n	8016a8a <_strtol_l.isra.0+0x4a>
 8016a76:	2c30      	cmp	r4, #48	; 0x30
 8016a78:	d107      	bne.n	8016a8a <_strtol_l.isra.0+0x4a>
 8016a7a:	782b      	ldrb	r3, [r5, #0]
 8016a7c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016a80:	2b58      	cmp	r3, #88	; 0x58
 8016a82:	d14f      	bne.n	8016b24 <_strtol_l.isra.0+0xe4>
 8016a84:	2610      	movs	r6, #16
 8016a86:	786c      	ldrb	r4, [r5, #1]
 8016a88:	3502      	adds	r5, #2
 8016a8a:	2a00      	cmp	r2, #0
 8016a8c:	bf14      	ite	ne
 8016a8e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8016a92:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8016a96:	2700      	movs	r7, #0
 8016a98:	fbb1 fcf6 	udiv	ip, r1, r6
 8016a9c:	4638      	mov	r0, r7
 8016a9e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8016aa2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8016aa6:	2b09      	cmp	r3, #9
 8016aa8:	d817      	bhi.n	8016ada <_strtol_l.isra.0+0x9a>
 8016aaa:	461c      	mov	r4, r3
 8016aac:	42a6      	cmp	r6, r4
 8016aae:	dd23      	ble.n	8016af8 <_strtol_l.isra.0+0xb8>
 8016ab0:	1c7b      	adds	r3, r7, #1
 8016ab2:	d007      	beq.n	8016ac4 <_strtol_l.isra.0+0x84>
 8016ab4:	4584      	cmp	ip, r0
 8016ab6:	d31c      	bcc.n	8016af2 <_strtol_l.isra.0+0xb2>
 8016ab8:	d101      	bne.n	8016abe <_strtol_l.isra.0+0x7e>
 8016aba:	45a6      	cmp	lr, r4
 8016abc:	db19      	blt.n	8016af2 <_strtol_l.isra.0+0xb2>
 8016abe:	2701      	movs	r7, #1
 8016ac0:	fb00 4006 	mla	r0, r0, r6, r4
 8016ac4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016ac8:	e7eb      	b.n	8016aa2 <_strtol_l.isra.0+0x62>
 8016aca:	462f      	mov	r7, r5
 8016acc:	e7bf      	b.n	8016a4e <_strtol_l.isra.0+0xe>
 8016ace:	2c2b      	cmp	r4, #43	; 0x2b
 8016ad0:	bf04      	itt	eq
 8016ad2:	1cbd      	addeq	r5, r7, #2
 8016ad4:	787c      	ldrbeq	r4, [r7, #1]
 8016ad6:	461a      	mov	r2, r3
 8016ad8:	e7c9      	b.n	8016a6e <_strtol_l.isra.0+0x2e>
 8016ada:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8016ade:	2b19      	cmp	r3, #25
 8016ae0:	d801      	bhi.n	8016ae6 <_strtol_l.isra.0+0xa6>
 8016ae2:	3c37      	subs	r4, #55	; 0x37
 8016ae4:	e7e2      	b.n	8016aac <_strtol_l.isra.0+0x6c>
 8016ae6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8016aea:	2b19      	cmp	r3, #25
 8016aec:	d804      	bhi.n	8016af8 <_strtol_l.isra.0+0xb8>
 8016aee:	3c57      	subs	r4, #87	; 0x57
 8016af0:	e7dc      	b.n	8016aac <_strtol_l.isra.0+0x6c>
 8016af2:	f04f 37ff 	mov.w	r7, #4294967295
 8016af6:	e7e5      	b.n	8016ac4 <_strtol_l.isra.0+0x84>
 8016af8:	1c7b      	adds	r3, r7, #1
 8016afa:	d108      	bne.n	8016b0e <_strtol_l.isra.0+0xce>
 8016afc:	2322      	movs	r3, #34	; 0x22
 8016afe:	4608      	mov	r0, r1
 8016b00:	f8c8 3000 	str.w	r3, [r8]
 8016b04:	f1ba 0f00 	cmp.w	sl, #0
 8016b08:	d107      	bne.n	8016b1a <_strtol_l.isra.0+0xda>
 8016b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016b0e:	b102      	cbz	r2, 8016b12 <_strtol_l.isra.0+0xd2>
 8016b10:	4240      	negs	r0, r0
 8016b12:	f1ba 0f00 	cmp.w	sl, #0
 8016b16:	d0f8      	beq.n	8016b0a <_strtol_l.isra.0+0xca>
 8016b18:	b10f      	cbz	r7, 8016b1e <_strtol_l.isra.0+0xde>
 8016b1a:	f105 39ff 	add.w	r9, r5, #4294967295
 8016b1e:	f8ca 9000 	str.w	r9, [sl]
 8016b22:	e7f2      	b.n	8016b0a <_strtol_l.isra.0+0xca>
 8016b24:	2430      	movs	r4, #48	; 0x30
 8016b26:	2e00      	cmp	r6, #0
 8016b28:	d1af      	bne.n	8016a8a <_strtol_l.isra.0+0x4a>
 8016b2a:	2608      	movs	r6, #8
 8016b2c:	e7ad      	b.n	8016a8a <_strtol_l.isra.0+0x4a>
 8016b2e:	2c30      	cmp	r4, #48	; 0x30
 8016b30:	d0a3      	beq.n	8016a7a <_strtol_l.isra.0+0x3a>
 8016b32:	260a      	movs	r6, #10
 8016b34:	e7a9      	b.n	8016a8a <_strtol_l.isra.0+0x4a>
	...

08016b38 <_strtol_r>:
 8016b38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016b3a:	4c06      	ldr	r4, [pc, #24]	; (8016b54 <_strtol_r+0x1c>)
 8016b3c:	4d06      	ldr	r5, [pc, #24]	; (8016b58 <_strtol_r+0x20>)
 8016b3e:	6824      	ldr	r4, [r4, #0]
 8016b40:	6a24      	ldr	r4, [r4, #32]
 8016b42:	2c00      	cmp	r4, #0
 8016b44:	bf08      	it	eq
 8016b46:	462c      	moveq	r4, r5
 8016b48:	9400      	str	r4, [sp, #0]
 8016b4a:	f7ff ff79 	bl	8016a40 <_strtol_l.isra.0>
 8016b4e:	b003      	add	sp, #12
 8016b50:	bd30      	pop	{r4, r5, pc}
 8016b52:	bf00      	nop
 8016b54:	20000148 	.word	0x20000148
 8016b58:	200001ac 	.word	0x200001ac

08016b5c <__swbuf_r>:
 8016b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b5e:	460e      	mov	r6, r1
 8016b60:	4614      	mov	r4, r2
 8016b62:	4605      	mov	r5, r0
 8016b64:	b118      	cbz	r0, 8016b6e <__swbuf_r+0x12>
 8016b66:	6983      	ldr	r3, [r0, #24]
 8016b68:	b90b      	cbnz	r3, 8016b6e <__swbuf_r+0x12>
 8016b6a:	f001 f80d 	bl	8017b88 <__sinit>
 8016b6e:	4b21      	ldr	r3, [pc, #132]	; (8016bf4 <__swbuf_r+0x98>)
 8016b70:	429c      	cmp	r4, r3
 8016b72:	d12a      	bne.n	8016bca <__swbuf_r+0x6e>
 8016b74:	686c      	ldr	r4, [r5, #4]
 8016b76:	69a3      	ldr	r3, [r4, #24]
 8016b78:	60a3      	str	r3, [r4, #8]
 8016b7a:	89a3      	ldrh	r3, [r4, #12]
 8016b7c:	071a      	lsls	r2, r3, #28
 8016b7e:	d52e      	bpl.n	8016bde <__swbuf_r+0x82>
 8016b80:	6923      	ldr	r3, [r4, #16]
 8016b82:	b363      	cbz	r3, 8016bde <__swbuf_r+0x82>
 8016b84:	6923      	ldr	r3, [r4, #16]
 8016b86:	6820      	ldr	r0, [r4, #0]
 8016b88:	b2f6      	uxtb	r6, r6
 8016b8a:	1ac0      	subs	r0, r0, r3
 8016b8c:	6963      	ldr	r3, [r4, #20]
 8016b8e:	4637      	mov	r7, r6
 8016b90:	4283      	cmp	r3, r0
 8016b92:	dc04      	bgt.n	8016b9e <__swbuf_r+0x42>
 8016b94:	4621      	mov	r1, r4
 8016b96:	4628      	mov	r0, r5
 8016b98:	f000 ff8c 	bl	8017ab4 <_fflush_r>
 8016b9c:	bb28      	cbnz	r0, 8016bea <__swbuf_r+0x8e>
 8016b9e:	68a3      	ldr	r3, [r4, #8]
 8016ba0:	3001      	adds	r0, #1
 8016ba2:	3b01      	subs	r3, #1
 8016ba4:	60a3      	str	r3, [r4, #8]
 8016ba6:	6823      	ldr	r3, [r4, #0]
 8016ba8:	1c5a      	adds	r2, r3, #1
 8016baa:	6022      	str	r2, [r4, #0]
 8016bac:	701e      	strb	r6, [r3, #0]
 8016bae:	6963      	ldr	r3, [r4, #20]
 8016bb0:	4283      	cmp	r3, r0
 8016bb2:	d004      	beq.n	8016bbe <__swbuf_r+0x62>
 8016bb4:	89a3      	ldrh	r3, [r4, #12]
 8016bb6:	07db      	lsls	r3, r3, #31
 8016bb8:	d519      	bpl.n	8016bee <__swbuf_r+0x92>
 8016bba:	2e0a      	cmp	r6, #10
 8016bbc:	d117      	bne.n	8016bee <__swbuf_r+0x92>
 8016bbe:	4621      	mov	r1, r4
 8016bc0:	4628      	mov	r0, r5
 8016bc2:	f000 ff77 	bl	8017ab4 <_fflush_r>
 8016bc6:	b190      	cbz	r0, 8016bee <__swbuf_r+0x92>
 8016bc8:	e00f      	b.n	8016bea <__swbuf_r+0x8e>
 8016bca:	4b0b      	ldr	r3, [pc, #44]	; (8016bf8 <__swbuf_r+0x9c>)
 8016bcc:	429c      	cmp	r4, r3
 8016bce:	d101      	bne.n	8016bd4 <__swbuf_r+0x78>
 8016bd0:	68ac      	ldr	r4, [r5, #8]
 8016bd2:	e7d0      	b.n	8016b76 <__swbuf_r+0x1a>
 8016bd4:	4b09      	ldr	r3, [pc, #36]	; (8016bfc <__swbuf_r+0xa0>)
 8016bd6:	429c      	cmp	r4, r3
 8016bd8:	bf08      	it	eq
 8016bda:	68ec      	ldreq	r4, [r5, #12]
 8016bdc:	e7cb      	b.n	8016b76 <__swbuf_r+0x1a>
 8016bde:	4621      	mov	r1, r4
 8016be0:	4628      	mov	r0, r5
 8016be2:	f000 f81f 	bl	8016c24 <__swsetup_r>
 8016be6:	2800      	cmp	r0, #0
 8016be8:	d0cc      	beq.n	8016b84 <__swbuf_r+0x28>
 8016bea:	f04f 37ff 	mov.w	r7, #4294967295
 8016bee:	4638      	mov	r0, r7
 8016bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016bf2:	bf00      	nop
 8016bf4:	0801e6e8 	.word	0x0801e6e8
 8016bf8:	0801e708 	.word	0x0801e708
 8016bfc:	0801e6c8 	.word	0x0801e6c8

08016c00 <_write_r>:
 8016c00:	b538      	push	{r3, r4, r5, lr}
 8016c02:	4605      	mov	r5, r0
 8016c04:	4608      	mov	r0, r1
 8016c06:	4611      	mov	r1, r2
 8016c08:	2200      	movs	r2, #0
 8016c0a:	4c05      	ldr	r4, [pc, #20]	; (8016c20 <_write_r+0x20>)
 8016c0c:	6022      	str	r2, [r4, #0]
 8016c0e:	461a      	mov	r2, r3
 8016c10:	f7ed f921 	bl	8003e56 <_write>
 8016c14:	1c43      	adds	r3, r0, #1
 8016c16:	d102      	bne.n	8016c1e <_write_r+0x1e>
 8016c18:	6823      	ldr	r3, [r4, #0]
 8016c1a:	b103      	cbz	r3, 8016c1e <_write_r+0x1e>
 8016c1c:	602b      	str	r3, [r5, #0]
 8016c1e:	bd38      	pop	{r3, r4, r5, pc}
 8016c20:	20009e2c 	.word	0x20009e2c

08016c24 <__swsetup_r>:
 8016c24:	4b32      	ldr	r3, [pc, #200]	; (8016cf0 <__swsetup_r+0xcc>)
 8016c26:	b570      	push	{r4, r5, r6, lr}
 8016c28:	681d      	ldr	r5, [r3, #0]
 8016c2a:	4606      	mov	r6, r0
 8016c2c:	460c      	mov	r4, r1
 8016c2e:	b125      	cbz	r5, 8016c3a <__swsetup_r+0x16>
 8016c30:	69ab      	ldr	r3, [r5, #24]
 8016c32:	b913      	cbnz	r3, 8016c3a <__swsetup_r+0x16>
 8016c34:	4628      	mov	r0, r5
 8016c36:	f000 ffa7 	bl	8017b88 <__sinit>
 8016c3a:	4b2e      	ldr	r3, [pc, #184]	; (8016cf4 <__swsetup_r+0xd0>)
 8016c3c:	429c      	cmp	r4, r3
 8016c3e:	d10f      	bne.n	8016c60 <__swsetup_r+0x3c>
 8016c40:	686c      	ldr	r4, [r5, #4]
 8016c42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016c46:	b29a      	uxth	r2, r3
 8016c48:	0715      	lsls	r5, r2, #28
 8016c4a:	d42c      	bmi.n	8016ca6 <__swsetup_r+0x82>
 8016c4c:	06d0      	lsls	r0, r2, #27
 8016c4e:	d411      	bmi.n	8016c74 <__swsetup_r+0x50>
 8016c50:	2209      	movs	r2, #9
 8016c52:	6032      	str	r2, [r6, #0]
 8016c54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016c58:	81a3      	strh	r3, [r4, #12]
 8016c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8016c5e:	e03e      	b.n	8016cde <__swsetup_r+0xba>
 8016c60:	4b25      	ldr	r3, [pc, #148]	; (8016cf8 <__swsetup_r+0xd4>)
 8016c62:	429c      	cmp	r4, r3
 8016c64:	d101      	bne.n	8016c6a <__swsetup_r+0x46>
 8016c66:	68ac      	ldr	r4, [r5, #8]
 8016c68:	e7eb      	b.n	8016c42 <__swsetup_r+0x1e>
 8016c6a:	4b24      	ldr	r3, [pc, #144]	; (8016cfc <__swsetup_r+0xd8>)
 8016c6c:	429c      	cmp	r4, r3
 8016c6e:	bf08      	it	eq
 8016c70:	68ec      	ldreq	r4, [r5, #12]
 8016c72:	e7e6      	b.n	8016c42 <__swsetup_r+0x1e>
 8016c74:	0751      	lsls	r1, r2, #29
 8016c76:	d512      	bpl.n	8016c9e <__swsetup_r+0x7a>
 8016c78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016c7a:	b141      	cbz	r1, 8016c8e <__swsetup_r+0x6a>
 8016c7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016c80:	4299      	cmp	r1, r3
 8016c82:	d002      	beq.n	8016c8a <__swsetup_r+0x66>
 8016c84:	4630      	mov	r0, r6
 8016c86:	f001 fff7 	bl	8018c78 <_free_r>
 8016c8a:	2300      	movs	r3, #0
 8016c8c:	6363      	str	r3, [r4, #52]	; 0x34
 8016c8e:	89a3      	ldrh	r3, [r4, #12]
 8016c90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016c94:	81a3      	strh	r3, [r4, #12]
 8016c96:	2300      	movs	r3, #0
 8016c98:	6063      	str	r3, [r4, #4]
 8016c9a:	6923      	ldr	r3, [r4, #16]
 8016c9c:	6023      	str	r3, [r4, #0]
 8016c9e:	89a3      	ldrh	r3, [r4, #12]
 8016ca0:	f043 0308 	orr.w	r3, r3, #8
 8016ca4:	81a3      	strh	r3, [r4, #12]
 8016ca6:	6923      	ldr	r3, [r4, #16]
 8016ca8:	b94b      	cbnz	r3, 8016cbe <__swsetup_r+0x9a>
 8016caa:	89a3      	ldrh	r3, [r4, #12]
 8016cac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016cb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016cb4:	d003      	beq.n	8016cbe <__swsetup_r+0x9a>
 8016cb6:	4621      	mov	r1, r4
 8016cb8:	4630      	mov	r0, r6
 8016cba:	f001 fb6f 	bl	801839c <__smakebuf_r>
 8016cbe:	89a2      	ldrh	r2, [r4, #12]
 8016cc0:	f012 0301 	ands.w	r3, r2, #1
 8016cc4:	d00c      	beq.n	8016ce0 <__swsetup_r+0xbc>
 8016cc6:	2300      	movs	r3, #0
 8016cc8:	60a3      	str	r3, [r4, #8]
 8016cca:	6963      	ldr	r3, [r4, #20]
 8016ccc:	425b      	negs	r3, r3
 8016cce:	61a3      	str	r3, [r4, #24]
 8016cd0:	6923      	ldr	r3, [r4, #16]
 8016cd2:	b953      	cbnz	r3, 8016cea <__swsetup_r+0xc6>
 8016cd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016cd8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8016cdc:	d1ba      	bne.n	8016c54 <__swsetup_r+0x30>
 8016cde:	bd70      	pop	{r4, r5, r6, pc}
 8016ce0:	0792      	lsls	r2, r2, #30
 8016ce2:	bf58      	it	pl
 8016ce4:	6963      	ldrpl	r3, [r4, #20]
 8016ce6:	60a3      	str	r3, [r4, #8]
 8016ce8:	e7f2      	b.n	8016cd0 <__swsetup_r+0xac>
 8016cea:	2000      	movs	r0, #0
 8016cec:	e7f7      	b.n	8016cde <__swsetup_r+0xba>
 8016cee:	bf00      	nop
 8016cf0:	20000148 	.word	0x20000148
 8016cf4:	0801e6e8 	.word	0x0801e6e8
 8016cf8:	0801e708 	.word	0x0801e708
 8016cfc:	0801e6c8 	.word	0x0801e6c8

08016d00 <_close_r>:
 8016d00:	b538      	push	{r3, r4, r5, lr}
 8016d02:	2300      	movs	r3, #0
 8016d04:	4c05      	ldr	r4, [pc, #20]	; (8016d1c <_close_r+0x1c>)
 8016d06:	4605      	mov	r5, r0
 8016d08:	4608      	mov	r0, r1
 8016d0a:	6023      	str	r3, [r4, #0]
 8016d0c:	f7ed f8bf 	bl	8003e8e <_close>
 8016d10:	1c43      	adds	r3, r0, #1
 8016d12:	d102      	bne.n	8016d1a <_close_r+0x1a>
 8016d14:	6823      	ldr	r3, [r4, #0]
 8016d16:	b103      	cbz	r3, 8016d1a <_close_r+0x1a>
 8016d18:	602b      	str	r3, [r5, #0]
 8016d1a:	bd38      	pop	{r3, r4, r5, pc}
 8016d1c:	20009e2c 	.word	0x20009e2c

08016d20 <quorem>:
 8016d20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d24:	6903      	ldr	r3, [r0, #16]
 8016d26:	690c      	ldr	r4, [r1, #16]
 8016d28:	4680      	mov	r8, r0
 8016d2a:	42a3      	cmp	r3, r4
 8016d2c:	f2c0 8084 	blt.w	8016e38 <quorem+0x118>
 8016d30:	3c01      	subs	r4, #1
 8016d32:	f101 0714 	add.w	r7, r1, #20
 8016d36:	f100 0614 	add.w	r6, r0, #20
 8016d3a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8016d3e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8016d42:	3501      	adds	r5, #1
 8016d44:	fbb0 f5f5 	udiv	r5, r0, r5
 8016d48:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8016d4c:	eb06 030c 	add.w	r3, r6, ip
 8016d50:	eb07 090c 	add.w	r9, r7, ip
 8016d54:	9301      	str	r3, [sp, #4]
 8016d56:	b39d      	cbz	r5, 8016dc0 <quorem+0xa0>
 8016d58:	f04f 0a00 	mov.w	sl, #0
 8016d5c:	4638      	mov	r0, r7
 8016d5e:	46b6      	mov	lr, r6
 8016d60:	46d3      	mov	fp, sl
 8016d62:	f850 2b04 	ldr.w	r2, [r0], #4
 8016d66:	b293      	uxth	r3, r2
 8016d68:	fb05 a303 	mla	r3, r5, r3, sl
 8016d6c:	0c12      	lsrs	r2, r2, #16
 8016d6e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016d72:	fb05 a202 	mla	r2, r5, r2, sl
 8016d76:	b29b      	uxth	r3, r3
 8016d78:	ebab 0303 	sub.w	r3, fp, r3
 8016d7c:	f8de b000 	ldr.w	fp, [lr]
 8016d80:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8016d84:	fa1f fb8b 	uxth.w	fp, fp
 8016d88:	445b      	add	r3, fp
 8016d8a:	fa1f fb82 	uxth.w	fp, r2
 8016d8e:	f8de 2000 	ldr.w	r2, [lr]
 8016d92:	4581      	cmp	r9, r0
 8016d94:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8016d98:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016d9c:	b29b      	uxth	r3, r3
 8016d9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016da2:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8016da6:	f84e 3b04 	str.w	r3, [lr], #4
 8016daa:	d2da      	bcs.n	8016d62 <quorem+0x42>
 8016dac:	f856 300c 	ldr.w	r3, [r6, ip]
 8016db0:	b933      	cbnz	r3, 8016dc0 <quorem+0xa0>
 8016db2:	9b01      	ldr	r3, [sp, #4]
 8016db4:	3b04      	subs	r3, #4
 8016db6:	429e      	cmp	r6, r3
 8016db8:	461a      	mov	r2, r3
 8016dba:	d331      	bcc.n	8016e20 <quorem+0x100>
 8016dbc:	f8c8 4010 	str.w	r4, [r8, #16]
 8016dc0:	4640      	mov	r0, r8
 8016dc2:	f001 fda5 	bl	8018910 <__mcmp>
 8016dc6:	2800      	cmp	r0, #0
 8016dc8:	db26      	blt.n	8016e18 <quorem+0xf8>
 8016dca:	4630      	mov	r0, r6
 8016dcc:	f04f 0c00 	mov.w	ip, #0
 8016dd0:	3501      	adds	r5, #1
 8016dd2:	f857 1b04 	ldr.w	r1, [r7], #4
 8016dd6:	f8d0 e000 	ldr.w	lr, [r0]
 8016dda:	b28b      	uxth	r3, r1
 8016ddc:	ebac 0303 	sub.w	r3, ip, r3
 8016de0:	fa1f f28e 	uxth.w	r2, lr
 8016de4:	4413      	add	r3, r2
 8016de6:	0c0a      	lsrs	r2, r1, #16
 8016de8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8016dec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016df0:	b29b      	uxth	r3, r3
 8016df2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016df6:	45b9      	cmp	r9, r7
 8016df8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8016dfc:	f840 3b04 	str.w	r3, [r0], #4
 8016e00:	d2e7      	bcs.n	8016dd2 <quorem+0xb2>
 8016e02:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8016e06:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8016e0a:	b92a      	cbnz	r2, 8016e18 <quorem+0xf8>
 8016e0c:	3b04      	subs	r3, #4
 8016e0e:	429e      	cmp	r6, r3
 8016e10:	461a      	mov	r2, r3
 8016e12:	d30b      	bcc.n	8016e2c <quorem+0x10c>
 8016e14:	f8c8 4010 	str.w	r4, [r8, #16]
 8016e18:	4628      	mov	r0, r5
 8016e1a:	b003      	add	sp, #12
 8016e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e20:	6812      	ldr	r2, [r2, #0]
 8016e22:	3b04      	subs	r3, #4
 8016e24:	2a00      	cmp	r2, #0
 8016e26:	d1c9      	bne.n	8016dbc <quorem+0x9c>
 8016e28:	3c01      	subs	r4, #1
 8016e2a:	e7c4      	b.n	8016db6 <quorem+0x96>
 8016e2c:	6812      	ldr	r2, [r2, #0]
 8016e2e:	3b04      	subs	r3, #4
 8016e30:	2a00      	cmp	r2, #0
 8016e32:	d1ef      	bne.n	8016e14 <quorem+0xf4>
 8016e34:	3c01      	subs	r4, #1
 8016e36:	e7ea      	b.n	8016e0e <quorem+0xee>
 8016e38:	2000      	movs	r0, #0
 8016e3a:	e7ee      	b.n	8016e1a <quorem+0xfa>
 8016e3c:	0000      	movs	r0, r0
	...

08016e40 <_dtoa_r>:
 8016e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e44:	4616      	mov	r6, r2
 8016e46:	461f      	mov	r7, r3
 8016e48:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016e4a:	b095      	sub	sp, #84	; 0x54
 8016e4c:	4604      	mov	r4, r0
 8016e4e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8016e52:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8016e56:	b93d      	cbnz	r5, 8016e68 <_dtoa_r+0x28>
 8016e58:	2010      	movs	r0, #16
 8016e5a:	f001 fadf 	bl	801841c <malloc>
 8016e5e:	6260      	str	r0, [r4, #36]	; 0x24
 8016e60:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016e64:	6005      	str	r5, [r0, #0]
 8016e66:	60c5      	str	r5, [r0, #12]
 8016e68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016e6a:	6819      	ldr	r1, [r3, #0]
 8016e6c:	b151      	cbz	r1, 8016e84 <_dtoa_r+0x44>
 8016e6e:	685a      	ldr	r2, [r3, #4]
 8016e70:	2301      	movs	r3, #1
 8016e72:	4093      	lsls	r3, r2
 8016e74:	604a      	str	r2, [r1, #4]
 8016e76:	608b      	str	r3, [r1, #8]
 8016e78:	4620      	mov	r0, r4
 8016e7a:	f001 fb2b 	bl	80184d4 <_Bfree>
 8016e7e:	2200      	movs	r2, #0
 8016e80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016e82:	601a      	str	r2, [r3, #0]
 8016e84:	1e3b      	subs	r3, r7, #0
 8016e86:	bfaf      	iteee	ge
 8016e88:	2300      	movge	r3, #0
 8016e8a:	2201      	movlt	r2, #1
 8016e8c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8016e90:	9303      	strlt	r3, [sp, #12]
 8016e92:	bfac      	ite	ge
 8016e94:	f8c8 3000 	strge.w	r3, [r8]
 8016e98:	f8c8 2000 	strlt.w	r2, [r8]
 8016e9c:	4bae      	ldr	r3, [pc, #696]	; (8017158 <_dtoa_r+0x318>)
 8016e9e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8016ea2:	ea33 0308 	bics.w	r3, r3, r8
 8016ea6:	d11b      	bne.n	8016ee0 <_dtoa_r+0xa0>
 8016ea8:	f242 730f 	movw	r3, #9999	; 0x270f
 8016eac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016eae:	6013      	str	r3, [r2, #0]
 8016eb0:	9b02      	ldr	r3, [sp, #8]
 8016eb2:	b923      	cbnz	r3, 8016ebe <_dtoa_r+0x7e>
 8016eb4:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8016eb8:	2800      	cmp	r0, #0
 8016eba:	f000 8545 	beq.w	8017948 <_dtoa_r+0xb08>
 8016ebe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016ec0:	b953      	cbnz	r3, 8016ed8 <_dtoa_r+0x98>
 8016ec2:	4ba6      	ldr	r3, [pc, #664]	; (801715c <_dtoa_r+0x31c>)
 8016ec4:	e021      	b.n	8016f0a <_dtoa_r+0xca>
 8016ec6:	4ba6      	ldr	r3, [pc, #664]	; (8017160 <_dtoa_r+0x320>)
 8016ec8:	9306      	str	r3, [sp, #24]
 8016eca:	3308      	adds	r3, #8
 8016ecc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8016ece:	6013      	str	r3, [r2, #0]
 8016ed0:	9806      	ldr	r0, [sp, #24]
 8016ed2:	b015      	add	sp, #84	; 0x54
 8016ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ed8:	4ba0      	ldr	r3, [pc, #640]	; (801715c <_dtoa_r+0x31c>)
 8016eda:	9306      	str	r3, [sp, #24]
 8016edc:	3303      	adds	r3, #3
 8016ede:	e7f5      	b.n	8016ecc <_dtoa_r+0x8c>
 8016ee0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8016ee4:	2200      	movs	r2, #0
 8016ee6:	2300      	movs	r3, #0
 8016ee8:	4630      	mov	r0, r6
 8016eea:	4639      	mov	r1, r7
 8016eec:	f7e9 fd7e 	bl	80009ec <__aeabi_dcmpeq>
 8016ef0:	4682      	mov	sl, r0
 8016ef2:	b160      	cbz	r0, 8016f0e <_dtoa_r+0xce>
 8016ef4:	2301      	movs	r3, #1
 8016ef6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016ef8:	6013      	str	r3, [r2, #0]
 8016efa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016efc:	2b00      	cmp	r3, #0
 8016efe:	f000 8520 	beq.w	8017942 <_dtoa_r+0xb02>
 8016f02:	4b98      	ldr	r3, [pc, #608]	; (8017164 <_dtoa_r+0x324>)
 8016f04:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8016f06:	6013      	str	r3, [r2, #0]
 8016f08:	3b01      	subs	r3, #1
 8016f0a:	9306      	str	r3, [sp, #24]
 8016f0c:	e7e0      	b.n	8016ed0 <_dtoa_r+0x90>
 8016f0e:	ab12      	add	r3, sp, #72	; 0x48
 8016f10:	9301      	str	r3, [sp, #4]
 8016f12:	ab13      	add	r3, sp, #76	; 0x4c
 8016f14:	9300      	str	r3, [sp, #0]
 8016f16:	4632      	mov	r2, r6
 8016f18:	463b      	mov	r3, r7
 8016f1a:	4620      	mov	r0, r4
 8016f1c:	f001 fde6 	bl	8018aec <__d2b>
 8016f20:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8016f24:	4683      	mov	fp, r0
 8016f26:	2d00      	cmp	r5, #0
 8016f28:	d07d      	beq.n	8017026 <_dtoa_r+0x1e6>
 8016f2a:	46b0      	mov	r8, r6
 8016f2c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016f30:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8016f34:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8016f38:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8016f3c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8016f40:	2200      	movs	r2, #0
 8016f42:	4b89      	ldr	r3, [pc, #548]	; (8017168 <_dtoa_r+0x328>)
 8016f44:	4640      	mov	r0, r8
 8016f46:	4649      	mov	r1, r9
 8016f48:	f7e9 f930 	bl	80001ac <__aeabi_dsub>
 8016f4c:	a37c      	add	r3, pc, #496	; (adr r3, 8017140 <_dtoa_r+0x300>)
 8016f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f52:	f7e9 fae3 	bl	800051c <__aeabi_dmul>
 8016f56:	a37c      	add	r3, pc, #496	; (adr r3, 8017148 <_dtoa_r+0x308>)
 8016f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f5c:	f7e9 f928 	bl	80001b0 <__adddf3>
 8016f60:	4606      	mov	r6, r0
 8016f62:	4628      	mov	r0, r5
 8016f64:	460f      	mov	r7, r1
 8016f66:	f7e9 fa6f 	bl	8000448 <__aeabi_i2d>
 8016f6a:	a379      	add	r3, pc, #484	; (adr r3, 8017150 <_dtoa_r+0x310>)
 8016f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f70:	f7e9 fad4 	bl	800051c <__aeabi_dmul>
 8016f74:	4602      	mov	r2, r0
 8016f76:	460b      	mov	r3, r1
 8016f78:	4630      	mov	r0, r6
 8016f7a:	4639      	mov	r1, r7
 8016f7c:	f7e9 f918 	bl	80001b0 <__adddf3>
 8016f80:	4606      	mov	r6, r0
 8016f82:	460f      	mov	r7, r1
 8016f84:	f7e9 fd7a 	bl	8000a7c <__aeabi_d2iz>
 8016f88:	2200      	movs	r2, #0
 8016f8a:	4682      	mov	sl, r0
 8016f8c:	2300      	movs	r3, #0
 8016f8e:	4630      	mov	r0, r6
 8016f90:	4639      	mov	r1, r7
 8016f92:	f7e9 fd35 	bl	8000a00 <__aeabi_dcmplt>
 8016f96:	b148      	cbz	r0, 8016fac <_dtoa_r+0x16c>
 8016f98:	4650      	mov	r0, sl
 8016f9a:	f7e9 fa55 	bl	8000448 <__aeabi_i2d>
 8016f9e:	4632      	mov	r2, r6
 8016fa0:	463b      	mov	r3, r7
 8016fa2:	f7e9 fd23 	bl	80009ec <__aeabi_dcmpeq>
 8016fa6:	b908      	cbnz	r0, 8016fac <_dtoa_r+0x16c>
 8016fa8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016fac:	f1ba 0f16 	cmp.w	sl, #22
 8016fb0:	d85a      	bhi.n	8017068 <_dtoa_r+0x228>
 8016fb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016fb6:	496d      	ldr	r1, [pc, #436]	; (801716c <_dtoa_r+0x32c>)
 8016fb8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8016fbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016fc0:	f7e9 fd3c 	bl	8000a3c <__aeabi_dcmpgt>
 8016fc4:	2800      	cmp	r0, #0
 8016fc6:	d051      	beq.n	801706c <_dtoa_r+0x22c>
 8016fc8:	2300      	movs	r3, #0
 8016fca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016fce:	930d      	str	r3, [sp, #52]	; 0x34
 8016fd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016fd2:	1b5d      	subs	r5, r3, r5
 8016fd4:	1e6b      	subs	r3, r5, #1
 8016fd6:	9307      	str	r3, [sp, #28]
 8016fd8:	bf43      	ittte	mi
 8016fda:	2300      	movmi	r3, #0
 8016fdc:	f1c5 0901 	rsbmi	r9, r5, #1
 8016fe0:	9307      	strmi	r3, [sp, #28]
 8016fe2:	f04f 0900 	movpl.w	r9, #0
 8016fe6:	f1ba 0f00 	cmp.w	sl, #0
 8016fea:	db41      	blt.n	8017070 <_dtoa_r+0x230>
 8016fec:	9b07      	ldr	r3, [sp, #28]
 8016fee:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8016ff2:	4453      	add	r3, sl
 8016ff4:	9307      	str	r3, [sp, #28]
 8016ff6:	2300      	movs	r3, #0
 8016ff8:	9308      	str	r3, [sp, #32]
 8016ffa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8016ffc:	2b09      	cmp	r3, #9
 8016ffe:	f200 808f 	bhi.w	8017120 <_dtoa_r+0x2e0>
 8017002:	2b05      	cmp	r3, #5
 8017004:	bfc4      	itt	gt
 8017006:	3b04      	subgt	r3, #4
 8017008:	931e      	strgt	r3, [sp, #120]	; 0x78
 801700a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801700c:	bfc8      	it	gt
 801700e:	2500      	movgt	r5, #0
 8017010:	f1a3 0302 	sub.w	r3, r3, #2
 8017014:	bfd8      	it	le
 8017016:	2501      	movle	r5, #1
 8017018:	2b03      	cmp	r3, #3
 801701a:	f200 808d 	bhi.w	8017138 <_dtoa_r+0x2f8>
 801701e:	e8df f003 	tbb	[pc, r3]
 8017022:	7d7b      	.short	0x7d7b
 8017024:	6f2f      	.short	0x6f2f
 8017026:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801702a:	441d      	add	r5, r3
 801702c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8017030:	2820      	cmp	r0, #32
 8017032:	dd13      	ble.n	801705c <_dtoa_r+0x21c>
 8017034:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8017038:	9b02      	ldr	r3, [sp, #8]
 801703a:	fa08 f800 	lsl.w	r8, r8, r0
 801703e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8017042:	fa23 f000 	lsr.w	r0, r3, r0
 8017046:	ea48 0000 	orr.w	r0, r8, r0
 801704a:	f7e9 f9ed 	bl	8000428 <__aeabi_ui2d>
 801704e:	2301      	movs	r3, #1
 8017050:	4680      	mov	r8, r0
 8017052:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8017056:	3d01      	subs	r5, #1
 8017058:	9310      	str	r3, [sp, #64]	; 0x40
 801705a:	e771      	b.n	8016f40 <_dtoa_r+0x100>
 801705c:	9b02      	ldr	r3, [sp, #8]
 801705e:	f1c0 0020 	rsb	r0, r0, #32
 8017062:	fa03 f000 	lsl.w	r0, r3, r0
 8017066:	e7f0      	b.n	801704a <_dtoa_r+0x20a>
 8017068:	2301      	movs	r3, #1
 801706a:	e7b0      	b.n	8016fce <_dtoa_r+0x18e>
 801706c:	900d      	str	r0, [sp, #52]	; 0x34
 801706e:	e7af      	b.n	8016fd0 <_dtoa_r+0x190>
 8017070:	f1ca 0300 	rsb	r3, sl, #0
 8017074:	9308      	str	r3, [sp, #32]
 8017076:	2300      	movs	r3, #0
 8017078:	eba9 090a 	sub.w	r9, r9, sl
 801707c:	930c      	str	r3, [sp, #48]	; 0x30
 801707e:	e7bc      	b.n	8016ffa <_dtoa_r+0x1ba>
 8017080:	2301      	movs	r3, #1
 8017082:	9309      	str	r3, [sp, #36]	; 0x24
 8017084:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017086:	2b00      	cmp	r3, #0
 8017088:	dd74      	ble.n	8017174 <_dtoa_r+0x334>
 801708a:	4698      	mov	r8, r3
 801708c:	9304      	str	r3, [sp, #16]
 801708e:	2200      	movs	r2, #0
 8017090:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8017092:	6072      	str	r2, [r6, #4]
 8017094:	2204      	movs	r2, #4
 8017096:	f102 0014 	add.w	r0, r2, #20
 801709a:	4298      	cmp	r0, r3
 801709c:	6871      	ldr	r1, [r6, #4]
 801709e:	d96e      	bls.n	801717e <_dtoa_r+0x33e>
 80170a0:	4620      	mov	r0, r4
 80170a2:	f001 f9e3 	bl	801846c <_Balloc>
 80170a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80170a8:	6030      	str	r0, [r6, #0]
 80170aa:	681b      	ldr	r3, [r3, #0]
 80170ac:	f1b8 0f0e 	cmp.w	r8, #14
 80170b0:	9306      	str	r3, [sp, #24]
 80170b2:	f200 80ed 	bhi.w	8017290 <_dtoa_r+0x450>
 80170b6:	2d00      	cmp	r5, #0
 80170b8:	f000 80ea 	beq.w	8017290 <_dtoa_r+0x450>
 80170bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80170c0:	f1ba 0f00 	cmp.w	sl, #0
 80170c4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80170c8:	dd77      	ble.n	80171ba <_dtoa_r+0x37a>
 80170ca:	4a28      	ldr	r2, [pc, #160]	; (801716c <_dtoa_r+0x32c>)
 80170cc:	f00a 030f 	and.w	r3, sl, #15
 80170d0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80170d4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80170d8:	06f0      	lsls	r0, r6, #27
 80170da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170de:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80170e2:	d568      	bpl.n	80171b6 <_dtoa_r+0x376>
 80170e4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80170e8:	4b21      	ldr	r3, [pc, #132]	; (8017170 <_dtoa_r+0x330>)
 80170ea:	2503      	movs	r5, #3
 80170ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80170f0:	f7e9 fb3e 	bl	8000770 <__aeabi_ddiv>
 80170f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80170f8:	f006 060f 	and.w	r6, r6, #15
 80170fc:	4f1c      	ldr	r7, [pc, #112]	; (8017170 <_dtoa_r+0x330>)
 80170fe:	e04f      	b.n	80171a0 <_dtoa_r+0x360>
 8017100:	2301      	movs	r3, #1
 8017102:	9309      	str	r3, [sp, #36]	; 0x24
 8017104:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017106:	4453      	add	r3, sl
 8017108:	f103 0801 	add.w	r8, r3, #1
 801710c:	9304      	str	r3, [sp, #16]
 801710e:	4643      	mov	r3, r8
 8017110:	2b01      	cmp	r3, #1
 8017112:	bfb8      	it	lt
 8017114:	2301      	movlt	r3, #1
 8017116:	e7ba      	b.n	801708e <_dtoa_r+0x24e>
 8017118:	2300      	movs	r3, #0
 801711a:	e7b2      	b.n	8017082 <_dtoa_r+0x242>
 801711c:	2300      	movs	r3, #0
 801711e:	e7f0      	b.n	8017102 <_dtoa_r+0x2c2>
 8017120:	2501      	movs	r5, #1
 8017122:	2300      	movs	r3, #0
 8017124:	9509      	str	r5, [sp, #36]	; 0x24
 8017126:	931e      	str	r3, [sp, #120]	; 0x78
 8017128:	f04f 33ff 	mov.w	r3, #4294967295
 801712c:	2200      	movs	r2, #0
 801712e:	9304      	str	r3, [sp, #16]
 8017130:	4698      	mov	r8, r3
 8017132:	2312      	movs	r3, #18
 8017134:	921f      	str	r2, [sp, #124]	; 0x7c
 8017136:	e7aa      	b.n	801708e <_dtoa_r+0x24e>
 8017138:	2301      	movs	r3, #1
 801713a:	9309      	str	r3, [sp, #36]	; 0x24
 801713c:	e7f4      	b.n	8017128 <_dtoa_r+0x2e8>
 801713e:	bf00      	nop
 8017140:	636f4361 	.word	0x636f4361
 8017144:	3fd287a7 	.word	0x3fd287a7
 8017148:	8b60c8b3 	.word	0x8b60c8b3
 801714c:	3fc68a28 	.word	0x3fc68a28
 8017150:	509f79fb 	.word	0x509f79fb
 8017154:	3fd34413 	.word	0x3fd34413
 8017158:	7ff00000 	.word	0x7ff00000
 801715c:	0801e6c1 	.word	0x0801e6c1
 8017160:	0801e6b8 	.word	0x0801e6b8
 8017164:	0801e85c 	.word	0x0801e85c
 8017168:	3ff80000 	.word	0x3ff80000
 801716c:	0801e760 	.word	0x0801e760
 8017170:	0801e738 	.word	0x0801e738
 8017174:	2301      	movs	r3, #1
 8017176:	9304      	str	r3, [sp, #16]
 8017178:	4698      	mov	r8, r3
 801717a:	461a      	mov	r2, r3
 801717c:	e7da      	b.n	8017134 <_dtoa_r+0x2f4>
 801717e:	3101      	adds	r1, #1
 8017180:	6071      	str	r1, [r6, #4]
 8017182:	0052      	lsls	r2, r2, #1
 8017184:	e787      	b.n	8017096 <_dtoa_r+0x256>
 8017186:	07f1      	lsls	r1, r6, #31
 8017188:	d508      	bpl.n	801719c <_dtoa_r+0x35c>
 801718a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801718e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017192:	f7e9 f9c3 	bl	800051c <__aeabi_dmul>
 8017196:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801719a:	3501      	adds	r5, #1
 801719c:	1076      	asrs	r6, r6, #1
 801719e:	3708      	adds	r7, #8
 80171a0:	2e00      	cmp	r6, #0
 80171a2:	d1f0      	bne.n	8017186 <_dtoa_r+0x346>
 80171a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80171a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80171ac:	f7e9 fae0 	bl	8000770 <__aeabi_ddiv>
 80171b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80171b4:	e01b      	b.n	80171ee <_dtoa_r+0x3ae>
 80171b6:	2502      	movs	r5, #2
 80171b8:	e7a0      	b.n	80170fc <_dtoa_r+0x2bc>
 80171ba:	f000 80a4 	beq.w	8017306 <_dtoa_r+0x4c6>
 80171be:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80171c2:	f1ca 0600 	rsb	r6, sl, #0
 80171c6:	4ba0      	ldr	r3, [pc, #640]	; (8017448 <_dtoa_r+0x608>)
 80171c8:	f006 020f 	and.w	r2, r6, #15
 80171cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80171d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171d4:	f7e9 f9a2 	bl	800051c <__aeabi_dmul>
 80171d8:	2502      	movs	r5, #2
 80171da:	2300      	movs	r3, #0
 80171dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80171e0:	4f9a      	ldr	r7, [pc, #616]	; (801744c <_dtoa_r+0x60c>)
 80171e2:	1136      	asrs	r6, r6, #4
 80171e4:	2e00      	cmp	r6, #0
 80171e6:	f040 8083 	bne.w	80172f0 <_dtoa_r+0x4b0>
 80171ea:	2b00      	cmp	r3, #0
 80171ec:	d1e0      	bne.n	80171b0 <_dtoa_r+0x370>
 80171ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80171f0:	2b00      	cmp	r3, #0
 80171f2:	f000 808a 	beq.w	801730a <_dtoa_r+0x4ca>
 80171f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80171fa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80171fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017202:	2200      	movs	r2, #0
 8017204:	4b92      	ldr	r3, [pc, #584]	; (8017450 <_dtoa_r+0x610>)
 8017206:	f7e9 fbfb 	bl	8000a00 <__aeabi_dcmplt>
 801720a:	2800      	cmp	r0, #0
 801720c:	d07d      	beq.n	801730a <_dtoa_r+0x4ca>
 801720e:	f1b8 0f00 	cmp.w	r8, #0
 8017212:	d07a      	beq.n	801730a <_dtoa_r+0x4ca>
 8017214:	9b04      	ldr	r3, [sp, #16]
 8017216:	2b00      	cmp	r3, #0
 8017218:	dd36      	ble.n	8017288 <_dtoa_r+0x448>
 801721a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801721e:	2200      	movs	r2, #0
 8017220:	4b8c      	ldr	r3, [pc, #560]	; (8017454 <_dtoa_r+0x614>)
 8017222:	f7e9 f97b 	bl	800051c <__aeabi_dmul>
 8017226:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801722a:	9e04      	ldr	r6, [sp, #16]
 801722c:	f10a 37ff 	add.w	r7, sl, #4294967295
 8017230:	3501      	adds	r5, #1
 8017232:	4628      	mov	r0, r5
 8017234:	f7e9 f908 	bl	8000448 <__aeabi_i2d>
 8017238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801723c:	f7e9 f96e 	bl	800051c <__aeabi_dmul>
 8017240:	2200      	movs	r2, #0
 8017242:	4b85      	ldr	r3, [pc, #532]	; (8017458 <_dtoa_r+0x618>)
 8017244:	f7e8 ffb4 	bl	80001b0 <__adddf3>
 8017248:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 801724c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8017250:	950b      	str	r5, [sp, #44]	; 0x2c
 8017252:	2e00      	cmp	r6, #0
 8017254:	d15c      	bne.n	8017310 <_dtoa_r+0x4d0>
 8017256:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801725a:	2200      	movs	r2, #0
 801725c:	4b7f      	ldr	r3, [pc, #508]	; (801745c <_dtoa_r+0x61c>)
 801725e:	f7e8 ffa5 	bl	80001ac <__aeabi_dsub>
 8017262:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017264:	462b      	mov	r3, r5
 8017266:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801726a:	f7e9 fbe7 	bl	8000a3c <__aeabi_dcmpgt>
 801726e:	2800      	cmp	r0, #0
 8017270:	f040 8281 	bne.w	8017776 <_dtoa_r+0x936>
 8017274:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017278:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801727a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 801727e:	f7e9 fbbf 	bl	8000a00 <__aeabi_dcmplt>
 8017282:	2800      	cmp	r0, #0
 8017284:	f040 8275 	bne.w	8017772 <_dtoa_r+0x932>
 8017288:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801728c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8017290:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017292:	2b00      	cmp	r3, #0
 8017294:	f2c0 814b 	blt.w	801752e <_dtoa_r+0x6ee>
 8017298:	f1ba 0f0e 	cmp.w	sl, #14
 801729c:	f300 8147 	bgt.w	801752e <_dtoa_r+0x6ee>
 80172a0:	4b69      	ldr	r3, [pc, #420]	; (8017448 <_dtoa_r+0x608>)
 80172a2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80172a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80172ae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80172b0:	2b00      	cmp	r3, #0
 80172b2:	f280 80d7 	bge.w	8017464 <_dtoa_r+0x624>
 80172b6:	f1b8 0f00 	cmp.w	r8, #0
 80172ba:	f300 80d3 	bgt.w	8017464 <_dtoa_r+0x624>
 80172be:	f040 8257 	bne.w	8017770 <_dtoa_r+0x930>
 80172c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80172c6:	2200      	movs	r2, #0
 80172c8:	4b64      	ldr	r3, [pc, #400]	; (801745c <_dtoa_r+0x61c>)
 80172ca:	f7e9 f927 	bl	800051c <__aeabi_dmul>
 80172ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80172d2:	f7e9 fba9 	bl	8000a28 <__aeabi_dcmpge>
 80172d6:	4646      	mov	r6, r8
 80172d8:	4647      	mov	r7, r8
 80172da:	2800      	cmp	r0, #0
 80172dc:	f040 822d 	bne.w	801773a <_dtoa_r+0x8fa>
 80172e0:	9b06      	ldr	r3, [sp, #24]
 80172e2:	9a06      	ldr	r2, [sp, #24]
 80172e4:	1c5d      	adds	r5, r3, #1
 80172e6:	2331      	movs	r3, #49	; 0x31
 80172e8:	f10a 0a01 	add.w	sl, sl, #1
 80172ec:	7013      	strb	r3, [r2, #0]
 80172ee:	e228      	b.n	8017742 <_dtoa_r+0x902>
 80172f0:	07f2      	lsls	r2, r6, #31
 80172f2:	d505      	bpl.n	8017300 <_dtoa_r+0x4c0>
 80172f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80172f8:	f7e9 f910 	bl	800051c <__aeabi_dmul>
 80172fc:	2301      	movs	r3, #1
 80172fe:	3501      	adds	r5, #1
 8017300:	1076      	asrs	r6, r6, #1
 8017302:	3708      	adds	r7, #8
 8017304:	e76e      	b.n	80171e4 <_dtoa_r+0x3a4>
 8017306:	2502      	movs	r5, #2
 8017308:	e771      	b.n	80171ee <_dtoa_r+0x3ae>
 801730a:	4657      	mov	r7, sl
 801730c:	4646      	mov	r6, r8
 801730e:	e790      	b.n	8017232 <_dtoa_r+0x3f2>
 8017310:	4b4d      	ldr	r3, [pc, #308]	; (8017448 <_dtoa_r+0x608>)
 8017312:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8017316:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801731a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801731c:	2b00      	cmp	r3, #0
 801731e:	d048      	beq.n	80173b2 <_dtoa_r+0x572>
 8017320:	4602      	mov	r2, r0
 8017322:	460b      	mov	r3, r1
 8017324:	2000      	movs	r0, #0
 8017326:	494e      	ldr	r1, [pc, #312]	; (8017460 <_dtoa_r+0x620>)
 8017328:	f7e9 fa22 	bl	8000770 <__aeabi_ddiv>
 801732c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017330:	f7e8 ff3c 	bl	80001ac <__aeabi_dsub>
 8017334:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8017338:	9d06      	ldr	r5, [sp, #24]
 801733a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801733e:	f7e9 fb9d 	bl	8000a7c <__aeabi_d2iz>
 8017342:	9011      	str	r0, [sp, #68]	; 0x44
 8017344:	f7e9 f880 	bl	8000448 <__aeabi_i2d>
 8017348:	4602      	mov	r2, r0
 801734a:	460b      	mov	r3, r1
 801734c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017350:	f7e8 ff2c 	bl	80001ac <__aeabi_dsub>
 8017354:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017356:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801735a:	3330      	adds	r3, #48	; 0x30
 801735c:	f805 3b01 	strb.w	r3, [r5], #1
 8017360:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017364:	f7e9 fb4c 	bl	8000a00 <__aeabi_dcmplt>
 8017368:	2800      	cmp	r0, #0
 801736a:	d163      	bne.n	8017434 <_dtoa_r+0x5f4>
 801736c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017370:	2000      	movs	r0, #0
 8017372:	4937      	ldr	r1, [pc, #220]	; (8017450 <_dtoa_r+0x610>)
 8017374:	f7e8 ff1a 	bl	80001ac <__aeabi_dsub>
 8017378:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801737c:	f7e9 fb40 	bl	8000a00 <__aeabi_dcmplt>
 8017380:	2800      	cmp	r0, #0
 8017382:	f040 80b5 	bne.w	80174f0 <_dtoa_r+0x6b0>
 8017386:	9b06      	ldr	r3, [sp, #24]
 8017388:	1aeb      	subs	r3, r5, r3
 801738a:	429e      	cmp	r6, r3
 801738c:	f77f af7c 	ble.w	8017288 <_dtoa_r+0x448>
 8017390:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017394:	2200      	movs	r2, #0
 8017396:	4b2f      	ldr	r3, [pc, #188]	; (8017454 <_dtoa_r+0x614>)
 8017398:	f7e9 f8c0 	bl	800051c <__aeabi_dmul>
 801739c:	2200      	movs	r2, #0
 801739e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80173a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80173a6:	4b2b      	ldr	r3, [pc, #172]	; (8017454 <_dtoa_r+0x614>)
 80173a8:	f7e9 f8b8 	bl	800051c <__aeabi_dmul>
 80173ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80173b0:	e7c3      	b.n	801733a <_dtoa_r+0x4fa>
 80173b2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80173b6:	f7e9 f8b1 	bl	800051c <__aeabi_dmul>
 80173ba:	9b06      	ldr	r3, [sp, #24]
 80173bc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80173c0:	199d      	adds	r5, r3, r6
 80173c2:	461e      	mov	r6, r3
 80173c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80173c8:	f7e9 fb58 	bl	8000a7c <__aeabi_d2iz>
 80173cc:	9011      	str	r0, [sp, #68]	; 0x44
 80173ce:	f7e9 f83b 	bl	8000448 <__aeabi_i2d>
 80173d2:	4602      	mov	r2, r0
 80173d4:	460b      	mov	r3, r1
 80173d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80173da:	f7e8 fee7 	bl	80001ac <__aeabi_dsub>
 80173de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80173e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80173e4:	3330      	adds	r3, #48	; 0x30
 80173e6:	f806 3b01 	strb.w	r3, [r6], #1
 80173ea:	42ae      	cmp	r6, r5
 80173ec:	f04f 0200 	mov.w	r2, #0
 80173f0:	d124      	bne.n	801743c <_dtoa_r+0x5fc>
 80173f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80173f6:	4b1a      	ldr	r3, [pc, #104]	; (8017460 <_dtoa_r+0x620>)
 80173f8:	f7e8 feda 	bl	80001b0 <__adddf3>
 80173fc:	4602      	mov	r2, r0
 80173fe:	460b      	mov	r3, r1
 8017400:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017404:	f7e9 fb1a 	bl	8000a3c <__aeabi_dcmpgt>
 8017408:	2800      	cmp	r0, #0
 801740a:	d171      	bne.n	80174f0 <_dtoa_r+0x6b0>
 801740c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017410:	2000      	movs	r0, #0
 8017412:	4913      	ldr	r1, [pc, #76]	; (8017460 <_dtoa_r+0x620>)
 8017414:	f7e8 feca 	bl	80001ac <__aeabi_dsub>
 8017418:	4602      	mov	r2, r0
 801741a:	460b      	mov	r3, r1
 801741c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017420:	f7e9 faee 	bl	8000a00 <__aeabi_dcmplt>
 8017424:	2800      	cmp	r0, #0
 8017426:	f43f af2f 	beq.w	8017288 <_dtoa_r+0x448>
 801742a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801742e:	1e6a      	subs	r2, r5, #1
 8017430:	2b30      	cmp	r3, #48	; 0x30
 8017432:	d001      	beq.n	8017438 <_dtoa_r+0x5f8>
 8017434:	46ba      	mov	sl, r7
 8017436:	e04a      	b.n	80174ce <_dtoa_r+0x68e>
 8017438:	4615      	mov	r5, r2
 801743a:	e7f6      	b.n	801742a <_dtoa_r+0x5ea>
 801743c:	4b05      	ldr	r3, [pc, #20]	; (8017454 <_dtoa_r+0x614>)
 801743e:	f7e9 f86d 	bl	800051c <__aeabi_dmul>
 8017442:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017446:	e7bd      	b.n	80173c4 <_dtoa_r+0x584>
 8017448:	0801e760 	.word	0x0801e760
 801744c:	0801e738 	.word	0x0801e738
 8017450:	3ff00000 	.word	0x3ff00000
 8017454:	40240000 	.word	0x40240000
 8017458:	401c0000 	.word	0x401c0000
 801745c:	40140000 	.word	0x40140000
 8017460:	3fe00000 	.word	0x3fe00000
 8017464:	9d06      	ldr	r5, [sp, #24]
 8017466:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801746a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801746e:	4630      	mov	r0, r6
 8017470:	4639      	mov	r1, r7
 8017472:	f7e9 f97d 	bl	8000770 <__aeabi_ddiv>
 8017476:	f7e9 fb01 	bl	8000a7c <__aeabi_d2iz>
 801747a:	4681      	mov	r9, r0
 801747c:	f7e8 ffe4 	bl	8000448 <__aeabi_i2d>
 8017480:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017484:	f7e9 f84a 	bl	800051c <__aeabi_dmul>
 8017488:	4602      	mov	r2, r0
 801748a:	460b      	mov	r3, r1
 801748c:	4630      	mov	r0, r6
 801748e:	4639      	mov	r1, r7
 8017490:	f7e8 fe8c 	bl	80001ac <__aeabi_dsub>
 8017494:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8017498:	f805 6b01 	strb.w	r6, [r5], #1
 801749c:	9e06      	ldr	r6, [sp, #24]
 801749e:	4602      	mov	r2, r0
 80174a0:	1bae      	subs	r6, r5, r6
 80174a2:	45b0      	cmp	r8, r6
 80174a4:	460b      	mov	r3, r1
 80174a6:	d135      	bne.n	8017514 <_dtoa_r+0x6d4>
 80174a8:	f7e8 fe82 	bl	80001b0 <__adddf3>
 80174ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80174b0:	4606      	mov	r6, r0
 80174b2:	460f      	mov	r7, r1
 80174b4:	f7e9 fac2 	bl	8000a3c <__aeabi_dcmpgt>
 80174b8:	b9c8      	cbnz	r0, 80174ee <_dtoa_r+0x6ae>
 80174ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80174be:	4630      	mov	r0, r6
 80174c0:	4639      	mov	r1, r7
 80174c2:	f7e9 fa93 	bl	80009ec <__aeabi_dcmpeq>
 80174c6:	b110      	cbz	r0, 80174ce <_dtoa_r+0x68e>
 80174c8:	f019 0f01 	tst.w	r9, #1
 80174cc:	d10f      	bne.n	80174ee <_dtoa_r+0x6ae>
 80174ce:	4659      	mov	r1, fp
 80174d0:	4620      	mov	r0, r4
 80174d2:	f000 ffff 	bl	80184d4 <_Bfree>
 80174d6:	2300      	movs	r3, #0
 80174d8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80174da:	702b      	strb	r3, [r5, #0]
 80174dc:	f10a 0301 	add.w	r3, sl, #1
 80174e0:	6013      	str	r3, [r2, #0]
 80174e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80174e4:	2b00      	cmp	r3, #0
 80174e6:	f43f acf3 	beq.w	8016ed0 <_dtoa_r+0x90>
 80174ea:	601d      	str	r5, [r3, #0]
 80174ec:	e4f0      	b.n	8016ed0 <_dtoa_r+0x90>
 80174ee:	4657      	mov	r7, sl
 80174f0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80174f4:	1e6b      	subs	r3, r5, #1
 80174f6:	2a39      	cmp	r2, #57	; 0x39
 80174f8:	d106      	bne.n	8017508 <_dtoa_r+0x6c8>
 80174fa:	9a06      	ldr	r2, [sp, #24]
 80174fc:	429a      	cmp	r2, r3
 80174fe:	d107      	bne.n	8017510 <_dtoa_r+0x6d0>
 8017500:	2330      	movs	r3, #48	; 0x30
 8017502:	7013      	strb	r3, [r2, #0]
 8017504:	4613      	mov	r3, r2
 8017506:	3701      	adds	r7, #1
 8017508:	781a      	ldrb	r2, [r3, #0]
 801750a:	3201      	adds	r2, #1
 801750c:	701a      	strb	r2, [r3, #0]
 801750e:	e791      	b.n	8017434 <_dtoa_r+0x5f4>
 8017510:	461d      	mov	r5, r3
 8017512:	e7ed      	b.n	80174f0 <_dtoa_r+0x6b0>
 8017514:	2200      	movs	r2, #0
 8017516:	4b99      	ldr	r3, [pc, #612]	; (801777c <_dtoa_r+0x93c>)
 8017518:	f7e9 f800 	bl	800051c <__aeabi_dmul>
 801751c:	2200      	movs	r2, #0
 801751e:	2300      	movs	r3, #0
 8017520:	4606      	mov	r6, r0
 8017522:	460f      	mov	r7, r1
 8017524:	f7e9 fa62 	bl	80009ec <__aeabi_dcmpeq>
 8017528:	2800      	cmp	r0, #0
 801752a:	d09e      	beq.n	801746a <_dtoa_r+0x62a>
 801752c:	e7cf      	b.n	80174ce <_dtoa_r+0x68e>
 801752e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017530:	2a00      	cmp	r2, #0
 8017532:	f000 8088 	beq.w	8017646 <_dtoa_r+0x806>
 8017536:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8017538:	2a01      	cmp	r2, #1
 801753a:	dc6d      	bgt.n	8017618 <_dtoa_r+0x7d8>
 801753c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801753e:	2a00      	cmp	r2, #0
 8017540:	d066      	beq.n	8017610 <_dtoa_r+0x7d0>
 8017542:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8017546:	464d      	mov	r5, r9
 8017548:	9e08      	ldr	r6, [sp, #32]
 801754a:	9a07      	ldr	r2, [sp, #28]
 801754c:	2101      	movs	r1, #1
 801754e:	441a      	add	r2, r3
 8017550:	4620      	mov	r0, r4
 8017552:	4499      	add	r9, r3
 8017554:	9207      	str	r2, [sp, #28]
 8017556:	f001 f89b 	bl	8018690 <__i2b>
 801755a:	4607      	mov	r7, r0
 801755c:	2d00      	cmp	r5, #0
 801755e:	dd0b      	ble.n	8017578 <_dtoa_r+0x738>
 8017560:	9b07      	ldr	r3, [sp, #28]
 8017562:	2b00      	cmp	r3, #0
 8017564:	dd08      	ble.n	8017578 <_dtoa_r+0x738>
 8017566:	42ab      	cmp	r3, r5
 8017568:	bfa8      	it	ge
 801756a:	462b      	movge	r3, r5
 801756c:	9a07      	ldr	r2, [sp, #28]
 801756e:	eba9 0903 	sub.w	r9, r9, r3
 8017572:	1aed      	subs	r5, r5, r3
 8017574:	1ad3      	subs	r3, r2, r3
 8017576:	9307      	str	r3, [sp, #28]
 8017578:	9b08      	ldr	r3, [sp, #32]
 801757a:	b1eb      	cbz	r3, 80175b8 <_dtoa_r+0x778>
 801757c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801757e:	2b00      	cmp	r3, #0
 8017580:	d065      	beq.n	801764e <_dtoa_r+0x80e>
 8017582:	b18e      	cbz	r6, 80175a8 <_dtoa_r+0x768>
 8017584:	4639      	mov	r1, r7
 8017586:	4632      	mov	r2, r6
 8017588:	4620      	mov	r0, r4
 801758a:	f001 f91f 	bl	80187cc <__pow5mult>
 801758e:	465a      	mov	r2, fp
 8017590:	4601      	mov	r1, r0
 8017592:	4607      	mov	r7, r0
 8017594:	4620      	mov	r0, r4
 8017596:	f001 f884 	bl	80186a2 <__multiply>
 801759a:	4659      	mov	r1, fp
 801759c:	900a      	str	r0, [sp, #40]	; 0x28
 801759e:	4620      	mov	r0, r4
 80175a0:	f000 ff98 	bl	80184d4 <_Bfree>
 80175a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80175a6:	469b      	mov	fp, r3
 80175a8:	9b08      	ldr	r3, [sp, #32]
 80175aa:	1b9a      	subs	r2, r3, r6
 80175ac:	d004      	beq.n	80175b8 <_dtoa_r+0x778>
 80175ae:	4659      	mov	r1, fp
 80175b0:	4620      	mov	r0, r4
 80175b2:	f001 f90b 	bl	80187cc <__pow5mult>
 80175b6:	4683      	mov	fp, r0
 80175b8:	2101      	movs	r1, #1
 80175ba:	4620      	mov	r0, r4
 80175bc:	f001 f868 	bl	8018690 <__i2b>
 80175c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80175c2:	4606      	mov	r6, r0
 80175c4:	2b00      	cmp	r3, #0
 80175c6:	f000 81c6 	beq.w	8017956 <_dtoa_r+0xb16>
 80175ca:	461a      	mov	r2, r3
 80175cc:	4601      	mov	r1, r0
 80175ce:	4620      	mov	r0, r4
 80175d0:	f001 f8fc 	bl	80187cc <__pow5mult>
 80175d4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80175d6:	4606      	mov	r6, r0
 80175d8:	2b01      	cmp	r3, #1
 80175da:	dc3e      	bgt.n	801765a <_dtoa_r+0x81a>
 80175dc:	9b02      	ldr	r3, [sp, #8]
 80175de:	2b00      	cmp	r3, #0
 80175e0:	d137      	bne.n	8017652 <_dtoa_r+0x812>
 80175e2:	9b03      	ldr	r3, [sp, #12]
 80175e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80175e8:	2b00      	cmp	r3, #0
 80175ea:	d134      	bne.n	8017656 <_dtoa_r+0x816>
 80175ec:	9b03      	ldr	r3, [sp, #12]
 80175ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80175f2:	0d1b      	lsrs	r3, r3, #20
 80175f4:	051b      	lsls	r3, r3, #20
 80175f6:	b12b      	cbz	r3, 8017604 <_dtoa_r+0x7c4>
 80175f8:	9b07      	ldr	r3, [sp, #28]
 80175fa:	f109 0901 	add.w	r9, r9, #1
 80175fe:	3301      	adds	r3, #1
 8017600:	9307      	str	r3, [sp, #28]
 8017602:	2301      	movs	r3, #1
 8017604:	9308      	str	r3, [sp, #32]
 8017606:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017608:	2b00      	cmp	r3, #0
 801760a:	d128      	bne.n	801765e <_dtoa_r+0x81e>
 801760c:	2001      	movs	r0, #1
 801760e:	e02e      	b.n	801766e <_dtoa_r+0x82e>
 8017610:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017612:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8017616:	e796      	b.n	8017546 <_dtoa_r+0x706>
 8017618:	9b08      	ldr	r3, [sp, #32]
 801761a:	f108 36ff 	add.w	r6, r8, #4294967295
 801761e:	42b3      	cmp	r3, r6
 8017620:	bfb7      	itett	lt
 8017622:	9b08      	ldrlt	r3, [sp, #32]
 8017624:	1b9e      	subge	r6, r3, r6
 8017626:	1af2      	sublt	r2, r6, r3
 8017628:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 801762a:	bfbf      	itttt	lt
 801762c:	9608      	strlt	r6, [sp, #32]
 801762e:	189b      	addlt	r3, r3, r2
 8017630:	930c      	strlt	r3, [sp, #48]	; 0x30
 8017632:	2600      	movlt	r6, #0
 8017634:	f1b8 0f00 	cmp.w	r8, #0
 8017638:	bfb9      	ittee	lt
 801763a:	eba9 0508 	sublt.w	r5, r9, r8
 801763e:	2300      	movlt	r3, #0
 8017640:	464d      	movge	r5, r9
 8017642:	4643      	movge	r3, r8
 8017644:	e781      	b.n	801754a <_dtoa_r+0x70a>
 8017646:	9e08      	ldr	r6, [sp, #32]
 8017648:	464d      	mov	r5, r9
 801764a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801764c:	e786      	b.n	801755c <_dtoa_r+0x71c>
 801764e:	9a08      	ldr	r2, [sp, #32]
 8017650:	e7ad      	b.n	80175ae <_dtoa_r+0x76e>
 8017652:	2300      	movs	r3, #0
 8017654:	e7d6      	b.n	8017604 <_dtoa_r+0x7c4>
 8017656:	9b02      	ldr	r3, [sp, #8]
 8017658:	e7d4      	b.n	8017604 <_dtoa_r+0x7c4>
 801765a:	2300      	movs	r3, #0
 801765c:	9308      	str	r3, [sp, #32]
 801765e:	6933      	ldr	r3, [r6, #16]
 8017660:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8017664:	6918      	ldr	r0, [r3, #16]
 8017666:	f000 ffc5 	bl	80185f4 <__hi0bits>
 801766a:	f1c0 0020 	rsb	r0, r0, #32
 801766e:	9b07      	ldr	r3, [sp, #28]
 8017670:	4418      	add	r0, r3
 8017672:	f010 001f 	ands.w	r0, r0, #31
 8017676:	d047      	beq.n	8017708 <_dtoa_r+0x8c8>
 8017678:	f1c0 0320 	rsb	r3, r0, #32
 801767c:	2b04      	cmp	r3, #4
 801767e:	dd3b      	ble.n	80176f8 <_dtoa_r+0x8b8>
 8017680:	9b07      	ldr	r3, [sp, #28]
 8017682:	f1c0 001c 	rsb	r0, r0, #28
 8017686:	4481      	add	r9, r0
 8017688:	4405      	add	r5, r0
 801768a:	4403      	add	r3, r0
 801768c:	9307      	str	r3, [sp, #28]
 801768e:	f1b9 0f00 	cmp.w	r9, #0
 8017692:	dd05      	ble.n	80176a0 <_dtoa_r+0x860>
 8017694:	4659      	mov	r1, fp
 8017696:	464a      	mov	r2, r9
 8017698:	4620      	mov	r0, r4
 801769a:	f001 f8e5 	bl	8018868 <__lshift>
 801769e:	4683      	mov	fp, r0
 80176a0:	9b07      	ldr	r3, [sp, #28]
 80176a2:	2b00      	cmp	r3, #0
 80176a4:	dd05      	ble.n	80176b2 <_dtoa_r+0x872>
 80176a6:	4631      	mov	r1, r6
 80176a8:	461a      	mov	r2, r3
 80176aa:	4620      	mov	r0, r4
 80176ac:	f001 f8dc 	bl	8018868 <__lshift>
 80176b0:	4606      	mov	r6, r0
 80176b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80176b4:	b353      	cbz	r3, 801770c <_dtoa_r+0x8cc>
 80176b6:	4631      	mov	r1, r6
 80176b8:	4658      	mov	r0, fp
 80176ba:	f001 f929 	bl	8018910 <__mcmp>
 80176be:	2800      	cmp	r0, #0
 80176c0:	da24      	bge.n	801770c <_dtoa_r+0x8cc>
 80176c2:	2300      	movs	r3, #0
 80176c4:	4659      	mov	r1, fp
 80176c6:	220a      	movs	r2, #10
 80176c8:	4620      	mov	r0, r4
 80176ca:	f000 ff1a 	bl	8018502 <__multadd>
 80176ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80176d0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80176d4:	4683      	mov	fp, r0
 80176d6:	2b00      	cmp	r3, #0
 80176d8:	f000 8144 	beq.w	8017964 <_dtoa_r+0xb24>
 80176dc:	2300      	movs	r3, #0
 80176de:	4639      	mov	r1, r7
 80176e0:	220a      	movs	r2, #10
 80176e2:	4620      	mov	r0, r4
 80176e4:	f000 ff0d 	bl	8018502 <__multadd>
 80176e8:	9b04      	ldr	r3, [sp, #16]
 80176ea:	4607      	mov	r7, r0
 80176ec:	2b00      	cmp	r3, #0
 80176ee:	dc4d      	bgt.n	801778c <_dtoa_r+0x94c>
 80176f0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80176f2:	2b02      	cmp	r3, #2
 80176f4:	dd4a      	ble.n	801778c <_dtoa_r+0x94c>
 80176f6:	e011      	b.n	801771c <_dtoa_r+0x8dc>
 80176f8:	d0c9      	beq.n	801768e <_dtoa_r+0x84e>
 80176fa:	9a07      	ldr	r2, [sp, #28]
 80176fc:	331c      	adds	r3, #28
 80176fe:	441a      	add	r2, r3
 8017700:	4499      	add	r9, r3
 8017702:	441d      	add	r5, r3
 8017704:	4613      	mov	r3, r2
 8017706:	e7c1      	b.n	801768c <_dtoa_r+0x84c>
 8017708:	4603      	mov	r3, r0
 801770a:	e7f6      	b.n	80176fa <_dtoa_r+0x8ba>
 801770c:	f1b8 0f00 	cmp.w	r8, #0
 8017710:	dc36      	bgt.n	8017780 <_dtoa_r+0x940>
 8017712:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8017714:	2b02      	cmp	r3, #2
 8017716:	dd33      	ble.n	8017780 <_dtoa_r+0x940>
 8017718:	f8cd 8010 	str.w	r8, [sp, #16]
 801771c:	9b04      	ldr	r3, [sp, #16]
 801771e:	b963      	cbnz	r3, 801773a <_dtoa_r+0x8fa>
 8017720:	4631      	mov	r1, r6
 8017722:	2205      	movs	r2, #5
 8017724:	4620      	mov	r0, r4
 8017726:	f000 feec 	bl	8018502 <__multadd>
 801772a:	4601      	mov	r1, r0
 801772c:	4606      	mov	r6, r0
 801772e:	4658      	mov	r0, fp
 8017730:	f001 f8ee 	bl	8018910 <__mcmp>
 8017734:	2800      	cmp	r0, #0
 8017736:	f73f add3 	bgt.w	80172e0 <_dtoa_r+0x4a0>
 801773a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801773c:	9d06      	ldr	r5, [sp, #24]
 801773e:	ea6f 0a03 	mvn.w	sl, r3
 8017742:	f04f 0900 	mov.w	r9, #0
 8017746:	4631      	mov	r1, r6
 8017748:	4620      	mov	r0, r4
 801774a:	f000 fec3 	bl	80184d4 <_Bfree>
 801774e:	2f00      	cmp	r7, #0
 8017750:	f43f aebd 	beq.w	80174ce <_dtoa_r+0x68e>
 8017754:	f1b9 0f00 	cmp.w	r9, #0
 8017758:	d005      	beq.n	8017766 <_dtoa_r+0x926>
 801775a:	45b9      	cmp	r9, r7
 801775c:	d003      	beq.n	8017766 <_dtoa_r+0x926>
 801775e:	4649      	mov	r1, r9
 8017760:	4620      	mov	r0, r4
 8017762:	f000 feb7 	bl	80184d4 <_Bfree>
 8017766:	4639      	mov	r1, r7
 8017768:	4620      	mov	r0, r4
 801776a:	f000 feb3 	bl	80184d4 <_Bfree>
 801776e:	e6ae      	b.n	80174ce <_dtoa_r+0x68e>
 8017770:	2600      	movs	r6, #0
 8017772:	4637      	mov	r7, r6
 8017774:	e7e1      	b.n	801773a <_dtoa_r+0x8fa>
 8017776:	46ba      	mov	sl, r7
 8017778:	4637      	mov	r7, r6
 801777a:	e5b1      	b.n	80172e0 <_dtoa_r+0x4a0>
 801777c:	40240000 	.word	0x40240000
 8017780:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017782:	f8cd 8010 	str.w	r8, [sp, #16]
 8017786:	2b00      	cmp	r3, #0
 8017788:	f000 80f3 	beq.w	8017972 <_dtoa_r+0xb32>
 801778c:	2d00      	cmp	r5, #0
 801778e:	dd05      	ble.n	801779c <_dtoa_r+0x95c>
 8017790:	4639      	mov	r1, r7
 8017792:	462a      	mov	r2, r5
 8017794:	4620      	mov	r0, r4
 8017796:	f001 f867 	bl	8018868 <__lshift>
 801779a:	4607      	mov	r7, r0
 801779c:	9b08      	ldr	r3, [sp, #32]
 801779e:	2b00      	cmp	r3, #0
 80177a0:	d04c      	beq.n	801783c <_dtoa_r+0x9fc>
 80177a2:	6879      	ldr	r1, [r7, #4]
 80177a4:	4620      	mov	r0, r4
 80177a6:	f000 fe61 	bl	801846c <_Balloc>
 80177aa:	4605      	mov	r5, r0
 80177ac:	693a      	ldr	r2, [r7, #16]
 80177ae:	f107 010c 	add.w	r1, r7, #12
 80177b2:	3202      	adds	r2, #2
 80177b4:	0092      	lsls	r2, r2, #2
 80177b6:	300c      	adds	r0, #12
 80177b8:	f7fd fb70 	bl	8014e9c <memcpy>
 80177bc:	2201      	movs	r2, #1
 80177be:	4629      	mov	r1, r5
 80177c0:	4620      	mov	r0, r4
 80177c2:	f001 f851 	bl	8018868 <__lshift>
 80177c6:	46b9      	mov	r9, r7
 80177c8:	4607      	mov	r7, r0
 80177ca:	9b06      	ldr	r3, [sp, #24]
 80177cc:	9307      	str	r3, [sp, #28]
 80177ce:	9b02      	ldr	r3, [sp, #8]
 80177d0:	f003 0301 	and.w	r3, r3, #1
 80177d4:	9308      	str	r3, [sp, #32]
 80177d6:	4631      	mov	r1, r6
 80177d8:	4658      	mov	r0, fp
 80177da:	f7ff faa1 	bl	8016d20 <quorem>
 80177de:	4649      	mov	r1, r9
 80177e0:	4605      	mov	r5, r0
 80177e2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80177e6:	4658      	mov	r0, fp
 80177e8:	f001 f892 	bl	8018910 <__mcmp>
 80177ec:	463a      	mov	r2, r7
 80177ee:	9002      	str	r0, [sp, #8]
 80177f0:	4631      	mov	r1, r6
 80177f2:	4620      	mov	r0, r4
 80177f4:	f001 f8a6 	bl	8018944 <__mdiff>
 80177f8:	68c3      	ldr	r3, [r0, #12]
 80177fa:	4602      	mov	r2, r0
 80177fc:	bb03      	cbnz	r3, 8017840 <_dtoa_r+0xa00>
 80177fe:	4601      	mov	r1, r0
 8017800:	9009      	str	r0, [sp, #36]	; 0x24
 8017802:	4658      	mov	r0, fp
 8017804:	f001 f884 	bl	8018910 <__mcmp>
 8017808:	4603      	mov	r3, r0
 801780a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801780c:	4611      	mov	r1, r2
 801780e:	4620      	mov	r0, r4
 8017810:	9309      	str	r3, [sp, #36]	; 0x24
 8017812:	f000 fe5f 	bl	80184d4 <_Bfree>
 8017816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017818:	b9a3      	cbnz	r3, 8017844 <_dtoa_r+0xa04>
 801781a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801781c:	b992      	cbnz	r2, 8017844 <_dtoa_r+0xa04>
 801781e:	9a08      	ldr	r2, [sp, #32]
 8017820:	b982      	cbnz	r2, 8017844 <_dtoa_r+0xa04>
 8017822:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017826:	d029      	beq.n	801787c <_dtoa_r+0xa3c>
 8017828:	9b02      	ldr	r3, [sp, #8]
 801782a:	2b00      	cmp	r3, #0
 801782c:	dd01      	ble.n	8017832 <_dtoa_r+0x9f2>
 801782e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8017832:	9b07      	ldr	r3, [sp, #28]
 8017834:	1c5d      	adds	r5, r3, #1
 8017836:	f883 8000 	strb.w	r8, [r3]
 801783a:	e784      	b.n	8017746 <_dtoa_r+0x906>
 801783c:	4638      	mov	r0, r7
 801783e:	e7c2      	b.n	80177c6 <_dtoa_r+0x986>
 8017840:	2301      	movs	r3, #1
 8017842:	e7e3      	b.n	801780c <_dtoa_r+0x9cc>
 8017844:	9a02      	ldr	r2, [sp, #8]
 8017846:	2a00      	cmp	r2, #0
 8017848:	db04      	blt.n	8017854 <_dtoa_r+0xa14>
 801784a:	d123      	bne.n	8017894 <_dtoa_r+0xa54>
 801784c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801784e:	bb0a      	cbnz	r2, 8017894 <_dtoa_r+0xa54>
 8017850:	9a08      	ldr	r2, [sp, #32]
 8017852:	b9fa      	cbnz	r2, 8017894 <_dtoa_r+0xa54>
 8017854:	2b00      	cmp	r3, #0
 8017856:	ddec      	ble.n	8017832 <_dtoa_r+0x9f2>
 8017858:	4659      	mov	r1, fp
 801785a:	2201      	movs	r2, #1
 801785c:	4620      	mov	r0, r4
 801785e:	f001 f803 	bl	8018868 <__lshift>
 8017862:	4631      	mov	r1, r6
 8017864:	4683      	mov	fp, r0
 8017866:	f001 f853 	bl	8018910 <__mcmp>
 801786a:	2800      	cmp	r0, #0
 801786c:	dc03      	bgt.n	8017876 <_dtoa_r+0xa36>
 801786e:	d1e0      	bne.n	8017832 <_dtoa_r+0x9f2>
 8017870:	f018 0f01 	tst.w	r8, #1
 8017874:	d0dd      	beq.n	8017832 <_dtoa_r+0x9f2>
 8017876:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801787a:	d1d8      	bne.n	801782e <_dtoa_r+0x9ee>
 801787c:	9b07      	ldr	r3, [sp, #28]
 801787e:	9a07      	ldr	r2, [sp, #28]
 8017880:	1c5d      	adds	r5, r3, #1
 8017882:	2339      	movs	r3, #57	; 0x39
 8017884:	7013      	strb	r3, [r2, #0]
 8017886:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801788a:	1e6a      	subs	r2, r5, #1
 801788c:	2b39      	cmp	r3, #57	; 0x39
 801788e:	d04d      	beq.n	801792c <_dtoa_r+0xaec>
 8017890:	3301      	adds	r3, #1
 8017892:	e052      	b.n	801793a <_dtoa_r+0xafa>
 8017894:	9a07      	ldr	r2, [sp, #28]
 8017896:	2b00      	cmp	r3, #0
 8017898:	f102 0501 	add.w	r5, r2, #1
 801789c:	dd06      	ble.n	80178ac <_dtoa_r+0xa6c>
 801789e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80178a2:	d0eb      	beq.n	801787c <_dtoa_r+0xa3c>
 80178a4:	f108 0801 	add.w	r8, r8, #1
 80178a8:	9b07      	ldr	r3, [sp, #28]
 80178aa:	e7c4      	b.n	8017836 <_dtoa_r+0x9f6>
 80178ac:	9b06      	ldr	r3, [sp, #24]
 80178ae:	9a04      	ldr	r2, [sp, #16]
 80178b0:	1aeb      	subs	r3, r5, r3
 80178b2:	4293      	cmp	r3, r2
 80178b4:	f805 8c01 	strb.w	r8, [r5, #-1]
 80178b8:	d021      	beq.n	80178fe <_dtoa_r+0xabe>
 80178ba:	4659      	mov	r1, fp
 80178bc:	2300      	movs	r3, #0
 80178be:	220a      	movs	r2, #10
 80178c0:	4620      	mov	r0, r4
 80178c2:	f000 fe1e 	bl	8018502 <__multadd>
 80178c6:	45b9      	cmp	r9, r7
 80178c8:	4683      	mov	fp, r0
 80178ca:	f04f 0300 	mov.w	r3, #0
 80178ce:	f04f 020a 	mov.w	r2, #10
 80178d2:	4649      	mov	r1, r9
 80178d4:	4620      	mov	r0, r4
 80178d6:	d105      	bne.n	80178e4 <_dtoa_r+0xaa4>
 80178d8:	f000 fe13 	bl	8018502 <__multadd>
 80178dc:	4681      	mov	r9, r0
 80178de:	4607      	mov	r7, r0
 80178e0:	9507      	str	r5, [sp, #28]
 80178e2:	e778      	b.n	80177d6 <_dtoa_r+0x996>
 80178e4:	f000 fe0d 	bl	8018502 <__multadd>
 80178e8:	4639      	mov	r1, r7
 80178ea:	4681      	mov	r9, r0
 80178ec:	2300      	movs	r3, #0
 80178ee:	220a      	movs	r2, #10
 80178f0:	4620      	mov	r0, r4
 80178f2:	f000 fe06 	bl	8018502 <__multadd>
 80178f6:	4607      	mov	r7, r0
 80178f8:	e7f2      	b.n	80178e0 <_dtoa_r+0xaa0>
 80178fa:	f04f 0900 	mov.w	r9, #0
 80178fe:	4659      	mov	r1, fp
 8017900:	2201      	movs	r2, #1
 8017902:	4620      	mov	r0, r4
 8017904:	f000 ffb0 	bl	8018868 <__lshift>
 8017908:	4631      	mov	r1, r6
 801790a:	4683      	mov	fp, r0
 801790c:	f001 f800 	bl	8018910 <__mcmp>
 8017910:	2800      	cmp	r0, #0
 8017912:	dcb8      	bgt.n	8017886 <_dtoa_r+0xa46>
 8017914:	d102      	bne.n	801791c <_dtoa_r+0xadc>
 8017916:	f018 0f01 	tst.w	r8, #1
 801791a:	d1b4      	bne.n	8017886 <_dtoa_r+0xa46>
 801791c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017920:	1e6a      	subs	r2, r5, #1
 8017922:	2b30      	cmp	r3, #48	; 0x30
 8017924:	f47f af0f 	bne.w	8017746 <_dtoa_r+0x906>
 8017928:	4615      	mov	r5, r2
 801792a:	e7f7      	b.n	801791c <_dtoa_r+0xadc>
 801792c:	9b06      	ldr	r3, [sp, #24]
 801792e:	4293      	cmp	r3, r2
 8017930:	d105      	bne.n	801793e <_dtoa_r+0xafe>
 8017932:	2331      	movs	r3, #49	; 0x31
 8017934:	9a06      	ldr	r2, [sp, #24]
 8017936:	f10a 0a01 	add.w	sl, sl, #1
 801793a:	7013      	strb	r3, [r2, #0]
 801793c:	e703      	b.n	8017746 <_dtoa_r+0x906>
 801793e:	4615      	mov	r5, r2
 8017940:	e7a1      	b.n	8017886 <_dtoa_r+0xa46>
 8017942:	4b17      	ldr	r3, [pc, #92]	; (80179a0 <_dtoa_r+0xb60>)
 8017944:	f7ff bae1 	b.w	8016f0a <_dtoa_r+0xca>
 8017948:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801794a:	2b00      	cmp	r3, #0
 801794c:	f47f aabb 	bne.w	8016ec6 <_dtoa_r+0x86>
 8017950:	4b14      	ldr	r3, [pc, #80]	; (80179a4 <_dtoa_r+0xb64>)
 8017952:	f7ff bada 	b.w	8016f0a <_dtoa_r+0xca>
 8017956:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8017958:	2b01      	cmp	r3, #1
 801795a:	f77f ae3f 	ble.w	80175dc <_dtoa_r+0x79c>
 801795e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017960:	9308      	str	r3, [sp, #32]
 8017962:	e653      	b.n	801760c <_dtoa_r+0x7cc>
 8017964:	9b04      	ldr	r3, [sp, #16]
 8017966:	2b00      	cmp	r3, #0
 8017968:	dc03      	bgt.n	8017972 <_dtoa_r+0xb32>
 801796a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801796c:	2b02      	cmp	r3, #2
 801796e:	f73f aed5 	bgt.w	801771c <_dtoa_r+0x8dc>
 8017972:	9d06      	ldr	r5, [sp, #24]
 8017974:	4631      	mov	r1, r6
 8017976:	4658      	mov	r0, fp
 8017978:	f7ff f9d2 	bl	8016d20 <quorem>
 801797c:	9b06      	ldr	r3, [sp, #24]
 801797e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8017982:	f805 8b01 	strb.w	r8, [r5], #1
 8017986:	9a04      	ldr	r2, [sp, #16]
 8017988:	1aeb      	subs	r3, r5, r3
 801798a:	429a      	cmp	r2, r3
 801798c:	ddb5      	ble.n	80178fa <_dtoa_r+0xaba>
 801798e:	4659      	mov	r1, fp
 8017990:	2300      	movs	r3, #0
 8017992:	220a      	movs	r2, #10
 8017994:	4620      	mov	r0, r4
 8017996:	f000 fdb4 	bl	8018502 <__multadd>
 801799a:	4683      	mov	fp, r0
 801799c:	e7ea      	b.n	8017974 <_dtoa_r+0xb34>
 801799e:	bf00      	nop
 80179a0:	0801e85b 	.word	0x0801e85b
 80179a4:	0801e6b8 	.word	0x0801e6b8

080179a8 <__sflush_r>:
 80179a8:	898a      	ldrh	r2, [r1, #12]
 80179aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80179ae:	4605      	mov	r5, r0
 80179b0:	0710      	lsls	r0, r2, #28
 80179b2:	460c      	mov	r4, r1
 80179b4:	d458      	bmi.n	8017a68 <__sflush_r+0xc0>
 80179b6:	684b      	ldr	r3, [r1, #4]
 80179b8:	2b00      	cmp	r3, #0
 80179ba:	dc05      	bgt.n	80179c8 <__sflush_r+0x20>
 80179bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80179be:	2b00      	cmp	r3, #0
 80179c0:	dc02      	bgt.n	80179c8 <__sflush_r+0x20>
 80179c2:	2000      	movs	r0, #0
 80179c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80179c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80179ca:	2e00      	cmp	r6, #0
 80179cc:	d0f9      	beq.n	80179c2 <__sflush_r+0x1a>
 80179ce:	2300      	movs	r3, #0
 80179d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80179d4:	682f      	ldr	r7, [r5, #0]
 80179d6:	6a21      	ldr	r1, [r4, #32]
 80179d8:	602b      	str	r3, [r5, #0]
 80179da:	d032      	beq.n	8017a42 <__sflush_r+0x9a>
 80179dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80179de:	89a3      	ldrh	r3, [r4, #12]
 80179e0:	075a      	lsls	r2, r3, #29
 80179e2:	d505      	bpl.n	80179f0 <__sflush_r+0x48>
 80179e4:	6863      	ldr	r3, [r4, #4]
 80179e6:	1ac0      	subs	r0, r0, r3
 80179e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80179ea:	b10b      	cbz	r3, 80179f0 <__sflush_r+0x48>
 80179ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80179ee:	1ac0      	subs	r0, r0, r3
 80179f0:	2300      	movs	r3, #0
 80179f2:	4602      	mov	r2, r0
 80179f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80179f6:	6a21      	ldr	r1, [r4, #32]
 80179f8:	4628      	mov	r0, r5
 80179fa:	47b0      	blx	r6
 80179fc:	1c43      	adds	r3, r0, #1
 80179fe:	89a3      	ldrh	r3, [r4, #12]
 8017a00:	d106      	bne.n	8017a10 <__sflush_r+0x68>
 8017a02:	6829      	ldr	r1, [r5, #0]
 8017a04:	291d      	cmp	r1, #29
 8017a06:	d848      	bhi.n	8017a9a <__sflush_r+0xf2>
 8017a08:	4a29      	ldr	r2, [pc, #164]	; (8017ab0 <__sflush_r+0x108>)
 8017a0a:	40ca      	lsrs	r2, r1
 8017a0c:	07d6      	lsls	r6, r2, #31
 8017a0e:	d544      	bpl.n	8017a9a <__sflush_r+0xf2>
 8017a10:	2200      	movs	r2, #0
 8017a12:	6062      	str	r2, [r4, #4]
 8017a14:	6922      	ldr	r2, [r4, #16]
 8017a16:	04d9      	lsls	r1, r3, #19
 8017a18:	6022      	str	r2, [r4, #0]
 8017a1a:	d504      	bpl.n	8017a26 <__sflush_r+0x7e>
 8017a1c:	1c42      	adds	r2, r0, #1
 8017a1e:	d101      	bne.n	8017a24 <__sflush_r+0x7c>
 8017a20:	682b      	ldr	r3, [r5, #0]
 8017a22:	b903      	cbnz	r3, 8017a26 <__sflush_r+0x7e>
 8017a24:	6560      	str	r0, [r4, #84]	; 0x54
 8017a26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017a28:	602f      	str	r7, [r5, #0]
 8017a2a:	2900      	cmp	r1, #0
 8017a2c:	d0c9      	beq.n	80179c2 <__sflush_r+0x1a>
 8017a2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017a32:	4299      	cmp	r1, r3
 8017a34:	d002      	beq.n	8017a3c <__sflush_r+0x94>
 8017a36:	4628      	mov	r0, r5
 8017a38:	f001 f91e 	bl	8018c78 <_free_r>
 8017a3c:	2000      	movs	r0, #0
 8017a3e:	6360      	str	r0, [r4, #52]	; 0x34
 8017a40:	e7c0      	b.n	80179c4 <__sflush_r+0x1c>
 8017a42:	2301      	movs	r3, #1
 8017a44:	4628      	mov	r0, r5
 8017a46:	47b0      	blx	r6
 8017a48:	1c41      	adds	r1, r0, #1
 8017a4a:	d1c8      	bne.n	80179de <__sflush_r+0x36>
 8017a4c:	682b      	ldr	r3, [r5, #0]
 8017a4e:	2b00      	cmp	r3, #0
 8017a50:	d0c5      	beq.n	80179de <__sflush_r+0x36>
 8017a52:	2b1d      	cmp	r3, #29
 8017a54:	d001      	beq.n	8017a5a <__sflush_r+0xb2>
 8017a56:	2b16      	cmp	r3, #22
 8017a58:	d101      	bne.n	8017a5e <__sflush_r+0xb6>
 8017a5a:	602f      	str	r7, [r5, #0]
 8017a5c:	e7b1      	b.n	80179c2 <__sflush_r+0x1a>
 8017a5e:	89a3      	ldrh	r3, [r4, #12]
 8017a60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017a64:	81a3      	strh	r3, [r4, #12]
 8017a66:	e7ad      	b.n	80179c4 <__sflush_r+0x1c>
 8017a68:	690f      	ldr	r7, [r1, #16]
 8017a6a:	2f00      	cmp	r7, #0
 8017a6c:	d0a9      	beq.n	80179c2 <__sflush_r+0x1a>
 8017a6e:	0793      	lsls	r3, r2, #30
 8017a70:	bf18      	it	ne
 8017a72:	2300      	movne	r3, #0
 8017a74:	680e      	ldr	r6, [r1, #0]
 8017a76:	bf08      	it	eq
 8017a78:	694b      	ldreq	r3, [r1, #20]
 8017a7a:	eba6 0807 	sub.w	r8, r6, r7
 8017a7e:	600f      	str	r7, [r1, #0]
 8017a80:	608b      	str	r3, [r1, #8]
 8017a82:	f1b8 0f00 	cmp.w	r8, #0
 8017a86:	dd9c      	ble.n	80179c2 <__sflush_r+0x1a>
 8017a88:	4643      	mov	r3, r8
 8017a8a:	463a      	mov	r2, r7
 8017a8c:	6a21      	ldr	r1, [r4, #32]
 8017a8e:	4628      	mov	r0, r5
 8017a90:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017a92:	47b0      	blx	r6
 8017a94:	2800      	cmp	r0, #0
 8017a96:	dc06      	bgt.n	8017aa6 <__sflush_r+0xfe>
 8017a98:	89a3      	ldrh	r3, [r4, #12]
 8017a9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017a9e:	81a3      	strh	r3, [r4, #12]
 8017aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8017aa4:	e78e      	b.n	80179c4 <__sflush_r+0x1c>
 8017aa6:	4407      	add	r7, r0
 8017aa8:	eba8 0800 	sub.w	r8, r8, r0
 8017aac:	e7e9      	b.n	8017a82 <__sflush_r+0xda>
 8017aae:	bf00      	nop
 8017ab0:	20400001 	.word	0x20400001

08017ab4 <_fflush_r>:
 8017ab4:	b538      	push	{r3, r4, r5, lr}
 8017ab6:	690b      	ldr	r3, [r1, #16]
 8017ab8:	4605      	mov	r5, r0
 8017aba:	460c      	mov	r4, r1
 8017abc:	b1db      	cbz	r3, 8017af6 <_fflush_r+0x42>
 8017abe:	b118      	cbz	r0, 8017ac8 <_fflush_r+0x14>
 8017ac0:	6983      	ldr	r3, [r0, #24]
 8017ac2:	b90b      	cbnz	r3, 8017ac8 <_fflush_r+0x14>
 8017ac4:	f000 f860 	bl	8017b88 <__sinit>
 8017ac8:	4b0c      	ldr	r3, [pc, #48]	; (8017afc <_fflush_r+0x48>)
 8017aca:	429c      	cmp	r4, r3
 8017acc:	d109      	bne.n	8017ae2 <_fflush_r+0x2e>
 8017ace:	686c      	ldr	r4, [r5, #4]
 8017ad0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017ad4:	b17b      	cbz	r3, 8017af6 <_fflush_r+0x42>
 8017ad6:	4621      	mov	r1, r4
 8017ad8:	4628      	mov	r0, r5
 8017ada:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017ade:	f7ff bf63 	b.w	80179a8 <__sflush_r>
 8017ae2:	4b07      	ldr	r3, [pc, #28]	; (8017b00 <_fflush_r+0x4c>)
 8017ae4:	429c      	cmp	r4, r3
 8017ae6:	d101      	bne.n	8017aec <_fflush_r+0x38>
 8017ae8:	68ac      	ldr	r4, [r5, #8]
 8017aea:	e7f1      	b.n	8017ad0 <_fflush_r+0x1c>
 8017aec:	4b05      	ldr	r3, [pc, #20]	; (8017b04 <_fflush_r+0x50>)
 8017aee:	429c      	cmp	r4, r3
 8017af0:	bf08      	it	eq
 8017af2:	68ec      	ldreq	r4, [r5, #12]
 8017af4:	e7ec      	b.n	8017ad0 <_fflush_r+0x1c>
 8017af6:	2000      	movs	r0, #0
 8017af8:	bd38      	pop	{r3, r4, r5, pc}
 8017afa:	bf00      	nop
 8017afc:	0801e6e8 	.word	0x0801e6e8
 8017b00:	0801e708 	.word	0x0801e708
 8017b04:	0801e6c8 	.word	0x0801e6c8

08017b08 <std>:
 8017b08:	2300      	movs	r3, #0
 8017b0a:	b510      	push	{r4, lr}
 8017b0c:	4604      	mov	r4, r0
 8017b0e:	e9c0 3300 	strd	r3, r3, [r0]
 8017b12:	6083      	str	r3, [r0, #8]
 8017b14:	8181      	strh	r1, [r0, #12]
 8017b16:	6643      	str	r3, [r0, #100]	; 0x64
 8017b18:	81c2      	strh	r2, [r0, #14]
 8017b1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017b1e:	6183      	str	r3, [r0, #24]
 8017b20:	4619      	mov	r1, r3
 8017b22:	2208      	movs	r2, #8
 8017b24:	305c      	adds	r0, #92	; 0x5c
 8017b26:	f7fd f9dd 	bl	8014ee4 <memset>
 8017b2a:	4b05      	ldr	r3, [pc, #20]	; (8017b40 <std+0x38>)
 8017b2c:	6224      	str	r4, [r4, #32]
 8017b2e:	6263      	str	r3, [r4, #36]	; 0x24
 8017b30:	4b04      	ldr	r3, [pc, #16]	; (8017b44 <std+0x3c>)
 8017b32:	62a3      	str	r3, [r4, #40]	; 0x28
 8017b34:	4b04      	ldr	r3, [pc, #16]	; (8017b48 <std+0x40>)
 8017b36:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017b38:	4b04      	ldr	r3, [pc, #16]	; (8017b4c <std+0x44>)
 8017b3a:	6323      	str	r3, [r4, #48]	; 0x30
 8017b3c:	bd10      	pop	{r4, pc}
 8017b3e:	bf00      	nop
 8017b40:	08015ce9 	.word	0x08015ce9
 8017b44:	08015d0f 	.word	0x08015d0f
 8017b48:	08015d47 	.word	0x08015d47
 8017b4c:	08015d6b 	.word	0x08015d6b

08017b50 <_cleanup_r>:
 8017b50:	4901      	ldr	r1, [pc, #4]	; (8017b58 <_cleanup_r+0x8>)
 8017b52:	f000 b885 	b.w	8017c60 <_fwalk_reent>
 8017b56:	bf00      	nop
 8017b58:	08017ab5 	.word	0x08017ab5

08017b5c <__sfmoreglue>:
 8017b5c:	b570      	push	{r4, r5, r6, lr}
 8017b5e:	2568      	movs	r5, #104	; 0x68
 8017b60:	1e4a      	subs	r2, r1, #1
 8017b62:	4355      	muls	r5, r2
 8017b64:	460e      	mov	r6, r1
 8017b66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017b6a:	f001 f8d1 	bl	8018d10 <_malloc_r>
 8017b6e:	4604      	mov	r4, r0
 8017b70:	b140      	cbz	r0, 8017b84 <__sfmoreglue+0x28>
 8017b72:	2100      	movs	r1, #0
 8017b74:	e9c0 1600 	strd	r1, r6, [r0]
 8017b78:	300c      	adds	r0, #12
 8017b7a:	60a0      	str	r0, [r4, #8]
 8017b7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017b80:	f7fd f9b0 	bl	8014ee4 <memset>
 8017b84:	4620      	mov	r0, r4
 8017b86:	bd70      	pop	{r4, r5, r6, pc}

08017b88 <__sinit>:
 8017b88:	6983      	ldr	r3, [r0, #24]
 8017b8a:	b510      	push	{r4, lr}
 8017b8c:	4604      	mov	r4, r0
 8017b8e:	bb33      	cbnz	r3, 8017bde <__sinit+0x56>
 8017b90:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8017b94:	6503      	str	r3, [r0, #80]	; 0x50
 8017b96:	4b12      	ldr	r3, [pc, #72]	; (8017be0 <__sinit+0x58>)
 8017b98:	4a12      	ldr	r2, [pc, #72]	; (8017be4 <__sinit+0x5c>)
 8017b9a:	681b      	ldr	r3, [r3, #0]
 8017b9c:	6282      	str	r2, [r0, #40]	; 0x28
 8017b9e:	4298      	cmp	r0, r3
 8017ba0:	bf04      	itt	eq
 8017ba2:	2301      	moveq	r3, #1
 8017ba4:	6183      	streq	r3, [r0, #24]
 8017ba6:	f000 f81f 	bl	8017be8 <__sfp>
 8017baa:	6060      	str	r0, [r4, #4]
 8017bac:	4620      	mov	r0, r4
 8017bae:	f000 f81b 	bl	8017be8 <__sfp>
 8017bb2:	60a0      	str	r0, [r4, #8]
 8017bb4:	4620      	mov	r0, r4
 8017bb6:	f000 f817 	bl	8017be8 <__sfp>
 8017bba:	2200      	movs	r2, #0
 8017bbc:	60e0      	str	r0, [r4, #12]
 8017bbe:	2104      	movs	r1, #4
 8017bc0:	6860      	ldr	r0, [r4, #4]
 8017bc2:	f7ff ffa1 	bl	8017b08 <std>
 8017bc6:	2201      	movs	r2, #1
 8017bc8:	2109      	movs	r1, #9
 8017bca:	68a0      	ldr	r0, [r4, #8]
 8017bcc:	f7ff ff9c 	bl	8017b08 <std>
 8017bd0:	2202      	movs	r2, #2
 8017bd2:	2112      	movs	r1, #18
 8017bd4:	68e0      	ldr	r0, [r4, #12]
 8017bd6:	f7ff ff97 	bl	8017b08 <std>
 8017bda:	2301      	movs	r3, #1
 8017bdc:	61a3      	str	r3, [r4, #24]
 8017bde:	bd10      	pop	{r4, pc}
 8017be0:	0801e628 	.word	0x0801e628
 8017be4:	08017b51 	.word	0x08017b51

08017be8 <__sfp>:
 8017be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017bea:	4b1b      	ldr	r3, [pc, #108]	; (8017c58 <__sfp+0x70>)
 8017bec:	4607      	mov	r7, r0
 8017bee:	681e      	ldr	r6, [r3, #0]
 8017bf0:	69b3      	ldr	r3, [r6, #24]
 8017bf2:	b913      	cbnz	r3, 8017bfa <__sfp+0x12>
 8017bf4:	4630      	mov	r0, r6
 8017bf6:	f7ff ffc7 	bl	8017b88 <__sinit>
 8017bfa:	3648      	adds	r6, #72	; 0x48
 8017bfc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017c00:	3b01      	subs	r3, #1
 8017c02:	d503      	bpl.n	8017c0c <__sfp+0x24>
 8017c04:	6833      	ldr	r3, [r6, #0]
 8017c06:	b133      	cbz	r3, 8017c16 <__sfp+0x2e>
 8017c08:	6836      	ldr	r6, [r6, #0]
 8017c0a:	e7f7      	b.n	8017bfc <__sfp+0x14>
 8017c0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017c10:	b16d      	cbz	r5, 8017c2e <__sfp+0x46>
 8017c12:	3468      	adds	r4, #104	; 0x68
 8017c14:	e7f4      	b.n	8017c00 <__sfp+0x18>
 8017c16:	2104      	movs	r1, #4
 8017c18:	4638      	mov	r0, r7
 8017c1a:	f7ff ff9f 	bl	8017b5c <__sfmoreglue>
 8017c1e:	6030      	str	r0, [r6, #0]
 8017c20:	2800      	cmp	r0, #0
 8017c22:	d1f1      	bne.n	8017c08 <__sfp+0x20>
 8017c24:	230c      	movs	r3, #12
 8017c26:	4604      	mov	r4, r0
 8017c28:	603b      	str	r3, [r7, #0]
 8017c2a:	4620      	mov	r0, r4
 8017c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017c2e:	4b0b      	ldr	r3, [pc, #44]	; (8017c5c <__sfp+0x74>)
 8017c30:	6665      	str	r5, [r4, #100]	; 0x64
 8017c32:	e9c4 5500 	strd	r5, r5, [r4]
 8017c36:	60a5      	str	r5, [r4, #8]
 8017c38:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8017c3c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8017c40:	2208      	movs	r2, #8
 8017c42:	4629      	mov	r1, r5
 8017c44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017c48:	f7fd f94c 	bl	8014ee4 <memset>
 8017c4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017c50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017c54:	e7e9      	b.n	8017c2a <__sfp+0x42>
 8017c56:	bf00      	nop
 8017c58:	0801e628 	.word	0x0801e628
 8017c5c:	ffff0001 	.word	0xffff0001

08017c60 <_fwalk_reent>:
 8017c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017c64:	4680      	mov	r8, r0
 8017c66:	4689      	mov	r9, r1
 8017c68:	2600      	movs	r6, #0
 8017c6a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017c6e:	b914      	cbnz	r4, 8017c76 <_fwalk_reent+0x16>
 8017c70:	4630      	mov	r0, r6
 8017c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017c76:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8017c7a:	3f01      	subs	r7, #1
 8017c7c:	d501      	bpl.n	8017c82 <_fwalk_reent+0x22>
 8017c7e:	6824      	ldr	r4, [r4, #0]
 8017c80:	e7f5      	b.n	8017c6e <_fwalk_reent+0xe>
 8017c82:	89ab      	ldrh	r3, [r5, #12]
 8017c84:	2b01      	cmp	r3, #1
 8017c86:	d907      	bls.n	8017c98 <_fwalk_reent+0x38>
 8017c88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017c8c:	3301      	adds	r3, #1
 8017c8e:	d003      	beq.n	8017c98 <_fwalk_reent+0x38>
 8017c90:	4629      	mov	r1, r5
 8017c92:	4640      	mov	r0, r8
 8017c94:	47c8      	blx	r9
 8017c96:	4306      	orrs	r6, r0
 8017c98:	3568      	adds	r5, #104	; 0x68
 8017c9a:	e7ee      	b.n	8017c7a <_fwalk_reent+0x1a>

08017c9c <rshift>:
 8017c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017c9e:	6906      	ldr	r6, [r0, #16]
 8017ca0:	114b      	asrs	r3, r1, #5
 8017ca2:	429e      	cmp	r6, r3
 8017ca4:	f100 0414 	add.w	r4, r0, #20
 8017ca8:	dd31      	ble.n	8017d0e <rshift+0x72>
 8017caa:	f011 011f 	ands.w	r1, r1, #31
 8017cae:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8017cb2:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8017cb6:	d108      	bne.n	8017cca <rshift+0x2e>
 8017cb8:	4621      	mov	r1, r4
 8017cba:	42b2      	cmp	r2, r6
 8017cbc:	460b      	mov	r3, r1
 8017cbe:	d211      	bcs.n	8017ce4 <rshift+0x48>
 8017cc0:	f852 3b04 	ldr.w	r3, [r2], #4
 8017cc4:	f841 3b04 	str.w	r3, [r1], #4
 8017cc8:	e7f7      	b.n	8017cba <rshift+0x1e>
 8017cca:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8017cce:	4623      	mov	r3, r4
 8017cd0:	f1c1 0c20 	rsb	ip, r1, #32
 8017cd4:	40cd      	lsrs	r5, r1
 8017cd6:	3204      	adds	r2, #4
 8017cd8:	42b2      	cmp	r2, r6
 8017cda:	4617      	mov	r7, r2
 8017cdc:	d30d      	bcc.n	8017cfa <rshift+0x5e>
 8017cde:	601d      	str	r5, [r3, #0]
 8017ce0:	b105      	cbz	r5, 8017ce4 <rshift+0x48>
 8017ce2:	3304      	adds	r3, #4
 8017ce4:	42a3      	cmp	r3, r4
 8017ce6:	eba3 0204 	sub.w	r2, r3, r4
 8017cea:	bf08      	it	eq
 8017cec:	2300      	moveq	r3, #0
 8017cee:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017cf2:	6102      	str	r2, [r0, #16]
 8017cf4:	bf08      	it	eq
 8017cf6:	6143      	streq	r3, [r0, #20]
 8017cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017cfa:	683f      	ldr	r7, [r7, #0]
 8017cfc:	fa07 f70c 	lsl.w	r7, r7, ip
 8017d00:	433d      	orrs	r5, r7
 8017d02:	f843 5b04 	str.w	r5, [r3], #4
 8017d06:	f852 5b04 	ldr.w	r5, [r2], #4
 8017d0a:	40cd      	lsrs	r5, r1
 8017d0c:	e7e4      	b.n	8017cd8 <rshift+0x3c>
 8017d0e:	4623      	mov	r3, r4
 8017d10:	e7e8      	b.n	8017ce4 <rshift+0x48>

08017d12 <__hexdig_fun>:
 8017d12:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8017d16:	2b09      	cmp	r3, #9
 8017d18:	d802      	bhi.n	8017d20 <__hexdig_fun+0xe>
 8017d1a:	3820      	subs	r0, #32
 8017d1c:	b2c0      	uxtb	r0, r0
 8017d1e:	4770      	bx	lr
 8017d20:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8017d24:	2b05      	cmp	r3, #5
 8017d26:	d801      	bhi.n	8017d2c <__hexdig_fun+0x1a>
 8017d28:	3847      	subs	r0, #71	; 0x47
 8017d2a:	e7f7      	b.n	8017d1c <__hexdig_fun+0xa>
 8017d2c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8017d30:	2b05      	cmp	r3, #5
 8017d32:	d801      	bhi.n	8017d38 <__hexdig_fun+0x26>
 8017d34:	3827      	subs	r0, #39	; 0x27
 8017d36:	e7f1      	b.n	8017d1c <__hexdig_fun+0xa>
 8017d38:	2000      	movs	r0, #0
 8017d3a:	4770      	bx	lr

08017d3c <__gethex>:
 8017d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d40:	b08b      	sub	sp, #44	; 0x2c
 8017d42:	9002      	str	r0, [sp, #8]
 8017d44:	9816      	ldr	r0, [sp, #88]	; 0x58
 8017d46:	468a      	mov	sl, r1
 8017d48:	4690      	mov	r8, r2
 8017d4a:	9306      	str	r3, [sp, #24]
 8017d4c:	f000 fae0 	bl	8018310 <__localeconv_l>
 8017d50:	6803      	ldr	r3, [r0, #0]
 8017d52:	f04f 0b00 	mov.w	fp, #0
 8017d56:	4618      	mov	r0, r3
 8017d58:	9303      	str	r3, [sp, #12]
 8017d5a:	f7e8 fa1b 	bl	8000194 <strlen>
 8017d5e:	9b03      	ldr	r3, [sp, #12]
 8017d60:	9001      	str	r0, [sp, #4]
 8017d62:	4403      	add	r3, r0
 8017d64:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8017d68:	9307      	str	r3, [sp, #28]
 8017d6a:	f8da 3000 	ldr.w	r3, [sl]
 8017d6e:	3302      	adds	r3, #2
 8017d70:	461f      	mov	r7, r3
 8017d72:	f813 0b01 	ldrb.w	r0, [r3], #1
 8017d76:	2830      	cmp	r0, #48	; 0x30
 8017d78:	d06c      	beq.n	8017e54 <__gethex+0x118>
 8017d7a:	f7ff ffca 	bl	8017d12 <__hexdig_fun>
 8017d7e:	4604      	mov	r4, r0
 8017d80:	2800      	cmp	r0, #0
 8017d82:	d16a      	bne.n	8017e5a <__gethex+0x11e>
 8017d84:	9a01      	ldr	r2, [sp, #4]
 8017d86:	9903      	ldr	r1, [sp, #12]
 8017d88:	4638      	mov	r0, r7
 8017d8a:	f7fd fffa 	bl	8015d82 <strncmp>
 8017d8e:	2800      	cmp	r0, #0
 8017d90:	d166      	bne.n	8017e60 <__gethex+0x124>
 8017d92:	9b01      	ldr	r3, [sp, #4]
 8017d94:	5cf8      	ldrb	r0, [r7, r3]
 8017d96:	18fe      	adds	r6, r7, r3
 8017d98:	f7ff ffbb 	bl	8017d12 <__hexdig_fun>
 8017d9c:	2800      	cmp	r0, #0
 8017d9e:	d062      	beq.n	8017e66 <__gethex+0x12a>
 8017da0:	4633      	mov	r3, r6
 8017da2:	7818      	ldrb	r0, [r3, #0]
 8017da4:	461f      	mov	r7, r3
 8017da6:	2830      	cmp	r0, #48	; 0x30
 8017da8:	f103 0301 	add.w	r3, r3, #1
 8017dac:	d0f9      	beq.n	8017da2 <__gethex+0x66>
 8017dae:	f7ff ffb0 	bl	8017d12 <__hexdig_fun>
 8017db2:	fab0 f580 	clz	r5, r0
 8017db6:	4634      	mov	r4, r6
 8017db8:	f04f 0b01 	mov.w	fp, #1
 8017dbc:	096d      	lsrs	r5, r5, #5
 8017dbe:	463a      	mov	r2, r7
 8017dc0:	4616      	mov	r6, r2
 8017dc2:	7830      	ldrb	r0, [r6, #0]
 8017dc4:	3201      	adds	r2, #1
 8017dc6:	f7ff ffa4 	bl	8017d12 <__hexdig_fun>
 8017dca:	2800      	cmp	r0, #0
 8017dcc:	d1f8      	bne.n	8017dc0 <__gethex+0x84>
 8017dce:	9a01      	ldr	r2, [sp, #4]
 8017dd0:	9903      	ldr	r1, [sp, #12]
 8017dd2:	4630      	mov	r0, r6
 8017dd4:	f7fd ffd5 	bl	8015d82 <strncmp>
 8017dd8:	b950      	cbnz	r0, 8017df0 <__gethex+0xb4>
 8017dda:	b954      	cbnz	r4, 8017df2 <__gethex+0xb6>
 8017ddc:	9b01      	ldr	r3, [sp, #4]
 8017dde:	18f4      	adds	r4, r6, r3
 8017de0:	4622      	mov	r2, r4
 8017de2:	4616      	mov	r6, r2
 8017de4:	7830      	ldrb	r0, [r6, #0]
 8017de6:	3201      	adds	r2, #1
 8017de8:	f7ff ff93 	bl	8017d12 <__hexdig_fun>
 8017dec:	2800      	cmp	r0, #0
 8017dee:	d1f8      	bne.n	8017de2 <__gethex+0xa6>
 8017df0:	b10c      	cbz	r4, 8017df6 <__gethex+0xba>
 8017df2:	1ba4      	subs	r4, r4, r6
 8017df4:	00a4      	lsls	r4, r4, #2
 8017df6:	7833      	ldrb	r3, [r6, #0]
 8017df8:	2b50      	cmp	r3, #80	; 0x50
 8017dfa:	d001      	beq.n	8017e00 <__gethex+0xc4>
 8017dfc:	2b70      	cmp	r3, #112	; 0x70
 8017dfe:	d140      	bne.n	8017e82 <__gethex+0x146>
 8017e00:	7873      	ldrb	r3, [r6, #1]
 8017e02:	2b2b      	cmp	r3, #43	; 0x2b
 8017e04:	d031      	beq.n	8017e6a <__gethex+0x12e>
 8017e06:	2b2d      	cmp	r3, #45	; 0x2d
 8017e08:	d033      	beq.n	8017e72 <__gethex+0x136>
 8017e0a:	f04f 0900 	mov.w	r9, #0
 8017e0e:	1c71      	adds	r1, r6, #1
 8017e10:	7808      	ldrb	r0, [r1, #0]
 8017e12:	f7ff ff7e 	bl	8017d12 <__hexdig_fun>
 8017e16:	1e43      	subs	r3, r0, #1
 8017e18:	b2db      	uxtb	r3, r3
 8017e1a:	2b18      	cmp	r3, #24
 8017e1c:	d831      	bhi.n	8017e82 <__gethex+0x146>
 8017e1e:	f1a0 0210 	sub.w	r2, r0, #16
 8017e22:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017e26:	f7ff ff74 	bl	8017d12 <__hexdig_fun>
 8017e2a:	1e43      	subs	r3, r0, #1
 8017e2c:	b2db      	uxtb	r3, r3
 8017e2e:	2b18      	cmp	r3, #24
 8017e30:	d922      	bls.n	8017e78 <__gethex+0x13c>
 8017e32:	f1b9 0f00 	cmp.w	r9, #0
 8017e36:	d000      	beq.n	8017e3a <__gethex+0xfe>
 8017e38:	4252      	negs	r2, r2
 8017e3a:	4414      	add	r4, r2
 8017e3c:	f8ca 1000 	str.w	r1, [sl]
 8017e40:	b30d      	cbz	r5, 8017e86 <__gethex+0x14a>
 8017e42:	f1bb 0f00 	cmp.w	fp, #0
 8017e46:	bf0c      	ite	eq
 8017e48:	2706      	moveq	r7, #6
 8017e4a:	2700      	movne	r7, #0
 8017e4c:	4638      	mov	r0, r7
 8017e4e:	b00b      	add	sp, #44	; 0x2c
 8017e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e54:	f10b 0b01 	add.w	fp, fp, #1
 8017e58:	e78a      	b.n	8017d70 <__gethex+0x34>
 8017e5a:	2500      	movs	r5, #0
 8017e5c:	462c      	mov	r4, r5
 8017e5e:	e7ae      	b.n	8017dbe <__gethex+0x82>
 8017e60:	463e      	mov	r6, r7
 8017e62:	2501      	movs	r5, #1
 8017e64:	e7c7      	b.n	8017df6 <__gethex+0xba>
 8017e66:	4604      	mov	r4, r0
 8017e68:	e7fb      	b.n	8017e62 <__gethex+0x126>
 8017e6a:	f04f 0900 	mov.w	r9, #0
 8017e6e:	1cb1      	adds	r1, r6, #2
 8017e70:	e7ce      	b.n	8017e10 <__gethex+0xd4>
 8017e72:	f04f 0901 	mov.w	r9, #1
 8017e76:	e7fa      	b.n	8017e6e <__gethex+0x132>
 8017e78:	230a      	movs	r3, #10
 8017e7a:	fb03 0202 	mla	r2, r3, r2, r0
 8017e7e:	3a10      	subs	r2, #16
 8017e80:	e7cf      	b.n	8017e22 <__gethex+0xe6>
 8017e82:	4631      	mov	r1, r6
 8017e84:	e7da      	b.n	8017e3c <__gethex+0x100>
 8017e86:	4629      	mov	r1, r5
 8017e88:	1bf3      	subs	r3, r6, r7
 8017e8a:	3b01      	subs	r3, #1
 8017e8c:	2b07      	cmp	r3, #7
 8017e8e:	dc49      	bgt.n	8017f24 <__gethex+0x1e8>
 8017e90:	9802      	ldr	r0, [sp, #8]
 8017e92:	f000 faeb 	bl	801846c <_Balloc>
 8017e96:	f04f 0b00 	mov.w	fp, #0
 8017e9a:	4605      	mov	r5, r0
 8017e9c:	46da      	mov	sl, fp
 8017e9e:	9b01      	ldr	r3, [sp, #4]
 8017ea0:	f100 0914 	add.w	r9, r0, #20
 8017ea4:	f1c3 0301 	rsb	r3, r3, #1
 8017ea8:	f8cd 9010 	str.w	r9, [sp, #16]
 8017eac:	9308      	str	r3, [sp, #32]
 8017eae:	42b7      	cmp	r7, r6
 8017eb0:	d33b      	bcc.n	8017f2a <__gethex+0x1ee>
 8017eb2:	9804      	ldr	r0, [sp, #16]
 8017eb4:	f840 ab04 	str.w	sl, [r0], #4
 8017eb8:	eba0 0009 	sub.w	r0, r0, r9
 8017ebc:	1080      	asrs	r0, r0, #2
 8017ebe:	6128      	str	r0, [r5, #16]
 8017ec0:	0147      	lsls	r7, r0, #5
 8017ec2:	4650      	mov	r0, sl
 8017ec4:	f000 fb96 	bl	80185f4 <__hi0bits>
 8017ec8:	f8d8 6000 	ldr.w	r6, [r8]
 8017ecc:	1a3f      	subs	r7, r7, r0
 8017ece:	42b7      	cmp	r7, r6
 8017ed0:	dd64      	ble.n	8017f9c <__gethex+0x260>
 8017ed2:	1bbf      	subs	r7, r7, r6
 8017ed4:	4639      	mov	r1, r7
 8017ed6:	4628      	mov	r0, r5
 8017ed8:	f000 fe9f 	bl	8018c1a <__any_on>
 8017edc:	4682      	mov	sl, r0
 8017ede:	b178      	cbz	r0, 8017f00 <__gethex+0x1c4>
 8017ee0:	f04f 0a01 	mov.w	sl, #1
 8017ee4:	1e7b      	subs	r3, r7, #1
 8017ee6:	1159      	asrs	r1, r3, #5
 8017ee8:	f003 021f 	and.w	r2, r3, #31
 8017eec:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8017ef0:	fa0a f202 	lsl.w	r2, sl, r2
 8017ef4:	420a      	tst	r2, r1
 8017ef6:	d003      	beq.n	8017f00 <__gethex+0x1c4>
 8017ef8:	4553      	cmp	r3, sl
 8017efa:	dc46      	bgt.n	8017f8a <__gethex+0x24e>
 8017efc:	f04f 0a02 	mov.w	sl, #2
 8017f00:	4639      	mov	r1, r7
 8017f02:	4628      	mov	r0, r5
 8017f04:	f7ff feca 	bl	8017c9c <rshift>
 8017f08:	443c      	add	r4, r7
 8017f0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017f0e:	42a3      	cmp	r3, r4
 8017f10:	da52      	bge.n	8017fb8 <__gethex+0x27c>
 8017f12:	4629      	mov	r1, r5
 8017f14:	9802      	ldr	r0, [sp, #8]
 8017f16:	f000 fadd 	bl	80184d4 <_Bfree>
 8017f1a:	2300      	movs	r3, #0
 8017f1c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017f1e:	27a3      	movs	r7, #163	; 0xa3
 8017f20:	6013      	str	r3, [r2, #0]
 8017f22:	e793      	b.n	8017e4c <__gethex+0x110>
 8017f24:	3101      	adds	r1, #1
 8017f26:	105b      	asrs	r3, r3, #1
 8017f28:	e7b0      	b.n	8017e8c <__gethex+0x150>
 8017f2a:	1e73      	subs	r3, r6, #1
 8017f2c:	9305      	str	r3, [sp, #20]
 8017f2e:	9a07      	ldr	r2, [sp, #28]
 8017f30:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8017f34:	4293      	cmp	r3, r2
 8017f36:	d018      	beq.n	8017f6a <__gethex+0x22e>
 8017f38:	f1bb 0f20 	cmp.w	fp, #32
 8017f3c:	d107      	bne.n	8017f4e <__gethex+0x212>
 8017f3e:	9b04      	ldr	r3, [sp, #16]
 8017f40:	f8c3 a000 	str.w	sl, [r3]
 8017f44:	f04f 0a00 	mov.w	sl, #0
 8017f48:	46d3      	mov	fp, sl
 8017f4a:	3304      	adds	r3, #4
 8017f4c:	9304      	str	r3, [sp, #16]
 8017f4e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8017f52:	f7ff fede 	bl	8017d12 <__hexdig_fun>
 8017f56:	f000 000f 	and.w	r0, r0, #15
 8017f5a:	fa00 f00b 	lsl.w	r0, r0, fp
 8017f5e:	ea4a 0a00 	orr.w	sl, sl, r0
 8017f62:	f10b 0b04 	add.w	fp, fp, #4
 8017f66:	9b05      	ldr	r3, [sp, #20]
 8017f68:	e00d      	b.n	8017f86 <__gethex+0x24a>
 8017f6a:	9b05      	ldr	r3, [sp, #20]
 8017f6c:	9a08      	ldr	r2, [sp, #32]
 8017f6e:	4413      	add	r3, r2
 8017f70:	42bb      	cmp	r3, r7
 8017f72:	d3e1      	bcc.n	8017f38 <__gethex+0x1fc>
 8017f74:	4618      	mov	r0, r3
 8017f76:	9a01      	ldr	r2, [sp, #4]
 8017f78:	9903      	ldr	r1, [sp, #12]
 8017f7a:	9309      	str	r3, [sp, #36]	; 0x24
 8017f7c:	f7fd ff01 	bl	8015d82 <strncmp>
 8017f80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017f82:	2800      	cmp	r0, #0
 8017f84:	d1d8      	bne.n	8017f38 <__gethex+0x1fc>
 8017f86:	461e      	mov	r6, r3
 8017f88:	e791      	b.n	8017eae <__gethex+0x172>
 8017f8a:	1eb9      	subs	r1, r7, #2
 8017f8c:	4628      	mov	r0, r5
 8017f8e:	f000 fe44 	bl	8018c1a <__any_on>
 8017f92:	2800      	cmp	r0, #0
 8017f94:	d0b2      	beq.n	8017efc <__gethex+0x1c0>
 8017f96:	f04f 0a03 	mov.w	sl, #3
 8017f9a:	e7b1      	b.n	8017f00 <__gethex+0x1c4>
 8017f9c:	da09      	bge.n	8017fb2 <__gethex+0x276>
 8017f9e:	1bf7      	subs	r7, r6, r7
 8017fa0:	4629      	mov	r1, r5
 8017fa2:	463a      	mov	r2, r7
 8017fa4:	9802      	ldr	r0, [sp, #8]
 8017fa6:	f000 fc5f 	bl	8018868 <__lshift>
 8017faa:	4605      	mov	r5, r0
 8017fac:	1be4      	subs	r4, r4, r7
 8017fae:	f100 0914 	add.w	r9, r0, #20
 8017fb2:	f04f 0a00 	mov.w	sl, #0
 8017fb6:	e7a8      	b.n	8017f0a <__gethex+0x1ce>
 8017fb8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8017fbc:	42a0      	cmp	r0, r4
 8017fbe:	dd6b      	ble.n	8018098 <__gethex+0x35c>
 8017fc0:	1b04      	subs	r4, r0, r4
 8017fc2:	42a6      	cmp	r6, r4
 8017fc4:	dc2e      	bgt.n	8018024 <__gethex+0x2e8>
 8017fc6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017fca:	2b02      	cmp	r3, #2
 8017fcc:	d022      	beq.n	8018014 <__gethex+0x2d8>
 8017fce:	2b03      	cmp	r3, #3
 8017fd0:	d024      	beq.n	801801c <__gethex+0x2e0>
 8017fd2:	2b01      	cmp	r3, #1
 8017fd4:	d115      	bne.n	8018002 <__gethex+0x2c6>
 8017fd6:	42a6      	cmp	r6, r4
 8017fd8:	d113      	bne.n	8018002 <__gethex+0x2c6>
 8017fda:	2e01      	cmp	r6, #1
 8017fdc:	dc0b      	bgt.n	8017ff6 <__gethex+0x2ba>
 8017fde:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017fe2:	9a06      	ldr	r2, [sp, #24]
 8017fe4:	2762      	movs	r7, #98	; 0x62
 8017fe6:	6013      	str	r3, [r2, #0]
 8017fe8:	2301      	movs	r3, #1
 8017fea:	612b      	str	r3, [r5, #16]
 8017fec:	f8c9 3000 	str.w	r3, [r9]
 8017ff0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017ff2:	601d      	str	r5, [r3, #0]
 8017ff4:	e72a      	b.n	8017e4c <__gethex+0x110>
 8017ff6:	1e71      	subs	r1, r6, #1
 8017ff8:	4628      	mov	r0, r5
 8017ffa:	f000 fe0e 	bl	8018c1a <__any_on>
 8017ffe:	2800      	cmp	r0, #0
 8018000:	d1ed      	bne.n	8017fde <__gethex+0x2a2>
 8018002:	4629      	mov	r1, r5
 8018004:	9802      	ldr	r0, [sp, #8]
 8018006:	f000 fa65 	bl	80184d4 <_Bfree>
 801800a:	2300      	movs	r3, #0
 801800c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801800e:	2750      	movs	r7, #80	; 0x50
 8018010:	6013      	str	r3, [r2, #0]
 8018012:	e71b      	b.n	8017e4c <__gethex+0x110>
 8018014:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018016:	2b00      	cmp	r3, #0
 8018018:	d0e1      	beq.n	8017fde <__gethex+0x2a2>
 801801a:	e7f2      	b.n	8018002 <__gethex+0x2c6>
 801801c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801801e:	2b00      	cmp	r3, #0
 8018020:	d1dd      	bne.n	8017fde <__gethex+0x2a2>
 8018022:	e7ee      	b.n	8018002 <__gethex+0x2c6>
 8018024:	1e67      	subs	r7, r4, #1
 8018026:	f1ba 0f00 	cmp.w	sl, #0
 801802a:	d132      	bne.n	8018092 <__gethex+0x356>
 801802c:	b127      	cbz	r7, 8018038 <__gethex+0x2fc>
 801802e:	4639      	mov	r1, r7
 8018030:	4628      	mov	r0, r5
 8018032:	f000 fdf2 	bl	8018c1a <__any_on>
 8018036:	4682      	mov	sl, r0
 8018038:	2301      	movs	r3, #1
 801803a:	117a      	asrs	r2, r7, #5
 801803c:	f007 071f 	and.w	r7, r7, #31
 8018040:	fa03 f707 	lsl.w	r7, r3, r7
 8018044:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8018048:	4621      	mov	r1, r4
 801804a:	421f      	tst	r7, r3
 801804c:	f04f 0702 	mov.w	r7, #2
 8018050:	4628      	mov	r0, r5
 8018052:	bf18      	it	ne
 8018054:	f04a 0a02 	orrne.w	sl, sl, #2
 8018058:	1b36      	subs	r6, r6, r4
 801805a:	f7ff fe1f 	bl	8017c9c <rshift>
 801805e:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8018062:	f1ba 0f00 	cmp.w	sl, #0
 8018066:	d048      	beq.n	80180fa <__gethex+0x3be>
 8018068:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801806c:	2b02      	cmp	r3, #2
 801806e:	d015      	beq.n	801809c <__gethex+0x360>
 8018070:	2b03      	cmp	r3, #3
 8018072:	d017      	beq.n	80180a4 <__gethex+0x368>
 8018074:	2b01      	cmp	r3, #1
 8018076:	d109      	bne.n	801808c <__gethex+0x350>
 8018078:	f01a 0f02 	tst.w	sl, #2
 801807c:	d006      	beq.n	801808c <__gethex+0x350>
 801807e:	f8d9 3000 	ldr.w	r3, [r9]
 8018082:	ea4a 0a03 	orr.w	sl, sl, r3
 8018086:	f01a 0f01 	tst.w	sl, #1
 801808a:	d10e      	bne.n	80180aa <__gethex+0x36e>
 801808c:	f047 0710 	orr.w	r7, r7, #16
 8018090:	e033      	b.n	80180fa <__gethex+0x3be>
 8018092:	f04f 0a01 	mov.w	sl, #1
 8018096:	e7cf      	b.n	8018038 <__gethex+0x2fc>
 8018098:	2701      	movs	r7, #1
 801809a:	e7e2      	b.n	8018062 <__gethex+0x326>
 801809c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801809e:	f1c3 0301 	rsb	r3, r3, #1
 80180a2:	9315      	str	r3, [sp, #84]	; 0x54
 80180a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80180a6:	2b00      	cmp	r3, #0
 80180a8:	d0f0      	beq.n	801808c <__gethex+0x350>
 80180aa:	f04f 0c00 	mov.w	ip, #0
 80180ae:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80180b2:	f105 0314 	add.w	r3, r5, #20
 80180b6:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80180ba:	eb03 010a 	add.w	r1, r3, sl
 80180be:	4618      	mov	r0, r3
 80180c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80180c4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80180c8:	d01c      	beq.n	8018104 <__gethex+0x3c8>
 80180ca:	3201      	adds	r2, #1
 80180cc:	6002      	str	r2, [r0, #0]
 80180ce:	2f02      	cmp	r7, #2
 80180d0:	f105 0314 	add.w	r3, r5, #20
 80180d4:	d138      	bne.n	8018148 <__gethex+0x40c>
 80180d6:	f8d8 2000 	ldr.w	r2, [r8]
 80180da:	3a01      	subs	r2, #1
 80180dc:	42b2      	cmp	r2, r6
 80180de:	d10a      	bne.n	80180f6 <__gethex+0x3ba>
 80180e0:	2201      	movs	r2, #1
 80180e2:	1171      	asrs	r1, r6, #5
 80180e4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80180e8:	f006 061f 	and.w	r6, r6, #31
 80180ec:	fa02 f606 	lsl.w	r6, r2, r6
 80180f0:	421e      	tst	r6, r3
 80180f2:	bf18      	it	ne
 80180f4:	4617      	movne	r7, r2
 80180f6:	f047 0720 	orr.w	r7, r7, #32
 80180fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80180fc:	601d      	str	r5, [r3, #0]
 80180fe:	9b06      	ldr	r3, [sp, #24]
 8018100:	601c      	str	r4, [r3, #0]
 8018102:	e6a3      	b.n	8017e4c <__gethex+0x110>
 8018104:	4299      	cmp	r1, r3
 8018106:	f843 cc04 	str.w	ip, [r3, #-4]
 801810a:	d8d8      	bhi.n	80180be <__gethex+0x382>
 801810c:	68ab      	ldr	r3, [r5, #8]
 801810e:	4599      	cmp	r9, r3
 8018110:	db12      	blt.n	8018138 <__gethex+0x3fc>
 8018112:	6869      	ldr	r1, [r5, #4]
 8018114:	9802      	ldr	r0, [sp, #8]
 8018116:	3101      	adds	r1, #1
 8018118:	f000 f9a8 	bl	801846c <_Balloc>
 801811c:	4683      	mov	fp, r0
 801811e:	692a      	ldr	r2, [r5, #16]
 8018120:	f105 010c 	add.w	r1, r5, #12
 8018124:	3202      	adds	r2, #2
 8018126:	0092      	lsls	r2, r2, #2
 8018128:	300c      	adds	r0, #12
 801812a:	f7fc feb7 	bl	8014e9c <memcpy>
 801812e:	4629      	mov	r1, r5
 8018130:	9802      	ldr	r0, [sp, #8]
 8018132:	f000 f9cf 	bl	80184d4 <_Bfree>
 8018136:	465d      	mov	r5, fp
 8018138:	692b      	ldr	r3, [r5, #16]
 801813a:	1c5a      	adds	r2, r3, #1
 801813c:	612a      	str	r2, [r5, #16]
 801813e:	2201      	movs	r2, #1
 8018140:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8018144:	615a      	str	r2, [r3, #20]
 8018146:	e7c2      	b.n	80180ce <__gethex+0x392>
 8018148:	692a      	ldr	r2, [r5, #16]
 801814a:	454a      	cmp	r2, r9
 801814c:	dd0b      	ble.n	8018166 <__gethex+0x42a>
 801814e:	2101      	movs	r1, #1
 8018150:	4628      	mov	r0, r5
 8018152:	f7ff fda3 	bl	8017c9c <rshift>
 8018156:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801815a:	3401      	adds	r4, #1
 801815c:	42a3      	cmp	r3, r4
 801815e:	f6ff aed8 	blt.w	8017f12 <__gethex+0x1d6>
 8018162:	2701      	movs	r7, #1
 8018164:	e7c7      	b.n	80180f6 <__gethex+0x3ba>
 8018166:	f016 061f 	ands.w	r6, r6, #31
 801816a:	d0fa      	beq.n	8018162 <__gethex+0x426>
 801816c:	449a      	add	sl, r3
 801816e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8018172:	f000 fa3f 	bl	80185f4 <__hi0bits>
 8018176:	f1c6 0620 	rsb	r6, r6, #32
 801817a:	42b0      	cmp	r0, r6
 801817c:	dbe7      	blt.n	801814e <__gethex+0x412>
 801817e:	e7f0      	b.n	8018162 <__gethex+0x426>

08018180 <L_shift>:
 8018180:	f1c2 0208 	rsb	r2, r2, #8
 8018184:	0092      	lsls	r2, r2, #2
 8018186:	b570      	push	{r4, r5, r6, lr}
 8018188:	f1c2 0620 	rsb	r6, r2, #32
 801818c:	6843      	ldr	r3, [r0, #4]
 801818e:	6804      	ldr	r4, [r0, #0]
 8018190:	fa03 f506 	lsl.w	r5, r3, r6
 8018194:	432c      	orrs	r4, r5
 8018196:	40d3      	lsrs	r3, r2
 8018198:	6004      	str	r4, [r0, #0]
 801819a:	f840 3f04 	str.w	r3, [r0, #4]!
 801819e:	4288      	cmp	r0, r1
 80181a0:	d3f4      	bcc.n	801818c <L_shift+0xc>
 80181a2:	bd70      	pop	{r4, r5, r6, pc}

080181a4 <__match>:
 80181a4:	b530      	push	{r4, r5, lr}
 80181a6:	6803      	ldr	r3, [r0, #0]
 80181a8:	3301      	adds	r3, #1
 80181aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80181ae:	b914      	cbnz	r4, 80181b6 <__match+0x12>
 80181b0:	6003      	str	r3, [r0, #0]
 80181b2:	2001      	movs	r0, #1
 80181b4:	bd30      	pop	{r4, r5, pc}
 80181b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80181ba:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80181be:	2d19      	cmp	r5, #25
 80181c0:	bf98      	it	ls
 80181c2:	3220      	addls	r2, #32
 80181c4:	42a2      	cmp	r2, r4
 80181c6:	d0f0      	beq.n	80181aa <__match+0x6>
 80181c8:	2000      	movs	r0, #0
 80181ca:	e7f3      	b.n	80181b4 <__match+0x10>

080181cc <__hexnan>:
 80181cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181d0:	2500      	movs	r5, #0
 80181d2:	680b      	ldr	r3, [r1, #0]
 80181d4:	4682      	mov	sl, r0
 80181d6:	115f      	asrs	r7, r3, #5
 80181d8:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80181dc:	f013 031f 	ands.w	r3, r3, #31
 80181e0:	bf18      	it	ne
 80181e2:	3704      	addne	r7, #4
 80181e4:	1f3e      	subs	r6, r7, #4
 80181e6:	4690      	mov	r8, r2
 80181e8:	46b1      	mov	r9, r6
 80181ea:	4634      	mov	r4, r6
 80181ec:	46ab      	mov	fp, r5
 80181ee:	b087      	sub	sp, #28
 80181f0:	6801      	ldr	r1, [r0, #0]
 80181f2:	9301      	str	r3, [sp, #4]
 80181f4:	f847 5c04 	str.w	r5, [r7, #-4]
 80181f8:	9502      	str	r5, [sp, #8]
 80181fa:	784a      	ldrb	r2, [r1, #1]
 80181fc:	1c4b      	adds	r3, r1, #1
 80181fe:	9303      	str	r3, [sp, #12]
 8018200:	b342      	cbz	r2, 8018254 <__hexnan+0x88>
 8018202:	4610      	mov	r0, r2
 8018204:	9105      	str	r1, [sp, #20]
 8018206:	9204      	str	r2, [sp, #16]
 8018208:	f7ff fd83 	bl	8017d12 <__hexdig_fun>
 801820c:	2800      	cmp	r0, #0
 801820e:	d143      	bne.n	8018298 <__hexnan+0xcc>
 8018210:	9a04      	ldr	r2, [sp, #16]
 8018212:	9905      	ldr	r1, [sp, #20]
 8018214:	2a20      	cmp	r2, #32
 8018216:	d818      	bhi.n	801824a <__hexnan+0x7e>
 8018218:	9b02      	ldr	r3, [sp, #8]
 801821a:	459b      	cmp	fp, r3
 801821c:	dd13      	ble.n	8018246 <__hexnan+0x7a>
 801821e:	454c      	cmp	r4, r9
 8018220:	d206      	bcs.n	8018230 <__hexnan+0x64>
 8018222:	2d07      	cmp	r5, #7
 8018224:	dc04      	bgt.n	8018230 <__hexnan+0x64>
 8018226:	462a      	mov	r2, r5
 8018228:	4649      	mov	r1, r9
 801822a:	4620      	mov	r0, r4
 801822c:	f7ff ffa8 	bl	8018180 <L_shift>
 8018230:	4544      	cmp	r4, r8
 8018232:	d944      	bls.n	80182be <__hexnan+0xf2>
 8018234:	2300      	movs	r3, #0
 8018236:	f1a4 0904 	sub.w	r9, r4, #4
 801823a:	f844 3c04 	str.w	r3, [r4, #-4]
 801823e:	461d      	mov	r5, r3
 8018240:	464c      	mov	r4, r9
 8018242:	f8cd b008 	str.w	fp, [sp, #8]
 8018246:	9903      	ldr	r1, [sp, #12]
 8018248:	e7d7      	b.n	80181fa <__hexnan+0x2e>
 801824a:	2a29      	cmp	r2, #41	; 0x29
 801824c:	d14a      	bne.n	80182e4 <__hexnan+0x118>
 801824e:	3102      	adds	r1, #2
 8018250:	f8ca 1000 	str.w	r1, [sl]
 8018254:	f1bb 0f00 	cmp.w	fp, #0
 8018258:	d044      	beq.n	80182e4 <__hexnan+0x118>
 801825a:	454c      	cmp	r4, r9
 801825c:	d206      	bcs.n	801826c <__hexnan+0xa0>
 801825e:	2d07      	cmp	r5, #7
 8018260:	dc04      	bgt.n	801826c <__hexnan+0xa0>
 8018262:	462a      	mov	r2, r5
 8018264:	4649      	mov	r1, r9
 8018266:	4620      	mov	r0, r4
 8018268:	f7ff ff8a 	bl	8018180 <L_shift>
 801826c:	4544      	cmp	r4, r8
 801826e:	d928      	bls.n	80182c2 <__hexnan+0xf6>
 8018270:	4643      	mov	r3, r8
 8018272:	f854 2b04 	ldr.w	r2, [r4], #4
 8018276:	42a6      	cmp	r6, r4
 8018278:	f843 2b04 	str.w	r2, [r3], #4
 801827c:	d2f9      	bcs.n	8018272 <__hexnan+0xa6>
 801827e:	2200      	movs	r2, #0
 8018280:	f843 2b04 	str.w	r2, [r3], #4
 8018284:	429e      	cmp	r6, r3
 8018286:	d2fb      	bcs.n	8018280 <__hexnan+0xb4>
 8018288:	6833      	ldr	r3, [r6, #0]
 801828a:	b91b      	cbnz	r3, 8018294 <__hexnan+0xc8>
 801828c:	4546      	cmp	r6, r8
 801828e:	d127      	bne.n	80182e0 <__hexnan+0x114>
 8018290:	2301      	movs	r3, #1
 8018292:	6033      	str	r3, [r6, #0]
 8018294:	2005      	movs	r0, #5
 8018296:	e026      	b.n	80182e6 <__hexnan+0x11a>
 8018298:	3501      	adds	r5, #1
 801829a:	2d08      	cmp	r5, #8
 801829c:	f10b 0b01 	add.w	fp, fp, #1
 80182a0:	dd06      	ble.n	80182b0 <__hexnan+0xe4>
 80182a2:	4544      	cmp	r4, r8
 80182a4:	d9cf      	bls.n	8018246 <__hexnan+0x7a>
 80182a6:	2300      	movs	r3, #0
 80182a8:	2501      	movs	r5, #1
 80182aa:	f844 3c04 	str.w	r3, [r4, #-4]
 80182ae:	3c04      	subs	r4, #4
 80182b0:	6822      	ldr	r2, [r4, #0]
 80182b2:	f000 000f 	and.w	r0, r0, #15
 80182b6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80182ba:	6020      	str	r0, [r4, #0]
 80182bc:	e7c3      	b.n	8018246 <__hexnan+0x7a>
 80182be:	2508      	movs	r5, #8
 80182c0:	e7c1      	b.n	8018246 <__hexnan+0x7a>
 80182c2:	9b01      	ldr	r3, [sp, #4]
 80182c4:	2b00      	cmp	r3, #0
 80182c6:	d0df      	beq.n	8018288 <__hexnan+0xbc>
 80182c8:	f04f 32ff 	mov.w	r2, #4294967295
 80182cc:	f1c3 0320 	rsb	r3, r3, #32
 80182d0:	fa22 f303 	lsr.w	r3, r2, r3
 80182d4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80182d8:	401a      	ands	r2, r3
 80182da:	f847 2c04 	str.w	r2, [r7, #-4]
 80182de:	e7d3      	b.n	8018288 <__hexnan+0xbc>
 80182e0:	3e04      	subs	r6, #4
 80182e2:	e7d1      	b.n	8018288 <__hexnan+0xbc>
 80182e4:	2004      	movs	r0, #4
 80182e6:	b007      	add	sp, #28
 80182e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080182ec <__locale_ctype_ptr_l>:
 80182ec:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80182f0:	4770      	bx	lr
	...

080182f4 <__locale_ctype_ptr>:
 80182f4:	4b04      	ldr	r3, [pc, #16]	; (8018308 <__locale_ctype_ptr+0x14>)
 80182f6:	4a05      	ldr	r2, [pc, #20]	; (801830c <__locale_ctype_ptr+0x18>)
 80182f8:	681b      	ldr	r3, [r3, #0]
 80182fa:	6a1b      	ldr	r3, [r3, #32]
 80182fc:	2b00      	cmp	r3, #0
 80182fe:	bf08      	it	eq
 8018300:	4613      	moveq	r3, r2
 8018302:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8018306:	4770      	bx	lr
 8018308:	20000148 	.word	0x20000148
 801830c:	200001ac 	.word	0x200001ac

08018310 <__localeconv_l>:
 8018310:	30f0      	adds	r0, #240	; 0xf0
 8018312:	4770      	bx	lr

08018314 <_localeconv_r>:
 8018314:	4b04      	ldr	r3, [pc, #16]	; (8018328 <_localeconv_r+0x14>)
 8018316:	681b      	ldr	r3, [r3, #0]
 8018318:	6a18      	ldr	r0, [r3, #32]
 801831a:	4b04      	ldr	r3, [pc, #16]	; (801832c <_localeconv_r+0x18>)
 801831c:	2800      	cmp	r0, #0
 801831e:	bf08      	it	eq
 8018320:	4618      	moveq	r0, r3
 8018322:	30f0      	adds	r0, #240	; 0xf0
 8018324:	4770      	bx	lr
 8018326:	bf00      	nop
 8018328:	20000148 	.word	0x20000148
 801832c:	200001ac 	.word	0x200001ac

08018330 <_lseek_r>:
 8018330:	b538      	push	{r3, r4, r5, lr}
 8018332:	4605      	mov	r5, r0
 8018334:	4608      	mov	r0, r1
 8018336:	4611      	mov	r1, r2
 8018338:	2200      	movs	r2, #0
 801833a:	4c05      	ldr	r4, [pc, #20]	; (8018350 <_lseek_r+0x20>)
 801833c:	6022      	str	r2, [r4, #0]
 801833e:	461a      	mov	r2, r3
 8018340:	f7eb fdc9 	bl	8003ed6 <_lseek>
 8018344:	1c43      	adds	r3, r0, #1
 8018346:	d102      	bne.n	801834e <_lseek_r+0x1e>
 8018348:	6823      	ldr	r3, [r4, #0]
 801834a:	b103      	cbz	r3, 801834e <_lseek_r+0x1e>
 801834c:	602b      	str	r3, [r5, #0]
 801834e:	bd38      	pop	{r3, r4, r5, pc}
 8018350:	20009e2c 	.word	0x20009e2c

08018354 <__swhatbuf_r>:
 8018354:	b570      	push	{r4, r5, r6, lr}
 8018356:	460e      	mov	r6, r1
 8018358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801835c:	b096      	sub	sp, #88	; 0x58
 801835e:	2900      	cmp	r1, #0
 8018360:	4614      	mov	r4, r2
 8018362:	461d      	mov	r5, r3
 8018364:	da07      	bge.n	8018376 <__swhatbuf_r+0x22>
 8018366:	2300      	movs	r3, #0
 8018368:	602b      	str	r3, [r5, #0]
 801836a:	89b3      	ldrh	r3, [r6, #12]
 801836c:	061a      	lsls	r2, r3, #24
 801836e:	d410      	bmi.n	8018392 <__swhatbuf_r+0x3e>
 8018370:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018374:	e00e      	b.n	8018394 <__swhatbuf_r+0x40>
 8018376:	466a      	mov	r2, sp
 8018378:	f001 fbdc 	bl	8019b34 <_fstat_r>
 801837c:	2800      	cmp	r0, #0
 801837e:	dbf2      	blt.n	8018366 <__swhatbuf_r+0x12>
 8018380:	9a01      	ldr	r2, [sp, #4]
 8018382:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8018386:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801838a:	425a      	negs	r2, r3
 801838c:	415a      	adcs	r2, r3
 801838e:	602a      	str	r2, [r5, #0]
 8018390:	e7ee      	b.n	8018370 <__swhatbuf_r+0x1c>
 8018392:	2340      	movs	r3, #64	; 0x40
 8018394:	2000      	movs	r0, #0
 8018396:	6023      	str	r3, [r4, #0]
 8018398:	b016      	add	sp, #88	; 0x58
 801839a:	bd70      	pop	{r4, r5, r6, pc}

0801839c <__smakebuf_r>:
 801839c:	898b      	ldrh	r3, [r1, #12]
 801839e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80183a0:	079d      	lsls	r5, r3, #30
 80183a2:	4606      	mov	r6, r0
 80183a4:	460c      	mov	r4, r1
 80183a6:	d507      	bpl.n	80183b8 <__smakebuf_r+0x1c>
 80183a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80183ac:	6023      	str	r3, [r4, #0]
 80183ae:	6123      	str	r3, [r4, #16]
 80183b0:	2301      	movs	r3, #1
 80183b2:	6163      	str	r3, [r4, #20]
 80183b4:	b002      	add	sp, #8
 80183b6:	bd70      	pop	{r4, r5, r6, pc}
 80183b8:	ab01      	add	r3, sp, #4
 80183ba:	466a      	mov	r2, sp
 80183bc:	f7ff ffca 	bl	8018354 <__swhatbuf_r>
 80183c0:	9900      	ldr	r1, [sp, #0]
 80183c2:	4605      	mov	r5, r0
 80183c4:	4630      	mov	r0, r6
 80183c6:	f000 fca3 	bl	8018d10 <_malloc_r>
 80183ca:	b948      	cbnz	r0, 80183e0 <__smakebuf_r+0x44>
 80183cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80183d0:	059a      	lsls	r2, r3, #22
 80183d2:	d4ef      	bmi.n	80183b4 <__smakebuf_r+0x18>
 80183d4:	f023 0303 	bic.w	r3, r3, #3
 80183d8:	f043 0302 	orr.w	r3, r3, #2
 80183dc:	81a3      	strh	r3, [r4, #12]
 80183de:	e7e3      	b.n	80183a8 <__smakebuf_r+0xc>
 80183e0:	4b0d      	ldr	r3, [pc, #52]	; (8018418 <__smakebuf_r+0x7c>)
 80183e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80183e4:	89a3      	ldrh	r3, [r4, #12]
 80183e6:	6020      	str	r0, [r4, #0]
 80183e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80183ec:	81a3      	strh	r3, [r4, #12]
 80183ee:	9b00      	ldr	r3, [sp, #0]
 80183f0:	6120      	str	r0, [r4, #16]
 80183f2:	6163      	str	r3, [r4, #20]
 80183f4:	9b01      	ldr	r3, [sp, #4]
 80183f6:	b15b      	cbz	r3, 8018410 <__smakebuf_r+0x74>
 80183f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80183fc:	4630      	mov	r0, r6
 80183fe:	f001 fbab 	bl	8019b58 <_isatty_r>
 8018402:	b128      	cbz	r0, 8018410 <__smakebuf_r+0x74>
 8018404:	89a3      	ldrh	r3, [r4, #12]
 8018406:	f023 0303 	bic.w	r3, r3, #3
 801840a:	f043 0301 	orr.w	r3, r3, #1
 801840e:	81a3      	strh	r3, [r4, #12]
 8018410:	89a3      	ldrh	r3, [r4, #12]
 8018412:	431d      	orrs	r5, r3
 8018414:	81a5      	strh	r5, [r4, #12]
 8018416:	e7cd      	b.n	80183b4 <__smakebuf_r+0x18>
 8018418:	08017b51 	.word	0x08017b51

0801841c <malloc>:
 801841c:	4b02      	ldr	r3, [pc, #8]	; (8018428 <malloc+0xc>)
 801841e:	4601      	mov	r1, r0
 8018420:	6818      	ldr	r0, [r3, #0]
 8018422:	f000 bc75 	b.w	8018d10 <_malloc_r>
 8018426:	bf00      	nop
 8018428:	20000148 	.word	0x20000148

0801842c <__ascii_mbtowc>:
 801842c:	b082      	sub	sp, #8
 801842e:	b901      	cbnz	r1, 8018432 <__ascii_mbtowc+0x6>
 8018430:	a901      	add	r1, sp, #4
 8018432:	b142      	cbz	r2, 8018446 <__ascii_mbtowc+0x1a>
 8018434:	b14b      	cbz	r3, 801844a <__ascii_mbtowc+0x1e>
 8018436:	7813      	ldrb	r3, [r2, #0]
 8018438:	600b      	str	r3, [r1, #0]
 801843a:	7812      	ldrb	r2, [r2, #0]
 801843c:	1c10      	adds	r0, r2, #0
 801843e:	bf18      	it	ne
 8018440:	2001      	movne	r0, #1
 8018442:	b002      	add	sp, #8
 8018444:	4770      	bx	lr
 8018446:	4610      	mov	r0, r2
 8018448:	e7fb      	b.n	8018442 <__ascii_mbtowc+0x16>
 801844a:	f06f 0001 	mvn.w	r0, #1
 801844e:	e7f8      	b.n	8018442 <__ascii_mbtowc+0x16>

08018450 <memchr>:
 8018450:	b510      	push	{r4, lr}
 8018452:	b2c9      	uxtb	r1, r1
 8018454:	4402      	add	r2, r0
 8018456:	4290      	cmp	r0, r2
 8018458:	4603      	mov	r3, r0
 801845a:	d101      	bne.n	8018460 <memchr+0x10>
 801845c:	2300      	movs	r3, #0
 801845e:	e003      	b.n	8018468 <memchr+0x18>
 8018460:	781c      	ldrb	r4, [r3, #0]
 8018462:	3001      	adds	r0, #1
 8018464:	428c      	cmp	r4, r1
 8018466:	d1f6      	bne.n	8018456 <memchr+0x6>
 8018468:	4618      	mov	r0, r3
 801846a:	bd10      	pop	{r4, pc}

0801846c <_Balloc>:
 801846c:	b570      	push	{r4, r5, r6, lr}
 801846e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018470:	4604      	mov	r4, r0
 8018472:	460e      	mov	r6, r1
 8018474:	b93d      	cbnz	r5, 8018486 <_Balloc+0x1a>
 8018476:	2010      	movs	r0, #16
 8018478:	f7ff ffd0 	bl	801841c <malloc>
 801847c:	6260      	str	r0, [r4, #36]	; 0x24
 801847e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8018482:	6005      	str	r5, [r0, #0]
 8018484:	60c5      	str	r5, [r0, #12]
 8018486:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8018488:	68eb      	ldr	r3, [r5, #12]
 801848a:	b183      	cbz	r3, 80184ae <_Balloc+0x42>
 801848c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801848e:	68db      	ldr	r3, [r3, #12]
 8018490:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8018494:	b9b8      	cbnz	r0, 80184c6 <_Balloc+0x5a>
 8018496:	2101      	movs	r1, #1
 8018498:	fa01 f506 	lsl.w	r5, r1, r6
 801849c:	1d6a      	adds	r2, r5, #5
 801849e:	0092      	lsls	r2, r2, #2
 80184a0:	4620      	mov	r0, r4
 80184a2:	f000 fbdb 	bl	8018c5c <_calloc_r>
 80184a6:	b160      	cbz	r0, 80184c2 <_Balloc+0x56>
 80184a8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80184ac:	e00e      	b.n	80184cc <_Balloc+0x60>
 80184ae:	2221      	movs	r2, #33	; 0x21
 80184b0:	2104      	movs	r1, #4
 80184b2:	4620      	mov	r0, r4
 80184b4:	f000 fbd2 	bl	8018c5c <_calloc_r>
 80184b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80184ba:	60e8      	str	r0, [r5, #12]
 80184bc:	68db      	ldr	r3, [r3, #12]
 80184be:	2b00      	cmp	r3, #0
 80184c0:	d1e4      	bne.n	801848c <_Balloc+0x20>
 80184c2:	2000      	movs	r0, #0
 80184c4:	bd70      	pop	{r4, r5, r6, pc}
 80184c6:	6802      	ldr	r2, [r0, #0]
 80184c8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80184cc:	2300      	movs	r3, #0
 80184ce:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80184d2:	e7f7      	b.n	80184c4 <_Balloc+0x58>

080184d4 <_Bfree>:
 80184d4:	b570      	push	{r4, r5, r6, lr}
 80184d6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80184d8:	4606      	mov	r6, r0
 80184da:	460d      	mov	r5, r1
 80184dc:	b93c      	cbnz	r4, 80184ee <_Bfree+0x1a>
 80184de:	2010      	movs	r0, #16
 80184e0:	f7ff ff9c 	bl	801841c <malloc>
 80184e4:	6270      	str	r0, [r6, #36]	; 0x24
 80184e6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80184ea:	6004      	str	r4, [r0, #0]
 80184ec:	60c4      	str	r4, [r0, #12]
 80184ee:	b13d      	cbz	r5, 8018500 <_Bfree+0x2c>
 80184f0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80184f2:	686a      	ldr	r2, [r5, #4]
 80184f4:	68db      	ldr	r3, [r3, #12]
 80184f6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80184fa:	6029      	str	r1, [r5, #0]
 80184fc:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8018500:	bd70      	pop	{r4, r5, r6, pc}

08018502 <__multadd>:
 8018502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018506:	461f      	mov	r7, r3
 8018508:	4606      	mov	r6, r0
 801850a:	460c      	mov	r4, r1
 801850c:	2300      	movs	r3, #0
 801850e:	690d      	ldr	r5, [r1, #16]
 8018510:	f101 0c14 	add.w	ip, r1, #20
 8018514:	f8dc 0000 	ldr.w	r0, [ip]
 8018518:	3301      	adds	r3, #1
 801851a:	b281      	uxth	r1, r0
 801851c:	fb02 7101 	mla	r1, r2, r1, r7
 8018520:	0c00      	lsrs	r0, r0, #16
 8018522:	0c0f      	lsrs	r7, r1, #16
 8018524:	fb02 7000 	mla	r0, r2, r0, r7
 8018528:	b289      	uxth	r1, r1
 801852a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801852e:	429d      	cmp	r5, r3
 8018530:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8018534:	f84c 1b04 	str.w	r1, [ip], #4
 8018538:	dcec      	bgt.n	8018514 <__multadd+0x12>
 801853a:	b1d7      	cbz	r7, 8018572 <__multadd+0x70>
 801853c:	68a3      	ldr	r3, [r4, #8]
 801853e:	42ab      	cmp	r3, r5
 8018540:	dc12      	bgt.n	8018568 <__multadd+0x66>
 8018542:	6861      	ldr	r1, [r4, #4]
 8018544:	4630      	mov	r0, r6
 8018546:	3101      	adds	r1, #1
 8018548:	f7ff ff90 	bl	801846c <_Balloc>
 801854c:	4680      	mov	r8, r0
 801854e:	6922      	ldr	r2, [r4, #16]
 8018550:	f104 010c 	add.w	r1, r4, #12
 8018554:	3202      	adds	r2, #2
 8018556:	0092      	lsls	r2, r2, #2
 8018558:	300c      	adds	r0, #12
 801855a:	f7fc fc9f 	bl	8014e9c <memcpy>
 801855e:	4621      	mov	r1, r4
 8018560:	4630      	mov	r0, r6
 8018562:	f7ff ffb7 	bl	80184d4 <_Bfree>
 8018566:	4644      	mov	r4, r8
 8018568:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801856c:	3501      	adds	r5, #1
 801856e:	615f      	str	r7, [r3, #20]
 8018570:	6125      	str	r5, [r4, #16]
 8018572:	4620      	mov	r0, r4
 8018574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018578 <__s2b>:
 8018578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801857c:	4615      	mov	r5, r2
 801857e:	2209      	movs	r2, #9
 8018580:	461f      	mov	r7, r3
 8018582:	3308      	adds	r3, #8
 8018584:	460c      	mov	r4, r1
 8018586:	fb93 f3f2 	sdiv	r3, r3, r2
 801858a:	4606      	mov	r6, r0
 801858c:	2201      	movs	r2, #1
 801858e:	2100      	movs	r1, #0
 8018590:	429a      	cmp	r2, r3
 8018592:	db20      	blt.n	80185d6 <__s2b+0x5e>
 8018594:	4630      	mov	r0, r6
 8018596:	f7ff ff69 	bl	801846c <_Balloc>
 801859a:	9b08      	ldr	r3, [sp, #32]
 801859c:	2d09      	cmp	r5, #9
 801859e:	6143      	str	r3, [r0, #20]
 80185a0:	f04f 0301 	mov.w	r3, #1
 80185a4:	6103      	str	r3, [r0, #16]
 80185a6:	dd19      	ble.n	80185dc <__s2b+0x64>
 80185a8:	f104 0809 	add.w	r8, r4, #9
 80185ac:	46c1      	mov	r9, r8
 80185ae:	442c      	add	r4, r5
 80185b0:	f819 3b01 	ldrb.w	r3, [r9], #1
 80185b4:	4601      	mov	r1, r0
 80185b6:	3b30      	subs	r3, #48	; 0x30
 80185b8:	220a      	movs	r2, #10
 80185ba:	4630      	mov	r0, r6
 80185bc:	f7ff ffa1 	bl	8018502 <__multadd>
 80185c0:	45a1      	cmp	r9, r4
 80185c2:	d1f5      	bne.n	80185b0 <__s2b+0x38>
 80185c4:	eb08 0405 	add.w	r4, r8, r5
 80185c8:	3c08      	subs	r4, #8
 80185ca:	1b2d      	subs	r5, r5, r4
 80185cc:	1963      	adds	r3, r4, r5
 80185ce:	42bb      	cmp	r3, r7
 80185d0:	db07      	blt.n	80185e2 <__s2b+0x6a>
 80185d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80185d6:	0052      	lsls	r2, r2, #1
 80185d8:	3101      	adds	r1, #1
 80185da:	e7d9      	b.n	8018590 <__s2b+0x18>
 80185dc:	340a      	adds	r4, #10
 80185de:	2509      	movs	r5, #9
 80185e0:	e7f3      	b.n	80185ca <__s2b+0x52>
 80185e2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80185e6:	4601      	mov	r1, r0
 80185e8:	3b30      	subs	r3, #48	; 0x30
 80185ea:	220a      	movs	r2, #10
 80185ec:	4630      	mov	r0, r6
 80185ee:	f7ff ff88 	bl	8018502 <__multadd>
 80185f2:	e7eb      	b.n	80185cc <__s2b+0x54>

080185f4 <__hi0bits>:
 80185f4:	0c02      	lsrs	r2, r0, #16
 80185f6:	0412      	lsls	r2, r2, #16
 80185f8:	4603      	mov	r3, r0
 80185fa:	b9b2      	cbnz	r2, 801862a <__hi0bits+0x36>
 80185fc:	0403      	lsls	r3, r0, #16
 80185fe:	2010      	movs	r0, #16
 8018600:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8018604:	bf04      	itt	eq
 8018606:	021b      	lsleq	r3, r3, #8
 8018608:	3008      	addeq	r0, #8
 801860a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801860e:	bf04      	itt	eq
 8018610:	011b      	lsleq	r3, r3, #4
 8018612:	3004      	addeq	r0, #4
 8018614:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8018618:	bf04      	itt	eq
 801861a:	009b      	lsleq	r3, r3, #2
 801861c:	3002      	addeq	r0, #2
 801861e:	2b00      	cmp	r3, #0
 8018620:	db06      	blt.n	8018630 <__hi0bits+0x3c>
 8018622:	005b      	lsls	r3, r3, #1
 8018624:	d503      	bpl.n	801862e <__hi0bits+0x3a>
 8018626:	3001      	adds	r0, #1
 8018628:	4770      	bx	lr
 801862a:	2000      	movs	r0, #0
 801862c:	e7e8      	b.n	8018600 <__hi0bits+0xc>
 801862e:	2020      	movs	r0, #32
 8018630:	4770      	bx	lr

08018632 <__lo0bits>:
 8018632:	6803      	ldr	r3, [r0, #0]
 8018634:	4601      	mov	r1, r0
 8018636:	f013 0207 	ands.w	r2, r3, #7
 801863a:	d00b      	beq.n	8018654 <__lo0bits+0x22>
 801863c:	07da      	lsls	r2, r3, #31
 801863e:	d423      	bmi.n	8018688 <__lo0bits+0x56>
 8018640:	0798      	lsls	r0, r3, #30
 8018642:	bf49      	itett	mi
 8018644:	085b      	lsrmi	r3, r3, #1
 8018646:	089b      	lsrpl	r3, r3, #2
 8018648:	2001      	movmi	r0, #1
 801864a:	600b      	strmi	r3, [r1, #0]
 801864c:	bf5c      	itt	pl
 801864e:	600b      	strpl	r3, [r1, #0]
 8018650:	2002      	movpl	r0, #2
 8018652:	4770      	bx	lr
 8018654:	b298      	uxth	r0, r3
 8018656:	b9a8      	cbnz	r0, 8018684 <__lo0bits+0x52>
 8018658:	2010      	movs	r0, #16
 801865a:	0c1b      	lsrs	r3, r3, #16
 801865c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8018660:	bf04      	itt	eq
 8018662:	0a1b      	lsreq	r3, r3, #8
 8018664:	3008      	addeq	r0, #8
 8018666:	071a      	lsls	r2, r3, #28
 8018668:	bf04      	itt	eq
 801866a:	091b      	lsreq	r3, r3, #4
 801866c:	3004      	addeq	r0, #4
 801866e:	079a      	lsls	r2, r3, #30
 8018670:	bf04      	itt	eq
 8018672:	089b      	lsreq	r3, r3, #2
 8018674:	3002      	addeq	r0, #2
 8018676:	07da      	lsls	r2, r3, #31
 8018678:	d402      	bmi.n	8018680 <__lo0bits+0x4e>
 801867a:	085b      	lsrs	r3, r3, #1
 801867c:	d006      	beq.n	801868c <__lo0bits+0x5a>
 801867e:	3001      	adds	r0, #1
 8018680:	600b      	str	r3, [r1, #0]
 8018682:	4770      	bx	lr
 8018684:	4610      	mov	r0, r2
 8018686:	e7e9      	b.n	801865c <__lo0bits+0x2a>
 8018688:	2000      	movs	r0, #0
 801868a:	4770      	bx	lr
 801868c:	2020      	movs	r0, #32
 801868e:	4770      	bx	lr

08018690 <__i2b>:
 8018690:	b510      	push	{r4, lr}
 8018692:	460c      	mov	r4, r1
 8018694:	2101      	movs	r1, #1
 8018696:	f7ff fee9 	bl	801846c <_Balloc>
 801869a:	2201      	movs	r2, #1
 801869c:	6144      	str	r4, [r0, #20]
 801869e:	6102      	str	r2, [r0, #16]
 80186a0:	bd10      	pop	{r4, pc}

080186a2 <__multiply>:
 80186a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186a6:	4614      	mov	r4, r2
 80186a8:	690a      	ldr	r2, [r1, #16]
 80186aa:	6923      	ldr	r3, [r4, #16]
 80186ac:	4688      	mov	r8, r1
 80186ae:	429a      	cmp	r2, r3
 80186b0:	bfbe      	ittt	lt
 80186b2:	460b      	movlt	r3, r1
 80186b4:	46a0      	movlt	r8, r4
 80186b6:	461c      	movlt	r4, r3
 80186b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80186bc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80186c0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80186c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80186c8:	eb07 0609 	add.w	r6, r7, r9
 80186cc:	42b3      	cmp	r3, r6
 80186ce:	bfb8      	it	lt
 80186d0:	3101      	addlt	r1, #1
 80186d2:	f7ff fecb 	bl	801846c <_Balloc>
 80186d6:	f100 0514 	add.w	r5, r0, #20
 80186da:	462b      	mov	r3, r5
 80186dc:	2200      	movs	r2, #0
 80186de:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80186e2:	4573      	cmp	r3, lr
 80186e4:	d316      	bcc.n	8018714 <__multiply+0x72>
 80186e6:	f104 0214 	add.w	r2, r4, #20
 80186ea:	f108 0114 	add.w	r1, r8, #20
 80186ee:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80186f2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80186f6:	9300      	str	r3, [sp, #0]
 80186f8:	9b00      	ldr	r3, [sp, #0]
 80186fa:	9201      	str	r2, [sp, #4]
 80186fc:	4293      	cmp	r3, r2
 80186fe:	d80c      	bhi.n	801871a <__multiply+0x78>
 8018700:	2e00      	cmp	r6, #0
 8018702:	dd03      	ble.n	801870c <__multiply+0x6a>
 8018704:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8018708:	2b00      	cmp	r3, #0
 801870a:	d05d      	beq.n	80187c8 <__multiply+0x126>
 801870c:	6106      	str	r6, [r0, #16]
 801870e:	b003      	add	sp, #12
 8018710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018714:	f843 2b04 	str.w	r2, [r3], #4
 8018718:	e7e3      	b.n	80186e2 <__multiply+0x40>
 801871a:	f8b2 b000 	ldrh.w	fp, [r2]
 801871e:	f1bb 0f00 	cmp.w	fp, #0
 8018722:	d023      	beq.n	801876c <__multiply+0xca>
 8018724:	4689      	mov	r9, r1
 8018726:	46ac      	mov	ip, r5
 8018728:	f04f 0800 	mov.w	r8, #0
 801872c:	f859 4b04 	ldr.w	r4, [r9], #4
 8018730:	f8dc a000 	ldr.w	sl, [ip]
 8018734:	b2a3      	uxth	r3, r4
 8018736:	fa1f fa8a 	uxth.w	sl, sl
 801873a:	fb0b a303 	mla	r3, fp, r3, sl
 801873e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8018742:	f8dc 4000 	ldr.w	r4, [ip]
 8018746:	4443      	add	r3, r8
 8018748:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801874c:	fb0b 840a 	mla	r4, fp, sl, r8
 8018750:	46e2      	mov	sl, ip
 8018752:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8018756:	b29b      	uxth	r3, r3
 8018758:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801875c:	454f      	cmp	r7, r9
 801875e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018762:	f84a 3b04 	str.w	r3, [sl], #4
 8018766:	d82b      	bhi.n	80187c0 <__multiply+0x11e>
 8018768:	f8cc 8004 	str.w	r8, [ip, #4]
 801876c:	9b01      	ldr	r3, [sp, #4]
 801876e:	3204      	adds	r2, #4
 8018770:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8018774:	f1ba 0f00 	cmp.w	sl, #0
 8018778:	d020      	beq.n	80187bc <__multiply+0x11a>
 801877a:	4689      	mov	r9, r1
 801877c:	46a8      	mov	r8, r5
 801877e:	f04f 0b00 	mov.w	fp, #0
 8018782:	682b      	ldr	r3, [r5, #0]
 8018784:	f8b9 c000 	ldrh.w	ip, [r9]
 8018788:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801878c:	b29b      	uxth	r3, r3
 801878e:	fb0a 440c 	mla	r4, sl, ip, r4
 8018792:	46c4      	mov	ip, r8
 8018794:	445c      	add	r4, fp
 8018796:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801879a:	f84c 3b04 	str.w	r3, [ip], #4
 801879e:	f859 3b04 	ldr.w	r3, [r9], #4
 80187a2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80187a6:	0c1b      	lsrs	r3, r3, #16
 80187a8:	fb0a b303 	mla	r3, sl, r3, fp
 80187ac:	454f      	cmp	r7, r9
 80187ae:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80187b2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80187b6:	d805      	bhi.n	80187c4 <__multiply+0x122>
 80187b8:	f8c8 3004 	str.w	r3, [r8, #4]
 80187bc:	3504      	adds	r5, #4
 80187be:	e79b      	b.n	80186f8 <__multiply+0x56>
 80187c0:	46d4      	mov	ip, sl
 80187c2:	e7b3      	b.n	801872c <__multiply+0x8a>
 80187c4:	46e0      	mov	r8, ip
 80187c6:	e7dd      	b.n	8018784 <__multiply+0xe2>
 80187c8:	3e01      	subs	r6, #1
 80187ca:	e799      	b.n	8018700 <__multiply+0x5e>

080187cc <__pow5mult>:
 80187cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80187d0:	4615      	mov	r5, r2
 80187d2:	f012 0203 	ands.w	r2, r2, #3
 80187d6:	4606      	mov	r6, r0
 80187d8:	460f      	mov	r7, r1
 80187da:	d007      	beq.n	80187ec <__pow5mult+0x20>
 80187dc:	4c21      	ldr	r4, [pc, #132]	; (8018864 <__pow5mult+0x98>)
 80187de:	3a01      	subs	r2, #1
 80187e0:	2300      	movs	r3, #0
 80187e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80187e6:	f7ff fe8c 	bl	8018502 <__multadd>
 80187ea:	4607      	mov	r7, r0
 80187ec:	10ad      	asrs	r5, r5, #2
 80187ee:	d035      	beq.n	801885c <__pow5mult+0x90>
 80187f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80187f2:	b93c      	cbnz	r4, 8018804 <__pow5mult+0x38>
 80187f4:	2010      	movs	r0, #16
 80187f6:	f7ff fe11 	bl	801841c <malloc>
 80187fa:	6270      	str	r0, [r6, #36]	; 0x24
 80187fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018800:	6004      	str	r4, [r0, #0]
 8018802:	60c4      	str	r4, [r0, #12]
 8018804:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8018808:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801880c:	b94c      	cbnz	r4, 8018822 <__pow5mult+0x56>
 801880e:	f240 2171 	movw	r1, #625	; 0x271
 8018812:	4630      	mov	r0, r6
 8018814:	f7ff ff3c 	bl	8018690 <__i2b>
 8018818:	2300      	movs	r3, #0
 801881a:	4604      	mov	r4, r0
 801881c:	f8c8 0008 	str.w	r0, [r8, #8]
 8018820:	6003      	str	r3, [r0, #0]
 8018822:	f04f 0800 	mov.w	r8, #0
 8018826:	07eb      	lsls	r3, r5, #31
 8018828:	d50a      	bpl.n	8018840 <__pow5mult+0x74>
 801882a:	4639      	mov	r1, r7
 801882c:	4622      	mov	r2, r4
 801882e:	4630      	mov	r0, r6
 8018830:	f7ff ff37 	bl	80186a2 <__multiply>
 8018834:	4681      	mov	r9, r0
 8018836:	4639      	mov	r1, r7
 8018838:	4630      	mov	r0, r6
 801883a:	f7ff fe4b 	bl	80184d4 <_Bfree>
 801883e:	464f      	mov	r7, r9
 8018840:	106d      	asrs	r5, r5, #1
 8018842:	d00b      	beq.n	801885c <__pow5mult+0x90>
 8018844:	6820      	ldr	r0, [r4, #0]
 8018846:	b938      	cbnz	r0, 8018858 <__pow5mult+0x8c>
 8018848:	4622      	mov	r2, r4
 801884a:	4621      	mov	r1, r4
 801884c:	4630      	mov	r0, r6
 801884e:	f7ff ff28 	bl	80186a2 <__multiply>
 8018852:	6020      	str	r0, [r4, #0]
 8018854:	f8c0 8000 	str.w	r8, [r0]
 8018858:	4604      	mov	r4, r0
 801885a:	e7e4      	b.n	8018826 <__pow5mult+0x5a>
 801885c:	4638      	mov	r0, r7
 801885e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018862:	bf00      	nop
 8018864:	0801e828 	.word	0x0801e828

08018868 <__lshift>:
 8018868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801886c:	460c      	mov	r4, r1
 801886e:	4607      	mov	r7, r0
 8018870:	4616      	mov	r6, r2
 8018872:	6923      	ldr	r3, [r4, #16]
 8018874:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018878:	eb0a 0903 	add.w	r9, sl, r3
 801887c:	6849      	ldr	r1, [r1, #4]
 801887e:	68a3      	ldr	r3, [r4, #8]
 8018880:	f109 0501 	add.w	r5, r9, #1
 8018884:	42ab      	cmp	r3, r5
 8018886:	db32      	blt.n	80188ee <__lshift+0x86>
 8018888:	4638      	mov	r0, r7
 801888a:	f7ff fdef 	bl	801846c <_Balloc>
 801888e:	2300      	movs	r3, #0
 8018890:	4680      	mov	r8, r0
 8018892:	461a      	mov	r2, r3
 8018894:	f100 0114 	add.w	r1, r0, #20
 8018898:	4553      	cmp	r3, sl
 801889a:	db2b      	blt.n	80188f4 <__lshift+0x8c>
 801889c:	6920      	ldr	r0, [r4, #16]
 801889e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80188a2:	f104 0314 	add.w	r3, r4, #20
 80188a6:	f016 021f 	ands.w	r2, r6, #31
 80188aa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80188ae:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80188b2:	d025      	beq.n	8018900 <__lshift+0x98>
 80188b4:	2000      	movs	r0, #0
 80188b6:	f1c2 0e20 	rsb	lr, r2, #32
 80188ba:	468a      	mov	sl, r1
 80188bc:	681e      	ldr	r6, [r3, #0]
 80188be:	4096      	lsls	r6, r2
 80188c0:	4330      	orrs	r0, r6
 80188c2:	f84a 0b04 	str.w	r0, [sl], #4
 80188c6:	f853 0b04 	ldr.w	r0, [r3], #4
 80188ca:	459c      	cmp	ip, r3
 80188cc:	fa20 f00e 	lsr.w	r0, r0, lr
 80188d0:	d814      	bhi.n	80188fc <__lshift+0x94>
 80188d2:	6048      	str	r0, [r1, #4]
 80188d4:	b108      	cbz	r0, 80188da <__lshift+0x72>
 80188d6:	f109 0502 	add.w	r5, r9, #2
 80188da:	3d01      	subs	r5, #1
 80188dc:	4638      	mov	r0, r7
 80188de:	f8c8 5010 	str.w	r5, [r8, #16]
 80188e2:	4621      	mov	r1, r4
 80188e4:	f7ff fdf6 	bl	80184d4 <_Bfree>
 80188e8:	4640      	mov	r0, r8
 80188ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80188ee:	3101      	adds	r1, #1
 80188f0:	005b      	lsls	r3, r3, #1
 80188f2:	e7c7      	b.n	8018884 <__lshift+0x1c>
 80188f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80188f8:	3301      	adds	r3, #1
 80188fa:	e7cd      	b.n	8018898 <__lshift+0x30>
 80188fc:	4651      	mov	r1, sl
 80188fe:	e7dc      	b.n	80188ba <__lshift+0x52>
 8018900:	3904      	subs	r1, #4
 8018902:	f853 2b04 	ldr.w	r2, [r3], #4
 8018906:	459c      	cmp	ip, r3
 8018908:	f841 2f04 	str.w	r2, [r1, #4]!
 801890c:	d8f9      	bhi.n	8018902 <__lshift+0x9a>
 801890e:	e7e4      	b.n	80188da <__lshift+0x72>

08018910 <__mcmp>:
 8018910:	6903      	ldr	r3, [r0, #16]
 8018912:	690a      	ldr	r2, [r1, #16]
 8018914:	b530      	push	{r4, r5, lr}
 8018916:	1a9b      	subs	r3, r3, r2
 8018918:	d10c      	bne.n	8018934 <__mcmp+0x24>
 801891a:	0092      	lsls	r2, r2, #2
 801891c:	3014      	adds	r0, #20
 801891e:	3114      	adds	r1, #20
 8018920:	1884      	adds	r4, r0, r2
 8018922:	4411      	add	r1, r2
 8018924:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8018928:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801892c:	4295      	cmp	r5, r2
 801892e:	d003      	beq.n	8018938 <__mcmp+0x28>
 8018930:	d305      	bcc.n	801893e <__mcmp+0x2e>
 8018932:	2301      	movs	r3, #1
 8018934:	4618      	mov	r0, r3
 8018936:	bd30      	pop	{r4, r5, pc}
 8018938:	42a0      	cmp	r0, r4
 801893a:	d3f3      	bcc.n	8018924 <__mcmp+0x14>
 801893c:	e7fa      	b.n	8018934 <__mcmp+0x24>
 801893e:	f04f 33ff 	mov.w	r3, #4294967295
 8018942:	e7f7      	b.n	8018934 <__mcmp+0x24>

08018944 <__mdiff>:
 8018944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018948:	460d      	mov	r5, r1
 801894a:	4607      	mov	r7, r0
 801894c:	4611      	mov	r1, r2
 801894e:	4628      	mov	r0, r5
 8018950:	4614      	mov	r4, r2
 8018952:	f7ff ffdd 	bl	8018910 <__mcmp>
 8018956:	1e06      	subs	r6, r0, #0
 8018958:	d108      	bne.n	801896c <__mdiff+0x28>
 801895a:	4631      	mov	r1, r6
 801895c:	4638      	mov	r0, r7
 801895e:	f7ff fd85 	bl	801846c <_Balloc>
 8018962:	2301      	movs	r3, #1
 8018964:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8018968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801896c:	bfa4      	itt	ge
 801896e:	4623      	movge	r3, r4
 8018970:	462c      	movge	r4, r5
 8018972:	4638      	mov	r0, r7
 8018974:	6861      	ldr	r1, [r4, #4]
 8018976:	bfa6      	itte	ge
 8018978:	461d      	movge	r5, r3
 801897a:	2600      	movge	r6, #0
 801897c:	2601      	movlt	r6, #1
 801897e:	f7ff fd75 	bl	801846c <_Balloc>
 8018982:	f04f 0e00 	mov.w	lr, #0
 8018986:	60c6      	str	r6, [r0, #12]
 8018988:	692b      	ldr	r3, [r5, #16]
 801898a:	6926      	ldr	r6, [r4, #16]
 801898c:	f104 0214 	add.w	r2, r4, #20
 8018990:	f105 0914 	add.w	r9, r5, #20
 8018994:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8018998:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801899c:	f100 0114 	add.w	r1, r0, #20
 80189a0:	f852 ab04 	ldr.w	sl, [r2], #4
 80189a4:	f859 5b04 	ldr.w	r5, [r9], #4
 80189a8:	fa1f f38a 	uxth.w	r3, sl
 80189ac:	4473      	add	r3, lr
 80189ae:	b2ac      	uxth	r4, r5
 80189b0:	1b1b      	subs	r3, r3, r4
 80189b2:	0c2c      	lsrs	r4, r5, #16
 80189b4:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80189b8:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80189bc:	b29b      	uxth	r3, r3
 80189be:	ea4f 4e24 	mov.w	lr, r4, asr #16
 80189c2:	45c8      	cmp	r8, r9
 80189c4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80189c8:	4694      	mov	ip, r2
 80189ca:	f841 4b04 	str.w	r4, [r1], #4
 80189ce:	d8e7      	bhi.n	80189a0 <__mdiff+0x5c>
 80189d0:	45bc      	cmp	ip, r7
 80189d2:	d304      	bcc.n	80189de <__mdiff+0x9a>
 80189d4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80189d8:	b183      	cbz	r3, 80189fc <__mdiff+0xb8>
 80189da:	6106      	str	r6, [r0, #16]
 80189dc:	e7c4      	b.n	8018968 <__mdiff+0x24>
 80189de:	f85c 4b04 	ldr.w	r4, [ip], #4
 80189e2:	b2a2      	uxth	r2, r4
 80189e4:	4472      	add	r2, lr
 80189e6:	1413      	asrs	r3, r2, #16
 80189e8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80189ec:	b292      	uxth	r2, r2
 80189ee:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80189f2:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80189f6:	f841 2b04 	str.w	r2, [r1], #4
 80189fa:	e7e9      	b.n	80189d0 <__mdiff+0x8c>
 80189fc:	3e01      	subs	r6, #1
 80189fe:	e7e9      	b.n	80189d4 <__mdiff+0x90>

08018a00 <__ulp>:
 8018a00:	4b10      	ldr	r3, [pc, #64]	; (8018a44 <__ulp+0x44>)
 8018a02:	400b      	ands	r3, r1
 8018a04:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8018a08:	2b00      	cmp	r3, #0
 8018a0a:	dd02      	ble.n	8018a12 <__ulp+0x12>
 8018a0c:	2000      	movs	r0, #0
 8018a0e:	4619      	mov	r1, r3
 8018a10:	4770      	bx	lr
 8018a12:	425b      	negs	r3, r3
 8018a14:	151b      	asrs	r3, r3, #20
 8018a16:	2b13      	cmp	r3, #19
 8018a18:	f04f 0000 	mov.w	r0, #0
 8018a1c:	f04f 0100 	mov.w	r1, #0
 8018a20:	dc04      	bgt.n	8018a2c <__ulp+0x2c>
 8018a22:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8018a26:	fa42 f103 	asr.w	r1, r2, r3
 8018a2a:	4770      	bx	lr
 8018a2c:	2201      	movs	r2, #1
 8018a2e:	3b14      	subs	r3, #20
 8018a30:	2b1e      	cmp	r3, #30
 8018a32:	bfce      	itee	gt
 8018a34:	4613      	movgt	r3, r2
 8018a36:	f1c3 031f 	rsble	r3, r3, #31
 8018a3a:	fa02 f303 	lslle.w	r3, r2, r3
 8018a3e:	4618      	mov	r0, r3
 8018a40:	4770      	bx	lr
 8018a42:	bf00      	nop
 8018a44:	7ff00000 	.word	0x7ff00000

08018a48 <__b2d>:
 8018a48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018a4c:	6907      	ldr	r7, [r0, #16]
 8018a4e:	f100 0914 	add.w	r9, r0, #20
 8018a52:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8018a56:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8018a5a:	f1a7 0804 	sub.w	r8, r7, #4
 8018a5e:	4630      	mov	r0, r6
 8018a60:	f7ff fdc8 	bl	80185f4 <__hi0bits>
 8018a64:	f1c0 0320 	rsb	r3, r0, #32
 8018a68:	280a      	cmp	r0, #10
 8018a6a:	600b      	str	r3, [r1, #0]
 8018a6c:	491e      	ldr	r1, [pc, #120]	; (8018ae8 <__b2d+0xa0>)
 8018a6e:	dc17      	bgt.n	8018aa0 <__b2d+0x58>
 8018a70:	45c1      	cmp	r9, r8
 8018a72:	bf28      	it	cs
 8018a74:	2200      	movcs	r2, #0
 8018a76:	f1c0 0c0b 	rsb	ip, r0, #11
 8018a7a:	fa26 f30c 	lsr.w	r3, r6, ip
 8018a7e:	bf38      	it	cc
 8018a80:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8018a84:	ea43 0501 	orr.w	r5, r3, r1
 8018a88:	f100 0315 	add.w	r3, r0, #21
 8018a8c:	fa06 f303 	lsl.w	r3, r6, r3
 8018a90:	fa22 f20c 	lsr.w	r2, r2, ip
 8018a94:	ea43 0402 	orr.w	r4, r3, r2
 8018a98:	4620      	mov	r0, r4
 8018a9a:	4629      	mov	r1, r5
 8018a9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018aa0:	45c1      	cmp	r9, r8
 8018aa2:	bf3a      	itte	cc
 8018aa4:	f1a7 0808 	subcc.w	r8, r7, #8
 8018aa8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8018aac:	2200      	movcs	r2, #0
 8018aae:	f1b0 030b 	subs.w	r3, r0, #11
 8018ab2:	d015      	beq.n	8018ae0 <__b2d+0x98>
 8018ab4:	409e      	lsls	r6, r3
 8018ab6:	f1c3 0720 	rsb	r7, r3, #32
 8018aba:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 8018abe:	fa22 f107 	lsr.w	r1, r2, r7
 8018ac2:	45c8      	cmp	r8, r9
 8018ac4:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8018ac8:	ea46 0501 	orr.w	r5, r6, r1
 8018acc:	bf94      	ite	ls
 8018ace:	2100      	movls	r1, #0
 8018ad0:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8018ad4:	fa02 f003 	lsl.w	r0, r2, r3
 8018ad8:	40f9      	lsrs	r1, r7
 8018ada:	ea40 0401 	orr.w	r4, r0, r1
 8018ade:	e7db      	b.n	8018a98 <__b2d+0x50>
 8018ae0:	ea46 0501 	orr.w	r5, r6, r1
 8018ae4:	4614      	mov	r4, r2
 8018ae6:	e7d7      	b.n	8018a98 <__b2d+0x50>
 8018ae8:	3ff00000 	.word	0x3ff00000

08018aec <__d2b>:
 8018aec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8018af0:	461c      	mov	r4, r3
 8018af2:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8018af6:	2101      	movs	r1, #1
 8018af8:	4690      	mov	r8, r2
 8018afa:	f7ff fcb7 	bl	801846c <_Balloc>
 8018afe:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8018b02:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8018b06:	4607      	mov	r7, r0
 8018b08:	bb34      	cbnz	r4, 8018b58 <__d2b+0x6c>
 8018b0a:	9201      	str	r2, [sp, #4]
 8018b0c:	f1b8 0200 	subs.w	r2, r8, #0
 8018b10:	d027      	beq.n	8018b62 <__d2b+0x76>
 8018b12:	a802      	add	r0, sp, #8
 8018b14:	f840 2d08 	str.w	r2, [r0, #-8]!
 8018b18:	f7ff fd8b 	bl	8018632 <__lo0bits>
 8018b1c:	9900      	ldr	r1, [sp, #0]
 8018b1e:	b1f0      	cbz	r0, 8018b5e <__d2b+0x72>
 8018b20:	9a01      	ldr	r2, [sp, #4]
 8018b22:	f1c0 0320 	rsb	r3, r0, #32
 8018b26:	fa02 f303 	lsl.w	r3, r2, r3
 8018b2a:	430b      	orrs	r3, r1
 8018b2c:	40c2      	lsrs	r2, r0
 8018b2e:	617b      	str	r3, [r7, #20]
 8018b30:	9201      	str	r2, [sp, #4]
 8018b32:	9b01      	ldr	r3, [sp, #4]
 8018b34:	2b00      	cmp	r3, #0
 8018b36:	bf14      	ite	ne
 8018b38:	2102      	movne	r1, #2
 8018b3a:	2101      	moveq	r1, #1
 8018b3c:	61bb      	str	r3, [r7, #24]
 8018b3e:	6139      	str	r1, [r7, #16]
 8018b40:	b1c4      	cbz	r4, 8018b74 <__d2b+0x88>
 8018b42:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8018b46:	4404      	add	r4, r0
 8018b48:	6034      	str	r4, [r6, #0]
 8018b4a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018b4e:	6028      	str	r0, [r5, #0]
 8018b50:	4638      	mov	r0, r7
 8018b52:	b002      	add	sp, #8
 8018b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b58:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8018b5c:	e7d5      	b.n	8018b0a <__d2b+0x1e>
 8018b5e:	6179      	str	r1, [r7, #20]
 8018b60:	e7e7      	b.n	8018b32 <__d2b+0x46>
 8018b62:	a801      	add	r0, sp, #4
 8018b64:	f7ff fd65 	bl	8018632 <__lo0bits>
 8018b68:	2101      	movs	r1, #1
 8018b6a:	9b01      	ldr	r3, [sp, #4]
 8018b6c:	6139      	str	r1, [r7, #16]
 8018b6e:	617b      	str	r3, [r7, #20]
 8018b70:	3020      	adds	r0, #32
 8018b72:	e7e5      	b.n	8018b40 <__d2b+0x54>
 8018b74:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018b78:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8018b7c:	6030      	str	r0, [r6, #0]
 8018b7e:	6918      	ldr	r0, [r3, #16]
 8018b80:	f7ff fd38 	bl	80185f4 <__hi0bits>
 8018b84:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8018b88:	e7e1      	b.n	8018b4e <__d2b+0x62>

08018b8a <__ratio>:
 8018b8a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b8e:	4688      	mov	r8, r1
 8018b90:	4669      	mov	r1, sp
 8018b92:	4681      	mov	r9, r0
 8018b94:	f7ff ff58 	bl	8018a48 <__b2d>
 8018b98:	468b      	mov	fp, r1
 8018b9a:	4606      	mov	r6, r0
 8018b9c:	460f      	mov	r7, r1
 8018b9e:	4640      	mov	r0, r8
 8018ba0:	a901      	add	r1, sp, #4
 8018ba2:	f7ff ff51 	bl	8018a48 <__b2d>
 8018ba6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018baa:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8018bae:	460d      	mov	r5, r1
 8018bb0:	eba3 0c02 	sub.w	ip, r3, r2
 8018bb4:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018bb8:	1a9b      	subs	r3, r3, r2
 8018bba:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8018bbe:	2b00      	cmp	r3, #0
 8018bc0:	bfd5      	itete	le
 8018bc2:	460a      	movle	r2, r1
 8018bc4:	463a      	movgt	r2, r7
 8018bc6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8018bca:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8018bce:	bfd8      	it	le
 8018bd0:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8018bd4:	462b      	mov	r3, r5
 8018bd6:	4602      	mov	r2, r0
 8018bd8:	4659      	mov	r1, fp
 8018bda:	4630      	mov	r0, r6
 8018bdc:	f7e7 fdc8 	bl	8000770 <__aeabi_ddiv>
 8018be0:	b003      	add	sp, #12
 8018be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018be6 <__copybits>:
 8018be6:	3901      	subs	r1, #1
 8018be8:	b510      	push	{r4, lr}
 8018bea:	1149      	asrs	r1, r1, #5
 8018bec:	6914      	ldr	r4, [r2, #16]
 8018bee:	3101      	adds	r1, #1
 8018bf0:	f102 0314 	add.w	r3, r2, #20
 8018bf4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8018bf8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8018bfc:	42a3      	cmp	r3, r4
 8018bfe:	4602      	mov	r2, r0
 8018c00:	d303      	bcc.n	8018c0a <__copybits+0x24>
 8018c02:	2300      	movs	r3, #0
 8018c04:	428a      	cmp	r2, r1
 8018c06:	d305      	bcc.n	8018c14 <__copybits+0x2e>
 8018c08:	bd10      	pop	{r4, pc}
 8018c0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8018c0e:	f840 2b04 	str.w	r2, [r0], #4
 8018c12:	e7f3      	b.n	8018bfc <__copybits+0x16>
 8018c14:	f842 3b04 	str.w	r3, [r2], #4
 8018c18:	e7f4      	b.n	8018c04 <__copybits+0x1e>

08018c1a <__any_on>:
 8018c1a:	f100 0214 	add.w	r2, r0, #20
 8018c1e:	6900      	ldr	r0, [r0, #16]
 8018c20:	114b      	asrs	r3, r1, #5
 8018c22:	4298      	cmp	r0, r3
 8018c24:	b510      	push	{r4, lr}
 8018c26:	db11      	blt.n	8018c4c <__any_on+0x32>
 8018c28:	dd0a      	ble.n	8018c40 <__any_on+0x26>
 8018c2a:	f011 011f 	ands.w	r1, r1, #31
 8018c2e:	d007      	beq.n	8018c40 <__any_on+0x26>
 8018c30:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8018c34:	fa24 f001 	lsr.w	r0, r4, r1
 8018c38:	fa00 f101 	lsl.w	r1, r0, r1
 8018c3c:	428c      	cmp	r4, r1
 8018c3e:	d10b      	bne.n	8018c58 <__any_on+0x3e>
 8018c40:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018c44:	4293      	cmp	r3, r2
 8018c46:	d803      	bhi.n	8018c50 <__any_on+0x36>
 8018c48:	2000      	movs	r0, #0
 8018c4a:	bd10      	pop	{r4, pc}
 8018c4c:	4603      	mov	r3, r0
 8018c4e:	e7f7      	b.n	8018c40 <__any_on+0x26>
 8018c50:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018c54:	2900      	cmp	r1, #0
 8018c56:	d0f5      	beq.n	8018c44 <__any_on+0x2a>
 8018c58:	2001      	movs	r0, #1
 8018c5a:	e7f6      	b.n	8018c4a <__any_on+0x30>

08018c5c <_calloc_r>:
 8018c5c:	b538      	push	{r3, r4, r5, lr}
 8018c5e:	fb02 f401 	mul.w	r4, r2, r1
 8018c62:	4621      	mov	r1, r4
 8018c64:	f000 f854 	bl	8018d10 <_malloc_r>
 8018c68:	4605      	mov	r5, r0
 8018c6a:	b118      	cbz	r0, 8018c74 <_calloc_r+0x18>
 8018c6c:	4622      	mov	r2, r4
 8018c6e:	2100      	movs	r1, #0
 8018c70:	f7fc f938 	bl	8014ee4 <memset>
 8018c74:	4628      	mov	r0, r5
 8018c76:	bd38      	pop	{r3, r4, r5, pc}

08018c78 <_free_r>:
 8018c78:	b538      	push	{r3, r4, r5, lr}
 8018c7a:	4605      	mov	r5, r0
 8018c7c:	2900      	cmp	r1, #0
 8018c7e:	d043      	beq.n	8018d08 <_free_r+0x90>
 8018c80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018c84:	1f0c      	subs	r4, r1, #4
 8018c86:	2b00      	cmp	r3, #0
 8018c88:	bfb8      	it	lt
 8018c8a:	18e4      	addlt	r4, r4, r3
 8018c8c:	f000 ff74 	bl	8019b78 <__malloc_lock>
 8018c90:	4a1e      	ldr	r2, [pc, #120]	; (8018d0c <_free_r+0x94>)
 8018c92:	6813      	ldr	r3, [r2, #0]
 8018c94:	4610      	mov	r0, r2
 8018c96:	b933      	cbnz	r3, 8018ca6 <_free_r+0x2e>
 8018c98:	6063      	str	r3, [r4, #4]
 8018c9a:	6014      	str	r4, [r2, #0]
 8018c9c:	4628      	mov	r0, r5
 8018c9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018ca2:	f000 bf6a 	b.w	8019b7a <__malloc_unlock>
 8018ca6:	42a3      	cmp	r3, r4
 8018ca8:	d90b      	bls.n	8018cc2 <_free_r+0x4a>
 8018caa:	6821      	ldr	r1, [r4, #0]
 8018cac:	1862      	adds	r2, r4, r1
 8018cae:	4293      	cmp	r3, r2
 8018cb0:	bf01      	itttt	eq
 8018cb2:	681a      	ldreq	r2, [r3, #0]
 8018cb4:	685b      	ldreq	r3, [r3, #4]
 8018cb6:	1852      	addeq	r2, r2, r1
 8018cb8:	6022      	streq	r2, [r4, #0]
 8018cba:	6063      	str	r3, [r4, #4]
 8018cbc:	6004      	str	r4, [r0, #0]
 8018cbe:	e7ed      	b.n	8018c9c <_free_r+0x24>
 8018cc0:	4613      	mov	r3, r2
 8018cc2:	685a      	ldr	r2, [r3, #4]
 8018cc4:	b10a      	cbz	r2, 8018cca <_free_r+0x52>
 8018cc6:	42a2      	cmp	r2, r4
 8018cc8:	d9fa      	bls.n	8018cc0 <_free_r+0x48>
 8018cca:	6819      	ldr	r1, [r3, #0]
 8018ccc:	1858      	adds	r0, r3, r1
 8018cce:	42a0      	cmp	r0, r4
 8018cd0:	d10b      	bne.n	8018cea <_free_r+0x72>
 8018cd2:	6820      	ldr	r0, [r4, #0]
 8018cd4:	4401      	add	r1, r0
 8018cd6:	1858      	adds	r0, r3, r1
 8018cd8:	4282      	cmp	r2, r0
 8018cda:	6019      	str	r1, [r3, #0]
 8018cdc:	d1de      	bne.n	8018c9c <_free_r+0x24>
 8018cde:	6810      	ldr	r0, [r2, #0]
 8018ce0:	6852      	ldr	r2, [r2, #4]
 8018ce2:	4401      	add	r1, r0
 8018ce4:	6019      	str	r1, [r3, #0]
 8018ce6:	605a      	str	r2, [r3, #4]
 8018ce8:	e7d8      	b.n	8018c9c <_free_r+0x24>
 8018cea:	d902      	bls.n	8018cf2 <_free_r+0x7a>
 8018cec:	230c      	movs	r3, #12
 8018cee:	602b      	str	r3, [r5, #0]
 8018cf0:	e7d4      	b.n	8018c9c <_free_r+0x24>
 8018cf2:	6820      	ldr	r0, [r4, #0]
 8018cf4:	1821      	adds	r1, r4, r0
 8018cf6:	428a      	cmp	r2, r1
 8018cf8:	bf01      	itttt	eq
 8018cfa:	6811      	ldreq	r1, [r2, #0]
 8018cfc:	6852      	ldreq	r2, [r2, #4]
 8018cfe:	1809      	addeq	r1, r1, r0
 8018d00:	6021      	streq	r1, [r4, #0]
 8018d02:	6062      	str	r2, [r4, #4]
 8018d04:	605c      	str	r4, [r3, #4]
 8018d06:	e7c9      	b.n	8018c9c <_free_r+0x24>
 8018d08:	bd38      	pop	{r3, r4, r5, pc}
 8018d0a:	bf00      	nop
 8018d0c:	2000894c 	.word	0x2000894c

08018d10 <_malloc_r>:
 8018d10:	b570      	push	{r4, r5, r6, lr}
 8018d12:	1ccd      	adds	r5, r1, #3
 8018d14:	f025 0503 	bic.w	r5, r5, #3
 8018d18:	3508      	adds	r5, #8
 8018d1a:	2d0c      	cmp	r5, #12
 8018d1c:	bf38      	it	cc
 8018d1e:	250c      	movcc	r5, #12
 8018d20:	2d00      	cmp	r5, #0
 8018d22:	4606      	mov	r6, r0
 8018d24:	db01      	blt.n	8018d2a <_malloc_r+0x1a>
 8018d26:	42a9      	cmp	r1, r5
 8018d28:	d903      	bls.n	8018d32 <_malloc_r+0x22>
 8018d2a:	230c      	movs	r3, #12
 8018d2c:	6033      	str	r3, [r6, #0]
 8018d2e:	2000      	movs	r0, #0
 8018d30:	bd70      	pop	{r4, r5, r6, pc}
 8018d32:	f000 ff21 	bl	8019b78 <__malloc_lock>
 8018d36:	4a21      	ldr	r2, [pc, #132]	; (8018dbc <_malloc_r+0xac>)
 8018d38:	6814      	ldr	r4, [r2, #0]
 8018d3a:	4621      	mov	r1, r4
 8018d3c:	b991      	cbnz	r1, 8018d64 <_malloc_r+0x54>
 8018d3e:	4c20      	ldr	r4, [pc, #128]	; (8018dc0 <_malloc_r+0xb0>)
 8018d40:	6823      	ldr	r3, [r4, #0]
 8018d42:	b91b      	cbnz	r3, 8018d4c <_malloc_r+0x3c>
 8018d44:	4630      	mov	r0, r6
 8018d46:	f000 fde1 	bl	801990c <_sbrk_r>
 8018d4a:	6020      	str	r0, [r4, #0]
 8018d4c:	4629      	mov	r1, r5
 8018d4e:	4630      	mov	r0, r6
 8018d50:	f000 fddc 	bl	801990c <_sbrk_r>
 8018d54:	1c43      	adds	r3, r0, #1
 8018d56:	d124      	bne.n	8018da2 <_malloc_r+0x92>
 8018d58:	230c      	movs	r3, #12
 8018d5a:	4630      	mov	r0, r6
 8018d5c:	6033      	str	r3, [r6, #0]
 8018d5e:	f000 ff0c 	bl	8019b7a <__malloc_unlock>
 8018d62:	e7e4      	b.n	8018d2e <_malloc_r+0x1e>
 8018d64:	680b      	ldr	r3, [r1, #0]
 8018d66:	1b5b      	subs	r3, r3, r5
 8018d68:	d418      	bmi.n	8018d9c <_malloc_r+0x8c>
 8018d6a:	2b0b      	cmp	r3, #11
 8018d6c:	d90f      	bls.n	8018d8e <_malloc_r+0x7e>
 8018d6e:	600b      	str	r3, [r1, #0]
 8018d70:	18cc      	adds	r4, r1, r3
 8018d72:	50cd      	str	r5, [r1, r3]
 8018d74:	4630      	mov	r0, r6
 8018d76:	f000 ff00 	bl	8019b7a <__malloc_unlock>
 8018d7a:	f104 000b 	add.w	r0, r4, #11
 8018d7e:	1d23      	adds	r3, r4, #4
 8018d80:	f020 0007 	bic.w	r0, r0, #7
 8018d84:	1ac3      	subs	r3, r0, r3
 8018d86:	d0d3      	beq.n	8018d30 <_malloc_r+0x20>
 8018d88:	425a      	negs	r2, r3
 8018d8a:	50e2      	str	r2, [r4, r3]
 8018d8c:	e7d0      	b.n	8018d30 <_malloc_r+0x20>
 8018d8e:	684b      	ldr	r3, [r1, #4]
 8018d90:	428c      	cmp	r4, r1
 8018d92:	bf16      	itet	ne
 8018d94:	6063      	strne	r3, [r4, #4]
 8018d96:	6013      	streq	r3, [r2, #0]
 8018d98:	460c      	movne	r4, r1
 8018d9a:	e7eb      	b.n	8018d74 <_malloc_r+0x64>
 8018d9c:	460c      	mov	r4, r1
 8018d9e:	6849      	ldr	r1, [r1, #4]
 8018da0:	e7cc      	b.n	8018d3c <_malloc_r+0x2c>
 8018da2:	1cc4      	adds	r4, r0, #3
 8018da4:	f024 0403 	bic.w	r4, r4, #3
 8018da8:	42a0      	cmp	r0, r4
 8018daa:	d005      	beq.n	8018db8 <_malloc_r+0xa8>
 8018dac:	1a21      	subs	r1, r4, r0
 8018dae:	4630      	mov	r0, r6
 8018db0:	f000 fdac 	bl	801990c <_sbrk_r>
 8018db4:	3001      	adds	r0, #1
 8018db6:	d0cf      	beq.n	8018d58 <_malloc_r+0x48>
 8018db8:	6025      	str	r5, [r4, #0]
 8018dba:	e7db      	b.n	8018d74 <_malloc_r+0x64>
 8018dbc:	2000894c 	.word	0x2000894c
 8018dc0:	20008950 	.word	0x20008950

08018dc4 <__ssputs_r>:
 8018dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018dc8:	688e      	ldr	r6, [r1, #8]
 8018dca:	4682      	mov	sl, r0
 8018dcc:	429e      	cmp	r6, r3
 8018dce:	460c      	mov	r4, r1
 8018dd0:	4690      	mov	r8, r2
 8018dd2:	4699      	mov	r9, r3
 8018dd4:	d837      	bhi.n	8018e46 <__ssputs_r+0x82>
 8018dd6:	898a      	ldrh	r2, [r1, #12]
 8018dd8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018ddc:	d031      	beq.n	8018e42 <__ssputs_r+0x7e>
 8018dde:	2302      	movs	r3, #2
 8018de0:	6825      	ldr	r5, [r4, #0]
 8018de2:	6909      	ldr	r1, [r1, #16]
 8018de4:	1a6f      	subs	r7, r5, r1
 8018de6:	6965      	ldr	r5, [r4, #20]
 8018de8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018dec:	fb95 f5f3 	sdiv	r5, r5, r3
 8018df0:	f109 0301 	add.w	r3, r9, #1
 8018df4:	443b      	add	r3, r7
 8018df6:	429d      	cmp	r5, r3
 8018df8:	bf38      	it	cc
 8018dfa:	461d      	movcc	r5, r3
 8018dfc:	0553      	lsls	r3, r2, #21
 8018dfe:	d530      	bpl.n	8018e62 <__ssputs_r+0x9e>
 8018e00:	4629      	mov	r1, r5
 8018e02:	f7ff ff85 	bl	8018d10 <_malloc_r>
 8018e06:	4606      	mov	r6, r0
 8018e08:	b950      	cbnz	r0, 8018e20 <__ssputs_r+0x5c>
 8018e0a:	230c      	movs	r3, #12
 8018e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8018e10:	f8ca 3000 	str.w	r3, [sl]
 8018e14:	89a3      	ldrh	r3, [r4, #12]
 8018e16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018e1a:	81a3      	strh	r3, [r4, #12]
 8018e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018e20:	463a      	mov	r2, r7
 8018e22:	6921      	ldr	r1, [r4, #16]
 8018e24:	f7fc f83a 	bl	8014e9c <memcpy>
 8018e28:	89a3      	ldrh	r3, [r4, #12]
 8018e2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018e2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018e32:	81a3      	strh	r3, [r4, #12]
 8018e34:	6126      	str	r6, [r4, #16]
 8018e36:	443e      	add	r6, r7
 8018e38:	6026      	str	r6, [r4, #0]
 8018e3a:	464e      	mov	r6, r9
 8018e3c:	6165      	str	r5, [r4, #20]
 8018e3e:	1bed      	subs	r5, r5, r7
 8018e40:	60a5      	str	r5, [r4, #8]
 8018e42:	454e      	cmp	r6, r9
 8018e44:	d900      	bls.n	8018e48 <__ssputs_r+0x84>
 8018e46:	464e      	mov	r6, r9
 8018e48:	4632      	mov	r2, r6
 8018e4a:	4641      	mov	r1, r8
 8018e4c:	6820      	ldr	r0, [r4, #0]
 8018e4e:	f7fc f830 	bl	8014eb2 <memmove>
 8018e52:	68a3      	ldr	r3, [r4, #8]
 8018e54:	2000      	movs	r0, #0
 8018e56:	1b9b      	subs	r3, r3, r6
 8018e58:	60a3      	str	r3, [r4, #8]
 8018e5a:	6823      	ldr	r3, [r4, #0]
 8018e5c:	441e      	add	r6, r3
 8018e5e:	6026      	str	r6, [r4, #0]
 8018e60:	e7dc      	b.n	8018e1c <__ssputs_r+0x58>
 8018e62:	462a      	mov	r2, r5
 8018e64:	f000 fe8a 	bl	8019b7c <_realloc_r>
 8018e68:	4606      	mov	r6, r0
 8018e6a:	2800      	cmp	r0, #0
 8018e6c:	d1e2      	bne.n	8018e34 <__ssputs_r+0x70>
 8018e6e:	6921      	ldr	r1, [r4, #16]
 8018e70:	4650      	mov	r0, sl
 8018e72:	f7ff ff01 	bl	8018c78 <_free_r>
 8018e76:	e7c8      	b.n	8018e0a <__ssputs_r+0x46>

08018e78 <_svfiprintf_r>:
 8018e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e7c:	461d      	mov	r5, r3
 8018e7e:	898b      	ldrh	r3, [r1, #12]
 8018e80:	b09d      	sub	sp, #116	; 0x74
 8018e82:	061f      	lsls	r7, r3, #24
 8018e84:	4680      	mov	r8, r0
 8018e86:	460c      	mov	r4, r1
 8018e88:	4616      	mov	r6, r2
 8018e8a:	d50f      	bpl.n	8018eac <_svfiprintf_r+0x34>
 8018e8c:	690b      	ldr	r3, [r1, #16]
 8018e8e:	b96b      	cbnz	r3, 8018eac <_svfiprintf_r+0x34>
 8018e90:	2140      	movs	r1, #64	; 0x40
 8018e92:	f7ff ff3d 	bl	8018d10 <_malloc_r>
 8018e96:	6020      	str	r0, [r4, #0]
 8018e98:	6120      	str	r0, [r4, #16]
 8018e9a:	b928      	cbnz	r0, 8018ea8 <_svfiprintf_r+0x30>
 8018e9c:	230c      	movs	r3, #12
 8018e9e:	f8c8 3000 	str.w	r3, [r8]
 8018ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8018ea6:	e0c8      	b.n	801903a <_svfiprintf_r+0x1c2>
 8018ea8:	2340      	movs	r3, #64	; 0x40
 8018eaa:	6163      	str	r3, [r4, #20]
 8018eac:	2300      	movs	r3, #0
 8018eae:	9309      	str	r3, [sp, #36]	; 0x24
 8018eb0:	2320      	movs	r3, #32
 8018eb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018eb6:	2330      	movs	r3, #48	; 0x30
 8018eb8:	f04f 0b01 	mov.w	fp, #1
 8018ebc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018ec0:	9503      	str	r5, [sp, #12]
 8018ec2:	4637      	mov	r7, r6
 8018ec4:	463d      	mov	r5, r7
 8018ec6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8018eca:	b10b      	cbz	r3, 8018ed0 <_svfiprintf_r+0x58>
 8018ecc:	2b25      	cmp	r3, #37	; 0x25
 8018ece:	d13e      	bne.n	8018f4e <_svfiprintf_r+0xd6>
 8018ed0:	ebb7 0a06 	subs.w	sl, r7, r6
 8018ed4:	d00b      	beq.n	8018eee <_svfiprintf_r+0x76>
 8018ed6:	4653      	mov	r3, sl
 8018ed8:	4632      	mov	r2, r6
 8018eda:	4621      	mov	r1, r4
 8018edc:	4640      	mov	r0, r8
 8018ede:	f7ff ff71 	bl	8018dc4 <__ssputs_r>
 8018ee2:	3001      	adds	r0, #1
 8018ee4:	f000 80a4 	beq.w	8019030 <_svfiprintf_r+0x1b8>
 8018ee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018eea:	4453      	add	r3, sl
 8018eec:	9309      	str	r3, [sp, #36]	; 0x24
 8018eee:	783b      	ldrb	r3, [r7, #0]
 8018ef0:	2b00      	cmp	r3, #0
 8018ef2:	f000 809d 	beq.w	8019030 <_svfiprintf_r+0x1b8>
 8018ef6:	2300      	movs	r3, #0
 8018ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8018efc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018f00:	9304      	str	r3, [sp, #16]
 8018f02:	9307      	str	r3, [sp, #28]
 8018f04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018f08:	931a      	str	r3, [sp, #104]	; 0x68
 8018f0a:	462f      	mov	r7, r5
 8018f0c:	2205      	movs	r2, #5
 8018f0e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8018f12:	4850      	ldr	r0, [pc, #320]	; (8019054 <_svfiprintf_r+0x1dc>)
 8018f14:	f7ff fa9c 	bl	8018450 <memchr>
 8018f18:	9b04      	ldr	r3, [sp, #16]
 8018f1a:	b9d0      	cbnz	r0, 8018f52 <_svfiprintf_r+0xda>
 8018f1c:	06d9      	lsls	r1, r3, #27
 8018f1e:	bf44      	itt	mi
 8018f20:	2220      	movmi	r2, #32
 8018f22:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018f26:	071a      	lsls	r2, r3, #28
 8018f28:	bf44      	itt	mi
 8018f2a:	222b      	movmi	r2, #43	; 0x2b
 8018f2c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018f30:	782a      	ldrb	r2, [r5, #0]
 8018f32:	2a2a      	cmp	r2, #42	; 0x2a
 8018f34:	d015      	beq.n	8018f62 <_svfiprintf_r+0xea>
 8018f36:	462f      	mov	r7, r5
 8018f38:	2000      	movs	r0, #0
 8018f3a:	250a      	movs	r5, #10
 8018f3c:	9a07      	ldr	r2, [sp, #28]
 8018f3e:	4639      	mov	r1, r7
 8018f40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018f44:	3b30      	subs	r3, #48	; 0x30
 8018f46:	2b09      	cmp	r3, #9
 8018f48:	d94d      	bls.n	8018fe6 <_svfiprintf_r+0x16e>
 8018f4a:	b1b8      	cbz	r0, 8018f7c <_svfiprintf_r+0x104>
 8018f4c:	e00f      	b.n	8018f6e <_svfiprintf_r+0xf6>
 8018f4e:	462f      	mov	r7, r5
 8018f50:	e7b8      	b.n	8018ec4 <_svfiprintf_r+0x4c>
 8018f52:	4a40      	ldr	r2, [pc, #256]	; (8019054 <_svfiprintf_r+0x1dc>)
 8018f54:	463d      	mov	r5, r7
 8018f56:	1a80      	subs	r0, r0, r2
 8018f58:	fa0b f000 	lsl.w	r0, fp, r0
 8018f5c:	4318      	orrs	r0, r3
 8018f5e:	9004      	str	r0, [sp, #16]
 8018f60:	e7d3      	b.n	8018f0a <_svfiprintf_r+0x92>
 8018f62:	9a03      	ldr	r2, [sp, #12]
 8018f64:	1d11      	adds	r1, r2, #4
 8018f66:	6812      	ldr	r2, [r2, #0]
 8018f68:	9103      	str	r1, [sp, #12]
 8018f6a:	2a00      	cmp	r2, #0
 8018f6c:	db01      	blt.n	8018f72 <_svfiprintf_r+0xfa>
 8018f6e:	9207      	str	r2, [sp, #28]
 8018f70:	e004      	b.n	8018f7c <_svfiprintf_r+0x104>
 8018f72:	4252      	negs	r2, r2
 8018f74:	f043 0302 	orr.w	r3, r3, #2
 8018f78:	9207      	str	r2, [sp, #28]
 8018f7a:	9304      	str	r3, [sp, #16]
 8018f7c:	783b      	ldrb	r3, [r7, #0]
 8018f7e:	2b2e      	cmp	r3, #46	; 0x2e
 8018f80:	d10c      	bne.n	8018f9c <_svfiprintf_r+0x124>
 8018f82:	787b      	ldrb	r3, [r7, #1]
 8018f84:	2b2a      	cmp	r3, #42	; 0x2a
 8018f86:	d133      	bne.n	8018ff0 <_svfiprintf_r+0x178>
 8018f88:	9b03      	ldr	r3, [sp, #12]
 8018f8a:	3702      	adds	r7, #2
 8018f8c:	1d1a      	adds	r2, r3, #4
 8018f8e:	681b      	ldr	r3, [r3, #0]
 8018f90:	9203      	str	r2, [sp, #12]
 8018f92:	2b00      	cmp	r3, #0
 8018f94:	bfb8      	it	lt
 8018f96:	f04f 33ff 	movlt.w	r3, #4294967295
 8018f9a:	9305      	str	r3, [sp, #20]
 8018f9c:	4d2e      	ldr	r5, [pc, #184]	; (8019058 <_svfiprintf_r+0x1e0>)
 8018f9e:	2203      	movs	r2, #3
 8018fa0:	7839      	ldrb	r1, [r7, #0]
 8018fa2:	4628      	mov	r0, r5
 8018fa4:	f7ff fa54 	bl	8018450 <memchr>
 8018fa8:	b138      	cbz	r0, 8018fba <_svfiprintf_r+0x142>
 8018faa:	2340      	movs	r3, #64	; 0x40
 8018fac:	1b40      	subs	r0, r0, r5
 8018fae:	fa03 f000 	lsl.w	r0, r3, r0
 8018fb2:	9b04      	ldr	r3, [sp, #16]
 8018fb4:	3701      	adds	r7, #1
 8018fb6:	4303      	orrs	r3, r0
 8018fb8:	9304      	str	r3, [sp, #16]
 8018fba:	7839      	ldrb	r1, [r7, #0]
 8018fbc:	2206      	movs	r2, #6
 8018fbe:	4827      	ldr	r0, [pc, #156]	; (801905c <_svfiprintf_r+0x1e4>)
 8018fc0:	1c7e      	adds	r6, r7, #1
 8018fc2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018fc6:	f7ff fa43 	bl	8018450 <memchr>
 8018fca:	2800      	cmp	r0, #0
 8018fcc:	d038      	beq.n	8019040 <_svfiprintf_r+0x1c8>
 8018fce:	4b24      	ldr	r3, [pc, #144]	; (8019060 <_svfiprintf_r+0x1e8>)
 8018fd0:	bb13      	cbnz	r3, 8019018 <_svfiprintf_r+0x1a0>
 8018fd2:	9b03      	ldr	r3, [sp, #12]
 8018fd4:	3307      	adds	r3, #7
 8018fd6:	f023 0307 	bic.w	r3, r3, #7
 8018fda:	3308      	adds	r3, #8
 8018fdc:	9303      	str	r3, [sp, #12]
 8018fde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018fe0:	444b      	add	r3, r9
 8018fe2:	9309      	str	r3, [sp, #36]	; 0x24
 8018fe4:	e76d      	b.n	8018ec2 <_svfiprintf_r+0x4a>
 8018fe6:	fb05 3202 	mla	r2, r5, r2, r3
 8018fea:	2001      	movs	r0, #1
 8018fec:	460f      	mov	r7, r1
 8018fee:	e7a6      	b.n	8018f3e <_svfiprintf_r+0xc6>
 8018ff0:	2300      	movs	r3, #0
 8018ff2:	250a      	movs	r5, #10
 8018ff4:	4619      	mov	r1, r3
 8018ff6:	3701      	adds	r7, #1
 8018ff8:	9305      	str	r3, [sp, #20]
 8018ffa:	4638      	mov	r0, r7
 8018ffc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019000:	3a30      	subs	r2, #48	; 0x30
 8019002:	2a09      	cmp	r2, #9
 8019004:	d903      	bls.n	801900e <_svfiprintf_r+0x196>
 8019006:	2b00      	cmp	r3, #0
 8019008:	d0c8      	beq.n	8018f9c <_svfiprintf_r+0x124>
 801900a:	9105      	str	r1, [sp, #20]
 801900c:	e7c6      	b.n	8018f9c <_svfiprintf_r+0x124>
 801900e:	fb05 2101 	mla	r1, r5, r1, r2
 8019012:	2301      	movs	r3, #1
 8019014:	4607      	mov	r7, r0
 8019016:	e7f0      	b.n	8018ffa <_svfiprintf_r+0x182>
 8019018:	ab03      	add	r3, sp, #12
 801901a:	9300      	str	r3, [sp, #0]
 801901c:	4622      	mov	r2, r4
 801901e:	4b11      	ldr	r3, [pc, #68]	; (8019064 <_svfiprintf_r+0x1ec>)
 8019020:	a904      	add	r1, sp, #16
 8019022:	4640      	mov	r0, r8
 8019024:	f7fb fff8 	bl	8015018 <_printf_float>
 8019028:	f1b0 3fff 	cmp.w	r0, #4294967295
 801902c:	4681      	mov	r9, r0
 801902e:	d1d6      	bne.n	8018fde <_svfiprintf_r+0x166>
 8019030:	89a3      	ldrh	r3, [r4, #12]
 8019032:	065b      	lsls	r3, r3, #25
 8019034:	f53f af35 	bmi.w	8018ea2 <_svfiprintf_r+0x2a>
 8019038:	9809      	ldr	r0, [sp, #36]	; 0x24
 801903a:	b01d      	add	sp, #116	; 0x74
 801903c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019040:	ab03      	add	r3, sp, #12
 8019042:	9300      	str	r3, [sp, #0]
 8019044:	4622      	mov	r2, r4
 8019046:	4b07      	ldr	r3, [pc, #28]	; (8019064 <_svfiprintf_r+0x1ec>)
 8019048:	a904      	add	r1, sp, #16
 801904a:	4640      	mov	r0, r8
 801904c:	f7fc fa90 	bl	8015570 <_printf_i>
 8019050:	e7ea      	b.n	8019028 <_svfiprintf_r+0x1b0>
 8019052:	bf00      	nop
 8019054:	0801e834 	.word	0x0801e834
 8019058:	0801e83a 	.word	0x0801e83a
 801905c:	0801e83e 	.word	0x0801e83e
 8019060:	08015019 	.word	0x08015019
 8019064:	08018dc5 	.word	0x08018dc5

08019068 <_sungetc_r>:
 8019068:	b538      	push	{r3, r4, r5, lr}
 801906a:	1c4b      	adds	r3, r1, #1
 801906c:	4614      	mov	r4, r2
 801906e:	d103      	bne.n	8019078 <_sungetc_r+0x10>
 8019070:	f04f 35ff 	mov.w	r5, #4294967295
 8019074:	4628      	mov	r0, r5
 8019076:	bd38      	pop	{r3, r4, r5, pc}
 8019078:	8993      	ldrh	r3, [r2, #12]
 801907a:	b2cd      	uxtb	r5, r1
 801907c:	f023 0320 	bic.w	r3, r3, #32
 8019080:	8193      	strh	r3, [r2, #12]
 8019082:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019084:	6852      	ldr	r2, [r2, #4]
 8019086:	b18b      	cbz	r3, 80190ac <_sungetc_r+0x44>
 8019088:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801908a:	4293      	cmp	r3, r2
 801908c:	dd08      	ble.n	80190a0 <_sungetc_r+0x38>
 801908e:	6823      	ldr	r3, [r4, #0]
 8019090:	1e5a      	subs	r2, r3, #1
 8019092:	6022      	str	r2, [r4, #0]
 8019094:	f803 5c01 	strb.w	r5, [r3, #-1]
 8019098:	6863      	ldr	r3, [r4, #4]
 801909a:	3301      	adds	r3, #1
 801909c:	6063      	str	r3, [r4, #4]
 801909e:	e7e9      	b.n	8019074 <_sungetc_r+0xc>
 80190a0:	4621      	mov	r1, r4
 80190a2:	f000 fd01 	bl	8019aa8 <__submore>
 80190a6:	2800      	cmp	r0, #0
 80190a8:	d0f1      	beq.n	801908e <_sungetc_r+0x26>
 80190aa:	e7e1      	b.n	8019070 <_sungetc_r+0x8>
 80190ac:	6921      	ldr	r1, [r4, #16]
 80190ae:	6823      	ldr	r3, [r4, #0]
 80190b0:	b151      	cbz	r1, 80190c8 <_sungetc_r+0x60>
 80190b2:	4299      	cmp	r1, r3
 80190b4:	d208      	bcs.n	80190c8 <_sungetc_r+0x60>
 80190b6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80190ba:	42a9      	cmp	r1, r5
 80190bc:	d104      	bne.n	80190c8 <_sungetc_r+0x60>
 80190be:	3b01      	subs	r3, #1
 80190c0:	3201      	adds	r2, #1
 80190c2:	6023      	str	r3, [r4, #0]
 80190c4:	6062      	str	r2, [r4, #4]
 80190c6:	e7d5      	b.n	8019074 <_sungetc_r+0xc>
 80190c8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80190cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80190d0:	6363      	str	r3, [r4, #52]	; 0x34
 80190d2:	2303      	movs	r3, #3
 80190d4:	63a3      	str	r3, [r4, #56]	; 0x38
 80190d6:	4623      	mov	r3, r4
 80190d8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80190dc:	6023      	str	r3, [r4, #0]
 80190de:	2301      	movs	r3, #1
 80190e0:	e7dc      	b.n	801909c <_sungetc_r+0x34>

080190e2 <__ssrefill_r>:
 80190e2:	b510      	push	{r4, lr}
 80190e4:	460c      	mov	r4, r1
 80190e6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80190e8:	b169      	cbz	r1, 8019106 <__ssrefill_r+0x24>
 80190ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80190ee:	4299      	cmp	r1, r3
 80190f0:	d001      	beq.n	80190f6 <__ssrefill_r+0x14>
 80190f2:	f7ff fdc1 	bl	8018c78 <_free_r>
 80190f6:	2000      	movs	r0, #0
 80190f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80190fa:	6360      	str	r0, [r4, #52]	; 0x34
 80190fc:	6063      	str	r3, [r4, #4]
 80190fe:	b113      	cbz	r3, 8019106 <__ssrefill_r+0x24>
 8019100:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8019102:	6023      	str	r3, [r4, #0]
 8019104:	bd10      	pop	{r4, pc}
 8019106:	6923      	ldr	r3, [r4, #16]
 8019108:	f04f 30ff 	mov.w	r0, #4294967295
 801910c:	6023      	str	r3, [r4, #0]
 801910e:	2300      	movs	r3, #0
 8019110:	6063      	str	r3, [r4, #4]
 8019112:	89a3      	ldrh	r3, [r4, #12]
 8019114:	f043 0320 	orr.w	r3, r3, #32
 8019118:	81a3      	strh	r3, [r4, #12]
 801911a:	e7f3      	b.n	8019104 <__ssrefill_r+0x22>

0801911c <__ssvfiscanf_r>:
 801911c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019120:	460c      	mov	r4, r1
 8019122:	2100      	movs	r1, #0
 8019124:	4606      	mov	r6, r0
 8019126:	4692      	mov	sl, r2
 8019128:	270a      	movs	r7, #10
 801912a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 801912e:	9144      	str	r1, [sp, #272]	; 0x110
 8019130:	9145      	str	r1, [sp, #276]	; 0x114
 8019132:	499e      	ldr	r1, [pc, #632]	; (80193ac <__ssvfiscanf_r+0x290>)
 8019134:	f10d 0804 	add.w	r8, sp, #4
 8019138:	91a0      	str	r1, [sp, #640]	; 0x280
 801913a:	499d      	ldr	r1, [pc, #628]	; (80193b0 <__ssvfiscanf_r+0x294>)
 801913c:	f8df 9274 	ldr.w	r9, [pc, #628]	; 80193b4 <__ssvfiscanf_r+0x298>
 8019140:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8019144:	91a1      	str	r1, [sp, #644]	; 0x284
 8019146:	9300      	str	r3, [sp, #0]
 8019148:	f89a 3000 	ldrb.w	r3, [sl]
 801914c:	2b00      	cmp	r3, #0
 801914e:	f000 812a 	beq.w	80193a6 <__ssvfiscanf_r+0x28a>
 8019152:	4655      	mov	r5, sl
 8019154:	f7ff f8ce 	bl	80182f4 <__locale_ctype_ptr>
 8019158:	f815 bb01 	ldrb.w	fp, [r5], #1
 801915c:	4458      	add	r0, fp
 801915e:	7843      	ldrb	r3, [r0, #1]
 8019160:	f013 0308 	ands.w	r3, r3, #8
 8019164:	d01c      	beq.n	80191a0 <__ssvfiscanf_r+0x84>
 8019166:	6863      	ldr	r3, [r4, #4]
 8019168:	2b00      	cmp	r3, #0
 801916a:	dd12      	ble.n	8019192 <__ssvfiscanf_r+0x76>
 801916c:	f7ff f8c2 	bl	80182f4 <__locale_ctype_ptr>
 8019170:	6823      	ldr	r3, [r4, #0]
 8019172:	781a      	ldrb	r2, [r3, #0]
 8019174:	4410      	add	r0, r2
 8019176:	7842      	ldrb	r2, [r0, #1]
 8019178:	0712      	lsls	r2, r2, #28
 801917a:	d401      	bmi.n	8019180 <__ssvfiscanf_r+0x64>
 801917c:	46aa      	mov	sl, r5
 801917e:	e7e3      	b.n	8019148 <__ssvfiscanf_r+0x2c>
 8019180:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8019182:	3301      	adds	r3, #1
 8019184:	3201      	adds	r2, #1
 8019186:	9245      	str	r2, [sp, #276]	; 0x114
 8019188:	6862      	ldr	r2, [r4, #4]
 801918a:	6023      	str	r3, [r4, #0]
 801918c:	3a01      	subs	r2, #1
 801918e:	6062      	str	r2, [r4, #4]
 8019190:	e7e9      	b.n	8019166 <__ssvfiscanf_r+0x4a>
 8019192:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019194:	4621      	mov	r1, r4
 8019196:	4630      	mov	r0, r6
 8019198:	4798      	blx	r3
 801919a:	2800      	cmp	r0, #0
 801919c:	d0e6      	beq.n	801916c <__ssvfiscanf_r+0x50>
 801919e:	e7ed      	b.n	801917c <__ssvfiscanf_r+0x60>
 80191a0:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80191a4:	f040 8082 	bne.w	80192ac <__ssvfiscanf_r+0x190>
 80191a8:	9343      	str	r3, [sp, #268]	; 0x10c
 80191aa:	9341      	str	r3, [sp, #260]	; 0x104
 80191ac:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80191b0:	2b2a      	cmp	r3, #42	; 0x2a
 80191b2:	d103      	bne.n	80191bc <__ssvfiscanf_r+0xa0>
 80191b4:	2310      	movs	r3, #16
 80191b6:	f10a 0502 	add.w	r5, sl, #2
 80191ba:	9341      	str	r3, [sp, #260]	; 0x104
 80191bc:	46aa      	mov	sl, r5
 80191be:	f815 1b01 	ldrb.w	r1, [r5], #1
 80191c2:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80191c6:	2a09      	cmp	r2, #9
 80191c8:	d922      	bls.n	8019210 <__ssvfiscanf_r+0xf4>
 80191ca:	2203      	movs	r2, #3
 80191cc:	4879      	ldr	r0, [pc, #484]	; (80193b4 <__ssvfiscanf_r+0x298>)
 80191ce:	f7ff f93f 	bl	8018450 <memchr>
 80191d2:	b138      	cbz	r0, 80191e4 <__ssvfiscanf_r+0xc8>
 80191d4:	eba0 0309 	sub.w	r3, r0, r9
 80191d8:	2001      	movs	r0, #1
 80191da:	46aa      	mov	sl, r5
 80191dc:	4098      	lsls	r0, r3
 80191de:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80191e0:	4318      	orrs	r0, r3
 80191e2:	9041      	str	r0, [sp, #260]	; 0x104
 80191e4:	f89a 3000 	ldrb.w	r3, [sl]
 80191e8:	f10a 0501 	add.w	r5, sl, #1
 80191ec:	2b67      	cmp	r3, #103	; 0x67
 80191ee:	d82b      	bhi.n	8019248 <__ssvfiscanf_r+0x12c>
 80191f0:	2b65      	cmp	r3, #101	; 0x65
 80191f2:	f080 809f 	bcs.w	8019334 <__ssvfiscanf_r+0x218>
 80191f6:	2b47      	cmp	r3, #71	; 0x47
 80191f8:	d810      	bhi.n	801921c <__ssvfiscanf_r+0x100>
 80191fa:	2b45      	cmp	r3, #69	; 0x45
 80191fc:	f080 809a 	bcs.w	8019334 <__ssvfiscanf_r+0x218>
 8019200:	2b00      	cmp	r3, #0
 8019202:	d06c      	beq.n	80192de <__ssvfiscanf_r+0x1c2>
 8019204:	2b25      	cmp	r3, #37	; 0x25
 8019206:	d051      	beq.n	80192ac <__ssvfiscanf_r+0x190>
 8019208:	2303      	movs	r3, #3
 801920a:	9742      	str	r7, [sp, #264]	; 0x108
 801920c:	9347      	str	r3, [sp, #284]	; 0x11c
 801920e:	e027      	b.n	8019260 <__ssvfiscanf_r+0x144>
 8019210:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8019212:	fb07 1303 	mla	r3, r7, r3, r1
 8019216:	3b30      	subs	r3, #48	; 0x30
 8019218:	9343      	str	r3, [sp, #268]	; 0x10c
 801921a:	e7cf      	b.n	80191bc <__ssvfiscanf_r+0xa0>
 801921c:	2b5b      	cmp	r3, #91	; 0x5b
 801921e:	d06a      	beq.n	80192f6 <__ssvfiscanf_r+0x1da>
 8019220:	d80c      	bhi.n	801923c <__ssvfiscanf_r+0x120>
 8019222:	2b58      	cmp	r3, #88	; 0x58
 8019224:	d1f0      	bne.n	8019208 <__ssvfiscanf_r+0xec>
 8019226:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8019228:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801922c:	9241      	str	r2, [sp, #260]	; 0x104
 801922e:	2210      	movs	r2, #16
 8019230:	9242      	str	r2, [sp, #264]	; 0x108
 8019232:	2b6e      	cmp	r3, #110	; 0x6e
 8019234:	bf8c      	ite	hi
 8019236:	2304      	movhi	r3, #4
 8019238:	2303      	movls	r3, #3
 801923a:	e010      	b.n	801925e <__ssvfiscanf_r+0x142>
 801923c:	2b63      	cmp	r3, #99	; 0x63
 801923e:	d065      	beq.n	801930c <__ssvfiscanf_r+0x1f0>
 8019240:	2b64      	cmp	r3, #100	; 0x64
 8019242:	d1e1      	bne.n	8019208 <__ssvfiscanf_r+0xec>
 8019244:	9742      	str	r7, [sp, #264]	; 0x108
 8019246:	e7f4      	b.n	8019232 <__ssvfiscanf_r+0x116>
 8019248:	2b70      	cmp	r3, #112	; 0x70
 801924a:	d04b      	beq.n	80192e4 <__ssvfiscanf_r+0x1c8>
 801924c:	d826      	bhi.n	801929c <__ssvfiscanf_r+0x180>
 801924e:	2b6e      	cmp	r3, #110	; 0x6e
 8019250:	d062      	beq.n	8019318 <__ssvfiscanf_r+0x1fc>
 8019252:	d84c      	bhi.n	80192ee <__ssvfiscanf_r+0x1d2>
 8019254:	2b69      	cmp	r3, #105	; 0x69
 8019256:	d1d7      	bne.n	8019208 <__ssvfiscanf_r+0xec>
 8019258:	2300      	movs	r3, #0
 801925a:	9342      	str	r3, [sp, #264]	; 0x108
 801925c:	2303      	movs	r3, #3
 801925e:	9347      	str	r3, [sp, #284]	; 0x11c
 8019260:	6863      	ldr	r3, [r4, #4]
 8019262:	2b00      	cmp	r3, #0
 8019264:	dd68      	ble.n	8019338 <__ssvfiscanf_r+0x21c>
 8019266:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019268:	0659      	lsls	r1, r3, #25
 801926a:	d407      	bmi.n	801927c <__ssvfiscanf_r+0x160>
 801926c:	f7ff f842 	bl	80182f4 <__locale_ctype_ptr>
 8019270:	6823      	ldr	r3, [r4, #0]
 8019272:	781a      	ldrb	r2, [r3, #0]
 8019274:	4410      	add	r0, r2
 8019276:	7842      	ldrb	r2, [r0, #1]
 8019278:	0712      	lsls	r2, r2, #28
 801927a:	d464      	bmi.n	8019346 <__ssvfiscanf_r+0x22a>
 801927c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801927e:	2b02      	cmp	r3, #2
 8019280:	dc73      	bgt.n	801936a <__ssvfiscanf_r+0x24e>
 8019282:	466b      	mov	r3, sp
 8019284:	4622      	mov	r2, r4
 8019286:	a941      	add	r1, sp, #260	; 0x104
 8019288:	4630      	mov	r0, r6
 801928a:	f000 f9d5 	bl	8019638 <_scanf_chars>
 801928e:	2801      	cmp	r0, #1
 8019290:	f000 8089 	beq.w	80193a6 <__ssvfiscanf_r+0x28a>
 8019294:	2802      	cmp	r0, #2
 8019296:	f47f af71 	bne.w	801917c <__ssvfiscanf_r+0x60>
 801929a:	e01d      	b.n	80192d8 <__ssvfiscanf_r+0x1bc>
 801929c:	2b75      	cmp	r3, #117	; 0x75
 801929e:	d0d1      	beq.n	8019244 <__ssvfiscanf_r+0x128>
 80192a0:	2b78      	cmp	r3, #120	; 0x78
 80192a2:	d0c0      	beq.n	8019226 <__ssvfiscanf_r+0x10a>
 80192a4:	2b73      	cmp	r3, #115	; 0x73
 80192a6:	d1af      	bne.n	8019208 <__ssvfiscanf_r+0xec>
 80192a8:	2302      	movs	r3, #2
 80192aa:	e7d8      	b.n	801925e <__ssvfiscanf_r+0x142>
 80192ac:	6863      	ldr	r3, [r4, #4]
 80192ae:	2b00      	cmp	r3, #0
 80192b0:	dd0c      	ble.n	80192cc <__ssvfiscanf_r+0x1b0>
 80192b2:	6823      	ldr	r3, [r4, #0]
 80192b4:	781a      	ldrb	r2, [r3, #0]
 80192b6:	455a      	cmp	r2, fp
 80192b8:	d175      	bne.n	80193a6 <__ssvfiscanf_r+0x28a>
 80192ba:	3301      	adds	r3, #1
 80192bc:	6862      	ldr	r2, [r4, #4]
 80192be:	6023      	str	r3, [r4, #0]
 80192c0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80192c2:	3a01      	subs	r2, #1
 80192c4:	3301      	adds	r3, #1
 80192c6:	6062      	str	r2, [r4, #4]
 80192c8:	9345      	str	r3, [sp, #276]	; 0x114
 80192ca:	e757      	b.n	801917c <__ssvfiscanf_r+0x60>
 80192cc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80192ce:	4621      	mov	r1, r4
 80192d0:	4630      	mov	r0, r6
 80192d2:	4798      	blx	r3
 80192d4:	2800      	cmp	r0, #0
 80192d6:	d0ec      	beq.n	80192b2 <__ssvfiscanf_r+0x196>
 80192d8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80192da:	2800      	cmp	r0, #0
 80192dc:	d159      	bne.n	8019392 <__ssvfiscanf_r+0x276>
 80192de:	f04f 30ff 	mov.w	r0, #4294967295
 80192e2:	e05c      	b.n	801939e <__ssvfiscanf_r+0x282>
 80192e4:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80192e6:	f042 0220 	orr.w	r2, r2, #32
 80192ea:	9241      	str	r2, [sp, #260]	; 0x104
 80192ec:	e79b      	b.n	8019226 <__ssvfiscanf_r+0x10a>
 80192ee:	2308      	movs	r3, #8
 80192f0:	9342      	str	r3, [sp, #264]	; 0x108
 80192f2:	2304      	movs	r3, #4
 80192f4:	e7b3      	b.n	801925e <__ssvfiscanf_r+0x142>
 80192f6:	4629      	mov	r1, r5
 80192f8:	4640      	mov	r0, r8
 80192fa:	f000 fb17 	bl	801992c <__sccl>
 80192fe:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019300:	4605      	mov	r5, r0
 8019302:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019306:	9341      	str	r3, [sp, #260]	; 0x104
 8019308:	2301      	movs	r3, #1
 801930a:	e7a8      	b.n	801925e <__ssvfiscanf_r+0x142>
 801930c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801930e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019312:	9341      	str	r3, [sp, #260]	; 0x104
 8019314:	2300      	movs	r3, #0
 8019316:	e7a2      	b.n	801925e <__ssvfiscanf_r+0x142>
 8019318:	9841      	ldr	r0, [sp, #260]	; 0x104
 801931a:	06c3      	lsls	r3, r0, #27
 801931c:	f53f af2e 	bmi.w	801917c <__ssvfiscanf_r+0x60>
 8019320:	9b00      	ldr	r3, [sp, #0]
 8019322:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8019324:	1d19      	adds	r1, r3, #4
 8019326:	9100      	str	r1, [sp, #0]
 8019328:	681b      	ldr	r3, [r3, #0]
 801932a:	07c0      	lsls	r0, r0, #31
 801932c:	bf4c      	ite	mi
 801932e:	801a      	strhmi	r2, [r3, #0]
 8019330:	601a      	strpl	r2, [r3, #0]
 8019332:	e723      	b.n	801917c <__ssvfiscanf_r+0x60>
 8019334:	2305      	movs	r3, #5
 8019336:	e792      	b.n	801925e <__ssvfiscanf_r+0x142>
 8019338:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801933a:	4621      	mov	r1, r4
 801933c:	4630      	mov	r0, r6
 801933e:	4798      	blx	r3
 8019340:	2800      	cmp	r0, #0
 8019342:	d090      	beq.n	8019266 <__ssvfiscanf_r+0x14a>
 8019344:	e7c8      	b.n	80192d8 <__ssvfiscanf_r+0x1bc>
 8019346:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8019348:	3201      	adds	r2, #1
 801934a:	9245      	str	r2, [sp, #276]	; 0x114
 801934c:	6862      	ldr	r2, [r4, #4]
 801934e:	3a01      	subs	r2, #1
 8019350:	2a00      	cmp	r2, #0
 8019352:	6062      	str	r2, [r4, #4]
 8019354:	dd02      	ble.n	801935c <__ssvfiscanf_r+0x240>
 8019356:	3301      	adds	r3, #1
 8019358:	6023      	str	r3, [r4, #0]
 801935a:	e787      	b.n	801926c <__ssvfiscanf_r+0x150>
 801935c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801935e:	4621      	mov	r1, r4
 8019360:	4630      	mov	r0, r6
 8019362:	4798      	blx	r3
 8019364:	2800      	cmp	r0, #0
 8019366:	d081      	beq.n	801926c <__ssvfiscanf_r+0x150>
 8019368:	e7b6      	b.n	80192d8 <__ssvfiscanf_r+0x1bc>
 801936a:	2b04      	cmp	r3, #4
 801936c:	dc06      	bgt.n	801937c <__ssvfiscanf_r+0x260>
 801936e:	466b      	mov	r3, sp
 8019370:	4622      	mov	r2, r4
 8019372:	a941      	add	r1, sp, #260	; 0x104
 8019374:	4630      	mov	r0, r6
 8019376:	f000 f9c1 	bl	80196fc <_scanf_i>
 801937a:	e788      	b.n	801928e <__ssvfiscanf_r+0x172>
 801937c:	4b0e      	ldr	r3, [pc, #56]	; (80193b8 <__ssvfiscanf_r+0x29c>)
 801937e:	2b00      	cmp	r3, #0
 8019380:	f43f aefc 	beq.w	801917c <__ssvfiscanf_r+0x60>
 8019384:	466b      	mov	r3, sp
 8019386:	4622      	mov	r2, r4
 8019388:	a941      	add	r1, sp, #260	; 0x104
 801938a:	4630      	mov	r0, r6
 801938c:	f7fc fa02 	bl	8015794 <_scanf_float>
 8019390:	e77d      	b.n	801928e <__ssvfiscanf_r+0x172>
 8019392:	89a3      	ldrh	r3, [r4, #12]
 8019394:	f013 0f40 	tst.w	r3, #64	; 0x40
 8019398:	bf18      	it	ne
 801939a:	f04f 30ff 	movne.w	r0, #4294967295
 801939e:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80193a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80193a6:	9844      	ldr	r0, [sp, #272]	; 0x110
 80193a8:	e7f9      	b.n	801939e <__ssvfiscanf_r+0x282>
 80193aa:	bf00      	nop
 80193ac:	08019069 	.word	0x08019069
 80193b0:	080190e3 	.word	0x080190e3
 80193b4:	0801e83a 	.word	0x0801e83a
 80193b8:	08015795 	.word	0x08015795

080193bc <__sfputc_r>:
 80193bc:	6893      	ldr	r3, [r2, #8]
 80193be:	b410      	push	{r4}
 80193c0:	3b01      	subs	r3, #1
 80193c2:	2b00      	cmp	r3, #0
 80193c4:	6093      	str	r3, [r2, #8]
 80193c6:	da07      	bge.n	80193d8 <__sfputc_r+0x1c>
 80193c8:	6994      	ldr	r4, [r2, #24]
 80193ca:	42a3      	cmp	r3, r4
 80193cc:	db01      	blt.n	80193d2 <__sfputc_r+0x16>
 80193ce:	290a      	cmp	r1, #10
 80193d0:	d102      	bne.n	80193d8 <__sfputc_r+0x1c>
 80193d2:	bc10      	pop	{r4}
 80193d4:	f7fd bbc2 	b.w	8016b5c <__swbuf_r>
 80193d8:	6813      	ldr	r3, [r2, #0]
 80193da:	1c58      	adds	r0, r3, #1
 80193dc:	6010      	str	r0, [r2, #0]
 80193de:	7019      	strb	r1, [r3, #0]
 80193e0:	4608      	mov	r0, r1
 80193e2:	bc10      	pop	{r4}
 80193e4:	4770      	bx	lr

080193e6 <__sfputs_r>:
 80193e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80193e8:	4606      	mov	r6, r0
 80193ea:	460f      	mov	r7, r1
 80193ec:	4614      	mov	r4, r2
 80193ee:	18d5      	adds	r5, r2, r3
 80193f0:	42ac      	cmp	r4, r5
 80193f2:	d101      	bne.n	80193f8 <__sfputs_r+0x12>
 80193f4:	2000      	movs	r0, #0
 80193f6:	e007      	b.n	8019408 <__sfputs_r+0x22>
 80193f8:	463a      	mov	r2, r7
 80193fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80193fe:	4630      	mov	r0, r6
 8019400:	f7ff ffdc 	bl	80193bc <__sfputc_r>
 8019404:	1c43      	adds	r3, r0, #1
 8019406:	d1f3      	bne.n	80193f0 <__sfputs_r+0xa>
 8019408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801940c <_vfiprintf_r>:
 801940c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019410:	460c      	mov	r4, r1
 8019412:	b09d      	sub	sp, #116	; 0x74
 8019414:	4617      	mov	r7, r2
 8019416:	461d      	mov	r5, r3
 8019418:	4606      	mov	r6, r0
 801941a:	b118      	cbz	r0, 8019424 <_vfiprintf_r+0x18>
 801941c:	6983      	ldr	r3, [r0, #24]
 801941e:	b90b      	cbnz	r3, 8019424 <_vfiprintf_r+0x18>
 8019420:	f7fe fbb2 	bl	8017b88 <__sinit>
 8019424:	4b7c      	ldr	r3, [pc, #496]	; (8019618 <_vfiprintf_r+0x20c>)
 8019426:	429c      	cmp	r4, r3
 8019428:	d158      	bne.n	80194dc <_vfiprintf_r+0xd0>
 801942a:	6874      	ldr	r4, [r6, #4]
 801942c:	89a3      	ldrh	r3, [r4, #12]
 801942e:	0718      	lsls	r0, r3, #28
 8019430:	d55e      	bpl.n	80194f0 <_vfiprintf_r+0xe4>
 8019432:	6923      	ldr	r3, [r4, #16]
 8019434:	2b00      	cmp	r3, #0
 8019436:	d05b      	beq.n	80194f0 <_vfiprintf_r+0xe4>
 8019438:	2300      	movs	r3, #0
 801943a:	9309      	str	r3, [sp, #36]	; 0x24
 801943c:	2320      	movs	r3, #32
 801943e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019442:	2330      	movs	r3, #48	; 0x30
 8019444:	f04f 0b01 	mov.w	fp, #1
 8019448:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801944c:	9503      	str	r5, [sp, #12]
 801944e:	46b8      	mov	r8, r7
 8019450:	4645      	mov	r5, r8
 8019452:	f815 3b01 	ldrb.w	r3, [r5], #1
 8019456:	b10b      	cbz	r3, 801945c <_vfiprintf_r+0x50>
 8019458:	2b25      	cmp	r3, #37	; 0x25
 801945a:	d154      	bne.n	8019506 <_vfiprintf_r+0xfa>
 801945c:	ebb8 0a07 	subs.w	sl, r8, r7
 8019460:	d00b      	beq.n	801947a <_vfiprintf_r+0x6e>
 8019462:	4653      	mov	r3, sl
 8019464:	463a      	mov	r2, r7
 8019466:	4621      	mov	r1, r4
 8019468:	4630      	mov	r0, r6
 801946a:	f7ff ffbc 	bl	80193e6 <__sfputs_r>
 801946e:	3001      	adds	r0, #1
 8019470:	f000 80c2 	beq.w	80195f8 <_vfiprintf_r+0x1ec>
 8019474:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019476:	4453      	add	r3, sl
 8019478:	9309      	str	r3, [sp, #36]	; 0x24
 801947a:	f898 3000 	ldrb.w	r3, [r8]
 801947e:	2b00      	cmp	r3, #0
 8019480:	f000 80ba 	beq.w	80195f8 <_vfiprintf_r+0x1ec>
 8019484:	2300      	movs	r3, #0
 8019486:	f04f 32ff 	mov.w	r2, #4294967295
 801948a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801948e:	9304      	str	r3, [sp, #16]
 8019490:	9307      	str	r3, [sp, #28]
 8019492:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019496:	931a      	str	r3, [sp, #104]	; 0x68
 8019498:	46a8      	mov	r8, r5
 801949a:	2205      	movs	r2, #5
 801949c:	f818 1b01 	ldrb.w	r1, [r8], #1
 80194a0:	485e      	ldr	r0, [pc, #376]	; (801961c <_vfiprintf_r+0x210>)
 80194a2:	f7fe ffd5 	bl	8018450 <memchr>
 80194a6:	9b04      	ldr	r3, [sp, #16]
 80194a8:	bb78      	cbnz	r0, 801950a <_vfiprintf_r+0xfe>
 80194aa:	06d9      	lsls	r1, r3, #27
 80194ac:	bf44      	itt	mi
 80194ae:	2220      	movmi	r2, #32
 80194b0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80194b4:	071a      	lsls	r2, r3, #28
 80194b6:	bf44      	itt	mi
 80194b8:	222b      	movmi	r2, #43	; 0x2b
 80194ba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80194be:	782a      	ldrb	r2, [r5, #0]
 80194c0:	2a2a      	cmp	r2, #42	; 0x2a
 80194c2:	d02a      	beq.n	801951a <_vfiprintf_r+0x10e>
 80194c4:	46a8      	mov	r8, r5
 80194c6:	2000      	movs	r0, #0
 80194c8:	250a      	movs	r5, #10
 80194ca:	9a07      	ldr	r2, [sp, #28]
 80194cc:	4641      	mov	r1, r8
 80194ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80194d2:	3b30      	subs	r3, #48	; 0x30
 80194d4:	2b09      	cmp	r3, #9
 80194d6:	d969      	bls.n	80195ac <_vfiprintf_r+0x1a0>
 80194d8:	b360      	cbz	r0, 8019534 <_vfiprintf_r+0x128>
 80194da:	e024      	b.n	8019526 <_vfiprintf_r+0x11a>
 80194dc:	4b50      	ldr	r3, [pc, #320]	; (8019620 <_vfiprintf_r+0x214>)
 80194de:	429c      	cmp	r4, r3
 80194e0:	d101      	bne.n	80194e6 <_vfiprintf_r+0xda>
 80194e2:	68b4      	ldr	r4, [r6, #8]
 80194e4:	e7a2      	b.n	801942c <_vfiprintf_r+0x20>
 80194e6:	4b4f      	ldr	r3, [pc, #316]	; (8019624 <_vfiprintf_r+0x218>)
 80194e8:	429c      	cmp	r4, r3
 80194ea:	bf08      	it	eq
 80194ec:	68f4      	ldreq	r4, [r6, #12]
 80194ee:	e79d      	b.n	801942c <_vfiprintf_r+0x20>
 80194f0:	4621      	mov	r1, r4
 80194f2:	4630      	mov	r0, r6
 80194f4:	f7fd fb96 	bl	8016c24 <__swsetup_r>
 80194f8:	2800      	cmp	r0, #0
 80194fa:	d09d      	beq.n	8019438 <_vfiprintf_r+0x2c>
 80194fc:	f04f 30ff 	mov.w	r0, #4294967295
 8019500:	b01d      	add	sp, #116	; 0x74
 8019502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019506:	46a8      	mov	r8, r5
 8019508:	e7a2      	b.n	8019450 <_vfiprintf_r+0x44>
 801950a:	4a44      	ldr	r2, [pc, #272]	; (801961c <_vfiprintf_r+0x210>)
 801950c:	4645      	mov	r5, r8
 801950e:	1a80      	subs	r0, r0, r2
 8019510:	fa0b f000 	lsl.w	r0, fp, r0
 8019514:	4318      	orrs	r0, r3
 8019516:	9004      	str	r0, [sp, #16]
 8019518:	e7be      	b.n	8019498 <_vfiprintf_r+0x8c>
 801951a:	9a03      	ldr	r2, [sp, #12]
 801951c:	1d11      	adds	r1, r2, #4
 801951e:	6812      	ldr	r2, [r2, #0]
 8019520:	9103      	str	r1, [sp, #12]
 8019522:	2a00      	cmp	r2, #0
 8019524:	db01      	blt.n	801952a <_vfiprintf_r+0x11e>
 8019526:	9207      	str	r2, [sp, #28]
 8019528:	e004      	b.n	8019534 <_vfiprintf_r+0x128>
 801952a:	4252      	negs	r2, r2
 801952c:	f043 0302 	orr.w	r3, r3, #2
 8019530:	9207      	str	r2, [sp, #28]
 8019532:	9304      	str	r3, [sp, #16]
 8019534:	f898 3000 	ldrb.w	r3, [r8]
 8019538:	2b2e      	cmp	r3, #46	; 0x2e
 801953a:	d10e      	bne.n	801955a <_vfiprintf_r+0x14e>
 801953c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8019540:	2b2a      	cmp	r3, #42	; 0x2a
 8019542:	d138      	bne.n	80195b6 <_vfiprintf_r+0x1aa>
 8019544:	9b03      	ldr	r3, [sp, #12]
 8019546:	f108 0802 	add.w	r8, r8, #2
 801954a:	1d1a      	adds	r2, r3, #4
 801954c:	681b      	ldr	r3, [r3, #0]
 801954e:	9203      	str	r2, [sp, #12]
 8019550:	2b00      	cmp	r3, #0
 8019552:	bfb8      	it	lt
 8019554:	f04f 33ff 	movlt.w	r3, #4294967295
 8019558:	9305      	str	r3, [sp, #20]
 801955a:	4d33      	ldr	r5, [pc, #204]	; (8019628 <_vfiprintf_r+0x21c>)
 801955c:	2203      	movs	r2, #3
 801955e:	f898 1000 	ldrb.w	r1, [r8]
 8019562:	4628      	mov	r0, r5
 8019564:	f7fe ff74 	bl	8018450 <memchr>
 8019568:	b140      	cbz	r0, 801957c <_vfiprintf_r+0x170>
 801956a:	2340      	movs	r3, #64	; 0x40
 801956c:	1b40      	subs	r0, r0, r5
 801956e:	fa03 f000 	lsl.w	r0, r3, r0
 8019572:	9b04      	ldr	r3, [sp, #16]
 8019574:	f108 0801 	add.w	r8, r8, #1
 8019578:	4303      	orrs	r3, r0
 801957a:	9304      	str	r3, [sp, #16]
 801957c:	f898 1000 	ldrb.w	r1, [r8]
 8019580:	2206      	movs	r2, #6
 8019582:	482a      	ldr	r0, [pc, #168]	; (801962c <_vfiprintf_r+0x220>)
 8019584:	f108 0701 	add.w	r7, r8, #1
 8019588:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801958c:	f7fe ff60 	bl	8018450 <memchr>
 8019590:	2800      	cmp	r0, #0
 8019592:	d037      	beq.n	8019604 <_vfiprintf_r+0x1f8>
 8019594:	4b26      	ldr	r3, [pc, #152]	; (8019630 <_vfiprintf_r+0x224>)
 8019596:	bb1b      	cbnz	r3, 80195e0 <_vfiprintf_r+0x1d4>
 8019598:	9b03      	ldr	r3, [sp, #12]
 801959a:	3307      	adds	r3, #7
 801959c:	f023 0307 	bic.w	r3, r3, #7
 80195a0:	3308      	adds	r3, #8
 80195a2:	9303      	str	r3, [sp, #12]
 80195a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80195a6:	444b      	add	r3, r9
 80195a8:	9309      	str	r3, [sp, #36]	; 0x24
 80195aa:	e750      	b.n	801944e <_vfiprintf_r+0x42>
 80195ac:	fb05 3202 	mla	r2, r5, r2, r3
 80195b0:	2001      	movs	r0, #1
 80195b2:	4688      	mov	r8, r1
 80195b4:	e78a      	b.n	80194cc <_vfiprintf_r+0xc0>
 80195b6:	2300      	movs	r3, #0
 80195b8:	250a      	movs	r5, #10
 80195ba:	4619      	mov	r1, r3
 80195bc:	f108 0801 	add.w	r8, r8, #1
 80195c0:	9305      	str	r3, [sp, #20]
 80195c2:	4640      	mov	r0, r8
 80195c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80195c8:	3a30      	subs	r2, #48	; 0x30
 80195ca:	2a09      	cmp	r2, #9
 80195cc:	d903      	bls.n	80195d6 <_vfiprintf_r+0x1ca>
 80195ce:	2b00      	cmp	r3, #0
 80195d0:	d0c3      	beq.n	801955a <_vfiprintf_r+0x14e>
 80195d2:	9105      	str	r1, [sp, #20]
 80195d4:	e7c1      	b.n	801955a <_vfiprintf_r+0x14e>
 80195d6:	fb05 2101 	mla	r1, r5, r1, r2
 80195da:	2301      	movs	r3, #1
 80195dc:	4680      	mov	r8, r0
 80195de:	e7f0      	b.n	80195c2 <_vfiprintf_r+0x1b6>
 80195e0:	ab03      	add	r3, sp, #12
 80195e2:	9300      	str	r3, [sp, #0]
 80195e4:	4622      	mov	r2, r4
 80195e6:	4b13      	ldr	r3, [pc, #76]	; (8019634 <_vfiprintf_r+0x228>)
 80195e8:	a904      	add	r1, sp, #16
 80195ea:	4630      	mov	r0, r6
 80195ec:	f7fb fd14 	bl	8015018 <_printf_float>
 80195f0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80195f4:	4681      	mov	r9, r0
 80195f6:	d1d5      	bne.n	80195a4 <_vfiprintf_r+0x198>
 80195f8:	89a3      	ldrh	r3, [r4, #12]
 80195fa:	065b      	lsls	r3, r3, #25
 80195fc:	f53f af7e 	bmi.w	80194fc <_vfiprintf_r+0xf0>
 8019600:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019602:	e77d      	b.n	8019500 <_vfiprintf_r+0xf4>
 8019604:	ab03      	add	r3, sp, #12
 8019606:	9300      	str	r3, [sp, #0]
 8019608:	4622      	mov	r2, r4
 801960a:	4b0a      	ldr	r3, [pc, #40]	; (8019634 <_vfiprintf_r+0x228>)
 801960c:	a904      	add	r1, sp, #16
 801960e:	4630      	mov	r0, r6
 8019610:	f7fb ffae 	bl	8015570 <_printf_i>
 8019614:	e7ec      	b.n	80195f0 <_vfiprintf_r+0x1e4>
 8019616:	bf00      	nop
 8019618:	0801e6e8 	.word	0x0801e6e8
 801961c:	0801e834 	.word	0x0801e834
 8019620:	0801e708 	.word	0x0801e708
 8019624:	0801e6c8 	.word	0x0801e6c8
 8019628:	0801e83a 	.word	0x0801e83a
 801962c:	0801e83e 	.word	0x0801e83e
 8019630:	08015019 	.word	0x08015019
 8019634:	080193e7 	.word	0x080193e7

08019638 <_scanf_chars>:
 8019638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801963c:	4615      	mov	r5, r2
 801963e:	688a      	ldr	r2, [r1, #8]
 8019640:	4680      	mov	r8, r0
 8019642:	460c      	mov	r4, r1
 8019644:	b932      	cbnz	r2, 8019654 <_scanf_chars+0x1c>
 8019646:	698a      	ldr	r2, [r1, #24]
 8019648:	2a00      	cmp	r2, #0
 801964a:	bf14      	ite	ne
 801964c:	f04f 32ff 	movne.w	r2, #4294967295
 8019650:	2201      	moveq	r2, #1
 8019652:	608a      	str	r2, [r1, #8]
 8019654:	2600      	movs	r6, #0
 8019656:	6822      	ldr	r2, [r4, #0]
 8019658:	06d1      	lsls	r1, r2, #27
 801965a:	bf5f      	itttt	pl
 801965c:	681a      	ldrpl	r2, [r3, #0]
 801965e:	1d11      	addpl	r1, r2, #4
 8019660:	6019      	strpl	r1, [r3, #0]
 8019662:	6817      	ldrpl	r7, [r2, #0]
 8019664:	69a3      	ldr	r3, [r4, #24]
 8019666:	b1db      	cbz	r3, 80196a0 <_scanf_chars+0x68>
 8019668:	2b01      	cmp	r3, #1
 801966a:	d107      	bne.n	801967c <_scanf_chars+0x44>
 801966c:	682b      	ldr	r3, [r5, #0]
 801966e:	6962      	ldr	r2, [r4, #20]
 8019670:	781b      	ldrb	r3, [r3, #0]
 8019672:	5cd3      	ldrb	r3, [r2, r3]
 8019674:	b9a3      	cbnz	r3, 80196a0 <_scanf_chars+0x68>
 8019676:	2e00      	cmp	r6, #0
 8019678:	d131      	bne.n	80196de <_scanf_chars+0xa6>
 801967a:	e006      	b.n	801968a <_scanf_chars+0x52>
 801967c:	2b02      	cmp	r3, #2
 801967e:	d007      	beq.n	8019690 <_scanf_chars+0x58>
 8019680:	2e00      	cmp	r6, #0
 8019682:	d12c      	bne.n	80196de <_scanf_chars+0xa6>
 8019684:	69a3      	ldr	r3, [r4, #24]
 8019686:	2b01      	cmp	r3, #1
 8019688:	d129      	bne.n	80196de <_scanf_chars+0xa6>
 801968a:	2001      	movs	r0, #1
 801968c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019690:	f7fe fe30 	bl	80182f4 <__locale_ctype_ptr>
 8019694:	682b      	ldr	r3, [r5, #0]
 8019696:	781b      	ldrb	r3, [r3, #0]
 8019698:	4418      	add	r0, r3
 801969a:	7843      	ldrb	r3, [r0, #1]
 801969c:	071b      	lsls	r3, r3, #28
 801969e:	d4ef      	bmi.n	8019680 <_scanf_chars+0x48>
 80196a0:	6823      	ldr	r3, [r4, #0]
 80196a2:	3601      	adds	r6, #1
 80196a4:	06da      	lsls	r2, r3, #27
 80196a6:	bf5e      	ittt	pl
 80196a8:	682b      	ldrpl	r3, [r5, #0]
 80196aa:	781b      	ldrbpl	r3, [r3, #0]
 80196ac:	703b      	strbpl	r3, [r7, #0]
 80196ae:	682a      	ldr	r2, [r5, #0]
 80196b0:	686b      	ldr	r3, [r5, #4]
 80196b2:	f102 0201 	add.w	r2, r2, #1
 80196b6:	602a      	str	r2, [r5, #0]
 80196b8:	68a2      	ldr	r2, [r4, #8]
 80196ba:	f103 33ff 	add.w	r3, r3, #4294967295
 80196be:	f102 32ff 	add.w	r2, r2, #4294967295
 80196c2:	606b      	str	r3, [r5, #4]
 80196c4:	bf58      	it	pl
 80196c6:	3701      	addpl	r7, #1
 80196c8:	60a2      	str	r2, [r4, #8]
 80196ca:	b142      	cbz	r2, 80196de <_scanf_chars+0xa6>
 80196cc:	2b00      	cmp	r3, #0
 80196ce:	dcc9      	bgt.n	8019664 <_scanf_chars+0x2c>
 80196d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80196d4:	4629      	mov	r1, r5
 80196d6:	4640      	mov	r0, r8
 80196d8:	4798      	blx	r3
 80196da:	2800      	cmp	r0, #0
 80196dc:	d0c2      	beq.n	8019664 <_scanf_chars+0x2c>
 80196de:	6823      	ldr	r3, [r4, #0]
 80196e0:	f013 0310 	ands.w	r3, r3, #16
 80196e4:	d105      	bne.n	80196f2 <_scanf_chars+0xba>
 80196e6:	68e2      	ldr	r2, [r4, #12]
 80196e8:	3201      	adds	r2, #1
 80196ea:	60e2      	str	r2, [r4, #12]
 80196ec:	69a2      	ldr	r2, [r4, #24]
 80196ee:	b102      	cbz	r2, 80196f2 <_scanf_chars+0xba>
 80196f0:	703b      	strb	r3, [r7, #0]
 80196f2:	6923      	ldr	r3, [r4, #16]
 80196f4:	2000      	movs	r0, #0
 80196f6:	441e      	add	r6, r3
 80196f8:	6126      	str	r6, [r4, #16]
 80196fa:	e7c7      	b.n	801968c <_scanf_chars+0x54>

080196fc <_scanf_i>:
 80196fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019700:	460c      	mov	r4, r1
 8019702:	469a      	mov	sl, r3
 8019704:	4b74      	ldr	r3, [pc, #464]	; (80198d8 <_scanf_i+0x1dc>)
 8019706:	b087      	sub	sp, #28
 8019708:	4683      	mov	fp, r0
 801970a:	4616      	mov	r6, r2
 801970c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019710:	ab03      	add	r3, sp, #12
 8019712:	68a7      	ldr	r7, [r4, #8]
 8019714:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019718:	4b70      	ldr	r3, [pc, #448]	; (80198dc <_scanf_i+0x1e0>)
 801971a:	69a1      	ldr	r1, [r4, #24]
 801971c:	4a70      	ldr	r2, [pc, #448]	; (80198e0 <_scanf_i+0x1e4>)
 801971e:	f104 091c 	add.w	r9, r4, #28
 8019722:	2903      	cmp	r1, #3
 8019724:	bf08      	it	eq
 8019726:	461a      	moveq	r2, r3
 8019728:	1e7b      	subs	r3, r7, #1
 801972a:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 801972e:	bf84      	itt	hi
 8019730:	f240 135d 	movwhi	r3, #349	; 0x15d
 8019734:	60a3      	strhi	r3, [r4, #8]
 8019736:	6823      	ldr	r3, [r4, #0]
 8019738:	bf88      	it	hi
 801973a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801973e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8019742:	6023      	str	r3, [r4, #0]
 8019744:	bf98      	it	ls
 8019746:	2700      	movls	r7, #0
 8019748:	464b      	mov	r3, r9
 801974a:	f04f 0800 	mov.w	r8, #0
 801974e:	9200      	str	r2, [sp, #0]
 8019750:	bf88      	it	hi
 8019752:	197f      	addhi	r7, r7, r5
 8019754:	6831      	ldr	r1, [r6, #0]
 8019756:	9301      	str	r3, [sp, #4]
 8019758:	ab03      	add	r3, sp, #12
 801975a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801975e:	2202      	movs	r2, #2
 8019760:	7809      	ldrb	r1, [r1, #0]
 8019762:	f7fe fe75 	bl	8018450 <memchr>
 8019766:	9b01      	ldr	r3, [sp, #4]
 8019768:	b330      	cbz	r0, 80197b8 <_scanf_i+0xbc>
 801976a:	f1b8 0f01 	cmp.w	r8, #1
 801976e:	d15a      	bne.n	8019826 <_scanf_i+0x12a>
 8019770:	6862      	ldr	r2, [r4, #4]
 8019772:	b92a      	cbnz	r2, 8019780 <_scanf_i+0x84>
 8019774:	2108      	movs	r1, #8
 8019776:	6822      	ldr	r2, [r4, #0]
 8019778:	6061      	str	r1, [r4, #4]
 801977a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801977e:	6022      	str	r2, [r4, #0]
 8019780:	6822      	ldr	r2, [r4, #0]
 8019782:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8019786:	6022      	str	r2, [r4, #0]
 8019788:	68a2      	ldr	r2, [r4, #8]
 801978a:	1e51      	subs	r1, r2, #1
 801978c:	60a1      	str	r1, [r4, #8]
 801978e:	b19a      	cbz	r2, 80197b8 <_scanf_i+0xbc>
 8019790:	6832      	ldr	r2, [r6, #0]
 8019792:	1c5d      	adds	r5, r3, #1
 8019794:	1c51      	adds	r1, r2, #1
 8019796:	6031      	str	r1, [r6, #0]
 8019798:	7812      	ldrb	r2, [r2, #0]
 801979a:	701a      	strb	r2, [r3, #0]
 801979c:	6873      	ldr	r3, [r6, #4]
 801979e:	3b01      	subs	r3, #1
 80197a0:	2b00      	cmp	r3, #0
 80197a2:	6073      	str	r3, [r6, #4]
 80197a4:	dc07      	bgt.n	80197b6 <_scanf_i+0xba>
 80197a6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80197aa:	4631      	mov	r1, r6
 80197ac:	4658      	mov	r0, fp
 80197ae:	4798      	blx	r3
 80197b0:	2800      	cmp	r0, #0
 80197b2:	f040 8087 	bne.w	80198c4 <_scanf_i+0x1c8>
 80197b6:	462b      	mov	r3, r5
 80197b8:	f108 0801 	add.w	r8, r8, #1
 80197bc:	f1b8 0f03 	cmp.w	r8, #3
 80197c0:	d1c8      	bne.n	8019754 <_scanf_i+0x58>
 80197c2:	6862      	ldr	r2, [r4, #4]
 80197c4:	b90a      	cbnz	r2, 80197ca <_scanf_i+0xce>
 80197c6:	220a      	movs	r2, #10
 80197c8:	6062      	str	r2, [r4, #4]
 80197ca:	6862      	ldr	r2, [r4, #4]
 80197cc:	4945      	ldr	r1, [pc, #276]	; (80198e4 <_scanf_i+0x1e8>)
 80197ce:	6960      	ldr	r0, [r4, #20]
 80197d0:	1a89      	subs	r1, r1, r2
 80197d2:	9301      	str	r3, [sp, #4]
 80197d4:	f000 f8aa 	bl	801992c <__sccl>
 80197d8:	9b01      	ldr	r3, [sp, #4]
 80197da:	f04f 0800 	mov.w	r8, #0
 80197de:	461d      	mov	r5, r3
 80197e0:	68a3      	ldr	r3, [r4, #8]
 80197e2:	6822      	ldr	r2, [r4, #0]
 80197e4:	2b00      	cmp	r3, #0
 80197e6:	d03b      	beq.n	8019860 <_scanf_i+0x164>
 80197e8:	6831      	ldr	r1, [r6, #0]
 80197ea:	6960      	ldr	r0, [r4, #20]
 80197ec:	f891 c000 	ldrb.w	ip, [r1]
 80197f0:	f810 000c 	ldrb.w	r0, [r0, ip]
 80197f4:	2800      	cmp	r0, #0
 80197f6:	d033      	beq.n	8019860 <_scanf_i+0x164>
 80197f8:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80197fc:	d121      	bne.n	8019842 <_scanf_i+0x146>
 80197fe:	0510      	lsls	r0, r2, #20
 8019800:	d51f      	bpl.n	8019842 <_scanf_i+0x146>
 8019802:	f108 0801 	add.w	r8, r8, #1
 8019806:	b117      	cbz	r7, 801980e <_scanf_i+0x112>
 8019808:	3301      	adds	r3, #1
 801980a:	3f01      	subs	r7, #1
 801980c:	60a3      	str	r3, [r4, #8]
 801980e:	6873      	ldr	r3, [r6, #4]
 8019810:	3b01      	subs	r3, #1
 8019812:	2b00      	cmp	r3, #0
 8019814:	6073      	str	r3, [r6, #4]
 8019816:	dd1c      	ble.n	8019852 <_scanf_i+0x156>
 8019818:	6833      	ldr	r3, [r6, #0]
 801981a:	3301      	adds	r3, #1
 801981c:	6033      	str	r3, [r6, #0]
 801981e:	68a3      	ldr	r3, [r4, #8]
 8019820:	3b01      	subs	r3, #1
 8019822:	60a3      	str	r3, [r4, #8]
 8019824:	e7dc      	b.n	80197e0 <_scanf_i+0xe4>
 8019826:	f1b8 0f02 	cmp.w	r8, #2
 801982a:	d1ad      	bne.n	8019788 <_scanf_i+0x8c>
 801982c:	6822      	ldr	r2, [r4, #0]
 801982e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8019832:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8019836:	d1bf      	bne.n	80197b8 <_scanf_i+0xbc>
 8019838:	2110      	movs	r1, #16
 801983a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801983e:	6061      	str	r1, [r4, #4]
 8019840:	e7a1      	b.n	8019786 <_scanf_i+0x8a>
 8019842:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8019846:	6022      	str	r2, [r4, #0]
 8019848:	780b      	ldrb	r3, [r1, #0]
 801984a:	3501      	adds	r5, #1
 801984c:	f805 3c01 	strb.w	r3, [r5, #-1]
 8019850:	e7dd      	b.n	801980e <_scanf_i+0x112>
 8019852:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019856:	4631      	mov	r1, r6
 8019858:	4658      	mov	r0, fp
 801985a:	4798      	blx	r3
 801985c:	2800      	cmp	r0, #0
 801985e:	d0de      	beq.n	801981e <_scanf_i+0x122>
 8019860:	6823      	ldr	r3, [r4, #0]
 8019862:	05d9      	lsls	r1, r3, #23
 8019864:	d50c      	bpl.n	8019880 <_scanf_i+0x184>
 8019866:	454d      	cmp	r5, r9
 8019868:	d908      	bls.n	801987c <_scanf_i+0x180>
 801986a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801986e:	1e6f      	subs	r7, r5, #1
 8019870:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019874:	4632      	mov	r2, r6
 8019876:	4658      	mov	r0, fp
 8019878:	4798      	blx	r3
 801987a:	463d      	mov	r5, r7
 801987c:	454d      	cmp	r5, r9
 801987e:	d029      	beq.n	80198d4 <_scanf_i+0x1d8>
 8019880:	6822      	ldr	r2, [r4, #0]
 8019882:	f012 0210 	ands.w	r2, r2, #16
 8019886:	d113      	bne.n	80198b0 <_scanf_i+0x1b4>
 8019888:	702a      	strb	r2, [r5, #0]
 801988a:	6863      	ldr	r3, [r4, #4]
 801988c:	4649      	mov	r1, r9
 801988e:	4658      	mov	r0, fp
 8019890:	9e00      	ldr	r6, [sp, #0]
 8019892:	47b0      	blx	r6
 8019894:	f8da 3000 	ldr.w	r3, [sl]
 8019898:	6821      	ldr	r1, [r4, #0]
 801989a:	1d1a      	adds	r2, r3, #4
 801989c:	f8ca 2000 	str.w	r2, [sl]
 80198a0:	f011 0f20 	tst.w	r1, #32
 80198a4:	681b      	ldr	r3, [r3, #0]
 80198a6:	d010      	beq.n	80198ca <_scanf_i+0x1ce>
 80198a8:	6018      	str	r0, [r3, #0]
 80198aa:	68e3      	ldr	r3, [r4, #12]
 80198ac:	3301      	adds	r3, #1
 80198ae:	60e3      	str	r3, [r4, #12]
 80198b0:	2000      	movs	r0, #0
 80198b2:	eba5 0509 	sub.w	r5, r5, r9
 80198b6:	44a8      	add	r8, r5
 80198b8:	6925      	ldr	r5, [r4, #16]
 80198ba:	4445      	add	r5, r8
 80198bc:	6125      	str	r5, [r4, #16]
 80198be:	b007      	add	sp, #28
 80198c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198c4:	f04f 0800 	mov.w	r8, #0
 80198c8:	e7ca      	b.n	8019860 <_scanf_i+0x164>
 80198ca:	07ca      	lsls	r2, r1, #31
 80198cc:	bf4c      	ite	mi
 80198ce:	8018      	strhmi	r0, [r3, #0]
 80198d0:	6018      	strpl	r0, [r3, #0]
 80198d2:	e7ea      	b.n	80198aa <_scanf_i+0x1ae>
 80198d4:	2001      	movs	r0, #1
 80198d6:	e7f2      	b.n	80198be <_scanf_i+0x1c2>
 80198d8:	0801a9b4 	.word	0x0801a9b4
 80198dc:	08016b39 	.word	0x08016b39
 80198e0:	08019a85 	.word	0x08019a85
 80198e4:	0801e855 	.word	0x0801e855

080198e8 <_read_r>:
 80198e8:	b538      	push	{r3, r4, r5, lr}
 80198ea:	4605      	mov	r5, r0
 80198ec:	4608      	mov	r0, r1
 80198ee:	4611      	mov	r1, r2
 80198f0:	2200      	movs	r2, #0
 80198f2:	4c05      	ldr	r4, [pc, #20]	; (8019908 <_read_r+0x20>)
 80198f4:	6022      	str	r2, [r4, #0]
 80198f6:	461a      	mov	r2, r3
 80198f8:	f7ea fa90 	bl	8003e1c <_read>
 80198fc:	1c43      	adds	r3, r0, #1
 80198fe:	d102      	bne.n	8019906 <_read_r+0x1e>
 8019900:	6823      	ldr	r3, [r4, #0]
 8019902:	b103      	cbz	r3, 8019906 <_read_r+0x1e>
 8019904:	602b      	str	r3, [r5, #0]
 8019906:	bd38      	pop	{r3, r4, r5, pc}
 8019908:	20009e2c 	.word	0x20009e2c

0801990c <_sbrk_r>:
 801990c:	b538      	push	{r3, r4, r5, lr}
 801990e:	2300      	movs	r3, #0
 8019910:	4c05      	ldr	r4, [pc, #20]	; (8019928 <_sbrk_r+0x1c>)
 8019912:	4605      	mov	r5, r0
 8019914:	4608      	mov	r0, r1
 8019916:	6023      	str	r3, [r4, #0]
 8019918:	f000 f95e 	bl	8019bd8 <_sbrk>
 801991c:	1c43      	adds	r3, r0, #1
 801991e:	d102      	bne.n	8019926 <_sbrk_r+0x1a>
 8019920:	6823      	ldr	r3, [r4, #0]
 8019922:	b103      	cbz	r3, 8019926 <_sbrk_r+0x1a>
 8019924:	602b      	str	r3, [r5, #0]
 8019926:	bd38      	pop	{r3, r4, r5, pc}
 8019928:	20009e2c 	.word	0x20009e2c

0801992c <__sccl>:
 801992c:	b570      	push	{r4, r5, r6, lr}
 801992e:	780b      	ldrb	r3, [r1, #0]
 8019930:	1e44      	subs	r4, r0, #1
 8019932:	2b5e      	cmp	r3, #94	; 0x5e
 8019934:	bf13      	iteet	ne
 8019936:	1c4a      	addne	r2, r1, #1
 8019938:	1c8a      	addeq	r2, r1, #2
 801993a:	784b      	ldrbeq	r3, [r1, #1]
 801993c:	2100      	movne	r1, #0
 801993e:	bf08      	it	eq
 8019940:	2101      	moveq	r1, #1
 8019942:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8019946:	f804 1f01 	strb.w	r1, [r4, #1]!
 801994a:	42ac      	cmp	r4, r5
 801994c:	d1fb      	bne.n	8019946 <__sccl+0x1a>
 801994e:	b913      	cbnz	r3, 8019956 <__sccl+0x2a>
 8019950:	3a01      	subs	r2, #1
 8019952:	4610      	mov	r0, r2
 8019954:	bd70      	pop	{r4, r5, r6, pc}
 8019956:	f081 0401 	eor.w	r4, r1, #1
 801995a:	54c4      	strb	r4, [r0, r3]
 801995c:	1c51      	adds	r1, r2, #1
 801995e:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8019962:	1e4e      	subs	r6, r1, #1
 8019964:	2d2d      	cmp	r5, #45	; 0x2d
 8019966:	460a      	mov	r2, r1
 8019968:	d006      	beq.n	8019978 <__sccl+0x4c>
 801996a:	2d5d      	cmp	r5, #93	; 0x5d
 801996c:	d0f1      	beq.n	8019952 <__sccl+0x26>
 801996e:	b90d      	cbnz	r5, 8019974 <__sccl+0x48>
 8019970:	4632      	mov	r2, r6
 8019972:	e7ee      	b.n	8019952 <__sccl+0x26>
 8019974:	462b      	mov	r3, r5
 8019976:	e7f0      	b.n	801995a <__sccl+0x2e>
 8019978:	780e      	ldrb	r6, [r1, #0]
 801997a:	2e5d      	cmp	r6, #93	; 0x5d
 801997c:	d0fa      	beq.n	8019974 <__sccl+0x48>
 801997e:	42b3      	cmp	r3, r6
 8019980:	dcf8      	bgt.n	8019974 <__sccl+0x48>
 8019982:	3301      	adds	r3, #1
 8019984:	429e      	cmp	r6, r3
 8019986:	54c4      	strb	r4, [r0, r3]
 8019988:	dcfb      	bgt.n	8019982 <__sccl+0x56>
 801998a:	3102      	adds	r1, #2
 801998c:	e7e7      	b.n	801995e <__sccl+0x32>

0801998e <_strtoul_l.isra.0>:
 801998e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019992:	4680      	mov	r8, r0
 8019994:	4689      	mov	r9, r1
 8019996:	4692      	mov	sl, r2
 8019998:	461e      	mov	r6, r3
 801999a:	460f      	mov	r7, r1
 801999c:	463d      	mov	r5, r7
 801999e:	9808      	ldr	r0, [sp, #32]
 80199a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80199a4:	f7fe fca2 	bl	80182ec <__locale_ctype_ptr_l>
 80199a8:	4420      	add	r0, r4
 80199aa:	7843      	ldrb	r3, [r0, #1]
 80199ac:	f013 0308 	ands.w	r3, r3, #8
 80199b0:	d130      	bne.n	8019a14 <_strtoul_l.isra.0+0x86>
 80199b2:	2c2d      	cmp	r4, #45	; 0x2d
 80199b4:	d130      	bne.n	8019a18 <_strtoul_l.isra.0+0x8a>
 80199b6:	2101      	movs	r1, #1
 80199b8:	787c      	ldrb	r4, [r7, #1]
 80199ba:	1cbd      	adds	r5, r7, #2
 80199bc:	2e00      	cmp	r6, #0
 80199be:	d05c      	beq.n	8019a7a <_strtoul_l.isra.0+0xec>
 80199c0:	2e10      	cmp	r6, #16
 80199c2:	d109      	bne.n	80199d8 <_strtoul_l.isra.0+0x4a>
 80199c4:	2c30      	cmp	r4, #48	; 0x30
 80199c6:	d107      	bne.n	80199d8 <_strtoul_l.isra.0+0x4a>
 80199c8:	782b      	ldrb	r3, [r5, #0]
 80199ca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80199ce:	2b58      	cmp	r3, #88	; 0x58
 80199d0:	d14e      	bne.n	8019a70 <_strtoul_l.isra.0+0xe2>
 80199d2:	2610      	movs	r6, #16
 80199d4:	786c      	ldrb	r4, [r5, #1]
 80199d6:	3502      	adds	r5, #2
 80199d8:	f04f 32ff 	mov.w	r2, #4294967295
 80199dc:	fbb2 f2f6 	udiv	r2, r2, r6
 80199e0:	2300      	movs	r3, #0
 80199e2:	fb06 fc02 	mul.w	ip, r6, r2
 80199e6:	4618      	mov	r0, r3
 80199e8:	ea6f 0c0c 	mvn.w	ip, ip
 80199ec:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80199f0:	2f09      	cmp	r7, #9
 80199f2:	d817      	bhi.n	8019a24 <_strtoul_l.isra.0+0x96>
 80199f4:	463c      	mov	r4, r7
 80199f6:	42a6      	cmp	r6, r4
 80199f8:	dd23      	ble.n	8019a42 <_strtoul_l.isra.0+0xb4>
 80199fa:	2b00      	cmp	r3, #0
 80199fc:	db1e      	blt.n	8019a3c <_strtoul_l.isra.0+0xae>
 80199fe:	4282      	cmp	r2, r0
 8019a00:	d31c      	bcc.n	8019a3c <_strtoul_l.isra.0+0xae>
 8019a02:	d101      	bne.n	8019a08 <_strtoul_l.isra.0+0x7a>
 8019a04:	45a4      	cmp	ip, r4
 8019a06:	db19      	blt.n	8019a3c <_strtoul_l.isra.0+0xae>
 8019a08:	2301      	movs	r3, #1
 8019a0a:	fb00 4006 	mla	r0, r0, r6, r4
 8019a0e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019a12:	e7eb      	b.n	80199ec <_strtoul_l.isra.0+0x5e>
 8019a14:	462f      	mov	r7, r5
 8019a16:	e7c1      	b.n	801999c <_strtoul_l.isra.0+0xe>
 8019a18:	2c2b      	cmp	r4, #43	; 0x2b
 8019a1a:	bf04      	itt	eq
 8019a1c:	1cbd      	addeq	r5, r7, #2
 8019a1e:	787c      	ldrbeq	r4, [r7, #1]
 8019a20:	4619      	mov	r1, r3
 8019a22:	e7cb      	b.n	80199bc <_strtoul_l.isra.0+0x2e>
 8019a24:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8019a28:	2f19      	cmp	r7, #25
 8019a2a:	d801      	bhi.n	8019a30 <_strtoul_l.isra.0+0xa2>
 8019a2c:	3c37      	subs	r4, #55	; 0x37
 8019a2e:	e7e2      	b.n	80199f6 <_strtoul_l.isra.0+0x68>
 8019a30:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8019a34:	2f19      	cmp	r7, #25
 8019a36:	d804      	bhi.n	8019a42 <_strtoul_l.isra.0+0xb4>
 8019a38:	3c57      	subs	r4, #87	; 0x57
 8019a3a:	e7dc      	b.n	80199f6 <_strtoul_l.isra.0+0x68>
 8019a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8019a40:	e7e5      	b.n	8019a0e <_strtoul_l.isra.0+0x80>
 8019a42:	2b00      	cmp	r3, #0
 8019a44:	da09      	bge.n	8019a5a <_strtoul_l.isra.0+0xcc>
 8019a46:	2322      	movs	r3, #34	; 0x22
 8019a48:	f04f 30ff 	mov.w	r0, #4294967295
 8019a4c:	f8c8 3000 	str.w	r3, [r8]
 8019a50:	f1ba 0f00 	cmp.w	sl, #0
 8019a54:	d107      	bne.n	8019a66 <_strtoul_l.isra.0+0xd8>
 8019a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019a5a:	b101      	cbz	r1, 8019a5e <_strtoul_l.isra.0+0xd0>
 8019a5c:	4240      	negs	r0, r0
 8019a5e:	f1ba 0f00 	cmp.w	sl, #0
 8019a62:	d0f8      	beq.n	8019a56 <_strtoul_l.isra.0+0xc8>
 8019a64:	b10b      	cbz	r3, 8019a6a <_strtoul_l.isra.0+0xdc>
 8019a66:	f105 39ff 	add.w	r9, r5, #4294967295
 8019a6a:	f8ca 9000 	str.w	r9, [sl]
 8019a6e:	e7f2      	b.n	8019a56 <_strtoul_l.isra.0+0xc8>
 8019a70:	2430      	movs	r4, #48	; 0x30
 8019a72:	2e00      	cmp	r6, #0
 8019a74:	d1b0      	bne.n	80199d8 <_strtoul_l.isra.0+0x4a>
 8019a76:	2608      	movs	r6, #8
 8019a78:	e7ae      	b.n	80199d8 <_strtoul_l.isra.0+0x4a>
 8019a7a:	2c30      	cmp	r4, #48	; 0x30
 8019a7c:	d0a4      	beq.n	80199c8 <_strtoul_l.isra.0+0x3a>
 8019a7e:	260a      	movs	r6, #10
 8019a80:	e7aa      	b.n	80199d8 <_strtoul_l.isra.0+0x4a>
	...

08019a84 <_strtoul_r>:
 8019a84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019a86:	4c06      	ldr	r4, [pc, #24]	; (8019aa0 <_strtoul_r+0x1c>)
 8019a88:	4d06      	ldr	r5, [pc, #24]	; (8019aa4 <_strtoul_r+0x20>)
 8019a8a:	6824      	ldr	r4, [r4, #0]
 8019a8c:	6a24      	ldr	r4, [r4, #32]
 8019a8e:	2c00      	cmp	r4, #0
 8019a90:	bf08      	it	eq
 8019a92:	462c      	moveq	r4, r5
 8019a94:	9400      	str	r4, [sp, #0]
 8019a96:	f7ff ff7a 	bl	801998e <_strtoul_l.isra.0>
 8019a9a:	b003      	add	sp, #12
 8019a9c:	bd30      	pop	{r4, r5, pc}
 8019a9e:	bf00      	nop
 8019aa0:	20000148 	.word	0x20000148
 8019aa4:	200001ac 	.word	0x200001ac

08019aa8 <__submore>:
 8019aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019aac:	460c      	mov	r4, r1
 8019aae:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8019ab0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019ab4:	4299      	cmp	r1, r3
 8019ab6:	d11b      	bne.n	8019af0 <__submore+0x48>
 8019ab8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8019abc:	f7ff f928 	bl	8018d10 <_malloc_r>
 8019ac0:	b918      	cbnz	r0, 8019aca <__submore+0x22>
 8019ac2:	f04f 30ff 	mov.w	r0, #4294967295
 8019ac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019aca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019ace:	63a3      	str	r3, [r4, #56]	; 0x38
 8019ad0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8019ad4:	6360      	str	r0, [r4, #52]	; 0x34
 8019ad6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8019ada:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8019ade:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8019ae2:	7043      	strb	r3, [r0, #1]
 8019ae4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8019ae8:	7003      	strb	r3, [r0, #0]
 8019aea:	6020      	str	r0, [r4, #0]
 8019aec:	2000      	movs	r0, #0
 8019aee:	e7ea      	b.n	8019ac6 <__submore+0x1e>
 8019af0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8019af2:	0077      	lsls	r7, r6, #1
 8019af4:	463a      	mov	r2, r7
 8019af6:	f000 f841 	bl	8019b7c <_realloc_r>
 8019afa:	4605      	mov	r5, r0
 8019afc:	2800      	cmp	r0, #0
 8019afe:	d0e0      	beq.n	8019ac2 <__submore+0x1a>
 8019b00:	eb00 0806 	add.w	r8, r0, r6
 8019b04:	4601      	mov	r1, r0
 8019b06:	4632      	mov	r2, r6
 8019b08:	4640      	mov	r0, r8
 8019b0a:	f7fb f9c7 	bl	8014e9c <memcpy>
 8019b0e:	f8c4 8000 	str.w	r8, [r4]
 8019b12:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8019b16:	e7e9      	b.n	8019aec <__submore+0x44>

08019b18 <__ascii_wctomb>:
 8019b18:	b149      	cbz	r1, 8019b2e <__ascii_wctomb+0x16>
 8019b1a:	2aff      	cmp	r2, #255	; 0xff
 8019b1c:	bf8b      	itete	hi
 8019b1e:	238a      	movhi	r3, #138	; 0x8a
 8019b20:	700a      	strbls	r2, [r1, #0]
 8019b22:	6003      	strhi	r3, [r0, #0]
 8019b24:	2001      	movls	r0, #1
 8019b26:	bf88      	it	hi
 8019b28:	f04f 30ff 	movhi.w	r0, #4294967295
 8019b2c:	4770      	bx	lr
 8019b2e:	4608      	mov	r0, r1
 8019b30:	4770      	bx	lr
	...

08019b34 <_fstat_r>:
 8019b34:	b538      	push	{r3, r4, r5, lr}
 8019b36:	2300      	movs	r3, #0
 8019b38:	4c06      	ldr	r4, [pc, #24]	; (8019b54 <_fstat_r+0x20>)
 8019b3a:	4605      	mov	r5, r0
 8019b3c:	4608      	mov	r0, r1
 8019b3e:	4611      	mov	r1, r2
 8019b40:	6023      	str	r3, [r4, #0]
 8019b42:	f7ea f9af 	bl	8003ea4 <_fstat>
 8019b46:	1c43      	adds	r3, r0, #1
 8019b48:	d102      	bne.n	8019b50 <_fstat_r+0x1c>
 8019b4a:	6823      	ldr	r3, [r4, #0]
 8019b4c:	b103      	cbz	r3, 8019b50 <_fstat_r+0x1c>
 8019b4e:	602b      	str	r3, [r5, #0]
 8019b50:	bd38      	pop	{r3, r4, r5, pc}
 8019b52:	bf00      	nop
 8019b54:	20009e2c 	.word	0x20009e2c

08019b58 <_isatty_r>:
 8019b58:	b538      	push	{r3, r4, r5, lr}
 8019b5a:	2300      	movs	r3, #0
 8019b5c:	4c05      	ldr	r4, [pc, #20]	; (8019b74 <_isatty_r+0x1c>)
 8019b5e:	4605      	mov	r5, r0
 8019b60:	4608      	mov	r0, r1
 8019b62:	6023      	str	r3, [r4, #0]
 8019b64:	f7ea f9ad 	bl	8003ec2 <_isatty>
 8019b68:	1c43      	adds	r3, r0, #1
 8019b6a:	d102      	bne.n	8019b72 <_isatty_r+0x1a>
 8019b6c:	6823      	ldr	r3, [r4, #0]
 8019b6e:	b103      	cbz	r3, 8019b72 <_isatty_r+0x1a>
 8019b70:	602b      	str	r3, [r5, #0]
 8019b72:	bd38      	pop	{r3, r4, r5, pc}
 8019b74:	20009e2c 	.word	0x20009e2c

08019b78 <__malloc_lock>:
 8019b78:	4770      	bx	lr

08019b7a <__malloc_unlock>:
 8019b7a:	4770      	bx	lr

08019b7c <_realloc_r>:
 8019b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b7e:	4607      	mov	r7, r0
 8019b80:	4614      	mov	r4, r2
 8019b82:	460e      	mov	r6, r1
 8019b84:	b921      	cbnz	r1, 8019b90 <_realloc_r+0x14>
 8019b86:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019b8a:	4611      	mov	r1, r2
 8019b8c:	f7ff b8c0 	b.w	8018d10 <_malloc_r>
 8019b90:	b922      	cbnz	r2, 8019b9c <_realloc_r+0x20>
 8019b92:	f7ff f871 	bl	8018c78 <_free_r>
 8019b96:	4625      	mov	r5, r4
 8019b98:	4628      	mov	r0, r5
 8019b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019b9c:	f000 f814 	bl	8019bc8 <_malloc_usable_size_r>
 8019ba0:	42a0      	cmp	r0, r4
 8019ba2:	d20f      	bcs.n	8019bc4 <_realloc_r+0x48>
 8019ba4:	4621      	mov	r1, r4
 8019ba6:	4638      	mov	r0, r7
 8019ba8:	f7ff f8b2 	bl	8018d10 <_malloc_r>
 8019bac:	4605      	mov	r5, r0
 8019bae:	2800      	cmp	r0, #0
 8019bb0:	d0f2      	beq.n	8019b98 <_realloc_r+0x1c>
 8019bb2:	4631      	mov	r1, r6
 8019bb4:	4622      	mov	r2, r4
 8019bb6:	f7fb f971 	bl	8014e9c <memcpy>
 8019bba:	4631      	mov	r1, r6
 8019bbc:	4638      	mov	r0, r7
 8019bbe:	f7ff f85b 	bl	8018c78 <_free_r>
 8019bc2:	e7e9      	b.n	8019b98 <_realloc_r+0x1c>
 8019bc4:	4635      	mov	r5, r6
 8019bc6:	e7e7      	b.n	8019b98 <_realloc_r+0x1c>

08019bc8 <_malloc_usable_size_r>:
 8019bc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019bcc:	1f18      	subs	r0, r3, #4
 8019bce:	2b00      	cmp	r3, #0
 8019bd0:	bfbc      	itt	lt
 8019bd2:	580b      	ldrlt	r3, [r1, r0]
 8019bd4:	18c0      	addlt	r0, r0, r3
 8019bd6:	4770      	bx	lr

08019bd8 <_sbrk>:
 8019bd8:	4b04      	ldr	r3, [pc, #16]	; (8019bec <_sbrk+0x14>)
 8019bda:	4602      	mov	r2, r0
 8019bdc:	6819      	ldr	r1, [r3, #0]
 8019bde:	b909      	cbnz	r1, 8019be4 <_sbrk+0xc>
 8019be0:	4903      	ldr	r1, [pc, #12]	; (8019bf0 <_sbrk+0x18>)
 8019be2:	6019      	str	r1, [r3, #0]
 8019be4:	6818      	ldr	r0, [r3, #0]
 8019be6:	4402      	add	r2, r0
 8019be8:	601a      	str	r2, [r3, #0]
 8019bea:	4770      	bx	lr
 8019bec:	20008954 	.word	0x20008954
 8019bf0:	20009e30 	.word	0x20009e30

08019bf4 <_init>:
 8019bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019bf6:	bf00      	nop
 8019bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019bfa:	bc08      	pop	{r3}
 8019bfc:	469e      	mov	lr, r3
 8019bfe:	4770      	bx	lr

08019c00 <_fini>:
 8019c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c02:	bf00      	nop
 8019c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019c06:	bc08      	pop	{r3}
 8019c08:	469e      	mov	lr, r3
 8019c0a:	4770      	bx	lr
